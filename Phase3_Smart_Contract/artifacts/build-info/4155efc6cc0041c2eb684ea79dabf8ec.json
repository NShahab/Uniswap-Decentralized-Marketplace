{"id":"4155efc6cc0041c2eb684ea79dabf8ec","_format":"hh-sol-build-info-1","solcVersion":"0.7.6","solcLongVersion":"0.7.6+commit.7338295f","input":{"language":"Solidity","sources":{"@openzeppelin/contracts/access/Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../utils/Context.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"},"@openzeppelin/contracts/introspection/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"},"@openzeppelin/contracts/math/SafeMath.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c < a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b > a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a % b;\n    }\n}\n"},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"},"@openzeppelin/contracts/token/ERC20/SafeERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\nimport \"../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"},"@openzeppelin/contracts/token/ERC721/IERC721.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\nimport \"../../introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\n      *\n      * Requirements:\n      *\n      * - `from` cannot be the zero address.\n      * - `to` cannot be the zero address.\n      * - `tokenId` token must exist and be owned by `from`.\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n      *\n      * Emits a {Transfer} event.\n      */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n}\n"},"@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\nimport \"./IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"},"@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\nimport \"./IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"},"@openzeppelin/contracts/utils/Address.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"},"@openzeppelin/contracts/utils/ReentrancyGuard.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor () internal {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"},"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3MintCallback.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Callback for IUniswapV3PoolActions#mint\n/// @notice Any contract that calls IUniswapV3PoolActions#mint must implement this interface\ninterface IUniswapV3MintCallback {\n    /// @notice Called to `msg.sender` after minting liquidity to a position from IUniswapV3Pool#mint.\n    /// @dev In the implementation you must pay the pool tokens owed for the minted liquidity.\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\n    /// @param amount0Owed The amount of token0 due to the pool for the minted liquidity\n    /// @param amount1Owed The amount of token1 due to the pool for the minted liquidity\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#mint call\n    function uniswapV3MintCallback(\n        uint256 amount0Owed,\n        uint256 amount1Owed,\n        bytes calldata data\n    ) external;\n}\n"},"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Callback for IUniswapV3PoolActions#swap\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\ninterface IUniswapV3SwapCallback {\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\n    function uniswapV3SwapCallback(\n        int256 amount0Delta,\n        int256 amount1Delta,\n        bytes calldata data\n    ) external;\n}\n"},"@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title The interface for the Uniswap V3 Factory\n/// @notice The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees\ninterface IUniswapV3Factory {\n    /// @notice Emitted when the owner of the factory is changed\n    /// @param oldOwner The owner before the owner was changed\n    /// @param newOwner The owner after the owner was changed\n    event OwnerChanged(address indexed oldOwner, address indexed newOwner);\n\n    /// @notice Emitted when a pool is created\n    /// @param token0 The first token of the pool by address sort order\n    /// @param token1 The second token of the pool by address sort order\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\n    /// @param tickSpacing The minimum number of ticks between initialized ticks\n    /// @param pool The address of the created pool\n    event PoolCreated(\n        address indexed token0,\n        address indexed token1,\n        uint24 indexed fee,\n        int24 tickSpacing,\n        address pool\n    );\n\n    /// @notice Emitted when a new fee amount is enabled for pool creation via the factory\n    /// @param fee The enabled fee, denominated in hundredths of a bip\n    /// @param tickSpacing The minimum number of ticks between initialized ticks for pools created with the given fee\n    event FeeAmountEnabled(uint24 indexed fee, int24 indexed tickSpacing);\n\n    /// @notice Returns the current owner of the factory\n    /// @dev Can be changed by the current owner via setOwner\n    /// @return The address of the factory owner\n    function owner() external view returns (address);\n\n    /// @notice Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled\n    /// @dev A fee amount can never be removed, so this value should be hard coded or cached in the calling context\n    /// @param fee The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\n    /// @return The tick spacing\n    function feeAmountTickSpacing(uint24 fee) external view returns (int24);\n\n    /// @notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\n    /// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\n    /// @param tokenA The contract address of either token0 or token1\n    /// @param tokenB The contract address of the other token\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\n    /// @return pool The pool address\n    function getPool(\n        address tokenA,\n        address tokenB,\n        uint24 fee\n    ) external view returns (address pool);\n\n    /// @notice Creates a pool for the given two tokens and fee\n    /// @param tokenA One of the two tokens in the desired pool\n    /// @param tokenB The other of the two tokens in the desired pool\n    /// @param fee The desired fee for the pool\n    /// @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved\n    /// from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments\n    /// are invalid.\n    /// @return pool The address of the newly created pool\n    function createPool(\n        address tokenA,\n        address tokenB,\n        uint24 fee\n    ) external returns (address pool);\n\n    /// @notice Updates the owner of the factory\n    /// @dev Must be called by the current owner\n    /// @param _owner The new owner of the factory\n    function setOwner(address _owner) external;\n\n    /// @notice Enables a fee amount with the given tickSpacing\n    /// @dev Fee amounts may never be removed once enabled\n    /// @param fee The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)\n    /// @param tickSpacing The spacing between ticks to be enforced for all pools created with the given fee amount\n    function enableFeeAmount(uint24 fee, int24 tickSpacing) external;\n}\n"},"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\nimport './pool/IUniswapV3PoolImmutables.sol';\nimport './pool/IUniswapV3PoolState.sol';\nimport './pool/IUniswapV3PoolDerivedState.sol';\nimport './pool/IUniswapV3PoolActions.sol';\nimport './pool/IUniswapV3PoolOwnerActions.sol';\nimport './pool/IUniswapV3PoolEvents.sol';\n\n/// @title The interface for a Uniswap V3 Pool\n/// @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\n/// to the ERC20 specification\n/// @dev The pool interface is broken up into many smaller pieces\ninterface IUniswapV3Pool is\n    IUniswapV3PoolImmutables,\n    IUniswapV3PoolState,\n    IUniswapV3PoolDerivedState,\n    IUniswapV3PoolActions,\n    IUniswapV3PoolOwnerActions,\n    IUniswapV3PoolEvents\n{\n\n}\n"},"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Permissionless pool actions\n/// @notice Contains pool methods that can be called by anyone\ninterface IUniswapV3PoolActions {\n    /// @notice Sets the initial price for the pool\n    /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\n    /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96\n    function initialize(uint160 sqrtPriceX96) external;\n\n    /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\n    /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\n    /// on tickLower, tickUpper, the amount of liquidity, and the current price.\n    /// @param recipient The address for which the liquidity will be created\n    /// @param tickLower The lower tick of the position in which to add liquidity\n    /// @param tickUpper The upper tick of the position in which to add liquidity\n    /// @param amount The amount of liquidity to mint\n    /// @param data Any data that should be passed through to the callback\n    /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\n    /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\n    function mint(\n        address recipient,\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount,\n        bytes calldata data\n    ) external returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Collects tokens owed to a position\n    /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\n    /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\n    /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\n    /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\n    /// @param recipient The address which should receive the fees collected\n    /// @param tickLower The lower tick of the position for which to collect fees\n    /// @param tickUpper The upper tick of the position for which to collect fees\n    /// @param amount0Requested How much token0 should be withdrawn from the fees owed\n    /// @param amount1Requested How much token1 should be withdrawn from the fees owed\n    /// @return amount0 The amount of fees collected in token0\n    /// @return amount1 The amount of fees collected in token1\n    function collect(\n        address recipient,\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount0Requested,\n        uint128 amount1Requested\n    ) external returns (uint128 amount0, uint128 amount1);\n\n    /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\n    /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\n    /// @dev Fees must be collected separately via a call to #collect\n    /// @param tickLower The lower tick of the position for which to burn liquidity\n    /// @param tickUpper The upper tick of the position for which to burn liquidity\n    /// @param amount How much liquidity to burn\n    /// @return amount0 The amount of token0 sent to the recipient\n    /// @return amount1 The amount of token1 sent to the recipient\n    function burn(\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount\n    ) external returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Swap token0 for token1, or token1 for token0\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\n    /// @param recipient The address to receive the output of the swap\n    /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\n    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\n    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\n    /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\n    /// @param data Any data to be passed through to the callback\n    /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\n    /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\n    function swap(\n        address recipient,\n        bool zeroForOne,\n        int256 amountSpecified,\n        uint160 sqrtPriceLimitX96,\n        bytes calldata data\n    ) external returns (int256 amount0, int256 amount1);\n\n    /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\n    /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\n    /// with 0 amount{0,1} and sending the donation amount(s) from the callback\n    /// @param recipient The address which will receive the token0 and token1 amounts\n    /// @param amount0 The amount of token0 to send\n    /// @param amount1 The amount of token1 to send\n    /// @param data Any data to be passed through to the callback\n    function flash(\n        address recipient,\n        uint256 amount0,\n        uint256 amount1,\n        bytes calldata data\n    ) external;\n\n    /// @notice Increase the maximum number of price and liquidity observations that this pool will store\n    /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\n    /// the input observationCardinalityNext.\n    /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\n}\n"},"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that is not stored\n/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the\n/// blockchain. The functions here may have variable gas costs.\ninterface IUniswapV3PoolDerivedState {\n    /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\n    /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\n    /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\n    /// you must call it with secondsAgos = [3600, 0].\n    /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\n    /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\n    /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\n    /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\n    /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\n    /// timestamp\n    function observe(uint32[] calldata secondsAgos)\n        external\n        view\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\n\n    /// @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\n    /// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\n    /// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\n    /// snapshot is taken and the second snapshot is taken.\n    /// @param tickLower The lower tick of the range\n    /// @param tickUpper The upper tick of the range\n    /// @return tickCumulativeInside The snapshot of the tick accumulator for the range\n    /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\n    /// @return secondsInside The snapshot of seconds per liquidity for the range\n    function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\n        external\n        view\n        returns (\n            int56 tickCumulativeInside,\n            uint160 secondsPerLiquidityInsideX128,\n            uint32 secondsInside\n        );\n}\n"},"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Events emitted by a pool\n/// @notice Contains all events emitted by the pool\ninterface IUniswapV3PoolEvents {\n    /// @notice Emitted exactly once by a pool when #initialize is first called on the pool\n    /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\n    /// @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\n    /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\n    event Initialize(uint160 sqrtPriceX96, int24 tick);\n\n    /// @notice Emitted when liquidity is minted for a given position\n    /// @param sender The address that minted the liquidity\n    /// @param owner The owner of the position and recipient of any minted liquidity\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount The amount of liquidity minted to the position range\n    /// @param amount0 How much token0 was required for the minted liquidity\n    /// @param amount1 How much token1 was required for the minted liquidity\n    event Mint(\n        address sender,\n        address indexed owner,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount,\n        uint256 amount0,\n        uint256 amount1\n    );\n\n    /// @notice Emitted when fees are collected by the owner of a position\n    /// @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\n    /// @param owner The owner of the position for which fees are collected\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount0 The amount of token0 fees collected\n    /// @param amount1 The amount of token1 fees collected\n    event Collect(\n        address indexed owner,\n        address recipient,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount0,\n        uint128 amount1\n    );\n\n    /// @notice Emitted when a position's liquidity is removed\n    /// @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\n    /// @param owner The owner of the position for which liquidity is removed\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount The amount of liquidity to remove\n    /// @param amount0 The amount of token0 withdrawn\n    /// @param amount1 The amount of token1 withdrawn\n    event Burn(\n        address indexed owner,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount,\n        uint256 amount0,\n        uint256 amount1\n    );\n\n    /// @notice Emitted by the pool for any swaps between token0 and token1\n    /// @param sender The address that initiated the swap call, and that received the callback\n    /// @param recipient The address that received the output of the swap\n    /// @param amount0 The delta of the token0 balance of the pool\n    /// @param amount1 The delta of the token1 balance of the pool\n    /// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\n    /// @param liquidity The liquidity of the pool after the swap\n    /// @param tick The log base 1.0001 of price of the pool after the swap\n    event Swap(\n        address indexed sender,\n        address indexed recipient,\n        int256 amount0,\n        int256 amount1,\n        uint160 sqrtPriceX96,\n        uint128 liquidity,\n        int24 tick\n    );\n\n    /// @notice Emitted by the pool for any flashes of token0/token1\n    /// @param sender The address that initiated the swap call, and that received the callback\n    /// @param recipient The address that received the tokens from flash\n    /// @param amount0 The amount of token0 that was flashed\n    /// @param amount1 The amount of token1 that was flashed\n    /// @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\n    /// @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\n    event Flash(\n        address indexed sender,\n        address indexed recipient,\n        uint256 amount0,\n        uint256 amount1,\n        uint256 paid0,\n        uint256 paid1\n    );\n\n    /// @notice Emitted by the pool for increases to the number of observations that can be stored\n    /// @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\n    /// just before a mint/swap/burn.\n    /// @param observationCardinalityNextOld The previous value of the next observation cardinality\n    /// @param observationCardinalityNextNew The updated value of the next observation cardinality\n    event IncreaseObservationCardinalityNext(\n        uint16 observationCardinalityNextOld,\n        uint16 observationCardinalityNextNew\n    );\n\n    /// @notice Emitted when the protocol fee is changed by the pool\n    /// @param feeProtocol0Old The previous value of the token0 protocol fee\n    /// @param feeProtocol1Old The previous value of the token1 protocol fee\n    /// @param feeProtocol0New The updated value of the token0 protocol fee\n    /// @param feeProtocol1New The updated value of the token1 protocol fee\n    event SetFeeProtocol(uint8 feeProtocol0Old, uint8 feeProtocol1Old, uint8 feeProtocol0New, uint8 feeProtocol1New);\n\n    /// @notice Emitted when the collected protocol fees are withdrawn by the factory owner\n    /// @param sender The address that collects the protocol fees\n    /// @param recipient The address that receives the collected protocol fees\n    /// @param amount0 The amount of token0 protocol fees that is withdrawn\n    /// @param amount0 The amount of token1 protocol fees that is withdrawn\n    event CollectProtocol(address indexed sender, address indexed recipient, uint128 amount0, uint128 amount1);\n}\n"},"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that never changes\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\ninterface IUniswapV3PoolImmutables {\n    /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\n    /// @return The contract address\n    function factory() external view returns (address);\n\n    /// @notice The first of the two tokens of the pool, sorted by address\n    /// @return The token contract address\n    function token0() external view returns (address);\n\n    /// @notice The second of the two tokens of the pool, sorted by address\n    /// @return The token contract address\n    function token1() external view returns (address);\n\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\n    /// @return The fee\n    function fee() external view returns (uint24);\n\n    /// @notice The pool tick spacing\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\n    /// This value is an int24 to avoid casting even though it is always positive.\n    /// @return The tick spacing\n    function tickSpacing() external view returns (int24);\n\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\n    /// @return The max amount of liquidity per tick\n    function maxLiquidityPerTick() external view returns (uint128);\n}\n"},"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Permissioned pool actions\n/// @notice Contains pool methods that may only be called by the factory owner\ninterface IUniswapV3PoolOwnerActions {\n    /// @notice Set the denominator of the protocol's % share of the fees\n    /// @param feeProtocol0 new protocol fee for token0 of the pool\n    /// @param feeProtocol1 new protocol fee for token1 of the pool\n    function setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external;\n\n    /// @notice Collect the protocol fee accrued to the pool\n    /// @param recipient The address to which collected protocol fees should be sent\n    /// @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\n    /// @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\n    /// @return amount0 The protocol fee collected in token0\n    /// @return amount1 The protocol fee collected in token1\n    function collectProtocol(\n        address recipient,\n        uint128 amount0Requested,\n        uint128 amount1Requested\n    ) external returns (uint128 amount0, uint128 amount1);\n}\n"},"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that can change\n/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\n/// per transaction\ninterface IUniswapV3PoolState {\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\n    /// when accessed externally.\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\n    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\n    /// boundary.\n    /// observationIndex The index of the last oracle observation that was written,\n    /// observationCardinality The current maximum number of observations stored in the pool,\n    /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\n    /// feeProtocol The protocol fee for both tokens of the pool.\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\n    /// unlocked Whether the pool is currently locked to reentrancy\n    function slot0()\n        external\n        view\n        returns (\n            uint160 sqrtPriceX96,\n            int24 tick,\n            uint16 observationIndex,\n            uint16 observationCardinality,\n            uint16 observationCardinalityNext,\n            uint8 feeProtocol,\n            bool unlocked\n        );\n\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\n    /// @dev This value can overflow the uint256\n    function feeGrowthGlobal0X128() external view returns (uint256);\n\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\n    /// @dev This value can overflow the uint256\n    function feeGrowthGlobal1X128() external view returns (uint256);\n\n    /// @notice The amounts of token0 and token1 that are owed to the protocol\n    /// @dev Protocol fees will never exceed uint128 max in either token\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\n\n    /// @notice The currently in range liquidity available to the pool\n    /// @dev This value has no relationship to the total liquidity across all ticks\n    function liquidity() external view returns (uint128);\n\n    /// @notice Look up information about a specific tick in the pool\n    /// @param tick The tick to look up\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\n    /// tick upper,\n    /// liquidityNet how much liquidity changes when the pool price crosses the tick,\n    /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\n    /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\n    /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\n    /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\n    /// secondsOutside the seconds spent on the other side of the tick from the current tick,\n    /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\n    /// a specific position.\n    function ticks(int24 tick)\n        external\n        view\n        returns (\n            uint128 liquidityGross,\n            int128 liquidityNet,\n            uint256 feeGrowthOutside0X128,\n            uint256 feeGrowthOutside1X128,\n            int56 tickCumulativeOutside,\n            uint160 secondsPerLiquidityOutsideX128,\n            uint32 secondsOutside,\n            bool initialized\n        );\n\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\n\n    /// @notice Returns the information about a position by the position's key\n    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\n    /// @return _liquidity The amount of liquidity in the position,\n    /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\n    /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\n    /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\n    /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\n    function positions(bytes32 key)\n        external\n        view\n        returns (\n            uint128 _liquidity,\n            uint256 feeGrowthInside0LastX128,\n            uint256 feeGrowthInside1LastX128,\n            uint128 tokensOwed0,\n            uint128 tokensOwed1\n        );\n\n    /// @notice Returns data about a specific observation index\n    /// @param index The element of the observations array to fetch\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\n    /// ago, rather than at a specific index in the array.\n    /// @return blockTimestamp The timestamp of the observation,\n    /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\n    /// Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\n    /// Returns initialized whether the observation has been initialized and the values are safe to use\n    function observations(uint256 index)\n        external\n        view\n        returns (\n            uint32 blockTimestamp,\n            int56 tickCumulative,\n            uint160 secondsPerLiquidityCumulativeX128,\n            bool initialized\n        );\n}\n"},"@uniswap/v3-core/contracts/libraries/TickMath.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Math library for computing sqrt prices from ticks and vice versa\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\n/// prices between 2**-128 and 2**128\nlibrary TickMath {\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\n    int24 internal constant MIN_TICK = -887272;\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\n    int24 internal constant MAX_TICK = -MIN_TICK;\n\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\n\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\n    /// @dev Throws if |tick| > max tick\n    /// @param tick The input tick for the above formula\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\n    /// at the given tick\n    function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\n        uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\n        require(absTick <= uint256(MAX_TICK), 'T');\n\n        uint256 ratio = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\n        if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\n        if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\n        if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\n        if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\n        if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\n        if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\n        if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\n        if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\n        if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\n        if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\n        if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\n        if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\n        if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\n        if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\n        if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\n        if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\n        if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\n        if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\n        if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\n\n        if (tick > 0) ratio = type(uint256).max / ratio;\n\n        // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\n        // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\n        // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\n        sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\n    }\n\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\n    /// ever return.\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\n        // second inequality must be < because the price can never reach the price at the max tick\n        require(sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO, 'R');\n        uint256 ratio = uint256(sqrtPriceX96) << 32;\n\n        uint256 r = ratio;\n        uint256 msb = 0;\n\n        assembly {\n            let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(5, gt(r, 0xFFFFFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(4, gt(r, 0xFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(3, gt(r, 0xFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(2, gt(r, 0xF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(1, gt(r, 0x3))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := gt(r, 0x1)\n            msb := or(msb, f)\n        }\n\n        if (msb >= 128) r = ratio >> (msb - 127);\n        else r = ratio << (127 - msb);\n\n        int256 log_2 = (int256(msb) - 128) << 64;\n\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(63, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(62, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(61, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(60, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(59, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(58, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(57, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(56, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(55, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(54, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(53, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(52, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(51, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(50, f))\n        }\n\n        int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\n\n        int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\n        int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\n\n        tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\n    }\n}\n"},"@uniswap/v3-periphery/contracts/interfaces/external/IWETH9.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity =0.7.6;\n\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\n\n/// @title Interface for WETH9\ninterface IWETH9 is IERC20 {\n    /// @notice Deposit ether to get wrapped ether\n    function deposit() external payable;\n\n    /// @notice Withdraw wrapped ether to get ether\n    function withdraw(uint256) external;\n}\n"},"@uniswap/v3-periphery/contracts/interfaces/IERC721Permit.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\n\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\n\n/// @title ERC721 with permit\n/// @notice Extension to ERC721 that includes a permit function for signature based approvals\ninterface IERC721Permit is IERC721 {\n    /// @notice The permit typehash used in the permit signature\n    /// @return The typehash for the permit\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n\n    /// @notice The domain separator used in the permit signature\n    /// @return The domain seperator used in encoding of permit signature\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n\n    /// @notice Approve of a specific token ID for spending by spender via signature\n    /// @param spender The account that is being approved\n    /// @param tokenId The ID of the token that is being approved for spending\n    /// @param deadline The deadline timestamp by which the call must be mined for the approve to work\n    /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\n    /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\n    /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\n    function permit(\n        address spender,\n        uint256 tokenId,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external payable;\n}\n"},"@uniswap/v3-periphery/contracts/interfaces/INonfungiblePositionManager.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\npragma abicoder v2;\n\nimport '@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol';\nimport '@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol';\n\nimport './IPoolInitializer.sol';\nimport './IERC721Permit.sol';\nimport './IPeripheryPayments.sol';\nimport './IPeripheryImmutableState.sol';\nimport '../libraries/PoolAddress.sol';\n\n/// @title Non-fungible token for positions\n/// @notice Wraps Uniswap V3 positions in a non-fungible token interface which allows for them to be transferred\n/// and authorized.\ninterface INonfungiblePositionManager is\n    IPoolInitializer,\n    IPeripheryPayments,\n    IPeripheryImmutableState,\n    IERC721Metadata,\n    IERC721Enumerable,\n    IERC721Permit\n{\n    /// @notice Emitted when liquidity is increased for a position NFT\n    /// @dev Also emitted when a token is minted\n    /// @param tokenId The ID of the token for which liquidity was increased\n    /// @param liquidity The amount by which liquidity for the NFT position was increased\n    /// @param amount0 The amount of token0 that was paid for the increase in liquidity\n    /// @param amount1 The amount of token1 that was paid for the increase in liquidity\n    event IncreaseLiquidity(uint256 indexed tokenId, uint128 liquidity, uint256 amount0, uint256 amount1);\n    /// @notice Emitted when liquidity is decreased for a position NFT\n    /// @param tokenId The ID of the token for which liquidity was decreased\n    /// @param liquidity The amount by which liquidity for the NFT position was decreased\n    /// @param amount0 The amount of token0 that was accounted for the decrease in liquidity\n    /// @param amount1 The amount of token1 that was accounted for the decrease in liquidity\n    event DecreaseLiquidity(uint256 indexed tokenId, uint128 liquidity, uint256 amount0, uint256 amount1);\n    /// @notice Emitted when tokens are collected for a position NFT\n    /// @dev The amounts reported may not be exactly equivalent to the amounts transferred, due to rounding behavior\n    /// @param tokenId The ID of the token for which underlying tokens were collected\n    /// @param recipient The address of the account that received the collected tokens\n    /// @param amount0 The amount of token0 owed to the position that was collected\n    /// @param amount1 The amount of token1 owed to the position that was collected\n    event Collect(uint256 indexed tokenId, address recipient, uint256 amount0, uint256 amount1);\n\n    /// @notice Returns the position information associated with a given token ID.\n    /// @dev Throws if the token ID is not valid.\n    /// @param tokenId The ID of the token that represents the position\n    /// @return nonce The nonce for permits\n    /// @return operator The address that is approved for spending\n    /// @return token0 The address of the token0 for a specific pool\n    /// @return token1 The address of the token1 for a specific pool\n    /// @return fee The fee associated with the pool\n    /// @return tickLower The lower end of the tick range for the position\n    /// @return tickUpper The higher end of the tick range for the position\n    /// @return liquidity The liquidity of the position\n    /// @return feeGrowthInside0LastX128 The fee growth of token0 as of the last action on the individual position\n    /// @return feeGrowthInside1LastX128 The fee growth of token1 as of the last action on the individual position\n    /// @return tokensOwed0 The uncollected amount of token0 owed to the position as of the last computation\n    /// @return tokensOwed1 The uncollected amount of token1 owed to the position as of the last computation\n    function positions(uint256 tokenId)\n        external\n        view\n        returns (\n            uint96 nonce,\n            address operator,\n            address token0,\n            address token1,\n            uint24 fee,\n            int24 tickLower,\n            int24 tickUpper,\n            uint128 liquidity,\n            uint256 feeGrowthInside0LastX128,\n            uint256 feeGrowthInside1LastX128,\n            uint128 tokensOwed0,\n            uint128 tokensOwed1\n        );\n\n    struct MintParams {\n        address token0;\n        address token1;\n        uint24 fee;\n        int24 tickLower;\n        int24 tickUpper;\n        uint256 amount0Desired;\n        uint256 amount1Desired;\n        uint256 amount0Min;\n        uint256 amount1Min;\n        address recipient;\n        uint256 deadline;\n    }\n\n    /// @notice Creates a new position wrapped in a NFT\n    /// @dev Call this when the pool does exist and is initialized. Note that if the pool is created but not initialized\n    /// a method does not exist, i.e. the pool is assumed to be initialized.\n    /// @param params The params necessary to mint a position, encoded as `MintParams` in calldata\n    /// @return tokenId The ID of the token that represents the minted position\n    /// @return liquidity The amount of liquidity for this position\n    /// @return amount0 The amount of token0\n    /// @return amount1 The amount of token1\n    function mint(MintParams calldata params)\n        external\n        payable\n        returns (\n            uint256 tokenId,\n            uint128 liquidity,\n            uint256 amount0,\n            uint256 amount1\n        );\n\n    struct IncreaseLiquidityParams {\n        uint256 tokenId;\n        uint256 amount0Desired;\n        uint256 amount1Desired;\n        uint256 amount0Min;\n        uint256 amount1Min;\n        uint256 deadline;\n    }\n\n    /// @notice Increases the amount of liquidity in a position, with tokens paid by the `msg.sender`\n    /// @param params tokenId The ID of the token for which liquidity is being increased,\n    /// amount0Desired The desired amount of token0 to be spent,\n    /// amount1Desired The desired amount of token1 to be spent,\n    /// amount0Min The minimum amount of token0 to spend, which serves as a slippage check,\n    /// amount1Min The minimum amount of token1 to spend, which serves as a slippage check,\n    /// deadline The time by which the transaction must be included to effect the change\n    /// @return liquidity The new liquidity amount as a result of the increase\n    /// @return amount0 The amount of token0 to acheive resulting liquidity\n    /// @return amount1 The amount of token1 to acheive resulting liquidity\n    function increaseLiquidity(IncreaseLiquidityParams calldata params)\n        external\n        payable\n        returns (\n            uint128 liquidity,\n            uint256 amount0,\n            uint256 amount1\n        );\n\n    struct DecreaseLiquidityParams {\n        uint256 tokenId;\n        uint128 liquidity;\n        uint256 amount0Min;\n        uint256 amount1Min;\n        uint256 deadline;\n    }\n\n    /// @notice Decreases the amount of liquidity in a position and accounts it to the position\n    /// @param params tokenId The ID of the token for which liquidity is being decreased,\n    /// amount The amount by which liquidity will be decreased,\n    /// amount0Min The minimum amount of token0 that should be accounted for the burned liquidity,\n    /// amount1Min The minimum amount of token1 that should be accounted for the burned liquidity,\n    /// deadline The time by which the transaction must be included to effect the change\n    /// @return amount0 The amount of token0 accounted to the position's tokens owed\n    /// @return amount1 The amount of token1 accounted to the position's tokens owed\n    function decreaseLiquidity(DecreaseLiquidityParams calldata params)\n        external\n        payable\n        returns (uint256 amount0, uint256 amount1);\n\n    struct CollectParams {\n        uint256 tokenId;\n        address recipient;\n        uint128 amount0Max;\n        uint128 amount1Max;\n    }\n\n    /// @notice Collects up to a maximum amount of fees owed to a specific position to the recipient\n    /// @param params tokenId The ID of the NFT for which tokens are being collected,\n    /// recipient The account that should receive the tokens,\n    /// amount0Max The maximum amount of token0 to collect,\n    /// amount1Max The maximum amount of token1 to collect\n    /// @return amount0 The amount of fees collected in token0\n    /// @return amount1 The amount of fees collected in token1\n    function collect(CollectParams calldata params) external payable returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Burns a token ID, which deletes it from the NFT contract. The token must have 0 liquidity and all tokens\n    /// must be collected first.\n    /// @param tokenId The ID of the token that is being burned\n    function burn(uint256 tokenId) external payable;\n}\n"},"@uniswap/v3-periphery/contracts/interfaces/IPeripheryImmutableState.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Immutable state\n/// @notice Functions that return immutable state of the router\ninterface IPeripheryImmutableState {\n    /// @return Returns the address of the Uniswap V3 factory\n    function factory() external view returns (address);\n\n    /// @return Returns the address of WETH9\n    function WETH9() external view returns (address);\n}\n"},"@uniswap/v3-periphery/contracts/interfaces/IPeripheryPayments.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\n\n/// @title Periphery Payments\n/// @notice Functions to ease deposits and withdrawals of ETH\ninterface IPeripheryPayments {\n    /// @notice Unwraps the contract's WETH9 balance and sends it to recipient as ETH.\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.\n    /// @param amountMinimum The minimum amount of WETH9 to unwrap\n    /// @param recipient The address receiving ETH\n    function unwrapWETH9(uint256 amountMinimum, address recipient) external payable;\n\n    /// @notice Refunds any ETH balance held by this contract to the `msg.sender`\n    /// @dev Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps\n    /// that use ether for the input amount\n    function refundETH() external payable;\n\n    /// @notice Transfers the full amount of a token held by this contract to recipient\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing the token from users\n    /// @param token The contract address of the token which will be transferred to `recipient`\n    /// @param amountMinimum The minimum amount of token required for a transfer\n    /// @param recipient The destination address of the token\n    function sweepToken(\n        address token,\n        uint256 amountMinimum,\n        address recipient\n    ) external payable;\n}\n"},"@uniswap/v3-periphery/contracts/interfaces/IPoolInitializer.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\npragma abicoder v2;\n\n/// @title Creates and initializes V3 Pools\n/// @notice Provides a method for creating and initializing a pool, if necessary, for bundling with other methods that\n/// require the pool to exist.\ninterface IPoolInitializer {\n    /// @notice Creates a new pool if it does not exist, then initializes if not initialized\n    /// @dev This method can be bundled with others via IMulticall for the first action (e.g. mint) performed against a pool\n    /// @param token0 The contract address of token0 of the pool\n    /// @param token1 The contract address of token1 of the pool\n    /// @param fee The fee amount of the v3 pool for the specified token pair\n    /// @param sqrtPriceX96 The initial square root price of the pool as a Q64.96 value\n    /// @return pool Returns the pool address based on the pair of tokens and fee, will return the newly created pool address if necessary\n    function createAndInitializePoolIfNecessary(\n        address token0,\n        address token1,\n        uint24 fee,\n        uint160 sqrtPriceX96\n    ) external payable returns (address pool);\n}\n"},"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\npragma abicoder v2;\n\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\n\n/// @title Router token swapping functionality\n/// @notice Functions for swapping tokens via Uniswap V3\ninterface ISwapRouter is IUniswapV3SwapCallback {\n    struct ExactInputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\n    /// @return amountOut The amount of the received token\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\n\n    struct ExactInputParams {\n        bytes path;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n    }\n\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\n    /// @return amountOut The amount of the received token\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\n\n    struct ExactOutputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 deadline;\n        uint256 amountOut;\n        uint256 amountInMaximum;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\n    /// @return amountIn The amount of the input token\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\n\n    struct ExactOutputParams {\n        bytes path;\n        address recipient;\n        uint256 deadline;\n        uint256 amountOut;\n        uint256 amountInMaximum;\n    }\n\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\n    /// @return amountIn The amount of the input token\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\n}\n"},"@uniswap/v3-periphery/contracts/libraries/PoolAddress.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Provides functions for deriving a pool address from the factory, tokens, and the fee\nlibrary PoolAddress {\n    bytes32 internal constant POOL_INIT_CODE_HASH = 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54;\n\n    /// @notice The identifying key of the pool\n    struct PoolKey {\n        address token0;\n        address token1;\n        uint24 fee;\n    }\n\n    /// @notice Returns PoolKey: the ordered tokens with the matched fee levels\n    /// @param tokenA The first token of a pool, unsorted\n    /// @param tokenB The second token of a pool, unsorted\n    /// @param fee The fee level of the pool\n    /// @return Poolkey The pool details with ordered token0 and token1 assignments\n    function getPoolKey(\n        address tokenA,\n        address tokenB,\n        uint24 fee\n    ) internal pure returns (PoolKey memory) {\n        if (tokenA > tokenB) (tokenA, tokenB) = (tokenB, tokenA);\n        return PoolKey({token0: tokenA, token1: tokenB, fee: fee});\n    }\n\n    /// @notice Deterministically computes the pool address given the factory and PoolKey\n    /// @param factory The Uniswap V3 factory contract address\n    /// @param key The PoolKey\n    /// @return pool The contract address of the V3 pool\n    function computeAddress(address factory, PoolKey memory key) internal pure returns (address pool) {\n        require(key.token0 < key.token1);\n        pool = address(\n            uint256(\n                keccak256(\n                    abi.encodePacked(\n                        hex'ff',\n                        factory,\n                        keccak256(abi.encode(key.token0, key.token1, key.fee)),\n                        POOL_INIT_CODE_HASH\n                    )\n                )\n            )\n        );\n    }\n}\n"},"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.6.0;\n\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\n\nlibrary TransferHelper {\n    /// @notice Transfers tokens from the targeted address to the given destination\n    /// @notice Errors with 'STF' if transfer fails\n    /// @param token The contract address of the token to be transferred\n    /// @param from The originating address from which the tokens will be transferred\n    /// @param to The destination address of the transfer\n    /// @param value The amount to be transferred\n    function safeTransferFrom(\n        address token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        (bool success, bytes memory data) =\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\n    }\n\n    /// @notice Transfers tokens from msg.sender to a recipient\n    /// @dev Errors with ST if transfer fails\n    /// @param token The contract address of the token which will be transferred\n    /// @param to The recipient of the transfer\n    /// @param value The value of the transfer\n    function safeTransfer(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');\n    }\n\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\n    /// @dev Errors with 'SA' if transfer fails\n    /// @param token The contract address of the token to be approved\n    /// @param to The target of the approval\n    /// @param value The amount of the given token the target will be allowed to spend\n    function safeApprove(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');\n    }\n\n    /// @notice Transfers ETH to the recipient address\n    /// @dev Fails with `STE`\n    /// @param to The destination of the transfer\n    /// @param value The value to be transferred\n    function safeTransferETH(address to, uint256 value) internal {\n        (bool success, ) = to.call{value: value}(new bytes(0));\n        require(success, 'STE');\n    }\n}\n"},"contracts/BaselineMinimal.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.7.6;\r\npragma abicoder v2;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\r\nimport \"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\";\r\nimport \"@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol\";\r\nimport \"@uniswap/v3-periphery/contracts/interfaces/INonfungiblePositionManager.sol\";\r\nimport \"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\";\r\nimport \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\";\r\n\r\ninterface IWETH {\r\n    function deposit() external payable;\r\n    function withdraw(uint256) external;\r\n}\r\n\r\n/**\r\n * @title BaselineMinimal\r\n * @notice نسخه حداقلی قرارداد مدیریت نقدینگی بیس‌لاین\r\n */\r\ncontract BaselineMinimal is Ownable {\r\n    using SafeERC20 for IERC20;\r\n\r\n    // --- متغیرهای وضعیت اصلی ---\r\n    IUniswapV3Factory public immutable factory;\r\n    INonfungiblePositionManager public immutable positionManager;\r\n    ISwapRouter public immutable swapRouter;\r\n    address public immutable token0;\r\n    address public immutable token1;\r\n    uint24 public immutable fee;\r\n    int24 public immutable tickSpacing;\r\n\r\n    // --- متغیرها برای نگهداری موقعیت ---\r\n    uint256 public currentTokenId;\r\n    bool public hasPosition;\r\n    int24 public lowerTick;\r\n    int24 public upperTick;\r\n\r\n    // --- رویدادها ---\r\n    event PositionChanged(bool hasPosition, int24 lowerTick, int24 upperTick);\r\n    event BaselineAdjustmentMetrics(\r\n        uint256 timestamp,\r\n        uint256 currentPrice,\r\n        int24 currentTick,\r\n        int24 finalTickLower,\r\n        int24 finalTickUpper,\r\n        bool adjusted\r\n    );\r\n    event TokensSwapped(uint256 amountIn, uint256 amountOut);\r\n\r\n    // --- سازنده ---\r\n    constructor(\r\n        address _factory,\r\n        address _positionManager,\r\n        address _swapRouter,\r\n        address _token0,\r\n        address _token1,\r\n        uint24 _fee\r\n    ) {\r\n        require(_factory != address(0), \"Invalid factory address\");\r\n        require(_positionManager != address(0), \"Invalid position manager\");\r\n        require(_swapRouter != address(0), \"Invalid swap router\");\r\n        require(_token0 != address(0), \"Invalid token0\");\r\n        require(_token1 != address(0), \"Invalid token1\");\r\n        require(_fee > 0, \"Invalid fee\");\r\n\r\n        factory = IUniswapV3Factory(_factory);\r\n        positionManager = INonfungiblePositionManager(_positionManager);\r\n        swapRouter = ISwapRouter(_swapRouter);\r\n        token0 = _token0;\r\n        token1 = _token1;\r\n        fee = _fee;\r\n\r\n        // تنظیم tickSpacing با استفاده از پول\r\n        address poolAddress = IUniswapV3Factory(_factory).getPool(\r\n            _token0,\r\n            _token1,\r\n            _fee\r\n        );\r\n        require(poolAddress != address(0), \"Pool does not exist\");\r\n        tickSpacing = IUniswapV3Pool(poolAddress).tickSpacing();\r\n\r\n        // تنظیم تأییدیه‌های توکن\r\n        IERC20(_token0).approve(address(_positionManager), type(uint256).max);\r\n        IERC20(_token1).approve(address(_positionManager), type(uint256).max);\r\n        IERC20(_token0).approve(address(_swapRouter), type(uint256).max);\r\n        IERC20(_token1).approve(address(_swapRouter), type(uint256).max);\r\n    }\r\n\r\n    // --- تابع دریافت ETH ---\r\n    receive() external payable {\r\n        // تبدیل ETH به WETH\r\n        IWETH(token1).deposit{value: msg.value}();\r\n\r\n        // تبدیل نیمی از WETH به USDC\r\n        uint256 halfAmount = msg.value / 2;\r\n        _swapExactInputSingle(token1, token0, halfAmount);\r\n\r\n        // تنظیم نقدینگی با توکن‌های جدید\r\n        adjustLiquidityWithCurrentPrice();\r\n    }\r\n\r\n    // --- تابع سواپ ---\r\n    function _swapExactInputSingle(\r\n        address tokenIn,\r\n        address tokenOut,\r\n        uint256 amountIn\r\n    ) internal returns (uint256 amountOut) {\r\n        ISwapRouter.ExactInputSingleParams memory params = ISwapRouter\r\n            .ExactInputSingleParams({\r\n                tokenIn: tokenIn,\r\n                tokenOut: tokenOut,\r\n                fee: fee,\r\n                recipient: address(this),\r\n                deadline: block.timestamp,\r\n                amountIn: amountIn,\r\n                amountOutMinimum: 0,\r\n                sqrtPriceLimitX96: 0\r\n            });\r\n\r\n        amountOut = swapRouter.exactInputSingle(params);\r\n        emit TokensSwapped(amountIn, amountOut);\r\n    }\r\n\r\n    // --- تابع اصلی تنظیم نقدینگی ---\r\n    function adjustLiquidityWithCurrentPrice() public {\r\n        // 1. دریافت اطلاعات قیمت و tick فعلی\r\n        address pool = factory.getPool(token0, token1, fee);\r\n        require(pool != address(0), \"Pool not found\");\r\n\r\n        uint160 sqrtPriceX96;\r\n        int24 currentTick;\r\n        (sqrtPriceX96, currentTick, , , , , ) = IUniswapV3Pool(pool).slot0();\r\n\r\n        // 2. محاسبه محدوده tick جدید\r\n        int24 width = tickSpacing * 4;\r\n        int24 newLowerTick = ((currentTick - width / 2) / tickSpacing) *\r\n            tickSpacing;\r\n        int24 newUpperTick = ((currentTick + width / 2) / tickSpacing) *\r\n            tickSpacing;\r\n\r\n        // 3. حذف موقعیت موجود\r\n        if (hasPosition) {\r\n            _removePosition();\r\n        }\r\n\r\n        // 4. ایجاد موقعیت جدید با موجودی توکن‌ها\r\n        _createPosition(newLowerTick, newUpperTick);\r\n\r\n        // 5. انتشار رویداد\r\n        emit BaselineAdjustmentMetrics(\r\n            block.timestamp,\r\n            _sqrtPriceX96ToPrice(sqrtPriceX96),\r\n            currentTick,\r\n            newLowerTick,\r\n            newUpperTick,\r\n            true\r\n        );\r\n    }\r\n\r\n    // --- حذف موقعیت ---\r\n    function _removePosition() internal {\r\n        require(hasPosition, \"No position to remove\");\r\n        require(currentTokenId > 0, \"Invalid token ID\");\r\n\r\n        // حذف نقدینگی\r\n        try\r\n            positionManager.decreaseLiquidity(\r\n                INonfungiblePositionManager.DecreaseLiquidityParams({\r\n                    tokenId: currentTokenId,\r\n                    liquidity: type(uint128).max,\r\n                    amount0Min: 0,\r\n                    amount1Min: 0,\r\n                    deadline: block.timestamp\r\n                })\r\n            )\r\n        {} catch {}\r\n\r\n        // جمع‌آوری توکن‌ها\r\n        try\r\n            positionManager.collect(\r\n                INonfungiblePositionManager.CollectParams({\r\n                    tokenId: currentTokenId,\r\n                    recipient: address(this),\r\n                    amount0Max: type(uint128).max,\r\n                    amount1Max: type(uint128).max\r\n                })\r\n            )\r\n        {} catch {}\r\n\r\n        // سوزاندن NFT\r\n        try positionManager.burn(currentTokenId) {} catch {}\r\n\r\n        // بازنشانی وضعیت\r\n        hasPosition = false;\r\n        currentTokenId = 0;\r\n\r\n        emit PositionChanged(false, 0, 0);\r\n    }\r\n\r\n    // --- ایجاد موقعیت ---\r\n    function _createPosition(int24 _lowerTick, int24 _upperTick) internal {\r\n        require(_lowerTick < _upperTick, \"Invalid tick range\");\r\n\r\n        uint256 amount0 = IERC20(token0).balanceOf(address(this));\r\n        uint256 amount1 = IERC20(token1).balanceOf(address(this));\r\n\r\n        if (amount0 == 0 && amount1 == 0) {\r\n            return;\r\n        }\r\n\r\n        try\r\n            positionManager.mint(\r\n                INonfungiblePositionManager.MintParams({\r\n                    token0: token0,\r\n                    token1: token1,\r\n                    fee: fee,\r\n                    tickLower: _lowerTick,\r\n                    tickUpper: _upperTick,\r\n                    amount0Desired: amount0,\r\n                    amount1Desired: amount1,\r\n                    amount0Min: 0,\r\n                    amount1Min: 0,\r\n                    recipient: address(this),\r\n                    deadline: block.timestamp\r\n                })\r\n            )\r\n        returns (uint256 tokenId, uint128, uint256, uint256) {\r\n            if (tokenId > 0) {\r\n                currentTokenId = tokenId;\r\n                hasPosition = true;\r\n                lowerTick = _lowerTick;\r\n                upperTick = _upperTick;\r\n\r\n                emit PositionChanged(true, _lowerTick, _upperTick);\r\n            }\r\n        } catch {}\r\n    }\r\n\r\n    // --- تابع کمکی برای محاسبه قیمت ---\r\n    function _sqrtPriceX96ToPrice(\r\n        uint160 sqrtPriceX96\r\n    ) internal pure returns (uint256) {\r\n        require(sqrtPriceX96 > 0, \"Invalid sqrt price\");\r\n        uint256 priceX192 = uint256(sqrtPriceX96) * uint256(sqrtPriceX96);\r\n        return priceX192 >> 96;\r\n    }\r\n\r\n    // --- برداشت اضطراری توکن‌ها ---\r\n    function rescueTokens(address token, address to) external onlyOwner {\r\n        require(token != address(0), \"Invalid token\");\r\n        require(to != address(0), \"Invalid recipient\");\r\n\r\n        uint256 amount = IERC20(token).balanceOf(address(this));\r\n        if (amount > 0) {\r\n            IERC20(token).safeTransfer(to, amount);\r\n        }\r\n    }\r\n\r\n    // --- تابع برداشت اضطراری ETH ---\r\n    function rescueETH() external onlyOwner {\r\n        uint256 balance = address(this).balance;\r\n        if (balance > 0) {\r\n            payable(owner()).transfer(balance);\r\n        }\r\n    }\r\n\r\n    // --- تابع برداشت اضطراری WETH ---\r\n    function rescueWETH(uint256 amount) external onlyOwner {\r\n        IWETH(token1).withdraw(amount);\r\n        payable(owner()).transfer(amount);\r\n    }\r\n}\r\n"},"contracts/libraries/SqrtMath.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.7.6;\r\n\r\nimport \"@openzeppelin/contracts/math/SafeMath.sol\"; // Import OZ 3.4 SafeMath\r\n\r\n/**\r\n * @title Safe Square Root Math Library for Solidity 0.7.x\r\n * @author Adapted from OpenZeppelin Contracts & other sources\r\n * @notice Provides square root functionality using SafeMath for uint256.\r\n */\r\nlibrary SqrtMath {\r\n    using SafeMath for uint256;\r\n\r\n    // Optional: Include Rounding enum if your main contract needs the rounding variant\r\n    enum Rounding {\r\n        Floor,\r\n        Ceil\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer square root of a number rounded down (floor).\r\n     * Uses Babylonian method with SafeMath. 6 iterations are sufficient for uint256.\r\n     */\r\n    function sqrt(uint256 a) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n\r\n        // Initial estimate - can start with a simple estimate like a/2 or use log2 based estimate\r\n        // Using roughly x = 2**(log2(a)/2) based estimate (safer)\r\n        uint256 estimate = 1 << (log2(a) >> 1);\r\n        if (estimate == 0) estimate = 1; // Ensure estimate is not zero if a > 0\r\n\r\n        // Babylonian method iterations using SafeMath\r\n        // result = (estimate + a / estimate) / 2;\r\n        uint256 result = estimate.add(a.div(estimate)).div(2);\r\n        result = result.add(a.div(result)).div(2);\r\n        result = result.add(a.div(result)).div(2);\r\n        result = result.add(a.div(result)).div(2);\r\n        result = result.add(a.div(result)).div(2);\r\n        result = result.add(a.div(result)).div(2);\r\n\r\n        // Final check for floor rounding (integer truncation might overshoot)\r\n        // Check if result * result > a\r\n        // Avoid direct multiplication if result can be large, use division check: result > a / result\r\n        if (result > a.div(result)) {\r\n            // If result > a/result, it means result*result > a (potential overflow avoided)\r\n            // So, the floor value is result - 1\r\n            return result.sub(1);\r\n        } else {\r\n            // Otherwise, result*result <= a, so result is the floor value\r\n            return result;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates sqrt(a), following the selected rounding direction.\r\n     */\r\n    function sqrt(\r\n        uint256 a,\r\n        Rounding rounding\r\n    ) internal pure returns (uint256) {\r\n        uint256 resultFloor = sqrt(a); // Calculate floor value first\r\n        if (rounding == Rounding.Floor) {\r\n            return resultFloor;\r\n        } else {\r\n            // rounding == Rounding.Ceil\r\n            // Check if ceil is needed (i.e., if a is not a perfect square)\r\n            // If resultFloor * resultFloor < a, then we need to round up\r\n            if (resultFloor.mul(resultFloor) < a) {\r\n                // Use SafeMath for the check\r\n                return resultFloor.add(1);\r\n            } else {\r\n                return resultFloor; // a was a perfect square, floor == ceil\r\n            }\r\n        }\r\n    }\r\n\r\n    // --- Internal helper: log2 needed for initial estimate ---\r\n    /**\r\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\r\n     * Returns 0 if given 0. Adapted from OZ 4.x for 0.7.6 compatibility using assembly.\r\n     */\r\n    function log2(uint256 x) internal pure returns (uint256 r) {\r\n        assembly {\r\n            let v := x\r\n            if iszero(v) {\r\n                r := 0\r\n            }\r\n            if gt(v, 0xffffffffffffffffffffffffffffffff) {\r\n                r := add(r, 128)\r\n                v := shr(128, v)\r\n            }\r\n            if gt(v, 0xffffffffffffffff) {\r\n                r := add(r, 64)\r\n                v := shr(64, v)\r\n            }\r\n            if gt(v, 0xffffffff) {\r\n                r := add(r, 32)\r\n                v := shr(32, v)\r\n            }\r\n            if gt(v, 0xffff) {\r\n                r := add(r, 16)\r\n                v := shr(16, v)\r\n            }\r\n            if gt(v, 0xff) {\r\n                r := add(r, 8)\r\n                v := shr(8, v)\r\n            }\r\n            if gt(v, 0xf) {\r\n                r := add(r, 4)\r\n                v := shr(4, v)\r\n            }\r\n            if gt(v, 0x3) {\r\n                r := add(r, 2)\r\n                v := shr(2, v)\r\n            }\r\n            if gt(v, 0x1) {\r\n                r := add(r, 1)\r\n            }\r\n        }\r\n    }\r\n}\r\n"},"contracts/PredictiveLiquidityManager.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.7.6;\r\npragma abicoder v2; // To support structs in parameters\r\n\r\n// OpenZeppelin ~3.4.0 Imports\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\r\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\r\n\r\n// Local Math Library\r\nimport \"./libraries/SqrtMath.sol\";\r\n\r\n// Uniswap V3 Core\r\nimport \"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\";\r\nimport \"@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol\";\r\nimport \"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3MintCallback.sol\";\r\nimport \"@uniswap/v3-core/contracts/libraries/TickMath.sol\";\r\n\r\n// Uniswap V3 Periphery\r\nimport \"@uniswap/v3-periphery/contracts/interfaces/INonfungiblePositionManager.sol\";\r\nimport \"@uniswap/v3-periphery/contracts/interfaces/external/IWETH9.sol\";\r\n\r\n// Interface for decimals()\r\ninterface IERC20Decimals {\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n/**\r\n * @title PredictiveLiquidityManager\r\n * @notice The main liquidity management contract that adjusts positions based on price predictions\r\n */\r\ncontract PredictiveLiquidityManager is\r\n    Ownable,\r\n    ReentrancyGuard,\r\n    IUniswapV3MintCallback\r\n{\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint256;\r\n\r\n    // --- State Variables ---\r\n    IUniswapV3Factory public immutable factory;\r\n    INonfungiblePositionManager public immutable positionManager;\r\n    address public immutable token0;\r\n    address public immutable token1;\r\n    uint8 public immutable token0Decimals;\r\n    uint8 public immutable token1Decimals;\r\n    uint24 public immutable fee;\r\n    int24 public immutable tickSpacing;\r\n    address public immutable WETH9;\r\n\r\n    // Structure for liquidity positions\r\n    struct Position {\r\n        uint256 tokenId;\r\n        uint128 liquidity;\r\n        int24 tickLower;\r\n        int24 tickUpper;\r\n        bool active;\r\n    }\r\n    Position public currentPosition;\r\n\r\n    // Strategy Parameters\r\n    uint24 public rangeWidthMultiplier = 4;\r\n\r\n    // --- Events ---\r\n    // Event for liquidity operations\r\n    event LiquidityOperation(\r\n        string operationType,\r\n        uint256 indexed tokenId,\r\n        int24 tickLower,\r\n        int24 tickUpper,\r\n        uint128 liquidity,\r\n        uint256 amount0,\r\n        uint256 amount1,\r\n        bool success\r\n    );\r\n\r\n    // Event for outputting main adjustment logic\r\n    event PredictionAdjustmentMetrics(\r\n        uint256 timestamp,\r\n        uint256 actualPrice,\r\n        uint256 predictedPrice,\r\n        int24 predictedTick,\r\n        int24 finalTickLower,\r\n        int24 finalTickUpper,\r\n        bool adjusted\r\n    );\r\n\r\n    event StrategyParamUpdated(string indexed paramName, uint256 newValue);\r\n\r\n    // --- Constructor ---\r\n    constructor(\r\n        address _factory,\r\n        address _positionManager,\r\n        address _token0,\r\n        address _token1,\r\n        uint24 _fee,\r\n        address _weth9,\r\n        address _initialOwner\r\n    ) {\r\n        // Store values in immutable variables\r\n        factory = IUniswapV3Factory(_factory);\r\n        positionManager = INonfungiblePositionManager(_positionManager);\r\n        token0 = _token0;\r\n        token1 = _token1;\r\n        fee = _fee;\r\n        WETH9 = _weth9;\r\n\r\n        // Check decimals using try-catch\r\n        try IERC20Decimals(_token0).decimals() returns (uint8 _decimals) {\r\n            token0Decimals = _decimals;\r\n        } catch {\r\n            revert(\"Token0 does not support decimals()\");\r\n        }\r\n\r\n        try IERC20Decimals(_token1).decimals() returns (uint8 _decimals) {\r\n            token1Decimals = _decimals;\r\n        } catch {\r\n            revert(\"Token1 does not support decimals()\");\r\n        }\r\n\r\n        // Store tickSpacing in a temporary variable\r\n        address poolAddress = IUniswapV3Factory(_factory).getPool(\r\n            _token0,\r\n            _token1,\r\n            _fee\r\n        );\r\n        require(poolAddress != address(0), \"Pool does not exist\");\r\n        tickSpacing = IUniswapV3Pool(poolAddress).tickSpacing();\r\n\r\n        // Set approvals for token0 and token1\r\n        IERC20(_token0).safeApprove(\r\n            address(_positionManager),\r\n            type(uint256).max\r\n        );\r\n        IERC20(_token1).safeApprove(\r\n            address(_positionManager),\r\n            type(uint256).max\r\n        );\r\n\r\n        if (_initialOwner != address(0)) {\r\n            transferOwnership(_initialOwner);\r\n        }\r\n    }\r\n\r\n    // --- Automated Liquidity Management (Owner Only) ---\r\n    function updatePredictionAndAdjust(\r\n        uint256 predictedPriceDecimal\r\n    ) external nonReentrant onlyOwner {\r\n        // Calculate current price and predicted tick information\r\n        (\r\n            uint256 currentPriceDecimal,\r\n            int24 currentTick,\r\n            int24 predictedTick,\r\n            int24 targetTickLower,\r\n            int24 targetTickUpper\r\n        ) = _calculatePredictionData(predictedPriceDecimal);\r\n\r\n        // Update position if needed\r\n        bool adjusted = _updatePositionIfNeeded(\r\n            targetTickLower,\r\n            targetTickUpper\r\n        );\r\n\r\n        // Emit prediction adjustment metrics using a helper function to reduce stack depth\r\n        _emitPredictionMetrics(\r\n            currentPriceDecimal,\r\n            predictedPriceDecimal,\r\n            predictedTick,\r\n            targetTickLower,\r\n            targetTickUpper,\r\n            adjusted\r\n        );\r\n    }\r\n\r\n    // Helper function for calculating prediction data - reducing stack depth\r\n    function _calculatePredictionData(\r\n        uint256 predictedPriceDecimal\r\n    )\r\n        internal\r\n        view\r\n        returns (\r\n            uint256 currentPriceDecimal,\r\n            int24 currentTick,\r\n            int24 predictedTick,\r\n            int24 targetTickLower,\r\n            int24 targetTickUpper\r\n        )\r\n    {\r\n        // Retrieve current price and tick information\r\n        uint160 sqrtPriceX96;\r\n        int24 tick;\r\n        (sqrtPriceX96, tick) = _getCurrentSqrtPriceAndTick();\r\n        currentTick = tick;\r\n        currentPriceDecimal = _sqrtPriceX96ToPrice(sqrtPriceX96);\r\n        predictedTick = _priceToTick(predictedPriceDecimal);\r\n\r\n        // Calculate new position\r\n        (targetTickLower, targetTickUpper) = _calculateTicks(predictedTick);\r\n\r\n        return (\r\n            currentPriceDecimal,\r\n            currentTick,\r\n            predictedTick,\r\n            targetTickLower,\r\n            targetTickUpper\r\n        );\r\n    }\r\n\r\n    // Helper function to update position if needed - reducing stack depth\r\n    function _updatePositionIfNeeded(\r\n        int24 targetTickLower,\r\n        int24 targetTickUpper\r\n    ) internal returns (bool adjusted) {\r\n        if (\r\n            !currentPosition.active ||\r\n            targetTickLower != currentPosition.tickLower ||\r\n            targetTickUpper != currentPosition.tickUpper\r\n        ) {\r\n            _adjustLiquidity(targetTickLower, targetTickUpper);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // --- Internal Liquidity Management Helpers ---\r\n    function _adjustLiquidity(int24 tickLower, int24 tickUpper) internal {\r\n        if (currentPosition.active) {\r\n            _removeLiquidity();\r\n        }\r\n        uint256 balance0 = IERC20(token0).balanceOf(address(this));\r\n        uint256 balance1 = IERC20(token1).balanceOf(address(this));\r\n        if (balance0 > 0 || balance1 > 0) {\r\n            _mintLiquidity(tickLower, tickUpper, balance0, balance1);\r\n        } else {\r\n            currentPosition = Position(0, 0, 0, 0, false);\r\n        }\r\n    }\r\n\r\n    // Helper function for emitting liquidity removal events - reducing stack depth\r\n    function _emitLiquidityRemoveEvent(\r\n        uint256 tokenId,\r\n        int24 tickLower,\r\n        int24 tickUpper,\r\n        uint128 liquidity,\r\n        uint256 amount0,\r\n        uint256 amount1,\r\n        bool success\r\n    ) internal {\r\n        emit LiquidityOperation(\r\n            \"REMOVE\",\r\n            tokenId,\r\n            tickLower,\r\n            tickUpper,\r\n            liquidity,\r\n            amount0,\r\n            amount1,\r\n            success\r\n        );\r\n    }\r\n\r\n    function _removeLiquidity() internal {\r\n        require(\r\n            currentPosition.active && currentPosition.tokenId != 0,\r\n            \"No active position\"\r\n        );\r\n        uint256 _tokenId = currentPosition.tokenId;\r\n        uint128 _liquidity = currentPosition.liquidity;\r\n        int24 _tickLower = currentPosition.tickLower;\r\n        int24 _tickUpper = currentPosition.tickUpper;\r\n\r\n        currentPosition = Position(0, 0, 0, 0, false);\r\n\r\n        // Executing removal process in a separate function to prevent stack too deep\r\n        _executeRemoval(_tokenId, _liquidity, _tickLower, _tickUpper);\r\n    }\r\n\r\n    // Helper function for executing liquidity removal - reducing stack depth\r\n    function _executeRemoval(\r\n        uint256 _tokenId,\r\n        uint128 _liquidity,\r\n        int24 _tickLower,\r\n        int24 _tickUpper\r\n    ) internal {\r\n        bool decreaseSuccess = false;\r\n        bool collectSuccess = false;\r\n        uint256 amount0Collected = 0;\r\n        uint256 amount1Collected = 0;\r\n\r\n        if (_liquidity > 0) {\r\n            try\r\n                positionManager.decreaseLiquidity(\r\n                    INonfungiblePositionManager.DecreaseLiquidityParams({\r\n                        tokenId: _tokenId,\r\n                        liquidity: _liquidity,\r\n                        amount0Min: 0,\r\n                        amount1Min: 0,\r\n                        deadline: block.timestamp\r\n                    })\r\n                )\r\n            {\r\n                decreaseSuccess = true;\r\n            } catch {\r\n                // Silent failure, success = false will be returned at the end\r\n            }\r\n        } else {\r\n            decreaseSuccess = true;\r\n        }\r\n\r\n        if (decreaseSuccess) {\r\n            try\r\n                positionManager.collect(\r\n                    INonfungiblePositionManager.CollectParams({\r\n                        tokenId: _tokenId,\r\n                        recipient: address(this),\r\n                        amount0Max: type(uint128).max,\r\n                        amount1Max: type(uint128).max\r\n                    })\r\n                )\r\n            returns (uint256 a0, uint256 a1) {\r\n                amount0Collected = a0;\r\n                amount1Collected = a1;\r\n                collectSuccess = true;\r\n            } catch {\r\n                // Silent failure, success = false will be returned at the end\r\n            }\r\n\r\n            // Try to burn regardless of collect success\r\n            try positionManager.burn(_tokenId) {} catch {}\r\n        }\r\n\r\n        bool overallSuccess = decreaseSuccess && collectSuccess;\r\n\r\n        // Using helper function to emit event - reducing stack depth\r\n        _emitLiquidityRemoveEvent(\r\n            _tokenId,\r\n            _tickLower,\r\n            _tickUpper,\r\n            _liquidity,\r\n            amount0Collected,\r\n            amount1Collected,\r\n            overallSuccess\r\n        );\r\n    }\r\n\r\n    // Helper function for emitting liquidity mint events - reducing stack depth\r\n    function _emitLiquidityMintEvent(\r\n        uint256 tokenId,\r\n        int24 tickLower,\r\n        int24 tickUpper,\r\n        uint128 liquidity,\r\n        uint256 amount0,\r\n        uint256 amount1,\r\n        bool success\r\n    ) internal {\r\n        emit LiquidityOperation(\r\n            \"MINT\",\r\n            tokenId,\r\n            tickLower,\r\n            tickUpper,\r\n            liquidity,\r\n            amount0,\r\n            amount1,\r\n            success\r\n        );\r\n    }\r\n\r\n    function _mintLiquidity(\r\n        int24 tickLower,\r\n        int24 tickUpper,\r\n        uint256 amount0Desired,\r\n        uint256 amount1Desired\r\n    ) internal {\r\n        require(!currentPosition.active, \"Position already active\");\r\n\r\n        INonfungiblePositionManager.MintParams\r\n            memory params = INonfungiblePositionManager.MintParams({\r\n                token0: token0,\r\n                token1: token1,\r\n                fee: fee,\r\n                tickLower: tickLower,\r\n                tickUpper: tickUpper,\r\n                amount0Desired: amount0Desired,\r\n                amount1Desired: amount1Desired,\r\n                amount0Min: 0,\r\n                amount1Min: 0,\r\n                recipient: address(this),\r\n                deadline: block.timestamp\r\n            });\r\n\r\n        // Execute mint and manage position creation in a separate function\r\n        _executeMint(params, tickLower, tickUpper);\r\n    }\r\n\r\n    function _executeMint(\r\n        INonfungiblePositionManager.MintParams memory params,\r\n        int24 tickLower,\r\n        int24 tickUpper\r\n    ) internal {\r\n        uint256 tokenId = 0;\r\n        uint128 liquidity = 0;\r\n        uint256 amount0Actual = 0;\r\n        uint256 amount1Actual = 0;\r\n        bool success = false;\r\n\r\n        try positionManager.mint(params) returns (\r\n            uint256 _tokenId,\r\n            uint128 _liquidity,\r\n            uint256 _amount0,\r\n            uint256 _amount1\r\n        ) {\r\n            tokenId = _tokenId;\r\n            liquidity = _liquidity;\r\n            amount0Actual = _amount0;\r\n            amount1Actual = _amount1;\r\n\r\n            if (liquidity > 0) {\r\n                currentPosition = Position(\r\n                    tokenId,\r\n                    liquidity,\r\n                    tickLower,\r\n                    tickUpper,\r\n                    true\r\n                );\r\n                success = true;\r\n            } else if (tokenId != 0) {\r\n                try positionManager.burn(tokenId) {} catch {}\r\n            }\r\n        } catch {\r\n            // Silent failure, event will be emitted with success = false\r\n        }\r\n\r\n        // Using helper function to emit event - reducing stack depth\r\n        _emitLiquidityMintEvent(\r\n            tokenId,\r\n            tickLower,\r\n            tickUpper,\r\n            liquidity,\r\n            amount0Actual,\r\n            amount1Actual,\r\n            success\r\n        );\r\n\r\n        if (!success) {\r\n            currentPosition = Position(0, 0, 0, 0, false);\r\n        }\r\n    }\r\n\r\n    // --- Internal Calculation Helpers ---\r\n    function _calculateTicks(\r\n        int24 targetCenterTick\r\n    ) internal view returns (int24 tickLower, int24 tickUpper) {\r\n        require(tickSpacing > 0, \"Invalid tick spacing\");\r\n\r\n        // Calculate half width with better symmetry\r\n        int24 halfWidth = (tickSpacing * int24(rangeWidthMultiplier)) / 2;\r\n        if (halfWidth <= 0) halfWidth = tickSpacing;\r\n\r\n        // Ensure half width is a multiple of tick spacing for perfect symmetry\r\n        halfWidth = (halfWidth / tickSpacing) * tickSpacing;\r\n        if (halfWidth == 0) halfWidth = tickSpacing;\r\n\r\n        // Calculate raw tick boundaries with better centering\r\n        int24 rawTickLower = targetCenterTick - halfWidth;\r\n        int24 rawTickUpper = targetCenterTick + halfWidth;\r\n\r\n        // Align with tick spacing\r\n        tickLower = floorToTickSpacing(rawTickLower, tickSpacing);\r\n        tickUpper = floorToTickSpacing(rawTickUpper, tickSpacing);\r\n\r\n        // If upper tick is not properly spaced after flooring, add another tick spacing\r\n        if ((rawTickUpper % tickSpacing) != 0) {\r\n            tickUpper += tickSpacing;\r\n        }\r\n\r\n        // Ensure proper spacing between ticks\r\n        if (tickLower >= tickUpper) {\r\n            tickUpper = tickLower + tickSpacing;\r\n        }\r\n\r\n        // Ensure ticks are within global range\r\n        tickLower = tickLower < TickMath.MIN_TICK\r\n            ? floorToTickSpacing(TickMath.MIN_TICK, tickSpacing)\r\n            : tickLower;\r\n\r\n        tickUpper = tickUpper > TickMath.MAX_TICK\r\n            ? floorToTickSpacing(TickMath.MAX_TICK, tickSpacing)\r\n            : tickUpper;\r\n\r\n        // Final check to ensure proper ordering\r\n        if (tickLower >= tickUpper) {\r\n            tickUpper = tickLower + tickSpacing;\r\n\r\n            // If upper tick exceeds MAX_TICK, adjust both\r\n            if (tickUpper > TickMath.MAX_TICK) {\r\n                tickUpper = floorToTickSpacing(TickMath.MAX_TICK, tickSpacing);\r\n                tickLower = tickUpper - tickSpacing;\r\n            }\r\n        }\r\n\r\n        return (tickLower, tickUpper);\r\n    }\r\n\r\n    function floorToTickSpacing(\r\n        int24 tick,\r\n        int24 _tickSpacing\r\n    ) internal pure returns (int24) {\r\n        require(_tickSpacing > 0, \"Tick spacing must be positive\");\r\n        int24 compressed = tick / _tickSpacing;\r\n        if (tick < 0 && (tick % _tickSpacing != 0)) {\r\n            compressed--;\r\n        }\r\n        return compressed * _tickSpacing;\r\n    }\r\n\r\n    function _getCurrentSqrtPriceAndTick()\r\n        internal\r\n        view\r\n        returns (uint160 sqrtPriceX96, int24 tick)\r\n    {\r\n        address poolAddress = factory.getPool(token0, token1, fee);\r\n        require(poolAddress != address(0), \"Pool doesn't exist\");\r\n        (sqrtPriceX96, tick, , , , , ) = IUniswapV3Pool(poolAddress).slot0();\r\n    }\r\n\r\n    // Helper function to convert sqrtPriceX96 to price decimal\r\n    function _sqrtPriceX96ToPrice(\r\n        uint160 sqrtPriceX96\r\n    ) internal view returns (uint256) {\r\n        uint256 price = uint256(sqrtPriceX96) * uint256(sqrtPriceX96);\r\n        uint256 adjustedPrice = price >> 192; // Divide by 2^192\r\n\r\n        // Adjust for decimal differences between tokens\r\n        if (token1Decimals > token0Decimals) {\r\n            adjustedPrice =\r\n                adjustedPrice /\r\n                (10 ** (token1Decimals - token0Decimals));\r\n        } else if (token0Decimals > token1Decimals) {\r\n            adjustedPrice =\r\n                adjustedPrice *\r\n                (10 ** (token0Decimals - token1Decimals));\r\n        }\r\n\r\n        return adjustedPrice;\r\n    }\r\n\r\n    function _priceToTick(uint256 priceDecimal) internal view returns (int24) {\r\n        require(priceDecimal > 0, \"Price must be > 0\");\r\n\r\n        // If the input price is ETH/USDC (e.g., 1500)\r\n        // We need to convert it to WETH/USDC (e.g., 1/1500 = 0.00066)\r\n        // To match Uniswap's logic which uses token1/token0 ratio\r\n\r\n        // Calculate inverted price\r\n        uint256 invertedPrice;\r\n        if (priceDecimal > 1e12) {\r\n            // If price is large (if price is ETH/USDC)\r\n            // Invert price with high precision\r\n            // Use 1e36 to maintain precision in division\r\n            invertedPrice = uint256(1e36).div(priceDecimal);\r\n        } else {\r\n            // If price is small (likely already inverted), use it as is\r\n            invertedPrice = priceDecimal;\r\n        }\r\n\r\n        // Adjust for decimal differences\r\n        uint256 numerator = invertedPrice;\r\n        uint256 denominator = 1e18;\r\n\r\n        if (token1Decimals > token0Decimals) {\r\n            numerator = numerator.mul(\r\n                10 ** (uint256(token1Decimals).sub(token0Decimals))\r\n            );\r\n        } else if (token0Decimals > token1Decimals) {\r\n            denominator = denominator.mul(\r\n                10 ** (uint256(token0Decimals).sub(token1Decimals))\r\n            );\r\n        }\r\n\r\n        // Calculate ratioX192 considering inverted price\r\n        uint256 ratioX192 = numerator.mul(1 << 192).div(denominator);\r\n\r\n        uint160 sqrtPriceX96 = uint160(SqrtMath.sqrt(ratioX192));\r\n\r\n        // Check Uniswap constraints\r\n        require(sqrtPriceX96 >= TickMath.MIN_SQRT_RATIO, \"Price too low\");\r\n        require(sqrtPriceX96 <= TickMath.MAX_SQRT_RATIO, \"Price too high\");\r\n\r\n        return TickMath.getTickAtSqrtRatio(sqrtPriceX96);\r\n    }\r\n\r\n    // Helper function to emit prediction metrics event\r\n    function _emitPredictionMetrics(\r\n        uint256 actualPrice,\r\n        uint256 predictedPrice,\r\n        int24 predictedTick,\r\n        int24 finalTickLower,\r\n        int24 finalTickUpper,\r\n        bool adjusted\r\n    ) internal {\r\n        emit PredictionAdjustmentMetrics(\r\n            block.timestamp,\r\n            actualPrice,\r\n            predictedPrice,\r\n            predictedTick,\r\n            finalTickLower,\r\n            finalTickUpper,\r\n            adjusted\r\n        );\r\n    }\r\n\r\n    // Implement IUniswapV3MintCallback interface\r\n    function uniswapV3MintCallback(\r\n        uint256 amount0Owed,\r\n        uint256 amount1Owed,\r\n        bytes calldata data\r\n    ) external override {\r\n        // Verify the caller is the Uniswap V3 position manager\r\n        require(\r\n            msg.sender == address(positionManager),\r\n            \"Unauthorized callback\"\r\n        );\r\n\r\n        // Send the required tokens\r\n        if (amount0Owed > 0) {\r\n            IERC20(token0).safeTransfer(msg.sender, amount0Owed);\r\n        }\r\n        if (amount1Owed > 0) {\r\n            IERC20(token1).safeTransfer(msg.sender, amount1Owed);\r\n        }\r\n    }\r\n}\r\n"},"contracts/TokenOperationsManagerOptimized.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.7.6;\r\npragma abicoder v2;\r\n\r\n// Minimized imports\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\r\nimport \"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\";\r\nimport \"@uniswap/v3-periphery/contracts/interfaces/external/IWETH9.sol\";\r\n\r\n/**\r\n * @title TokenOperationsManagerOptimized\r\n * @notice بهینه‌سازی شده برای کاهش اندازه قرارداد\r\n */\r\ncontract TokenOperationsManagerOptimized is Ownable {\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint256;\r\n\r\n    // Core state variables\r\n    ISwapRouter public immutable swapRouter;\r\n    address public immutable WETH9;\r\n\r\n    // Single combined event for all operations\r\n    event Operation(\r\n        bytes32 indexed opType,\r\n        address indexed tokenA,\r\n        address indexed tokenB,\r\n        uint256 amount\r\n    );\r\n\r\n    constructor(address _swapRouter, address _weth9) {\r\n        swapRouter = ISwapRouter(_swapRouter);\r\n        WETH9 = _weth9;\r\n    }\r\n\r\n    // Optimized swap function\r\n    function swap(\r\n        address tokenIn,\r\n        address tokenOut,\r\n        uint24 poolFee,\r\n        uint256 amountIn,\r\n        uint256 amountOutMin\r\n    ) external onlyOwner returns (uint256 amountOut) {\r\n        // Transfer tokens to contract\r\n        IERC20(tokenIn).safeTransferFrom(msg.sender, address(this), amountIn);\r\n\r\n        // Approve router\r\n        IERC20(tokenIn).safeApprove(address(swapRouter), amountIn);\r\n\r\n        // Execute swap\r\n        ISwapRouter.ExactInputSingleParams memory params = ISwapRouter\r\n            .ExactInputSingleParams({\r\n                tokenIn: tokenIn,\r\n                tokenOut: tokenOut,\r\n                fee: poolFee,\r\n                recipient: address(this),\r\n                deadline: block.timestamp,\r\n                amountIn: amountIn,\r\n                amountOutMinimum: amountOutMin,\r\n                sqrtPriceLimitX96: 0\r\n            });\r\n\r\n        amountOut = swapRouter.exactInputSingle(params);\r\n\r\n        // Reset approval\r\n        IERC20(tokenIn).safeApprove(address(swapRouter), 0);\r\n\r\n        emit Operation(bytes32(\"SWAP\"), tokenIn, tokenOut, amountOut);\r\n\r\n        return amountOut;\r\n    }\r\n\r\n    // Deposit tokens (including ETH via WETH)\r\n    function deposit(address token, uint256 amount) external payable onlyOwner {\r\n        if (token == WETH9) {\r\n            require(msg.value == amount, \"ETH value != amount\");\r\n            IWETH9(WETH9).deposit{value: amount}();\r\n        } else {\r\n            require(msg.value == 0, \"ETH not needed\");\r\n            IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\r\n        }\r\n\r\n        emit Operation(bytes32(\"DEPOSIT\"), token, address(0), amount);\r\n    }\r\n\r\n    // Withdraw tokens (including ETH via WETH)\r\n    function withdraw(address token, uint256 amount) external onlyOwner {\r\n        if (token == WETH9) {\r\n            uint256 balance = IERC20(WETH9).balanceOf(address(this));\r\n            require(balance >= amount, \"Insufficient WETH\");\r\n            IWETH9(WETH9).withdraw(amount);\r\n            payable(msg.sender).transfer(amount);\r\n        } else {\r\n            uint256 balance = IERC20(token).balanceOf(address(this));\r\n            require(balance >= amount, \"Insufficient balance\");\r\n            IERC20(token).safeTransfer(msg.sender, amount);\r\n        }\r\n\r\n        emit Operation(bytes32(\"WITHDRAW\"), token, address(0), amount);\r\n    }\r\n\r\n    // Combined function for handling ETH\r\n    function handleETH(\r\n        bytes32 action,\r\n        uint256 minAmount,\r\n        address recipient\r\n    ) external onlyOwner {\r\n        address payable to = recipient == address(0)\r\n            ? payable(msg.sender)\r\n            : payable(recipient);\r\n\r\n        if (action == bytes32(\"REFUND_ETH\")) {\r\n            uint256 balance = address(this).balance;\r\n            require(balance >= minAmount, \"Insufficient ETH\");\r\n            to.transfer(balance);\r\n            emit Operation(action, address(0), address(0), balance);\r\n        } else if (action == bytes32(\"UNWRAP_WETH\")) {\r\n            uint256 balance = IERC20(WETH9).balanceOf(address(this));\r\n            require(balance >= minAmount, \"Insufficient WETH\");\r\n            IWETH9(WETH9).withdraw(balance);\r\n            to.transfer(balance);\r\n            emit Operation(action, WETH9, address(0), balance);\r\n        } else if (\r\n            action == bytes32(\"SWEEP_TOKEN\") && recipient != address(0)\r\n        ) {\r\n            // The recipient must be provided for this operation\r\n            // This operation is handled separately to avoid stack too deep errors\r\n            revert(\"Use sweepToken function\");\r\n        } else {\r\n            revert(\"Invalid action\");\r\n        }\r\n    }\r\n\r\n    // Separate function for token sweeping to avoid stack too deep\r\n    function sweepToken(\r\n        address token,\r\n        uint256 minAmount,\r\n        address recipient\r\n    ) external onlyOwner {\r\n        require(recipient != address(0), \"Invalid recipient\");\r\n        uint256 balance = IERC20(token).balanceOf(address(this));\r\n        require(balance >= minAmount, \"Insufficient balance\");\r\n        IERC20(token).safeTransfer(recipient, balance);\r\n        emit Operation(bytes32(\"SWEEP_TOKEN\"), token, address(0), balance);\r\n    }\r\n\r\n    // Simplified view functions\r\n    function getBalance(address token) external view returns (uint256) {\r\n        return\r\n            token == address(0)\r\n                ? address(this).balance\r\n                : IERC20(token).balanceOf(address(this));\r\n    }\r\n\r\n    // Required to receive ETH\r\n    receive() external payable {}\r\n}\r\n"}},"settings":{"optimizer":{"enabled":true,"runs":200},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"errors":[{"component":"general","errorCode":"2319","formattedMessage":"contracts/libraries/SqrtMath.sol:82:5: Warning: This declaration shadows a builtin symbol.\n    function log2(uint256 x) internal pure returns (uint256 r) {\n    ^ (Relevant source part starts here and spans across multiple lines).\n","message":"This declaration shadows a builtin symbol.","severity":"warning","sourceLocation":{"end":4341,"file":"contracts/libraries/SqrtMath.sol","start":3253},"type":"Warning"},{"component":"general","errorCode":"8261","formattedMessage":"contracts/libraries/SqrtMath.sol:82:5: Warning: Variable is shadowed in inline assembly by an instruction of the same name\n    function log2(uint256 x) internal pure returns (uint256 r) {\n    ^ (Relevant source part starts here and spans across multiple lines).\n","message":"Variable is shadowed in inline assembly by an instruction of the same name","severity":"warning","sourceLocation":{"end":4341,"file":"contracts/libraries/SqrtMath.sol","start":3253},"type":"Warning"},{"component":"general","errorCode":"2462","formattedMessage":"@openzeppelin/contracts/access/Ownable.sol:26:5: Warning: Visibility for constructor is ignored. If you want the contract to be non-deployable, making it \"abstract\" is sufficient.\n    constructor () internal {\n    ^ (Relevant source part starts here and spans across multiple lines).\n","message":"Visibility for constructor is ignored. If you want the contract to be non-deployable, making it \"abstract\" is sufficient.","severity":"warning","sourceLocation":{"end":1009,"file":"@openzeppelin/contracts/access/Ownable.sol","start":850},"type":"Warning"},{"component":"general","errorCode":"2462","formattedMessage":"@openzeppelin/contracts/utils/ReentrancyGuard.sol:38:5: Warning: Visibility for constructor is ignored. If you want the contract to be non-deployable, making it \"abstract\" is sufficient.\n    constructor () internal {\n    ^ (Relevant source part starts here and spans across multiple lines).\n","message":"Visibility for constructor is ignored. If you want the contract to be non-deployable, making it \"abstract\" is sufficient.","severity":"warning","sourceLocation":{"end":1789,"file":"@openzeppelin/contracts/utils/ReentrancyGuard.sol","start":1726},"type":"Warning"},{"component":"general","errorCode":"2072","formattedMessage":"contracts/PredictiveLiquidityManager.sol:154:13: Warning: Unused local variable.\n            int24 currentTick,\n            ^---------------^\n","message":"Unused local variable.","severity":"warning","sourceLocation":{"end":4927,"file":"contracts/PredictiveLiquidityManager.sol","start":4910},"type":"Warning"},{"component":"general","errorCode":"5667","formattedMessage":"contracts/PredictiveLiquidityManager.sol:617:9: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\n        bytes calldata data\n        ^-----------------^\n","message":"Unused function parameter. Remove or comment out the variable name to silence this warning.","severity":"warning","sourceLocation":{"end":20402,"file":"contracts/PredictiveLiquidityManager.sol","start":20383},"type":"Warning"}],"sources":{"@openzeppelin/contracts/access/Ownable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/access/Ownable.sol","exportedSymbols":{"Context":[1260],"Ownable":[109]},"id":110,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity",">=","0.6",".0","<","0.8",".0"],"nodeType":"PragmaDirective","src":"33:31:0"},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"../utils/Context.sol","id":2,"nodeType":"ImportDirective","scope":110,"sourceUnit":1261,"src":"66:30:0","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":4,"name":"Context","nodeType":"UserDefinedTypeName","referencedDeclaration":1260,"src":"621:7:0","typeDescriptions":{"typeIdentifier":"t_contract$_Context_$1260","typeString":"contract Context"}},"id":5,"nodeType":"InheritanceSpecifier","src":"621:7:0"}],"contractDependencies":[1260],"contractKind":"contract","documentation":{"id":3,"nodeType":"StructuredDocumentation","src":"97:494:0","text":" @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n By default, the owner account will be the one that deploys the contract. This\n can later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."},"fullyImplemented":true,"id":109,"linearizedBaseContracts":[109,1260],"name":"Ownable","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":7,"mutability":"mutable","name":"_owner","nodeType":"VariableDeclaration","scope":109,"src":"635:22:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6,"name":"address","nodeType":"ElementaryTypeName","src":"635:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"anonymous":false,"id":13,"name":"OwnershipTransferred","nodeType":"EventDefinition","parameters":{"id":12,"nodeType":"ParameterList","parameters":[{"constant":false,"id":9,"indexed":true,"mutability":"mutable","name":"previousOwner","nodeType":"VariableDeclaration","scope":13,"src":"691:29:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":8,"name":"address","nodeType":"ElementaryTypeName","src":"691:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":11,"indexed":true,"mutability":"mutable","name":"newOwner","nodeType":"VariableDeclaration","scope":13,"src":"722:24:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":10,"name":"address","nodeType":"ElementaryTypeName","src":"722:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"690:57:0"},"src":"664:84:0"},{"body":{"id":34,"nodeType":"Block","src":"874:135:0","statements":[{"assignments":[18],"declarations":[{"constant":false,"id":18,"mutability":"mutable","name":"msgSender","nodeType":"VariableDeclaration","scope":34,"src":"884:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":17,"name":"address","nodeType":"ElementaryTypeName","src":"884:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":21,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":19,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1248,"src":"904:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_payable_$","typeString":"function () view returns (address payable)"}},"id":20,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"904:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"nodeType":"VariableDeclarationStatement","src":"884:32:0"},{"expression":{"id":24,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":22,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7,"src":"926:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":23,"name":"msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":18,"src":"935:9:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"926:18:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":25,"nodeType":"ExpressionStatement","src":"926:18:0"},{"eventCall":{"arguments":[{"arguments":[{"hexValue":"30","id":29,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"988:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":28,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"980:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":27,"name":"address","nodeType":"ElementaryTypeName","src":"980:7:0","typeDescriptions":{}}},"id":30,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"980:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"id":31,"name":"msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":18,"src":"992:9:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_address","typeString":"address"}],"id":26,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":13,"src":"959:20:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":32,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"959:43:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":33,"nodeType":"EmitStatement","src":"954:48:0"}]},"documentation":{"id":14,"nodeType":"StructuredDocumentation","src":"754:91:0","text":" @dev Initializes the contract setting the deployer as the initial owner."},"id":35,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nodeType":"FunctionDefinition","parameters":{"id":15,"nodeType":"ParameterList","parameters":[],"src":"862:2:0"},"returnParameters":{"id":16,"nodeType":"ParameterList","parameters":[],"src":"874:0:0"},"scope":109,"src":"850:159:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":43,"nodeType":"Block","src":"1140:30:0","statements":[{"expression":{"id":41,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7,"src":"1157:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":40,"id":42,"nodeType":"Return","src":"1150:13:0"}]},"documentation":{"id":36,"nodeType":"StructuredDocumentation","src":"1015:65:0","text":" @dev Returns the address of the current owner."},"functionSelector":"8da5cb5b","id":44,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nodeType":"FunctionDefinition","parameters":{"id":37,"nodeType":"ParameterList","parameters":[],"src":"1099:2:0"},"returnParameters":{"id":40,"nodeType":"ParameterList","parameters":[{"constant":false,"id":39,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":44,"src":"1131:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":38,"name":"address","nodeType":"ElementaryTypeName","src":"1131:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1130:9:0"},"scope":109,"src":"1085:85:0","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":57,"nodeType":"Block","src":"1279:96:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":52,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":48,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44,"src":"1297:5:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":49,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1297:7:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":50,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1248,"src":"1308:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_payable_$","typeString":"function () view returns (address payable)"}},"id":51,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1308:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"1297:23:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","id":53,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1322:34:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""},"value":"Ownable: caller is not the owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""}],"id":47,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1289:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":54,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1289:68:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":55,"nodeType":"ExpressionStatement","src":"1289:68:0"},{"id":56,"nodeType":"PlaceholderStatement","src":"1367:1:0"}]},"documentation":{"id":45,"nodeType":"StructuredDocumentation","src":"1176:77:0","text":" @dev Throws if called by any account other than the owner."},"id":58,"name":"onlyOwner","nodeType":"ModifierDefinition","parameters":{"id":46,"nodeType":"ParameterList","parameters":[],"src":"1276:2:0"},"src":"1258:117:0","virtual":false,"visibility":"internal"},{"body":{"id":79,"nodeType":"Block","src":"1771:91:0","statements":[{"eventCall":{"arguments":[{"id":65,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7,"src":"1807:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":68,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1823:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":67,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1815:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":66,"name":"address","nodeType":"ElementaryTypeName","src":"1815:7:0","typeDescriptions":{}}},"id":69,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1815:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address_payable","typeString":"address payable"}],"id":64,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":13,"src":"1786:20:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":70,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1786:40:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":71,"nodeType":"EmitStatement","src":"1781:45:0"},{"expression":{"id":77,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":72,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7,"src":"1836:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"hexValue":"30","id":75,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1853:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":74,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1845:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":73,"name":"address","nodeType":"ElementaryTypeName","src":"1845:7:0","typeDescriptions":{}}},"id":76,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1845:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"1836:19:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":78,"nodeType":"ExpressionStatement","src":"1836:19:0"}]},"documentation":{"id":59,"nodeType":"StructuredDocumentation","src":"1381:331:0","text":" @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions anymore. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby removing any functionality that is only available to the owner."},"functionSelector":"715018a6","id":80,"implemented":true,"kind":"function","modifiers":[{"id":62,"modifierName":{"id":61,"name":"onlyOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":58,"src":"1761:9:0","typeDescriptions":{"typeIdentifier":"t_modifier$__$","typeString":"modifier ()"}},"nodeType":"ModifierInvocation","src":"1761:9:0"}],"name":"renounceOwnership","nodeType":"FunctionDefinition","parameters":{"id":60,"nodeType":"ParameterList","parameters":[],"src":"1743:2:0"},"returnParameters":{"id":63,"nodeType":"ParameterList","parameters":[],"src":"1771:0:0"},"scope":109,"src":"1717:145:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":107,"nodeType":"Block","src":"2081:170:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":94,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":89,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":83,"src":"2099:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":92,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2119:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":91,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2111:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":90,"name":"address","nodeType":"ElementaryTypeName","src":"2111:7:0","typeDescriptions":{}}},"id":93,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2111:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"2099:22:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373","id":95,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2123:40:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","typeString":"literal_string \"Ownable: new owner is the zero address\""},"value":"Ownable: new owner is the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","typeString":"literal_string \"Ownable: new owner is the zero address\""}],"id":88,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2091:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":96,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2091:73:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":97,"nodeType":"ExpressionStatement","src":"2091:73:0"},{"eventCall":{"arguments":[{"id":99,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7,"src":"2200:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":100,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":83,"src":"2208:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":98,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":13,"src":"2179:20:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":101,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2179:38:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":102,"nodeType":"EmitStatement","src":"2174:43:0"},{"expression":{"id":105,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":103,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7,"src":"2227:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":104,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":83,"src":"2236:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2227:17:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":106,"nodeType":"ExpressionStatement","src":"2227:17:0"}]},"documentation":{"id":81,"nodeType":"StructuredDocumentation","src":"1868:138:0","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."},"functionSelector":"f2fde38b","id":108,"implemented":true,"kind":"function","modifiers":[{"id":86,"modifierName":{"id":85,"name":"onlyOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":58,"src":"2071:9:0","typeDescriptions":{"typeIdentifier":"t_modifier$__$","typeString":"modifier ()"}},"nodeType":"ModifierInvocation","src":"2071:9:0"}],"name":"transferOwnership","nodeType":"FunctionDefinition","parameters":{"id":84,"nodeType":"ParameterList","parameters":[{"constant":false,"id":83,"mutability":"mutable","name":"newOwner","nodeType":"VariableDeclaration","scope":108,"src":"2038:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":82,"name":"address","nodeType":"ElementaryTypeName","src":"2038:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2037:18:0"},"returnParameters":{"id":87,"nodeType":"ParameterList","parameters":[],"src":"2081:0:0"},"scope":109,"src":"2011:240:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"}],"scope":110,"src":"592:1661:0"}],"src":"33:2221:0"},"id":0},"@openzeppelin/contracts/introspection/IERC165.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/introspection/IERC165.sol","exportedSymbols":{"IERC165":[121]},"id":122,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":111,"literals":["solidity",">=","0.6",".0","<","0.8",".0"],"nodeType":"PragmaDirective","src":"33:31:1"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","documentation":{"id":112,"nodeType":"StructuredDocumentation","src":"66:279:1","text":" @dev Interface of the ERC165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[EIP].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."},"fullyImplemented":false,"id":121,"linearizedBaseContracts":[121],"name":"IERC165","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":113,"nodeType":"StructuredDocumentation","src":"370:340:1","text":" @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."},"functionSelector":"01ffc9a7","id":120,"implemented":false,"kind":"function","modifiers":[],"name":"supportsInterface","nodeType":"FunctionDefinition","parameters":{"id":116,"nodeType":"ParameterList","parameters":[{"constant":false,"id":115,"mutability":"mutable","name":"interfaceId","nodeType":"VariableDeclaration","scope":120,"src":"742:18:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":114,"name":"bytes4","nodeType":"ElementaryTypeName","src":"742:6:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"741:20:1"},"returnParameters":{"id":119,"nodeType":"ParameterList","parameters":[{"constant":false,"id":118,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":120,"src":"785:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":117,"name":"bool","nodeType":"ElementaryTypeName","src":"785:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"784:6:1"},"scope":121,"src":"715:76:1","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":122,"src":"346:447:1"}],"src":"33:761:1"},"id":1},"@openzeppelin/contracts/math/SafeMath.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/math/SafeMath.sol","exportedSymbols":{"SafeMath":[476]},"id":477,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":123,"literals":["solidity",">=","0.6",".0","<","0.8",".0"],"nodeType":"PragmaDirective","src":"33:31:2"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"library","documentation":{"id":124,"nodeType":"StructuredDocumentation","src":"66:563:2","text":" @dev Wrappers over Solidity's arithmetic operations with added overflow\n checks.\n Arithmetic operations in Solidity wrap on overflow. This can easily result\n in bugs, because programmers usually assume that an overflow raises an\n error, which is the standard behavior in high level programming languages.\n `SafeMath` restores this intuition by reverting the transaction when an\n operation overflows.\n Using this library instead of the unchecked operations eliminates an entire\n class of bugs, so it's recommended to use it always."},"fullyImplemented":true,"id":476,"linearizedBaseContracts":[476],"name":"SafeMath","nodeType":"ContractDefinition","nodes":[{"body":{"id":154,"nodeType":"Block","src":"865:98:2","statements":[{"assignments":[137],"declarations":[{"constant":false,"id":137,"mutability":"mutable","name":"c","nodeType":"VariableDeclaration","scope":154,"src":"875:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":136,"name":"uint256","nodeType":"ElementaryTypeName","src":"875:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":141,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":140,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":138,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":127,"src":"887:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":139,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":129,"src":"891:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"887:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"875:17:2"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":144,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":142,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":137,"src":"906:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":143,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":127,"src":"910:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"906:5:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":149,"nodeType":"IfStatement","src":"902:28:2","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":145,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"921:5:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":146,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"928:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":147,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"920:10:2","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":135,"id":148,"nodeType":"Return","src":"913:17:2"}},{"expression":{"components":[{"hexValue":"74727565","id":150,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"948:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"id":151,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":137,"src":"954:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":152,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"947:9:2","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":135,"id":153,"nodeType":"Return","src":"940:16:2"}]},"documentation":{"id":125,"nodeType":"StructuredDocumentation","src":"653:131:2","text":" @dev Returns the addition of two unsigned integers, with an overflow flag.\n _Available since v3.4._"},"id":155,"implemented":true,"kind":"function","modifiers":[],"name":"tryAdd","nodeType":"FunctionDefinition","parameters":{"id":130,"nodeType":"ParameterList","parameters":[{"constant":false,"id":127,"mutability":"mutable","name":"a","nodeType":"VariableDeclaration","scope":155,"src":"805:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":126,"name":"uint256","nodeType":"ElementaryTypeName","src":"805:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":129,"mutability":"mutable","name":"b","nodeType":"VariableDeclaration","scope":155,"src":"816:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":128,"name":"uint256","nodeType":"ElementaryTypeName","src":"816:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"804:22:2"},"returnParameters":{"id":135,"nodeType":"ParameterList","parameters":[{"constant":false,"id":132,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":155,"src":"850:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":131,"name":"bool","nodeType":"ElementaryTypeName","src":"850:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":134,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":155,"src":"856:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":133,"name":"uint256","nodeType":"ElementaryTypeName","src":"856:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"849:15:2"},"scope":476,"src":"789:174:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":181,"nodeType":"Block","src":"1185:75:2","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":169,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":167,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":160,"src":"1199:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":168,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":158,"src":"1203:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1199:5:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":174,"nodeType":"IfStatement","src":"1195:28:2","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":170,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1214:5:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":171,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1221:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":172,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1213:10:2","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":166,"id":173,"nodeType":"Return","src":"1206:17:2"}},{"expression":{"components":[{"hexValue":"74727565","id":175,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1241:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":178,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":176,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":158,"src":"1247:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":177,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":160,"src":"1251:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1247:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":179,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1240:13:2","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":166,"id":180,"nodeType":"Return","src":"1233:20:2"}]},"documentation":{"id":156,"nodeType":"StructuredDocumentation","src":"969:135:2","text":" @dev Returns the substraction of two unsigned integers, with an overflow flag.\n _Available since v3.4._"},"id":182,"implemented":true,"kind":"function","modifiers":[],"name":"trySub","nodeType":"FunctionDefinition","parameters":{"id":161,"nodeType":"ParameterList","parameters":[{"constant":false,"id":158,"mutability":"mutable","name":"a","nodeType":"VariableDeclaration","scope":182,"src":"1125:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":157,"name":"uint256","nodeType":"ElementaryTypeName","src":"1125:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":160,"mutability":"mutable","name":"b","nodeType":"VariableDeclaration","scope":182,"src":"1136:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":159,"name":"uint256","nodeType":"ElementaryTypeName","src":"1136:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1124:22:2"},"returnParameters":{"id":166,"nodeType":"ParameterList","parameters":[{"constant":false,"id":163,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":182,"src":"1170:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":162,"name":"bool","nodeType":"ElementaryTypeName","src":"1170:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":165,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":182,"src":"1176:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":164,"name":"uint256","nodeType":"ElementaryTypeName","src":"1176:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1169:15:2"},"scope":476,"src":"1109:151:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":222,"nodeType":"Block","src":"1484:359:2","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":196,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":194,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":185,"src":"1716:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":195,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1721:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1716:6:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":201,"nodeType":"IfStatement","src":"1712:28:2","trueBody":{"expression":{"components":[{"hexValue":"74727565","id":197,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1732:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"hexValue":"30","id":198,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1738:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":199,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1731:9:2","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":193,"id":200,"nodeType":"Return","src":"1724:16:2"}},{"assignments":[203],"declarations":[{"constant":false,"id":203,"mutability":"mutable","name":"c","nodeType":"VariableDeclaration","scope":222,"src":"1750:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":202,"name":"uint256","nodeType":"ElementaryTypeName","src":"1750:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":207,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":206,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":204,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":185,"src":"1762:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":205,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":187,"src":"1766:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1762:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1750:17:2"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":212,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":210,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":208,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":203,"src":"1781:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":209,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":185,"src":"1785:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1781:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":211,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":187,"src":"1790:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1781:10:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":217,"nodeType":"IfStatement","src":"1777:33:2","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":213,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1801:5:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":214,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1808:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":215,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1800:10:2","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":193,"id":216,"nodeType":"Return","src":"1793:17:2"}},{"expression":{"components":[{"hexValue":"74727565","id":218,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1828:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"id":219,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":203,"src":"1834:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":220,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1827:9:2","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":193,"id":221,"nodeType":"Return","src":"1820:16:2"}]},"documentation":{"id":183,"nodeType":"StructuredDocumentation","src":"1266:137:2","text":" @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n _Available since v3.4._"},"id":223,"implemented":true,"kind":"function","modifiers":[],"name":"tryMul","nodeType":"FunctionDefinition","parameters":{"id":188,"nodeType":"ParameterList","parameters":[{"constant":false,"id":185,"mutability":"mutable","name":"a","nodeType":"VariableDeclaration","scope":223,"src":"1424:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":184,"name":"uint256","nodeType":"ElementaryTypeName","src":"1424:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":187,"mutability":"mutable","name":"b","nodeType":"VariableDeclaration","scope":223,"src":"1435:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":186,"name":"uint256","nodeType":"ElementaryTypeName","src":"1435:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1423:22:2"},"returnParameters":{"id":193,"nodeType":"ParameterList","parameters":[{"constant":false,"id":190,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":223,"src":"1469:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":189,"name":"bool","nodeType":"ElementaryTypeName","src":"1469:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":192,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":223,"src":"1475:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":191,"name":"uint256","nodeType":"ElementaryTypeName","src":"1475:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1468:15:2"},"scope":476,"src":"1408:435:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":249,"nodeType":"Block","src":"2068:76:2","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":237,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":235,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":228,"src":"2082:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":236,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2087:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2082:6:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":242,"nodeType":"IfStatement","src":"2078:29:2","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":238,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2098:5:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":239,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2105:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":240,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"2097:10:2","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":234,"id":241,"nodeType":"Return","src":"2090:17:2"}},{"expression":{"components":[{"hexValue":"74727565","id":243,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2125:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":246,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":244,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":226,"src":"2131:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":245,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":228,"src":"2135:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2131:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":247,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2124:13:2","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":234,"id":248,"nodeType":"Return","src":"2117:20:2"}]},"documentation":{"id":224,"nodeType":"StructuredDocumentation","src":"1849:138:2","text":" @dev Returns the division of two unsigned integers, with a division by zero flag.\n _Available since v3.4._"},"id":250,"implemented":true,"kind":"function","modifiers":[],"name":"tryDiv","nodeType":"FunctionDefinition","parameters":{"id":229,"nodeType":"ParameterList","parameters":[{"constant":false,"id":226,"mutability":"mutable","name":"a","nodeType":"VariableDeclaration","scope":250,"src":"2008:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":225,"name":"uint256","nodeType":"ElementaryTypeName","src":"2008:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":228,"mutability":"mutable","name":"b","nodeType":"VariableDeclaration","scope":250,"src":"2019:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":227,"name":"uint256","nodeType":"ElementaryTypeName","src":"2019:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2007:22:2"},"returnParameters":{"id":234,"nodeType":"ParameterList","parameters":[{"constant":false,"id":231,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":250,"src":"2053:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":230,"name":"bool","nodeType":"ElementaryTypeName","src":"2053:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":233,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":250,"src":"2059:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":232,"name":"uint256","nodeType":"ElementaryTypeName","src":"2059:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2052:15:2"},"scope":476,"src":"1992:152:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":276,"nodeType":"Block","src":"2379:76:2","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":264,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":262,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":255,"src":"2393:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":263,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2398:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2393:6:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":269,"nodeType":"IfStatement","src":"2389:29:2","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":265,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2409:5:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":266,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2416:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":267,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"2408:10:2","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":261,"id":268,"nodeType":"Return","src":"2401:17:2"}},{"expression":{"components":[{"hexValue":"74727565","id":270,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2436:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":273,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":271,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":253,"src":"2442:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"id":272,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":255,"src":"2446:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2442:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":274,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2435:13:2","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":261,"id":275,"nodeType":"Return","src":"2428:20:2"}]},"documentation":{"id":251,"nodeType":"StructuredDocumentation","src":"2150:148:2","text":" @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n _Available since v3.4._"},"id":277,"implemented":true,"kind":"function","modifiers":[],"name":"tryMod","nodeType":"FunctionDefinition","parameters":{"id":256,"nodeType":"ParameterList","parameters":[{"constant":false,"id":253,"mutability":"mutable","name":"a","nodeType":"VariableDeclaration","scope":277,"src":"2319:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":252,"name":"uint256","nodeType":"ElementaryTypeName","src":"2319:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":255,"mutability":"mutable","name":"b","nodeType":"VariableDeclaration","scope":277,"src":"2330:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":254,"name":"uint256","nodeType":"ElementaryTypeName","src":"2330:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2318:22:2"},"returnParameters":{"id":261,"nodeType":"ParameterList","parameters":[{"constant":false,"id":258,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":277,"src":"2364:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":257,"name":"bool","nodeType":"ElementaryTypeName","src":"2364:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":260,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":277,"src":"2370:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":259,"name":"uint256","nodeType":"ElementaryTypeName","src":"2370:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2363:15:2"},"scope":476,"src":"2303:152:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":302,"nodeType":"Block","src":"2757:108:2","statements":[{"assignments":[288],"declarations":[{"constant":false,"id":288,"mutability":"mutable","name":"c","nodeType":"VariableDeclaration","scope":302,"src":"2767:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":287,"name":"uint256","nodeType":"ElementaryTypeName","src":"2767:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":292,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":291,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":289,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":280,"src":"2779:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":290,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":282,"src":"2783:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2779:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2767:17:2"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":296,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":294,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":288,"src":"2802:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":295,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":280,"src":"2807:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2802:6:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"536166654d6174683a206164646974696f6e206f766572666c6f77","id":297,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2810:29:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_30cc447bcc13b3e22b45cef0dd9b0b514842d836dd9b6eb384e20dedfb47723a","typeString":"literal_string \"SafeMath: addition overflow\""},"value":"SafeMath: addition overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_30cc447bcc13b3e22b45cef0dd9b0b514842d836dd9b6eb384e20dedfb47723a","typeString":"literal_string \"SafeMath: addition overflow\""}],"id":293,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2794:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":298,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2794:46:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":299,"nodeType":"ExpressionStatement","src":"2794:46:2"},{"expression":{"id":300,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":288,"src":"2857:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":286,"id":301,"nodeType":"Return","src":"2850:8:2"}]},"documentation":{"id":278,"nodeType":"StructuredDocumentation","src":"2461:224:2","text":" @dev Returns the addition of two unsigned integers, reverting on\n overflow.\n Counterpart to Solidity's `+` operator.\n Requirements:\n - Addition cannot overflow."},"id":303,"implemented":true,"kind":"function","modifiers":[],"name":"add","nodeType":"FunctionDefinition","parameters":{"id":283,"nodeType":"ParameterList","parameters":[{"constant":false,"id":280,"mutability":"mutable","name":"a","nodeType":"VariableDeclaration","scope":303,"src":"2703:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":279,"name":"uint256","nodeType":"ElementaryTypeName","src":"2703:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":282,"mutability":"mutable","name":"b","nodeType":"VariableDeclaration","scope":303,"src":"2714:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":281,"name":"uint256","nodeType":"ElementaryTypeName","src":"2714:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2702:22:2"},"returnParameters":{"id":286,"nodeType":"ParameterList","parameters":[{"constant":false,"id":285,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":303,"src":"2748:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":284,"name":"uint256","nodeType":"ElementaryTypeName","src":"2748:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2747:9:2"},"scope":476,"src":"2690:175:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":324,"nodeType":"Block","src":"3203:88:2","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":316,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":314,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":308,"src":"3221:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":315,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":306,"src":"3226:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3221:6:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"536166654d6174683a207375627472616374696f6e206f766572666c6f77","id":317,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3229:32:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_50b058e9b5320e58880d88223c9801cd9eecdcf90323d5c2318bc1b6b916e862","typeString":"literal_string \"SafeMath: subtraction overflow\""},"value":"SafeMath: subtraction overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_50b058e9b5320e58880d88223c9801cd9eecdcf90323d5c2318bc1b6b916e862","typeString":"literal_string \"SafeMath: subtraction overflow\""}],"id":313,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3213:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":318,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3213:49:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":319,"nodeType":"ExpressionStatement","src":"3213:49:2"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":322,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":320,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":306,"src":"3279:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":321,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":308,"src":"3283:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3279:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":312,"id":323,"nodeType":"Return","src":"3272:12:2"}]},"documentation":{"id":304,"nodeType":"StructuredDocumentation","src":"2871:260:2","text":" @dev Returns the subtraction of two unsigned integers, reverting on\n overflow (when the result is negative).\n Counterpart to Solidity's `-` operator.\n Requirements:\n - Subtraction cannot overflow."},"id":325,"implemented":true,"kind":"function","modifiers":[],"name":"sub","nodeType":"FunctionDefinition","parameters":{"id":309,"nodeType":"ParameterList","parameters":[{"constant":false,"id":306,"mutability":"mutable","name":"a","nodeType":"VariableDeclaration","scope":325,"src":"3149:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":305,"name":"uint256","nodeType":"ElementaryTypeName","src":"3149:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":308,"mutability":"mutable","name":"b","nodeType":"VariableDeclaration","scope":325,"src":"3160:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":307,"name":"uint256","nodeType":"ElementaryTypeName","src":"3160:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3148:22:2"},"returnParameters":{"id":312,"nodeType":"ParameterList","parameters":[{"constant":false,"id":311,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":325,"src":"3194:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":310,"name":"uint256","nodeType":"ElementaryTypeName","src":"3194:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3193:9:2"},"scope":476,"src":"3136:155:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":358,"nodeType":"Block","src":"3605:148:2","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":337,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":335,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":328,"src":"3619:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":336,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3624:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3619:6:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":340,"nodeType":"IfStatement","src":"3615:20:2","trueBody":{"expression":{"hexValue":"30","id":338,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3634:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":334,"id":339,"nodeType":"Return","src":"3627:8:2"}},{"assignments":[342],"declarations":[{"constant":false,"id":342,"mutability":"mutable","name":"c","nodeType":"VariableDeclaration","scope":358,"src":"3645:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":341,"name":"uint256","nodeType":"ElementaryTypeName","src":"3645:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":346,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":345,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":343,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":328,"src":"3657:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":344,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":330,"src":"3661:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3657:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3645:17:2"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":352,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":350,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":348,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":342,"src":"3680:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":349,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":328,"src":"3684:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3680:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":351,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":330,"src":"3689:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3680:10:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77","id":353,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3692:35:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_9113bb53c2876a3805b2c9242029423fc540a728243ce887ab24c82cf119fba3","typeString":"literal_string \"SafeMath: multiplication overflow\""},"value":"SafeMath: multiplication overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9113bb53c2876a3805b2c9242029423fc540a728243ce887ab24c82cf119fba3","typeString":"literal_string \"SafeMath: multiplication overflow\""}],"id":347,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3672:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":354,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3672:56:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":355,"nodeType":"ExpressionStatement","src":"3672:56:2"},{"expression":{"id":356,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":342,"src":"3745:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":334,"id":357,"nodeType":"Return","src":"3738:8:2"}]},"documentation":{"id":326,"nodeType":"StructuredDocumentation","src":"3297:236:2","text":" @dev Returns the multiplication of two unsigned integers, reverting on\n overflow.\n Counterpart to Solidity's `*` operator.\n Requirements:\n - Multiplication cannot overflow."},"id":359,"implemented":true,"kind":"function","modifiers":[],"name":"mul","nodeType":"FunctionDefinition","parameters":{"id":331,"nodeType":"ParameterList","parameters":[{"constant":false,"id":328,"mutability":"mutable","name":"a","nodeType":"VariableDeclaration","scope":359,"src":"3551:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":327,"name":"uint256","nodeType":"ElementaryTypeName","src":"3551:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":330,"mutability":"mutable","name":"b","nodeType":"VariableDeclaration","scope":359,"src":"3562:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":329,"name":"uint256","nodeType":"ElementaryTypeName","src":"3562:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3550:22:2"},"returnParameters":{"id":334,"nodeType":"ParameterList","parameters":[{"constant":false,"id":333,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":359,"src":"3596:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":332,"name":"uint256","nodeType":"ElementaryTypeName","src":"3596:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3595:9:2"},"scope":476,"src":"3538:215:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":380,"nodeType":"Block","src":"4284:83:2","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":372,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":370,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":364,"src":"4302:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":371,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4306:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4302:5:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"536166654d6174683a206469766973696f6e206279207a65726f","id":373,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4309:28:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_5b7cc70dda4dc2143e5adb63bd5d1f349504f461dbdfd9bc76fac1f8ca6d019f","typeString":"literal_string \"SafeMath: division by zero\""},"value":"SafeMath: division by zero"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5b7cc70dda4dc2143e5adb63bd5d1f349504f461dbdfd9bc76fac1f8ca6d019f","typeString":"literal_string \"SafeMath: division by zero\""}],"id":369,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4294:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":374,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4294:44:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":375,"nodeType":"ExpressionStatement","src":"4294:44:2"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":378,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":376,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":362,"src":"4355:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":377,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":364,"src":"4359:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4355:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":368,"id":379,"nodeType":"Return","src":"4348:12:2"}]},"documentation":{"id":360,"nodeType":"StructuredDocumentation","src":"3759:453:2","text":" @dev Returns the integer division of two unsigned integers, reverting on\n division by zero. The result is rounded towards zero.\n Counterpart to Solidity's `/` operator. Note: this function uses a\n `revert` opcode (which leaves remaining gas untouched) while Solidity\n uses an invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."},"id":381,"implemented":true,"kind":"function","modifiers":[],"name":"div","nodeType":"FunctionDefinition","parameters":{"id":365,"nodeType":"ParameterList","parameters":[{"constant":false,"id":362,"mutability":"mutable","name":"a","nodeType":"VariableDeclaration","scope":381,"src":"4230:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":361,"name":"uint256","nodeType":"ElementaryTypeName","src":"4230:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":364,"mutability":"mutable","name":"b","nodeType":"VariableDeclaration","scope":381,"src":"4241:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":363,"name":"uint256","nodeType":"ElementaryTypeName","src":"4241:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4229:22:2"},"returnParameters":{"id":368,"nodeType":"ParameterList","parameters":[{"constant":false,"id":367,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":381,"src":"4275:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":366,"name":"uint256","nodeType":"ElementaryTypeName","src":"4275:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4274:9:2"},"scope":476,"src":"4217:150:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":402,"nodeType":"Block","src":"4887:81:2","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":394,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":392,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":386,"src":"4905:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":393,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4909:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4905:5:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"536166654d6174683a206d6f64756c6f206279207a65726f","id":395,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4912:26:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_726e51f7b81fce0a68f5f214f445e275313b20b1633f08ce954ee39abf8d7832","typeString":"literal_string \"SafeMath: modulo by zero\""},"value":"SafeMath: modulo by zero"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_726e51f7b81fce0a68f5f214f445e275313b20b1633f08ce954ee39abf8d7832","typeString":"literal_string \"SafeMath: modulo by zero\""}],"id":391,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4897:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":396,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4897:42:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":397,"nodeType":"ExpressionStatement","src":"4897:42:2"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":400,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":398,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":384,"src":"4956:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"id":399,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":386,"src":"4960:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4956:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":390,"id":401,"nodeType":"Return","src":"4949:12:2"}]},"documentation":{"id":382,"nodeType":"StructuredDocumentation","src":"4373:442:2","text":" @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n reverting when dividing by zero.\n Counterpart to Solidity's `%` operator. This function uses a `revert`\n opcode (which leaves remaining gas untouched) while Solidity uses an\n invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."},"id":403,"implemented":true,"kind":"function","modifiers":[],"name":"mod","nodeType":"FunctionDefinition","parameters":{"id":387,"nodeType":"ParameterList","parameters":[{"constant":false,"id":384,"mutability":"mutable","name":"a","nodeType":"VariableDeclaration","scope":403,"src":"4833:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":383,"name":"uint256","nodeType":"ElementaryTypeName","src":"4833:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":386,"mutability":"mutable","name":"b","nodeType":"VariableDeclaration","scope":403,"src":"4844:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":385,"name":"uint256","nodeType":"ElementaryTypeName","src":"4844:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4832:22:2"},"returnParameters":{"id":390,"nodeType":"ParameterList","parameters":[{"constant":false,"id":389,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":403,"src":"4878:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":388,"name":"uint256","nodeType":"ElementaryTypeName","src":"4878:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4877:9:2"},"scope":476,"src":"4820:148:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":426,"nodeType":"Block","src":"5527:68:2","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":418,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":416,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":408,"src":"5545:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":417,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":406,"src":"5550:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5545:6:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":419,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":410,"src":"5553:12:2","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":415,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5537:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":420,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5537:29:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":421,"nodeType":"ExpressionStatement","src":"5537:29:2"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":424,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":422,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":406,"src":"5583:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":423,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":408,"src":"5587:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5583:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":414,"id":425,"nodeType":"Return","src":"5576:12:2"}]},"documentation":{"id":404,"nodeType":"StructuredDocumentation","src":"4974:453:2","text":" @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n overflow (when the result is negative).\n CAUTION: This function is deprecated because it requires allocating memory for the error\n message unnecessarily. For custom revert reasons use {trySub}.\n Counterpart to Solidity's `-` operator.\n Requirements:\n - Subtraction cannot overflow."},"id":427,"implemented":true,"kind":"function","modifiers":[],"name":"sub","nodeType":"FunctionDefinition","parameters":{"id":411,"nodeType":"ParameterList","parameters":[{"constant":false,"id":406,"mutability":"mutable","name":"a","nodeType":"VariableDeclaration","scope":427,"src":"5445:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":405,"name":"uint256","nodeType":"ElementaryTypeName","src":"5445:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":408,"mutability":"mutable","name":"b","nodeType":"VariableDeclaration","scope":427,"src":"5456:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":407,"name":"uint256","nodeType":"ElementaryTypeName","src":"5456:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":410,"mutability":"mutable","name":"errorMessage","nodeType":"VariableDeclaration","scope":427,"src":"5467:26:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":409,"name":"string","nodeType":"ElementaryTypeName","src":"5467:6:2","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5444:50:2"},"returnParameters":{"id":414,"nodeType":"ParameterList","parameters":[{"constant":false,"id":413,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":427,"src":"5518:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":412,"name":"uint256","nodeType":"ElementaryTypeName","src":"5518:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5517:9:2"},"scope":476,"src":"5432:163:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":450,"nodeType":"Block","src":"6347:67:2","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":442,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":440,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":432,"src":"6365:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":441,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6369:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6365:5:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":443,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":434,"src":"6372:12:2","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":439,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6357:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":444,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6357:28:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":445,"nodeType":"ExpressionStatement","src":"6357:28:2"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":448,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":446,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":430,"src":"6402:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":447,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":432,"src":"6406:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6402:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":438,"id":449,"nodeType":"Return","src":"6395:12:2"}]},"documentation":{"id":428,"nodeType":"StructuredDocumentation","src":"5601:646:2","text":" @dev Returns the integer division of two unsigned integers, reverting with custom message on\n division by zero. The result is rounded towards zero.\n CAUTION: This function is deprecated because it requires allocating memory for the error\n message unnecessarily. For custom revert reasons use {tryDiv}.\n Counterpart to Solidity's `/` operator. Note: this function uses a\n `revert` opcode (which leaves remaining gas untouched) while Solidity\n uses an invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."},"id":451,"implemented":true,"kind":"function","modifiers":[],"name":"div","nodeType":"FunctionDefinition","parameters":{"id":435,"nodeType":"ParameterList","parameters":[{"constant":false,"id":430,"mutability":"mutable","name":"a","nodeType":"VariableDeclaration","scope":451,"src":"6265:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":429,"name":"uint256","nodeType":"ElementaryTypeName","src":"6265:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":432,"mutability":"mutable","name":"b","nodeType":"VariableDeclaration","scope":451,"src":"6276:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":431,"name":"uint256","nodeType":"ElementaryTypeName","src":"6276:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":434,"mutability":"mutable","name":"errorMessage","nodeType":"VariableDeclaration","scope":451,"src":"6287:26:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":433,"name":"string","nodeType":"ElementaryTypeName","src":"6287:6:2","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6264:50:2"},"returnParameters":{"id":438,"nodeType":"ParameterList","parameters":[{"constant":false,"id":437,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":451,"src":"6338:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":436,"name":"uint256","nodeType":"ElementaryTypeName","src":"6338:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6337:9:2"},"scope":476,"src":"6252:162:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":474,"nodeType":"Block","src":"7155:67:2","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":466,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":464,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":456,"src":"7173:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":465,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7177:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7173:5:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":467,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":458,"src":"7180:12:2","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":463,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7165:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":468,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7165:28:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":469,"nodeType":"ExpressionStatement","src":"7165:28:2"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":472,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":470,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":454,"src":"7210:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"id":471,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":456,"src":"7214:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7210:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":462,"id":473,"nodeType":"Return","src":"7203:12:2"}]},"documentation":{"id":452,"nodeType":"StructuredDocumentation","src":"6420:635:2","text":" @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n reverting with custom message when dividing by zero.\n CAUTION: This function is deprecated because it requires allocating memory for the error\n message unnecessarily. For custom revert reasons use {tryMod}.\n Counterpart to Solidity's `%` operator. This function uses a `revert`\n opcode (which leaves remaining gas untouched) while Solidity uses an\n invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."},"id":475,"implemented":true,"kind":"function","modifiers":[],"name":"mod","nodeType":"FunctionDefinition","parameters":{"id":459,"nodeType":"ParameterList","parameters":[{"constant":false,"id":454,"mutability":"mutable","name":"a","nodeType":"VariableDeclaration","scope":475,"src":"7073:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":453,"name":"uint256","nodeType":"ElementaryTypeName","src":"7073:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":456,"mutability":"mutable","name":"b","nodeType":"VariableDeclaration","scope":475,"src":"7084:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":455,"name":"uint256","nodeType":"ElementaryTypeName","src":"7084:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":458,"mutability":"mutable","name":"errorMessage","nodeType":"VariableDeclaration","scope":475,"src":"7095:26:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":457,"name":"string","nodeType":"ElementaryTypeName","src":"7095:6:2","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7072:50:2"},"returnParameters":{"id":462,"nodeType":"ParameterList","parameters":[{"constant":false,"id":461,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":475,"src":"7146:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":460,"name":"uint256","nodeType":"ElementaryTypeName","src":"7146:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7145:9:2"},"scope":476,"src":"7060:162:2","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":477,"src":"630:6594:2"}],"src":"33:7192:2"},"id":2},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","exportedSymbols":{"IERC20":[554]},"id":555,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":478,"literals":["solidity",">=","0.6",".0","<","0.8",".0"],"nodeType":"PragmaDirective","src":"33:31:3"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","documentation":{"id":479,"nodeType":"StructuredDocumentation","src":"66:70:3","text":" @dev Interface of the ERC20 standard as defined in the EIP."},"fullyImplemented":false,"id":554,"linearizedBaseContracts":[554],"name":"IERC20","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":480,"nodeType":"StructuredDocumentation","src":"160:66:3","text":" @dev Returns the amount of tokens in existence."},"functionSelector":"18160ddd","id":485,"implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","nodeType":"FunctionDefinition","parameters":{"id":481,"nodeType":"ParameterList","parameters":[],"src":"251:2:3"},"returnParameters":{"id":484,"nodeType":"ParameterList","parameters":[{"constant":false,"id":483,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":485,"src":"277:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":482,"name":"uint256","nodeType":"ElementaryTypeName","src":"277:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"276:9:3"},"scope":554,"src":"231:55:3","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":486,"nodeType":"StructuredDocumentation","src":"292:72:3","text":" @dev Returns the amount of tokens owned by `account`."},"functionSelector":"70a08231","id":493,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nodeType":"FunctionDefinition","parameters":{"id":489,"nodeType":"ParameterList","parameters":[{"constant":false,"id":488,"mutability":"mutable","name":"account","nodeType":"VariableDeclaration","scope":493,"src":"388:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":487,"name":"address","nodeType":"ElementaryTypeName","src":"388:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"387:17:3"},"returnParameters":{"id":492,"nodeType":"ParameterList","parameters":[{"constant":false,"id":491,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":493,"src":"428:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":490,"name":"uint256","nodeType":"ElementaryTypeName","src":"428:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"427:9:3"},"scope":554,"src":"369:68:3","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":494,"nodeType":"StructuredDocumentation","src":"443:209:3","text":" @dev Moves `amount` tokens from the caller's account to `recipient`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"a9059cbb","id":503,"implemented":false,"kind":"function","modifiers":[],"name":"transfer","nodeType":"FunctionDefinition","parameters":{"id":499,"nodeType":"ParameterList","parameters":[{"constant":false,"id":496,"mutability":"mutable","name":"recipient","nodeType":"VariableDeclaration","scope":503,"src":"675:17:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":495,"name":"address","nodeType":"ElementaryTypeName","src":"675:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":498,"mutability":"mutable","name":"amount","nodeType":"VariableDeclaration","scope":503,"src":"694:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":497,"name":"uint256","nodeType":"ElementaryTypeName","src":"694:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"674:35:3"},"returnParameters":{"id":502,"nodeType":"ParameterList","parameters":[{"constant":false,"id":501,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":503,"src":"728:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":500,"name":"bool","nodeType":"ElementaryTypeName","src":"728:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"727:6:3"},"scope":554,"src":"657:77:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":504,"nodeType":"StructuredDocumentation","src":"740:264:3","text":" @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."},"functionSelector":"dd62ed3e","id":513,"implemented":false,"kind":"function","modifiers":[],"name":"allowance","nodeType":"FunctionDefinition","parameters":{"id":509,"nodeType":"ParameterList","parameters":[{"constant":false,"id":506,"mutability":"mutable","name":"owner","nodeType":"VariableDeclaration","scope":513,"src":"1028:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":505,"name":"address","nodeType":"ElementaryTypeName","src":"1028:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":508,"mutability":"mutable","name":"spender","nodeType":"VariableDeclaration","scope":513,"src":"1043:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":507,"name":"address","nodeType":"ElementaryTypeName","src":"1043:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1027:32:3"},"returnParameters":{"id":512,"nodeType":"ParameterList","parameters":[{"constant":false,"id":511,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":513,"src":"1083:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":510,"name":"uint256","nodeType":"ElementaryTypeName","src":"1083:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1082:9:3"},"scope":554,"src":"1009:83:3","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":514,"nodeType":"StructuredDocumentation","src":"1098:642:3","text":" @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."},"functionSelector":"095ea7b3","id":523,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nodeType":"FunctionDefinition","parameters":{"id":519,"nodeType":"ParameterList","parameters":[{"constant":false,"id":516,"mutability":"mutable","name":"spender","nodeType":"VariableDeclaration","scope":523,"src":"1762:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":515,"name":"address","nodeType":"ElementaryTypeName","src":"1762:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":518,"mutability":"mutable","name":"amount","nodeType":"VariableDeclaration","scope":523,"src":"1779:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":517,"name":"uint256","nodeType":"ElementaryTypeName","src":"1779:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1761:33:3"},"returnParameters":{"id":522,"nodeType":"ParameterList","parameters":[{"constant":false,"id":521,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":523,"src":"1813:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":520,"name":"bool","nodeType":"ElementaryTypeName","src":"1813:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1812:6:3"},"scope":554,"src":"1745:74:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":524,"nodeType":"StructuredDocumentation","src":"1825:296:3","text":" @dev Moves `amount` tokens from `sender` to `recipient` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"23b872dd","id":535,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nodeType":"FunctionDefinition","parameters":{"id":531,"nodeType":"ParameterList","parameters":[{"constant":false,"id":526,"mutability":"mutable","name":"sender","nodeType":"VariableDeclaration","scope":535,"src":"2148:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":525,"name":"address","nodeType":"ElementaryTypeName","src":"2148:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":528,"mutability":"mutable","name":"recipient","nodeType":"VariableDeclaration","scope":535,"src":"2164:17:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":527,"name":"address","nodeType":"ElementaryTypeName","src":"2164:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":530,"mutability":"mutable","name":"amount","nodeType":"VariableDeclaration","scope":535,"src":"2183:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":529,"name":"uint256","nodeType":"ElementaryTypeName","src":"2183:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2147:51:3"},"returnParameters":{"id":534,"nodeType":"ParameterList","parameters":[{"constant":false,"id":533,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":535,"src":"2217:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":532,"name":"bool","nodeType":"ElementaryTypeName","src":"2217:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2216:6:3"},"scope":554,"src":"2126:97:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"anonymous":false,"documentation":{"id":536,"nodeType":"StructuredDocumentation","src":"2229:158:3","text":" @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."},"id":544,"name":"Transfer","nodeType":"EventDefinition","parameters":{"id":543,"nodeType":"ParameterList","parameters":[{"constant":false,"id":538,"indexed":true,"mutability":"mutable","name":"from","nodeType":"VariableDeclaration","scope":544,"src":"2407:20:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":537,"name":"address","nodeType":"ElementaryTypeName","src":"2407:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":540,"indexed":true,"mutability":"mutable","name":"to","nodeType":"VariableDeclaration","scope":544,"src":"2429:18:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":539,"name":"address","nodeType":"ElementaryTypeName","src":"2429:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":542,"indexed":false,"mutability":"mutable","name":"value","nodeType":"VariableDeclaration","scope":544,"src":"2449:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":541,"name":"uint256","nodeType":"ElementaryTypeName","src":"2449:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2406:57:3"},"src":"2392:72:3"},{"anonymous":false,"documentation":{"id":545,"nodeType":"StructuredDocumentation","src":"2470:148:3","text":" @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."},"id":553,"name":"Approval","nodeType":"EventDefinition","parameters":{"id":552,"nodeType":"ParameterList","parameters":[{"constant":false,"id":547,"indexed":true,"mutability":"mutable","name":"owner","nodeType":"VariableDeclaration","scope":553,"src":"2638:21:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":546,"name":"address","nodeType":"ElementaryTypeName","src":"2638:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":549,"indexed":true,"mutability":"mutable","name":"spender","nodeType":"VariableDeclaration","scope":553,"src":"2661:23:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":548,"name":"address","nodeType":"ElementaryTypeName","src":"2661:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":551,"indexed":false,"mutability":"mutable","name":"value","nodeType":"VariableDeclaration","scope":553,"src":"2686:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":550,"name":"uint256","nodeType":"ElementaryTypeName","src":"2686:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2637:63:3"},"src":"2623:78:3"}],"scope":555,"src":"137:2566:3"}],"src":"33:2671:3"},"id":3},"@openzeppelin/contracts/token/ERC20/SafeERC20.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/SafeERC20.sol","exportedSymbols":{"Address":[1237],"IERC20":[554],"SafeERC20":[767],"SafeMath":[476]},"id":768,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":556,"literals":["solidity",">=","0.6",".0","<","0.8",".0"],"nodeType":"PragmaDirective","src":"33:31:4"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"./IERC20.sol","id":557,"nodeType":"ImportDirective","scope":768,"sourceUnit":555,"src":"66:22:4","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/math/SafeMath.sol","file":"../../math/SafeMath.sol","id":558,"nodeType":"ImportDirective","scope":768,"sourceUnit":477,"src":"89:33:4","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","file":"../../utils/Address.sol","id":559,"nodeType":"ImportDirective","scope":768,"sourceUnit":1238,"src":"123:33:4","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"library","documentation":{"id":560,"nodeType":"StructuredDocumentation","src":"158:457:4","text":" @title SafeERC20\n @dev Wrappers around ERC20 operations that throw on failure (when the token\n contract returns false). Tokens that return no value (and instead revert or\n throw on failure) are also supported, non-reverting calls are assumed to be\n successful.\n To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n which allows you to call the safe operations as `token.safeTransfer(...)`, etc."},"fullyImplemented":true,"id":767,"linearizedBaseContracts":[767],"name":"SafeERC20","nodeType":"ContractDefinition","nodes":[{"id":563,"libraryName":{"id":561,"name":"SafeMath","nodeType":"UserDefinedTypeName","referencedDeclaration":476,"src":"646:8:4","typeDescriptions":{"typeIdentifier":"t_contract$_SafeMath_$476","typeString":"library SafeMath"}},"nodeType":"UsingForDirective","src":"640:27:4","typeName":{"id":562,"name":"uint256","nodeType":"ElementaryTypeName","src":"659:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},{"id":566,"libraryName":{"id":564,"name":"Address","nodeType":"UserDefinedTypeName","referencedDeclaration":1237,"src":"678:7:4","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$1237","typeString":"library Address"}},"nodeType":"UsingForDirective","src":"672:26:4","typeName":{"id":565,"name":"address","nodeType":"ElementaryTypeName","src":"690:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},{"body":{"id":587,"nodeType":"Block","src":"776:103:4","statements":[{"expression":{"arguments":[{"id":576,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":568,"src":"806:5:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$554","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":579,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":568,"src":"836:5:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$554","typeString":"contract IERC20"}},"id":580,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":503,"src":"836:14:4","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":581,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"selector","nodeType":"MemberAccess","src":"836:23:4","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":582,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":570,"src":"861:2:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":583,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":572,"src":"865:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":577,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"813:3:4","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":578,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"813:22:4","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":584,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"813:58:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$554","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":575,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":766,"src":"786:19:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$554_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":585,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"786:86:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":586,"nodeType":"ExpressionStatement","src":"786:86:4"}]},"id":588,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransfer","nodeType":"FunctionDefinition","parameters":{"id":573,"nodeType":"ParameterList","parameters":[{"constant":false,"id":568,"mutability":"mutable","name":"token","nodeType":"VariableDeclaration","scope":588,"src":"726:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$554","typeString":"contract IERC20"},"typeName":{"id":567,"name":"IERC20","nodeType":"UserDefinedTypeName","referencedDeclaration":554,"src":"726:6:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$554","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":570,"mutability":"mutable","name":"to","nodeType":"VariableDeclaration","scope":588,"src":"740:10:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":569,"name":"address","nodeType":"ElementaryTypeName","src":"740:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":572,"mutability":"mutable","name":"value","nodeType":"VariableDeclaration","scope":588,"src":"752:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":571,"name":"uint256","nodeType":"ElementaryTypeName","src":"752:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"725:41:4"},"returnParameters":{"id":574,"nodeType":"ParameterList","parameters":[],"src":"776:0:4"},"scope":767,"src":"704:175:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":612,"nodeType":"Block","src":"975:113:4","statements":[{"expression":{"arguments":[{"id":600,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":590,"src":"1005:5:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$554","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":603,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":590,"src":"1035:5:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$554","typeString":"contract IERC20"}},"id":604,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"transferFrom","nodeType":"MemberAccess","referencedDeclaration":535,"src":"1035:18:4","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,address,uint256) external returns (bool)"}},"id":605,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"selector","nodeType":"MemberAccess","src":"1035:27:4","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":606,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":592,"src":"1064:4:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":607,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":594,"src":"1070:2:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":608,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":596,"src":"1074:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":601,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1012:3:4","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":602,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"1012:22:4","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":609,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1012:68:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$554","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":599,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":766,"src":"985:19:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$554_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":610,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"985:96:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":611,"nodeType":"ExpressionStatement","src":"985:96:4"}]},"id":613,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nodeType":"FunctionDefinition","parameters":{"id":597,"nodeType":"ParameterList","parameters":[{"constant":false,"id":590,"mutability":"mutable","name":"token","nodeType":"VariableDeclaration","scope":613,"src":"911:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$554","typeString":"contract IERC20"},"typeName":{"id":589,"name":"IERC20","nodeType":"UserDefinedTypeName","referencedDeclaration":554,"src":"911:6:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$554","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":592,"mutability":"mutable","name":"from","nodeType":"VariableDeclaration","scope":613,"src":"925:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":591,"name":"address","nodeType":"ElementaryTypeName","src":"925:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":594,"mutability":"mutable","name":"to","nodeType":"VariableDeclaration","scope":613,"src":"939:10:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":593,"name":"address","nodeType":"ElementaryTypeName","src":"939:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":596,"mutability":"mutable","name":"value","nodeType":"VariableDeclaration","scope":613,"src":"951:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":595,"name":"uint256","nodeType":"ElementaryTypeName","src":"951:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"910:55:4"},"returnParameters":{"id":598,"nodeType":"ParameterList","parameters":[],"src":"975:0:4"},"scope":767,"src":"885:203:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":655,"nodeType":"Block","src":"1424:537:4","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":639,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":626,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":624,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":620,"src":"1713:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":625,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1722:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1713:10:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":627,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1712:12:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":637,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":632,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1753:4:4","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20_$767","typeString":"library SafeERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SafeERC20_$767","typeString":"library SafeERC20"}],"id":631,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1745:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":630,"name":"address","nodeType":"ElementaryTypeName","src":"1745:7:4","typeDescriptions":{}}},"id":633,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1745:13:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":634,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":618,"src":"1760:7:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":628,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":616,"src":"1729:5:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$554","typeString":"contract IERC20"}},"id":629,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":513,"src":"1729:15:4","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":635,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1729:39:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":636,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1772:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1729:44:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":638,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1728:46:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1712:62:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365","id":640,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1788:56:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25","typeString":"literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""},"value":"SafeERC20: approve from non-zero to non-zero allowance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25","typeString":"literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""}],"id":623,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1704:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":641,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1704:150:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":642,"nodeType":"ExpressionStatement","src":"1704:150:4"},{"expression":{"arguments":[{"id":644,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":616,"src":"1884:5:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$554","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":647,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":616,"src":"1914:5:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$554","typeString":"contract IERC20"}},"id":648,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":523,"src":"1914:13:4","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":649,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"selector","nodeType":"MemberAccess","src":"1914:22:4","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":650,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":618,"src":"1938:7:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":651,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":620,"src":"1947:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":645,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1891:3:4","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":646,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"1891:22:4","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":652,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1891:62:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$554","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":643,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":766,"src":"1864:19:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$554_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":653,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1864:90:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":654,"nodeType":"ExpressionStatement","src":"1864:90:4"}]},"documentation":{"id":614,"nodeType":"StructuredDocumentation","src":"1094:249:4","text":" @dev Deprecated. This function has issues similar to the ones found in\n {IERC20-approve}, and its usage is discouraged.\n Whenever possible, use {safeIncreaseAllowance} and\n {safeDecreaseAllowance} instead."},"id":656,"implemented":true,"kind":"function","modifiers":[],"name":"safeApprove","nodeType":"FunctionDefinition","parameters":{"id":621,"nodeType":"ParameterList","parameters":[{"constant":false,"id":616,"mutability":"mutable","name":"token","nodeType":"VariableDeclaration","scope":656,"src":"1369:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$554","typeString":"contract IERC20"},"typeName":{"id":615,"name":"IERC20","nodeType":"UserDefinedTypeName","referencedDeclaration":554,"src":"1369:6:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$554","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":618,"mutability":"mutable","name":"spender","nodeType":"VariableDeclaration","scope":656,"src":"1383:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":617,"name":"address","nodeType":"ElementaryTypeName","src":"1383:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":620,"mutability":"mutable","name":"value","nodeType":"VariableDeclaration","scope":656,"src":"1400:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":619,"name":"uint256","nodeType":"ElementaryTypeName","src":"1400:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1368:46:4"},"returnParameters":{"id":622,"nodeType":"ParameterList","parameters":[],"src":"1424:0:4"},"scope":767,"src":"1348:613:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":691,"nodeType":"Block","src":"2053:197:4","statements":[{"assignments":[666],"declarations":[{"constant":false,"id":666,"mutability":"mutable","name":"newAllowance","nodeType":"VariableDeclaration","scope":691,"src":"2063:20:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":665,"name":"uint256","nodeType":"ElementaryTypeName","src":"2063:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":678,"initialValue":{"arguments":[{"id":676,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":662,"src":"2130:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"arguments":[{"id":671,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2110:4:4","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20_$767","typeString":"library SafeERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SafeERC20_$767","typeString":"library SafeERC20"}],"id":670,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2102:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":669,"name":"address","nodeType":"ElementaryTypeName","src":"2102:7:4","typeDescriptions":{}}},"id":672,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2102:13:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":673,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":660,"src":"2117:7:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":667,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":658,"src":"2086:5:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$554","typeString":"contract IERC20"}},"id":668,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":513,"src":"2086:15:4","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":674,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2086:39:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":675,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"add","nodeType":"MemberAccess","referencedDeclaration":303,"src":"2086:43:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":677,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2086:50:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2063:73:4"},{"expression":{"arguments":[{"id":680,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":658,"src":"2166:5:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$554","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":683,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":658,"src":"2196:5:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$554","typeString":"contract IERC20"}},"id":684,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":523,"src":"2196:13:4","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":685,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"selector","nodeType":"MemberAccess","src":"2196:22:4","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":686,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":660,"src":"2220:7:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":687,"name":"newAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":666,"src":"2229:12:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":681,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2173:3:4","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":682,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"2173:22:4","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":688,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2173:69:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$554","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":679,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":766,"src":"2146:19:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$554_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":689,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2146:97:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":690,"nodeType":"ExpressionStatement","src":"2146:97:4"}]},"id":692,"implemented":true,"kind":"function","modifiers":[],"name":"safeIncreaseAllowance","nodeType":"FunctionDefinition","parameters":{"id":663,"nodeType":"ParameterList","parameters":[{"constant":false,"id":658,"mutability":"mutable","name":"token","nodeType":"VariableDeclaration","scope":692,"src":"1998:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$554","typeString":"contract IERC20"},"typeName":{"id":657,"name":"IERC20","nodeType":"UserDefinedTypeName","referencedDeclaration":554,"src":"1998:6:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$554","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":660,"mutability":"mutable","name":"spender","nodeType":"VariableDeclaration","scope":692,"src":"2012:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":659,"name":"address","nodeType":"ElementaryTypeName","src":"2012:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":662,"mutability":"mutable","name":"value","nodeType":"VariableDeclaration","scope":692,"src":"2029:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":661,"name":"uint256","nodeType":"ElementaryTypeName","src":"2029:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1997:46:4"},"returnParameters":{"id":664,"nodeType":"ParameterList","parameters":[],"src":"2053:0:4"},"scope":767,"src":"1967:283:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":728,"nodeType":"Block","src":"2342:242:4","statements":[{"assignments":[702],"declarations":[{"constant":false,"id":702,"mutability":"mutable","name":"newAllowance","nodeType":"VariableDeclaration","scope":728,"src":"2352:20:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":701,"name":"uint256","nodeType":"ElementaryTypeName","src":"2352:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":715,"initialValue":{"arguments":[{"id":712,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":698,"src":"2419:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"5361666545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f","id":713,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2426:43:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a","typeString":"literal_string \"SafeERC20: decreased allowance below zero\""},"value":"SafeERC20: decreased allowance below zero"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a","typeString":"literal_string \"SafeERC20: decreased allowance below zero\""}],"expression":{"arguments":[{"arguments":[{"id":707,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2399:4:4","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20_$767","typeString":"library SafeERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SafeERC20_$767","typeString":"library SafeERC20"}],"id":706,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2391:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":705,"name":"address","nodeType":"ElementaryTypeName","src":"2391:7:4","typeDescriptions":{}}},"id":708,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2391:13:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":709,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":696,"src":"2406:7:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":703,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":694,"src":"2375:5:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$554","typeString":"contract IERC20"}},"id":704,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":513,"src":"2375:15:4","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":710,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2375:39:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":711,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sub","nodeType":"MemberAccess","referencedDeclaration":427,"src":"2375:43:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256,string memory) pure returns (uint256)"}},"id":714,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2375:95:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2352:118:4"},{"expression":{"arguments":[{"id":717,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":694,"src":"2500:5:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$554","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":720,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":694,"src":"2530:5:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$554","typeString":"contract IERC20"}},"id":721,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":523,"src":"2530:13:4","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":722,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"selector","nodeType":"MemberAccess","src":"2530:22:4","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":723,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":696,"src":"2554:7:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":724,"name":"newAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":702,"src":"2563:12:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":718,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2507:3:4","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":719,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"2507:22:4","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":725,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2507:69:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$554","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":716,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":766,"src":"2480:19:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$554_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":726,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2480:97:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":727,"nodeType":"ExpressionStatement","src":"2480:97:4"}]},"id":729,"implemented":true,"kind":"function","modifiers":[],"name":"safeDecreaseAllowance","nodeType":"FunctionDefinition","parameters":{"id":699,"nodeType":"ParameterList","parameters":[{"constant":false,"id":694,"mutability":"mutable","name":"token","nodeType":"VariableDeclaration","scope":729,"src":"2287:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$554","typeString":"contract IERC20"},"typeName":{"id":693,"name":"IERC20","nodeType":"UserDefinedTypeName","referencedDeclaration":554,"src":"2287:6:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$554","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":696,"mutability":"mutable","name":"spender","nodeType":"VariableDeclaration","scope":729,"src":"2301:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":695,"name":"address","nodeType":"ElementaryTypeName","src":"2301:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":698,"mutability":"mutable","name":"value","nodeType":"VariableDeclaration","scope":729,"src":"2318:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":697,"name":"uint256","nodeType":"ElementaryTypeName","src":"2318:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2286:46:4"},"returnParameters":{"id":700,"nodeType":"ParameterList","parameters":[],"src":"2342:0:4"},"scope":767,"src":"2256:328:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":765,"nodeType":"Block","src":"3037:681:4","statements":[{"assignments":[738],"declarations":[{"constant":false,"id":738,"mutability":"mutable","name":"returndata","nodeType":"VariableDeclaration","scope":765,"src":"3386:23:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":737,"name":"bytes","nodeType":"ElementaryTypeName","src":"3386:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":747,"initialValue":{"arguments":[{"id":744,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":734,"src":"3440:4:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564","id":745,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3446:34:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b","typeString":"literal_string \"SafeERC20: low-level call failed\""},"value":"SafeERC20: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b","typeString":"literal_string \"SafeERC20: low-level call failed\""}],"expression":{"arguments":[{"id":741,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":732,"src":"3420:5:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$554","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$554","typeString":"contract IERC20"}],"id":740,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3412:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":739,"name":"address","nodeType":"ElementaryTypeName","src":"3412:7:4","typeDescriptions":{}}},"id":742,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3412:14:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":743,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"functionCall","nodeType":"MemberAccess","referencedDeclaration":1032,"src":"3412:27:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$bound_to$_t_address_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":746,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3412:69:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"3386:95:4"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":751,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":748,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":738,"src":"3495:10:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":749,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"3495:17:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":750,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3515:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3495:21:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":764,"nodeType":"IfStatement","src":"3491:221:4","trueBody":{"id":763,"nodeType":"Block","src":"3518:194:4","statements":[{"expression":{"arguments":[{"arguments":[{"id":755,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":738,"src":"3635:10:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":757,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3648:4:4","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"},"typeName":{"id":756,"name":"bool","nodeType":"ElementaryTypeName","src":"3648:4:4","typeDescriptions":{}}}],"id":758,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"3647:6:4","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}],"expression":{"id":753,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3624:3:4","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":754,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"decode","nodeType":"MemberAccess","src":"3624:10:4","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":759,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3624:30:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564","id":760,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3656:44:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd","typeString":"literal_string \"SafeERC20: ERC20 operation did not succeed\""},"value":"SafeERC20: ERC20 operation did not succeed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd","typeString":"literal_string \"SafeERC20: ERC20 operation did not succeed\""}],"id":752,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3616:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":761,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3616:85:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":762,"nodeType":"ExpressionStatement","src":"3616:85:4"}]}}]},"documentation":{"id":730,"nodeType":"StructuredDocumentation","src":"2590:372:4","text":" @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants)."},"id":766,"implemented":true,"kind":"function","modifiers":[],"name":"_callOptionalReturn","nodeType":"FunctionDefinition","parameters":{"id":735,"nodeType":"ParameterList","parameters":[{"constant":false,"id":732,"mutability":"mutable","name":"token","nodeType":"VariableDeclaration","scope":766,"src":"2996:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$554","typeString":"contract IERC20"},"typeName":{"id":731,"name":"IERC20","nodeType":"UserDefinedTypeName","referencedDeclaration":554,"src":"2996:6:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$554","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":734,"mutability":"mutable","name":"data","nodeType":"VariableDeclaration","scope":766,"src":"3010:17:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":733,"name":"bytes","nodeType":"ElementaryTypeName","src":"3010:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2995:33:4"},"returnParameters":{"id":736,"nodeType":"ParameterList","parameters":[],"src":"3037:0:4"},"scope":767,"src":"2967:751:4","stateMutability":"nonpayable","virtual":false,"visibility":"private"}],"scope":768,"src":"616:3104:4"}],"src":"33:3688:4"},"id":4},"@openzeppelin/contracts/token/ERC721/IERC721.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721.sol","exportedSymbols":{"IERC165":[121],"IERC721":[883]},"id":884,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":769,"literals":["solidity",">=","0.6",".2","<","0.8",".0"],"nodeType":"PragmaDirective","src":"33:31:5"},{"absolutePath":"@openzeppelin/contracts/introspection/IERC165.sol","file":"../../introspection/IERC165.sol","id":770,"nodeType":"ImportDirective","scope":884,"sourceUnit":122,"src":"66:41:5","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":772,"name":"IERC165","nodeType":"UserDefinedTypeName","referencedDeclaration":121,"src":"198:7:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC165_$121","typeString":"contract IERC165"}},"id":773,"nodeType":"InheritanceSpecifier","src":"198:7:5"}],"contractDependencies":[121],"contractKind":"interface","documentation":{"id":771,"nodeType":"StructuredDocumentation","src":"109:67:5","text":" @dev Required interface of an ERC721 compliant contract."},"fullyImplemented":false,"id":883,"linearizedBaseContracts":[883,121],"name":"IERC721","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":774,"nodeType":"StructuredDocumentation","src":"212:88:5","text":" @dev Emitted when `tokenId` token is transferred from `from` to `to`."},"id":782,"name":"Transfer","nodeType":"EventDefinition","parameters":{"id":781,"nodeType":"ParameterList","parameters":[{"constant":false,"id":776,"indexed":true,"mutability":"mutable","name":"from","nodeType":"VariableDeclaration","scope":782,"src":"320:20:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":775,"name":"address","nodeType":"ElementaryTypeName","src":"320:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":778,"indexed":true,"mutability":"mutable","name":"to","nodeType":"VariableDeclaration","scope":782,"src":"342:18:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":777,"name":"address","nodeType":"ElementaryTypeName","src":"342:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":780,"indexed":true,"mutability":"mutable","name":"tokenId","nodeType":"VariableDeclaration","scope":782,"src":"362:23:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":779,"name":"uint256","nodeType":"ElementaryTypeName","src":"362:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"319:67:5"},"src":"305:82:5"},{"anonymous":false,"documentation":{"id":783,"nodeType":"StructuredDocumentation","src":"393:94:5","text":" @dev Emitted when `owner` enables `approved` to manage the `tokenId` token."},"id":791,"name":"Approval","nodeType":"EventDefinition","parameters":{"id":790,"nodeType":"ParameterList","parameters":[{"constant":false,"id":785,"indexed":true,"mutability":"mutable","name":"owner","nodeType":"VariableDeclaration","scope":791,"src":"507:21:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":784,"name":"address","nodeType":"ElementaryTypeName","src":"507:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":787,"indexed":true,"mutability":"mutable","name":"approved","nodeType":"VariableDeclaration","scope":791,"src":"530:24:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":786,"name":"address","nodeType":"ElementaryTypeName","src":"530:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":789,"indexed":true,"mutability":"mutable","name":"tokenId","nodeType":"VariableDeclaration","scope":791,"src":"556:23:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":788,"name":"uint256","nodeType":"ElementaryTypeName","src":"556:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"506:74:5"},"src":"492:89:5"},{"anonymous":false,"documentation":{"id":792,"nodeType":"StructuredDocumentation","src":"587:117:5","text":" @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"id":800,"name":"ApprovalForAll","nodeType":"EventDefinition","parameters":{"id":799,"nodeType":"ParameterList","parameters":[{"constant":false,"id":794,"indexed":true,"mutability":"mutable","name":"owner","nodeType":"VariableDeclaration","scope":800,"src":"730:21:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":793,"name":"address","nodeType":"ElementaryTypeName","src":"730:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":796,"indexed":true,"mutability":"mutable","name":"operator","nodeType":"VariableDeclaration","scope":800,"src":"753:24:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":795,"name":"address","nodeType":"ElementaryTypeName","src":"753:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":798,"indexed":false,"mutability":"mutable","name":"approved","nodeType":"VariableDeclaration","scope":800,"src":"779:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":797,"name":"bool","nodeType":"ElementaryTypeName","src":"779:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"729:64:5"},"src":"709:85:5"},{"documentation":{"id":801,"nodeType":"StructuredDocumentation","src":"800:76:5","text":" @dev Returns the number of tokens in ``owner``'s account."},"functionSelector":"70a08231","id":808,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nodeType":"FunctionDefinition","parameters":{"id":804,"nodeType":"ParameterList","parameters":[{"constant":false,"id":803,"mutability":"mutable","name":"owner","nodeType":"VariableDeclaration","scope":808,"src":"900:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":802,"name":"address","nodeType":"ElementaryTypeName","src":"900:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"899:15:5"},"returnParameters":{"id":807,"nodeType":"ParameterList","parameters":[{"constant":false,"id":806,"mutability":"mutable","name":"balance","nodeType":"VariableDeclaration","scope":808,"src":"938:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":805,"name":"uint256","nodeType":"ElementaryTypeName","src":"938:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"937:17:5"},"scope":883,"src":"881:74:5","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":809,"nodeType":"StructuredDocumentation","src":"961:131:5","text":" @dev Returns the owner of the `tokenId` token.\n Requirements:\n - `tokenId` must exist."},"functionSelector":"6352211e","id":816,"implemented":false,"kind":"function","modifiers":[],"name":"ownerOf","nodeType":"FunctionDefinition","parameters":{"id":812,"nodeType":"ParameterList","parameters":[{"constant":false,"id":811,"mutability":"mutable","name":"tokenId","nodeType":"VariableDeclaration","scope":816,"src":"1114:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":810,"name":"uint256","nodeType":"ElementaryTypeName","src":"1114:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1113:17:5"},"returnParameters":{"id":815,"nodeType":"ParameterList","parameters":[{"constant":false,"id":814,"mutability":"mutable","name":"owner","nodeType":"VariableDeclaration","scope":816,"src":"1154:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":813,"name":"address","nodeType":"ElementaryTypeName","src":"1154:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1153:15:5"},"scope":883,"src":"1097:72:5","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":817,"nodeType":"StructuredDocumentation","src":"1175:690:5","text":" @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n are aware of the ERC721 protocol to prevent tokens from being forever locked.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."},"functionSelector":"42842e0e","id":826,"implemented":false,"kind":"function","modifiers":[],"name":"safeTransferFrom","nodeType":"FunctionDefinition","parameters":{"id":824,"nodeType":"ParameterList","parameters":[{"constant":false,"id":819,"mutability":"mutable","name":"from","nodeType":"VariableDeclaration","scope":826,"src":"1896:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":818,"name":"address","nodeType":"ElementaryTypeName","src":"1896:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":821,"mutability":"mutable","name":"to","nodeType":"VariableDeclaration","scope":826,"src":"1910:10:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":820,"name":"address","nodeType":"ElementaryTypeName","src":"1910:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":823,"mutability":"mutable","name":"tokenId","nodeType":"VariableDeclaration","scope":826,"src":"1922:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":822,"name":"uint256","nodeType":"ElementaryTypeName","src":"1922:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1895:43:5"},"returnParameters":{"id":825,"nodeType":"ParameterList","parameters":[],"src":"1947:0:5"},"scope":883,"src":"1870:78:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":827,"nodeType":"StructuredDocumentation","src":"1954:504:5","text":" @dev Transfers `tokenId` token from `from` to `to`.\n WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n Emits a {Transfer} event."},"functionSelector":"23b872dd","id":836,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nodeType":"FunctionDefinition","parameters":{"id":834,"nodeType":"ParameterList","parameters":[{"constant":false,"id":829,"mutability":"mutable","name":"from","nodeType":"VariableDeclaration","scope":836,"src":"2485:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":828,"name":"address","nodeType":"ElementaryTypeName","src":"2485:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":831,"mutability":"mutable","name":"to","nodeType":"VariableDeclaration","scope":836,"src":"2499:10:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":830,"name":"address","nodeType":"ElementaryTypeName","src":"2499:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":833,"mutability":"mutable","name":"tokenId","nodeType":"VariableDeclaration","scope":836,"src":"2511:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":832,"name":"uint256","nodeType":"ElementaryTypeName","src":"2511:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2484:43:5"},"returnParameters":{"id":835,"nodeType":"ParameterList","parameters":[],"src":"2536:0:5"},"scope":883,"src":"2463:74:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":837,"nodeType":"StructuredDocumentation","src":"2543:452:5","text":" @dev Gives permission to `to` to transfer `tokenId` token to another account.\n The approval is cleared when the token is transferred.\n Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n Requirements:\n - The caller must own the token or be an approved operator.\n - `tokenId` must exist.\n Emits an {Approval} event."},"functionSelector":"095ea7b3","id":844,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nodeType":"FunctionDefinition","parameters":{"id":842,"nodeType":"ParameterList","parameters":[{"constant":false,"id":839,"mutability":"mutable","name":"to","nodeType":"VariableDeclaration","scope":844,"src":"3017:10:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":838,"name":"address","nodeType":"ElementaryTypeName","src":"3017:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":841,"mutability":"mutable","name":"tokenId","nodeType":"VariableDeclaration","scope":844,"src":"3029:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":840,"name":"uint256","nodeType":"ElementaryTypeName","src":"3029:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3016:29:5"},"returnParameters":{"id":843,"nodeType":"ParameterList","parameters":[],"src":"3054:0:5"},"scope":883,"src":"3000:55:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":845,"nodeType":"StructuredDocumentation","src":"3061:139:5","text":" @dev Returns the account approved for `tokenId` token.\n Requirements:\n - `tokenId` must exist."},"functionSelector":"081812fc","id":852,"implemented":false,"kind":"function","modifiers":[],"name":"getApproved","nodeType":"FunctionDefinition","parameters":{"id":848,"nodeType":"ParameterList","parameters":[{"constant":false,"id":847,"mutability":"mutable","name":"tokenId","nodeType":"VariableDeclaration","scope":852,"src":"3226:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":846,"name":"uint256","nodeType":"ElementaryTypeName","src":"3226:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3225:17:5"},"returnParameters":{"id":851,"nodeType":"ParameterList","parameters":[{"constant":false,"id":850,"mutability":"mutable","name":"operator","nodeType":"VariableDeclaration","scope":852,"src":"3266:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":849,"name":"address","nodeType":"ElementaryTypeName","src":"3266:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3265:18:5"},"scope":883,"src":"3205:79:5","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":853,"nodeType":"StructuredDocumentation","src":"3290:309:5","text":" @dev Approve or remove `operator` as an operator for the caller.\n Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n Requirements:\n - The `operator` cannot be the caller.\n Emits an {ApprovalForAll} event."},"functionSelector":"a22cb465","id":860,"implemented":false,"kind":"function","modifiers":[],"name":"setApprovalForAll","nodeType":"FunctionDefinition","parameters":{"id":858,"nodeType":"ParameterList","parameters":[{"constant":false,"id":855,"mutability":"mutable","name":"operator","nodeType":"VariableDeclaration","scope":860,"src":"3631:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":854,"name":"address","nodeType":"ElementaryTypeName","src":"3631:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":857,"mutability":"mutable","name":"_approved","nodeType":"VariableDeclaration","scope":860,"src":"3649:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":856,"name":"bool","nodeType":"ElementaryTypeName","src":"3649:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3630:34:5"},"returnParameters":{"id":859,"nodeType":"ParameterList","parameters":[],"src":"3673:0:5"},"scope":883,"src":"3604:70:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":861,"nodeType":"StructuredDocumentation","src":"3680:138:5","text":" @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n See {setApprovalForAll}"},"functionSelector":"e985e9c5","id":870,"implemented":false,"kind":"function","modifiers":[],"name":"isApprovedForAll","nodeType":"FunctionDefinition","parameters":{"id":866,"nodeType":"ParameterList","parameters":[{"constant":false,"id":863,"mutability":"mutable","name":"owner","nodeType":"VariableDeclaration","scope":870,"src":"3849:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":862,"name":"address","nodeType":"ElementaryTypeName","src":"3849:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":865,"mutability":"mutable","name":"operator","nodeType":"VariableDeclaration","scope":870,"src":"3864:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":864,"name":"address","nodeType":"ElementaryTypeName","src":"3864:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3848:33:5"},"returnParameters":{"id":869,"nodeType":"ParameterList","parameters":[{"constant":false,"id":868,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":870,"src":"3905:4:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":867,"name":"bool","nodeType":"ElementaryTypeName","src":"3905:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3904:6:5"},"scope":883,"src":"3823:88:5","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":871,"nodeType":"StructuredDocumentation","src":"3917:568:5","text":" @dev Safely transfers `tokenId` token from `from` to `to`.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."},"functionSelector":"b88d4fde","id":882,"implemented":false,"kind":"function","modifiers":[],"name":"safeTransferFrom","nodeType":"FunctionDefinition","parameters":{"id":880,"nodeType":"ParameterList","parameters":[{"constant":false,"id":873,"mutability":"mutable","name":"from","nodeType":"VariableDeclaration","scope":882,"src":"4516:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":872,"name":"address","nodeType":"ElementaryTypeName","src":"4516:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":875,"mutability":"mutable","name":"to","nodeType":"VariableDeclaration","scope":882,"src":"4530:10:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":874,"name":"address","nodeType":"ElementaryTypeName","src":"4530:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":877,"mutability":"mutable","name":"tokenId","nodeType":"VariableDeclaration","scope":882,"src":"4542:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":876,"name":"uint256","nodeType":"ElementaryTypeName","src":"4542:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":879,"mutability":"mutable","name":"data","nodeType":"VariableDeclaration","scope":882,"src":"4559:19:5","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":878,"name":"bytes","nodeType":"ElementaryTypeName","src":"4559:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4515:64:5"},"returnParameters":{"id":881,"nodeType":"ParameterList","parameters":[],"src":"4588:0:5"},"scope":883,"src":"4490:99:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":884,"src":"177:4414:5"}],"src":"33:4559:5"},"id":5},"@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol","exportedSymbols":{"IERC165":[121],"IERC721":[883],"IERC721Enumerable":[914]},"id":915,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":885,"literals":["solidity",">=","0.6",".2","<","0.8",".0"],"nodeType":"PragmaDirective","src":"33:31:6"},{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721.sol","file":"./IERC721.sol","id":886,"nodeType":"ImportDirective","scope":915,"sourceUnit":884,"src":"66:23:6","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":888,"name":"IERC721","nodeType":"UserDefinedTypeName","referencedDeclaration":883,"src":"259:7:6","typeDescriptions":{"typeIdentifier":"t_contract$_IERC721_$883","typeString":"contract IERC721"}},"id":889,"nodeType":"InheritanceSpecifier","src":"259:7:6"}],"contractDependencies":[121,883],"contractKind":"interface","documentation":{"id":887,"nodeType":"StructuredDocumentation","src":"91:136:6","text":" @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n @dev See https://eips.ethereum.org/EIPS/eip-721"},"fullyImplemented":false,"id":914,"linearizedBaseContracts":[914,883,121],"name":"IERC721Enumerable","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":890,"nodeType":"StructuredDocumentation","src":"274:82:6","text":" @dev Returns the total amount of tokens stored by the contract."},"functionSelector":"18160ddd","id":895,"implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","nodeType":"FunctionDefinition","parameters":{"id":891,"nodeType":"ParameterList","parameters":[],"src":"381:2:6"},"returnParameters":{"id":894,"nodeType":"ParameterList","parameters":[{"constant":false,"id":893,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":895,"src":"407:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":892,"name":"uint256","nodeType":"ElementaryTypeName","src":"407:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"406:9:6"},"scope":914,"src":"361:55:6","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":896,"nodeType":"StructuredDocumentation","src":"422:171:6","text":" @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n Use along with {balanceOf} to enumerate all of ``owner``'s tokens."},"functionSelector":"2f745c59","id":905,"implemented":false,"kind":"function","modifiers":[],"name":"tokenOfOwnerByIndex","nodeType":"FunctionDefinition","parameters":{"id":901,"nodeType":"ParameterList","parameters":[{"constant":false,"id":898,"mutability":"mutable","name":"owner","nodeType":"VariableDeclaration","scope":905,"src":"627:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":897,"name":"address","nodeType":"ElementaryTypeName","src":"627:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":900,"mutability":"mutable","name":"index","nodeType":"VariableDeclaration","scope":905,"src":"642:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":899,"name":"uint256","nodeType":"ElementaryTypeName","src":"642:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"626:30:6"},"returnParameters":{"id":904,"nodeType":"ParameterList","parameters":[{"constant":false,"id":903,"mutability":"mutable","name":"tokenId","nodeType":"VariableDeclaration","scope":905,"src":"680:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":902,"name":"uint256","nodeType":"ElementaryTypeName","src":"680:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"679:17:6"},"scope":914,"src":"598:99:6","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":906,"nodeType":"StructuredDocumentation","src":"703:164:6","text":" @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n Use along with {totalSupply} to enumerate all tokens."},"functionSelector":"4f6ccce7","id":913,"implemented":false,"kind":"function","modifiers":[],"name":"tokenByIndex","nodeType":"FunctionDefinition","parameters":{"id":909,"nodeType":"ParameterList","parameters":[{"constant":false,"id":908,"mutability":"mutable","name":"index","nodeType":"VariableDeclaration","scope":913,"src":"894:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":907,"name":"uint256","nodeType":"ElementaryTypeName","src":"894:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"893:15:6"},"returnParameters":{"id":912,"nodeType":"ParameterList","parameters":[{"constant":false,"id":911,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":913,"src":"932:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":910,"name":"uint256","nodeType":"ElementaryTypeName","src":"932:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"931:9:6"},"scope":914,"src":"872:69:6","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":915,"src":"228:715:6"}],"src":"33:911:6"},"id":6},"@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol","exportedSymbols":{"IERC165":[121],"IERC721":[883],"IERC721Metadata":[941]},"id":942,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":916,"literals":["solidity",">=","0.6",".2","<","0.8",".0"],"nodeType":"PragmaDirective","src":"33:31:7"},{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721.sol","file":"./IERC721.sol","id":917,"nodeType":"ImportDirective","scope":942,"sourceUnit":884,"src":"66:23:7","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":919,"name":"IERC721","nodeType":"UserDefinedTypeName","referencedDeclaration":883,"src":"254:7:7","typeDescriptions":{"typeIdentifier":"t_contract$_IERC721_$883","typeString":"contract IERC721"}},"id":920,"nodeType":"InheritanceSpecifier","src":"254:7:7"}],"contractDependencies":[121,883],"contractKind":"interface","documentation":{"id":918,"nodeType":"StructuredDocumentation","src":"91:133:7","text":" @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n @dev See https://eips.ethereum.org/EIPS/eip-721"},"fullyImplemented":false,"id":941,"linearizedBaseContracts":[941,883,121],"name":"IERC721Metadata","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":921,"nodeType":"StructuredDocumentation","src":"269:58:7","text":" @dev Returns the token collection name."},"functionSelector":"06fdde03","id":926,"implemented":false,"kind":"function","modifiers":[],"name":"name","nodeType":"FunctionDefinition","parameters":{"id":922,"nodeType":"ParameterList","parameters":[],"src":"345:2:7"},"returnParameters":{"id":925,"nodeType":"ParameterList","parameters":[{"constant":false,"id":924,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":926,"src":"371:13:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":923,"name":"string","nodeType":"ElementaryTypeName","src":"371:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"370:15:7"},"scope":941,"src":"332:54:7","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":927,"nodeType":"StructuredDocumentation","src":"392:60:7","text":" @dev Returns the token collection symbol."},"functionSelector":"95d89b41","id":932,"implemented":false,"kind":"function","modifiers":[],"name":"symbol","nodeType":"FunctionDefinition","parameters":{"id":928,"nodeType":"ParameterList","parameters":[],"src":"472:2:7"},"returnParameters":{"id":931,"nodeType":"ParameterList","parameters":[{"constant":false,"id":930,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":932,"src":"498:13:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":929,"name":"string","nodeType":"ElementaryTypeName","src":"498:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"497:15:7"},"scope":941,"src":"457:56:7","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":933,"nodeType":"StructuredDocumentation","src":"519:90:7","text":" @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token."},"functionSelector":"c87b56dd","id":940,"implemented":false,"kind":"function","modifiers":[],"name":"tokenURI","nodeType":"FunctionDefinition","parameters":{"id":936,"nodeType":"ParameterList","parameters":[{"constant":false,"id":935,"mutability":"mutable","name":"tokenId","nodeType":"VariableDeclaration","scope":940,"src":"632:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":934,"name":"uint256","nodeType":"ElementaryTypeName","src":"632:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"631:17:7"},"returnParameters":{"id":939,"nodeType":"ParameterList","parameters":[{"constant":false,"id":938,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":940,"src":"672:13:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":937,"name":"string","nodeType":"ElementaryTypeName","src":"672:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"671:15:7"},"scope":941,"src":"614:73:7","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":942,"src":"225:464:7"}],"src":"33:657:7"},"id":7},"@openzeppelin/contracts/utils/Address.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","exportedSymbols":{"Address":[1237]},"id":1238,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":943,"literals":["solidity",">=","0.6",".2","<","0.8",".0"],"nodeType":"PragmaDirective","src":"33:31:8"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"library","documentation":{"id":944,"nodeType":"StructuredDocumentation","src":"66:67:8","text":" @dev Collection of functions related to the address type"},"fullyImplemented":true,"id":1237,"linearizedBaseContracts":[1237],"name":"Address","nodeType":"ContractDefinition","nodes":[{"body":{"id":960,"nodeType":"Block","src":"792:347:8","statements":[{"assignments":[953],"declarations":[{"constant":false,"id":953,"mutability":"mutable","name":"size","nodeType":"VariableDeclaration","scope":960,"src":"989:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":952,"name":"uint256","nodeType":"ElementaryTypeName","src":"989:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":954,"nodeType":"VariableDeclarationStatement","src":"989:12:8"},{"AST":{"nodeType":"YulBlock","src":"1076:32:8","statements":[{"nodeType":"YulAssignment","src":"1078:28:8","value":{"arguments":[{"name":"account","nodeType":"YulIdentifier","src":"1098:7:8"}],"functionName":{"name":"extcodesize","nodeType":"YulIdentifier","src":"1086:11:8"},"nodeType":"YulFunctionCall","src":"1086:20:8"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"1078:4:8"}]}]},"evmVersion":"istanbul","externalReferences":[{"declaration":947,"isOffset":false,"isSlot":false,"src":"1098:7:8","valueSize":1},{"declaration":953,"isOffset":false,"isSlot":false,"src":"1078:4:8","valueSize":1}],"id":955,"nodeType":"InlineAssembly","src":"1067:41:8"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":958,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":956,"name":"size","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":953,"src":"1124:4:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":957,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1131:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1124:8:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":951,"id":959,"nodeType":"Return","src":"1117:15:8"}]},"documentation":{"id":945,"nodeType":"StructuredDocumentation","src":"156:565:8","text":" @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n ===="},"id":961,"implemented":true,"kind":"function","modifiers":[],"name":"isContract","nodeType":"FunctionDefinition","parameters":{"id":948,"nodeType":"ParameterList","parameters":[{"constant":false,"id":947,"mutability":"mutable","name":"account","nodeType":"VariableDeclaration","scope":961,"src":"746:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":946,"name":"address","nodeType":"ElementaryTypeName","src":"746:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"745:17:8"},"returnParameters":{"id":951,"nodeType":"ParameterList","parameters":[{"constant":false,"id":950,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":961,"src":"786:4:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":949,"name":"bool","nodeType":"ElementaryTypeName","src":"786:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"785:6:8"},"scope":1237,"src":"726:413:8","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":994,"nodeType":"Block","src":"2127:320:8","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":976,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":972,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2153:4:8","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$1237","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$1237","typeString":"library Address"}],"id":971,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2145:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":970,"name":"address","nodeType":"ElementaryTypeName","src":"2145:7:8","typeDescriptions":{}}},"id":973,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2145:13:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":974,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balance","nodeType":"MemberAccess","src":"2145:21:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":975,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":966,"src":"2170:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2145:31:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e6365","id":977,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2178:31:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""},"value":"Address: insufficient balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""}],"id":969,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2137:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":978,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2137:73:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":979,"nodeType":"ExpressionStatement","src":"2137:73:8"},{"assignments":[981,null],"declarations":[{"constant":false,"id":981,"mutability":"mutable","name":"success","nodeType":"VariableDeclaration","scope":994,"src":"2299:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":980,"name":"bool","nodeType":"ElementaryTypeName","src":"2299:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":988,"initialValue":{"arguments":[{"hexValue":"","id":986,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2349:2:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":982,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":964,"src":"2317:9:8","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":983,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"call","nodeType":"MemberAccess","src":"2317:14:8","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":985,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":984,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":966,"src":"2340:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"2317:31:8","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":987,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2317:35:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"2298:54:8"},{"expression":{"arguments":[{"id":990,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":981,"src":"2370:7:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564","id":991,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2379:60:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""},"value":"Address: unable to send value, recipient may have reverted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""}],"id":989,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2362:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":992,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2362:78:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":993,"nodeType":"ExpressionStatement","src":"2362:78:8"}]},"documentation":{"id":962,"nodeType":"StructuredDocumentation","src":"1145:906:8","text":" @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."},"id":995,"implemented":true,"kind":"function","modifiers":[],"name":"sendValue","nodeType":"FunctionDefinition","parameters":{"id":967,"nodeType":"ParameterList","parameters":[{"constant":false,"id":964,"mutability":"mutable","name":"recipient","nodeType":"VariableDeclaration","scope":995,"src":"2075:25:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":963,"name":"address","nodeType":"ElementaryTypeName","src":"2075:15:8","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":966,"mutability":"mutable","name":"amount","nodeType":"VariableDeclaration","scope":995,"src":"2102:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":965,"name":"uint256","nodeType":"ElementaryTypeName","src":"2102:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2074:43:8"},"returnParameters":{"id":968,"nodeType":"ParameterList","parameters":[],"src":"2127:0:8"},"scope":1237,"src":"2056:391:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1011,"nodeType":"Block","src":"3277:82:8","statements":[{"expression":{"arguments":[{"id":1006,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":998,"src":"3305:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1007,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1000,"src":"3313:4:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564","id":1008,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3319:32:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""},"value":"Address: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""}],"id":1005,"name":"functionCall","nodeType":"Identifier","overloadedDeclarations":[1012,1032],"referencedDeclaration":1032,"src":"3292:12:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":1009,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3292:60:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1004,"id":1010,"nodeType":"Return","src":"3285:67:8"}]},"documentation":{"id":996,"nodeType":"StructuredDocumentation","src":"2453:730:8","text":" @dev Performs a Solidity function call using a low level `call`. A\n plain`call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"},"id":1012,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nodeType":"FunctionDefinition","parameters":{"id":1001,"nodeType":"ParameterList","parameters":[{"constant":false,"id":998,"mutability":"mutable","name":"target","nodeType":"VariableDeclaration","scope":1012,"src":"3210:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":997,"name":"address","nodeType":"ElementaryTypeName","src":"3210:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1000,"mutability":"mutable","name":"data","nodeType":"VariableDeclaration","scope":1012,"src":"3226:17:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":999,"name":"bytes","nodeType":"ElementaryTypeName","src":"3226:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3209:35:8"},"returnParameters":{"id":1004,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1003,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":1012,"src":"3263:12:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1002,"name":"bytes","nodeType":"ElementaryTypeName","src":"3263:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3262:14:8"},"scope":1237,"src":"3188:171:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1031,"nodeType":"Block","src":"3698:76:8","statements":[{"expression":{"arguments":[{"id":1025,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1015,"src":"3737:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1026,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1017,"src":"3745:4:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":1027,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3751:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":1028,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1019,"src":"3754:12:8","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1024,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[1052,1102],"referencedDeclaration":1102,"src":"3715:21:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":1029,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3715:52:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1023,"id":1030,"nodeType":"Return","src":"3708:59:8"}]},"documentation":{"id":1013,"nodeType":"StructuredDocumentation","src":"3365:211:8","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":1032,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nodeType":"FunctionDefinition","parameters":{"id":1020,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1015,"mutability":"mutable","name":"target","nodeType":"VariableDeclaration","scope":1032,"src":"3603:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1014,"name":"address","nodeType":"ElementaryTypeName","src":"3603:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1017,"mutability":"mutable","name":"data","nodeType":"VariableDeclaration","scope":1032,"src":"3619:17:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1016,"name":"bytes","nodeType":"ElementaryTypeName","src":"3619:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1019,"mutability":"mutable","name":"errorMessage","nodeType":"VariableDeclaration","scope":1032,"src":"3638:26:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1018,"name":"string","nodeType":"ElementaryTypeName","src":"3638:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3602:63:8"},"returnParameters":{"id":1023,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1022,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":1032,"src":"3684:12:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1021,"name":"bytes","nodeType":"ElementaryTypeName","src":"3684:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3683:14:8"},"scope":1237,"src":"3581:193:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1051,"nodeType":"Block","src":"4249:111:8","statements":[{"expression":{"arguments":[{"id":1045,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1035,"src":"4288:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1046,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1037,"src":"4296:4:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1047,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1039,"src":"4302:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564","id":1048,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4309:43:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""},"value":"Address: low-level call with value failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""}],"id":1044,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[1052,1102],"referencedDeclaration":1102,"src":"4266:21:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":1049,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4266:87:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1043,"id":1050,"nodeType":"Return","src":"4259:94:8"}]},"documentation":{"id":1033,"nodeType":"StructuredDocumentation","src":"3780:351:8","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"},"id":1052,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nodeType":"FunctionDefinition","parameters":{"id":1040,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1035,"mutability":"mutable","name":"target","nodeType":"VariableDeclaration","scope":1052,"src":"4167:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1034,"name":"address","nodeType":"ElementaryTypeName","src":"4167:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1037,"mutability":"mutable","name":"data","nodeType":"VariableDeclaration","scope":1052,"src":"4183:17:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1036,"name":"bytes","nodeType":"ElementaryTypeName","src":"4183:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1039,"mutability":"mutable","name":"value","nodeType":"VariableDeclaration","scope":1052,"src":"4202:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1038,"name":"uint256","nodeType":"ElementaryTypeName","src":"4202:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4166:50:8"},"returnParameters":{"id":1043,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1042,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":1052,"src":"4235:12:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1041,"name":"bytes","nodeType":"ElementaryTypeName","src":"4235:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4234:14:8"},"scope":1237,"src":"4136:224:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1101,"nodeType":"Block","src":"4749:382:8","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1073,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":1069,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"4775:4:8","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$1237","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$1237","typeString":"library Address"}],"id":1068,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4767:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1067,"name":"address","nodeType":"ElementaryTypeName","src":"4767:7:8","typeDescriptions":{}}},"id":1070,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4767:13:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1071,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balance","nodeType":"MemberAccess","src":"4767:21:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1072,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1059,"src":"4792:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4767:30:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c","id":1074,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4799:40:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""},"value":"Address: insufficient balance for call"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""}],"id":1066,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4759:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1075,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4759:81:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1076,"nodeType":"ExpressionStatement","src":"4759:81:8"},{"expression":{"arguments":[{"arguments":[{"id":1079,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1055,"src":"4869:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1078,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":961,"src":"4858:10:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":1080,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4858:18:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","id":1081,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4878:31:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""},"value":"Address: call to non-contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""}],"id":1077,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4850:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1082,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4850:60:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1083,"nodeType":"ExpressionStatement","src":"4850:60:8"},{"assignments":[1085,1087],"declarations":[{"constant":false,"id":1085,"mutability":"mutable","name":"success","nodeType":"VariableDeclaration","scope":1101,"src":"4981:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1084,"name":"bool","nodeType":"ElementaryTypeName","src":"4981:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1087,"mutability":"mutable","name":"returndata","nodeType":"VariableDeclaration","scope":1101,"src":"4995:23:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1086,"name":"bytes","nodeType":"ElementaryTypeName","src":"4995:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1094,"initialValue":{"arguments":[{"id":1092,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1057,"src":"5050:4:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1088,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1055,"src":"5022:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1089,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"call","nodeType":"MemberAccess","src":"5022:11:8","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1091,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":1090,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1059,"src":"5042:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"5022:27:8","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1093,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5022:33:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"4980:75:8"},{"expression":{"arguments":[{"id":1096,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1085,"src":"5090:7:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1097,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1087,"src":"5099:10:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1098,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1061,"src":"5111:12:8","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1095,"name":"_verifyCallResult","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1236,"src":"5072:17:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (bool,bytes memory,string memory) pure returns (bytes memory)"}},"id":1099,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5072:52:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1065,"id":1100,"nodeType":"Return","src":"5065:59:8"}]},"documentation":{"id":1053,"nodeType":"StructuredDocumentation","src":"4366:237:8","text":" @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":1102,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nodeType":"FunctionDefinition","parameters":{"id":1062,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1055,"mutability":"mutable","name":"target","nodeType":"VariableDeclaration","scope":1102,"src":"4639:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1054,"name":"address","nodeType":"ElementaryTypeName","src":"4639:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1057,"mutability":"mutable","name":"data","nodeType":"VariableDeclaration","scope":1102,"src":"4655:17:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1056,"name":"bytes","nodeType":"ElementaryTypeName","src":"4655:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1059,"mutability":"mutable","name":"value","nodeType":"VariableDeclaration","scope":1102,"src":"4674:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1058,"name":"uint256","nodeType":"ElementaryTypeName","src":"4674:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1061,"mutability":"mutable","name":"errorMessage","nodeType":"VariableDeclaration","scope":1102,"src":"4689:26:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1060,"name":"string","nodeType":"ElementaryTypeName","src":"4689:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4638:78:8"},"returnParameters":{"id":1065,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1064,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":1102,"src":"4735:12:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1063,"name":"bytes","nodeType":"ElementaryTypeName","src":"4735:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4734:14:8"},"scope":1237,"src":"4608:523:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1118,"nodeType":"Block","src":"5408:97:8","statements":[{"expression":{"arguments":[{"id":1113,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1105,"src":"5444:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1114,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1107,"src":"5452:4:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564","id":1115,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5458:39:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""},"value":"Address: low-level static call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""}],"id":1112,"name":"functionStaticCall","nodeType":"Identifier","overloadedDeclarations":[1119,1154],"referencedDeclaration":1154,"src":"5425:18:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) view returns (bytes memory)"}},"id":1116,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5425:73:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1111,"id":1117,"nodeType":"Return","src":"5418:80:8"}]},"documentation":{"id":1103,"nodeType":"StructuredDocumentation","src":"5137:166:8","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":1119,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nodeType":"FunctionDefinition","parameters":{"id":1108,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1105,"mutability":"mutable","name":"target","nodeType":"VariableDeclaration","scope":1119,"src":"5336:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1104,"name":"address","nodeType":"ElementaryTypeName","src":"5336:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1107,"mutability":"mutable","name":"data","nodeType":"VariableDeclaration","scope":1119,"src":"5352:17:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1106,"name":"bytes","nodeType":"ElementaryTypeName","src":"5352:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5335:35:8"},"returnParameters":{"id":1111,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1110,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":1119,"src":"5394:12:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1109,"name":"bytes","nodeType":"ElementaryTypeName","src":"5394:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5393:14:8"},"scope":1237,"src":"5308:197:8","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1153,"nodeType":"Block","src":"5817:288:8","statements":[{"expression":{"arguments":[{"arguments":[{"id":1133,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1122,"src":"5846:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1132,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":961,"src":"5835:10:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":1134,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5835:18:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a207374617469632063616c6c20746f206e6f6e2d636f6e7472616374","id":1135,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5855:38:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_c79cc78e4f16ce3933a42b84c73868f93bb4a59c031a0acf576679de98c608a9","typeString":"literal_string \"Address: static call to non-contract\""},"value":"Address: static call to non-contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c79cc78e4f16ce3933a42b84c73868f93bb4a59c031a0acf576679de98c608a9","typeString":"literal_string \"Address: static call to non-contract\""}],"id":1131,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5827:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1136,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5827:67:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1137,"nodeType":"ExpressionStatement","src":"5827:67:8"},{"assignments":[1139,1141],"declarations":[{"constant":false,"id":1139,"mutability":"mutable","name":"success","nodeType":"VariableDeclaration","scope":1153,"src":"5965:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1138,"name":"bool","nodeType":"ElementaryTypeName","src":"5965:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1141,"mutability":"mutable","name":"returndata","nodeType":"VariableDeclaration","scope":1153,"src":"5979:23:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1140,"name":"bytes","nodeType":"ElementaryTypeName","src":"5979:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1146,"initialValue":{"arguments":[{"id":1144,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1124,"src":"6024:4:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1142,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1122,"src":"6006:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1143,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"staticcall","nodeType":"MemberAccess","src":"6006:17:8","typeDescriptions":{"typeIdentifier":"t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view returns (bool,bytes memory)"}},"id":1145,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6006:23:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"5964:65:8"},{"expression":{"arguments":[{"id":1148,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1139,"src":"6064:7:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1149,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1141,"src":"6073:10:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1150,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1126,"src":"6085:12:8","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1147,"name":"_verifyCallResult","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1236,"src":"6046:17:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (bool,bytes memory,string memory) pure returns (bytes memory)"}},"id":1151,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6046:52:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1130,"id":1152,"nodeType":"Return","src":"6039:59:8"}]},"documentation":{"id":1120,"nodeType":"StructuredDocumentation","src":"5511:173:8","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":1154,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nodeType":"FunctionDefinition","parameters":{"id":1127,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1122,"mutability":"mutable","name":"target","nodeType":"VariableDeclaration","scope":1154,"src":"5717:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1121,"name":"address","nodeType":"ElementaryTypeName","src":"5717:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1124,"mutability":"mutable","name":"data","nodeType":"VariableDeclaration","scope":1154,"src":"5733:17:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1123,"name":"bytes","nodeType":"ElementaryTypeName","src":"5733:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1126,"mutability":"mutable","name":"errorMessage","nodeType":"VariableDeclaration","scope":1154,"src":"5752:26:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1125,"name":"string","nodeType":"ElementaryTypeName","src":"5752:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5716:63:8"},"returnParameters":{"id":1130,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1129,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":1154,"src":"5803:12:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1128,"name":"bytes","nodeType":"ElementaryTypeName","src":"5803:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5802:14:8"},"scope":1237,"src":"5689:416:8","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1170,"nodeType":"Block","src":"6381:101:8","statements":[{"expression":{"arguments":[{"id":1165,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1157,"src":"6419:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1166,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1159,"src":"6427:4:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564","id":1167,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6433:41:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""},"value":"Address: low-level delegate call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""}],"id":1164,"name":"functionDelegateCall","nodeType":"Identifier","overloadedDeclarations":[1171,1206],"referencedDeclaration":1206,"src":"6398:20:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":1168,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6398:77:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1163,"id":1169,"nodeType":"Return","src":"6391:84:8"}]},"documentation":{"id":1155,"nodeType":"StructuredDocumentation","src":"6111:168:8","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":1171,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nodeType":"FunctionDefinition","parameters":{"id":1160,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1157,"mutability":"mutable","name":"target","nodeType":"VariableDeclaration","scope":1171,"src":"6314:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1156,"name":"address","nodeType":"ElementaryTypeName","src":"6314:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1159,"mutability":"mutable","name":"data","nodeType":"VariableDeclaration","scope":1171,"src":"6330:17:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1158,"name":"bytes","nodeType":"ElementaryTypeName","src":"6330:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6313:35:8"},"returnParameters":{"id":1163,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1162,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":1171,"src":"6367:12:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1161,"name":"bytes","nodeType":"ElementaryTypeName","src":"6367:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6366:14:8"},"scope":1237,"src":"6284:198:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1205,"nodeType":"Block","src":"6793:292:8","statements":[{"expression":{"arguments":[{"arguments":[{"id":1185,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1174,"src":"6822:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1184,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":961,"src":"6811:10:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":1186,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6811:18:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6e7472616374","id":1187,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6831:40:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520","typeString":"literal_string \"Address: delegate call to non-contract\""},"value":"Address: delegate call to non-contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520","typeString":"literal_string \"Address: delegate call to non-contract\""}],"id":1183,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6803:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1188,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6803:69:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1189,"nodeType":"ExpressionStatement","src":"6803:69:8"},{"assignments":[1191,1193],"declarations":[{"constant":false,"id":1191,"mutability":"mutable","name":"success","nodeType":"VariableDeclaration","scope":1205,"src":"6943:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1190,"name":"bool","nodeType":"ElementaryTypeName","src":"6943:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1193,"mutability":"mutable","name":"returndata","nodeType":"VariableDeclaration","scope":1205,"src":"6957:23:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1192,"name":"bytes","nodeType":"ElementaryTypeName","src":"6957:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1198,"initialValue":{"arguments":[{"id":1196,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1176,"src":"7004:4:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1194,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1174,"src":"6984:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1195,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"delegatecall","nodeType":"MemberAccess","src":"6984:19:8","typeDescriptions":{"typeIdentifier":"t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) returns (bool,bytes memory)"}},"id":1197,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6984:25:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"6942:67:8"},{"expression":{"arguments":[{"id":1200,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1191,"src":"7044:7:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1201,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1193,"src":"7053:10:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1202,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1178,"src":"7065:12:8","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1199,"name":"_verifyCallResult","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1236,"src":"7026:17:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (bool,bytes memory,string memory) pure returns (bytes memory)"}},"id":1203,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7026:52:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1182,"id":1204,"nodeType":"Return","src":"7019:59:8"}]},"documentation":{"id":1172,"nodeType":"StructuredDocumentation","src":"6488:175:8","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":1206,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nodeType":"FunctionDefinition","parameters":{"id":1179,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1174,"mutability":"mutable","name":"target","nodeType":"VariableDeclaration","scope":1206,"src":"6698:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1173,"name":"address","nodeType":"ElementaryTypeName","src":"6698:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1176,"mutability":"mutable","name":"data","nodeType":"VariableDeclaration","scope":1206,"src":"6714:17:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1175,"name":"bytes","nodeType":"ElementaryTypeName","src":"6714:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1178,"mutability":"mutable","name":"errorMessage","nodeType":"VariableDeclaration","scope":1206,"src":"6733:26:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1177,"name":"string","nodeType":"ElementaryTypeName","src":"6733:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6697:63:8"},"returnParameters":{"id":1182,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1181,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":1206,"src":"6779:12:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1180,"name":"bytes","nodeType":"ElementaryTypeName","src":"6779:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6778:14:8"},"scope":1237,"src":"6668:417:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1235,"nodeType":"Block","src":"7220:596:8","statements":[{"condition":{"id":1217,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1208,"src":"7234:7:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1233,"nodeType":"Block","src":"7291:519:8","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1224,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1221,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1210,"src":"7375:10:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1222,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"7375:17:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1223,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7395:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7375:21:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1231,"nodeType":"Block","src":"7747:53:8","statements":[{"expression":{"arguments":[{"id":1228,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1212,"src":"7772:12:8","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1227,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"7765:6:8","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":1229,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7765:20:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1230,"nodeType":"ExpressionStatement","src":"7765:20:8"}]},"id":1232,"nodeType":"IfStatement","src":"7371:429:8","trueBody":{"id":1226,"nodeType":"Block","src":"7398:343:8","statements":[{"AST":{"nodeType":"YulBlock","src":"7582:145:8","statements":[{"nodeType":"YulVariableDeclaration","src":"7604:40:8","value":{"arguments":[{"name":"returndata","nodeType":"YulIdentifier","src":"7633:10:8"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7627:5:8"},"nodeType":"YulFunctionCall","src":"7627:17:8"},"variables":[{"name":"returndata_size","nodeType":"YulTypedName","src":"7608:15:8","type":""}]},{"expression":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7676:2:8","type":"","value":"32"},{"name":"returndata","nodeType":"YulIdentifier","src":"7680:10:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7672:3:8"},"nodeType":"YulFunctionCall","src":"7672:19:8"},{"name":"returndata_size","nodeType":"YulIdentifier","src":"7693:15:8"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7665:6:8"},"nodeType":"YulFunctionCall","src":"7665:44:8"},"nodeType":"YulExpressionStatement","src":"7665:44:8"}]},"evmVersion":"istanbul","externalReferences":[{"declaration":1210,"isOffset":false,"isSlot":false,"src":"7633:10:8","valueSize":1},{"declaration":1210,"isOffset":false,"isSlot":false,"src":"7680:10:8","valueSize":1}],"id":1225,"nodeType":"InlineAssembly","src":"7573:154:8"}]}}]},"id":1234,"nodeType":"IfStatement","src":"7230:580:8","trueBody":{"id":1220,"nodeType":"Block","src":"7243:42:8","statements":[{"expression":{"id":1218,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1210,"src":"7264:10:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1216,"id":1219,"nodeType":"Return","src":"7257:17:8"}]}}]},"id":1236,"implemented":true,"kind":"function","modifiers":[],"name":"_verifyCallResult","nodeType":"FunctionDefinition","parameters":{"id":1213,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1208,"mutability":"mutable","name":"success","nodeType":"VariableDeclaration","scope":1236,"src":"7118:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1207,"name":"bool","nodeType":"ElementaryTypeName","src":"7118:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1210,"mutability":"mutable","name":"returndata","nodeType":"VariableDeclaration","scope":1236,"src":"7132:23:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1209,"name":"bytes","nodeType":"ElementaryTypeName","src":"7132:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1212,"mutability":"mutable","name":"errorMessage","nodeType":"VariableDeclaration","scope":1236,"src":"7157:26:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1211,"name":"string","nodeType":"ElementaryTypeName","src":"7157:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7117:67:8"},"returnParameters":{"id":1216,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1215,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":1236,"src":"7206:12:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1214,"name":"bytes","nodeType":"ElementaryTypeName","src":"7206:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7205:14:8"},"scope":1237,"src":"7091:725:8","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":1238,"src":"134:7684:8"}],"src":"33:7786:8"},"id":8},"@openzeppelin/contracts/utils/Context.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","exportedSymbols":{"Context":[1260]},"id":1261,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1239,"literals":["solidity",">=","0.6",".0","<","0.8",".0"],"nodeType":"PragmaDirective","src":"33:31:9"},{"abstract":true,"baseContracts":[],"contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":1260,"linearizedBaseContracts":[1260],"name":"Context","nodeType":"ContractDefinition","nodes":[{"body":{"id":1247,"nodeType":"Block","src":"668:34:9","statements":[{"expression":{"expression":{"id":1244,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"685:3:9","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1245,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"685:10:9","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"functionReturnParameters":1243,"id":1246,"nodeType":"Return","src":"678:17:9"}]},"id":1248,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nodeType":"FunctionDefinition","parameters":{"id":1240,"nodeType":"ParameterList","parameters":[],"src":"617:2:9"},"returnParameters":{"id":1243,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1242,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":1248,"src":"651:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":1241,"name":"address","nodeType":"ElementaryTypeName","src":"651:15:9","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"}],"src":"650:17:9"},"scope":1260,"src":"598:104:9","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":1258,"nodeType":"Block","src":"773:165:9","statements":[{"expression":{"id":1253,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"783:4:9","typeDescriptions":{"typeIdentifier":"t_contract$_Context_$1260","typeString":"contract Context"}},"id":1254,"nodeType":"ExpressionStatement","src":"783:4:9"},{"expression":{"expression":{"id":1255,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"923:3:9","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1256,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"data","nodeType":"MemberAccess","src":"923:8:9","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":1252,"id":1257,"nodeType":"Return","src":"916:15:9"}]},"id":1259,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nodeType":"FunctionDefinition","parameters":{"id":1249,"nodeType":"ParameterList","parameters":[],"src":"725:2:9"},"returnParameters":{"id":1252,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1251,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":1259,"src":"759:12:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1250,"name":"bytes","nodeType":"ElementaryTypeName","src":"759:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"758:14:9"},"scope":1260,"src":"708:230:9","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":1261,"src":"566:374:9"}],"src":"33:908:9"},"id":9},"@openzeppelin/contracts/utils/ReentrancyGuard.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/ReentrancyGuard.sol","exportedSymbols":{"ReentrancyGuard":[1300]},"id":1301,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1262,"literals":["solidity",">=","0.6",".0","<","0.8",".0"],"nodeType":"PragmaDirective","src":"33:31:10"},{"abstract":true,"baseContracts":[],"contractDependencies":[],"contractKind":"contract","documentation":{"id":1263,"nodeType":"StructuredDocumentation","src":"66:750:10","text":" @dev Contract module that helps prevent reentrant calls to a function.\n Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n available, which can be applied to functions to make sure there are no nested\n (reentrant) calls to them.\n Note that because there is a single `nonReentrant` guard, functions marked as\n `nonReentrant` may not call one another. This can be worked around by making\n those functions `private`, and then adding `external` `nonReentrant` entry\n points to them.\n TIP: If you would like to learn more about reentrancy and alternative ways\n to protect against it, check out our blog post\n https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul]."},"fullyImplemented":true,"id":1300,"linearizedBaseContracts":[1300],"name":"ReentrancyGuard","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":1266,"mutability":"constant","name":"_NOT_ENTERED","nodeType":"VariableDeclaration","scope":1300,"src":"1605:41:10","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1264,"name":"uint256","nodeType":"ElementaryTypeName","src":"1605:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"31","id":1265,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1645:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"visibility":"private"},{"constant":true,"id":1269,"mutability":"constant","name":"_ENTERED","nodeType":"VariableDeclaration","scope":1300,"src":"1652:37:10","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1267,"name":"uint256","nodeType":"ElementaryTypeName","src":"1652:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"32","id":1268,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1688:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"visibility":"private"},{"constant":false,"id":1271,"mutability":"mutable","name":"_status","nodeType":"VariableDeclaration","scope":1300,"src":"1696:23:10","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1270,"name":"uint256","nodeType":"ElementaryTypeName","src":"1696:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"body":{"id":1278,"nodeType":"Block","src":"1750:39:10","statements":[{"expression":{"id":1276,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1274,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1271,"src":"1760:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1275,"name":"_NOT_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1266,"src":"1770:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1760:22:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1277,"nodeType":"ExpressionStatement","src":"1760:22:10"}]},"id":1279,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nodeType":"FunctionDefinition","parameters":{"id":1272,"nodeType":"ParameterList","parameters":[],"src":"1738:2:10"},"returnParameters":{"id":1273,"nodeType":"ParameterList","parameters":[],"src":"1750:0:10"},"scope":1300,"src":"1726:63:10","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1298,"nodeType":"Block","src":"2188:421:10","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1285,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1283,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1271,"src":"2277:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":1284,"name":"_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1269,"src":"2288:8:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2277:19:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5265656e7472616e637947756172643a207265656e7472616e742063616c6c","id":1286,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2298:33:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619","typeString":"literal_string \"ReentrancyGuard: reentrant call\""},"value":"ReentrancyGuard: reentrant call"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619","typeString":"literal_string \"ReentrancyGuard: reentrant call\""}],"id":1282,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2269:7:10","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1287,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2269:63:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1288,"nodeType":"ExpressionStatement","src":"2269:63:10"},{"expression":{"id":1291,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1289,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1271,"src":"2407:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1290,"name":"_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1269,"src":"2417:8:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2407:18:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1292,"nodeType":"ExpressionStatement","src":"2407:18:10"},{"id":1293,"nodeType":"PlaceholderStatement","src":"2436:1:10"},{"expression":{"id":1296,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1294,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1271,"src":"2580:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1295,"name":"_NOT_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1266,"src":"2590:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2580:22:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1297,"nodeType":"ExpressionStatement","src":"2580:22:10"}]},"documentation":{"id":1280,"nodeType":"StructuredDocumentation","src":"1795:364:10","text":" @dev Prevents a contract from calling itself, directly or indirectly.\n Calling a `nonReentrant` function from another `nonReentrant`\n function is not supported. It is possible to prevent this from happening\n by making the `nonReentrant` function external, and make it call a\n `private` function that does the actual work."},"id":1299,"name":"nonReentrant","nodeType":"ModifierDefinition","parameters":{"id":1281,"nodeType":"ParameterList","parameters":[],"src":"2185:2:10"},"src":"2164:445:10","virtual":false,"visibility":"internal"}],"scope":1301,"src":"817:1794:10"}],"src":"33:2579:10"},"id":10},"@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol":{"ast":{"absolutePath":"@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol","exportedSymbols":{"IUniswapV3Factory":[1383]},"id":1384,"license":"GPL-2.0-or-later","nodeType":"SourceUnit","nodes":[{"id":1302,"literals":["solidity",">=","0.5",".0"],"nodeType":"PragmaDirective","src":"45:24:11"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","documentation":{"id":1303,"nodeType":"StructuredDocumentation","src":"71:163:11","text":"@title The interface for the Uniswap V3 Factory\n @notice The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees"},"fullyImplemented":false,"id":1383,"linearizedBaseContracts":[1383],"name":"IUniswapV3Factory","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":1304,"nodeType":"StructuredDocumentation","src":"268:185:11","text":"@notice Emitted when the owner of the factory is changed\n @param oldOwner The owner before the owner was changed\n @param newOwner The owner after the owner was changed"},"id":1310,"name":"OwnerChanged","nodeType":"EventDefinition","parameters":{"id":1309,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1306,"indexed":true,"mutability":"mutable","name":"oldOwner","nodeType":"VariableDeclaration","scope":1310,"src":"477:24:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1305,"name":"address","nodeType":"ElementaryTypeName","src":"477:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1308,"indexed":true,"mutability":"mutable","name":"newOwner","nodeType":"VariableDeclaration","scope":1310,"src":"503:24:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1307,"name":"address","nodeType":"ElementaryTypeName","src":"503:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"476:52:11"},"src":"458:71:11"},{"anonymous":false,"documentation":{"id":1311,"nodeType":"StructuredDocumentation","src":"535:421:11","text":"@notice Emitted when a pool is created\n @param token0 The first token of the pool by address sort order\n @param token1 The second token of the pool by address sort order\n @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\n @param tickSpacing The minimum number of ticks between initialized ticks\n @param pool The address of the created pool"},"id":1323,"name":"PoolCreated","nodeType":"EventDefinition","parameters":{"id":1322,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1313,"indexed":true,"mutability":"mutable","name":"token0","nodeType":"VariableDeclaration","scope":1323,"src":"988:22:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1312,"name":"address","nodeType":"ElementaryTypeName","src":"988:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1315,"indexed":true,"mutability":"mutable","name":"token1","nodeType":"VariableDeclaration","scope":1323,"src":"1020:22:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1314,"name":"address","nodeType":"ElementaryTypeName","src":"1020:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1317,"indexed":true,"mutability":"mutable","name":"fee","nodeType":"VariableDeclaration","scope":1323,"src":"1052:18:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"},"typeName":{"id":1316,"name":"uint24","nodeType":"ElementaryTypeName","src":"1052:6:11","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"visibility":"internal"},{"constant":false,"id":1319,"indexed":false,"mutability":"mutable","name":"tickSpacing","nodeType":"VariableDeclaration","scope":1323,"src":"1080:17:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":1318,"name":"int24","nodeType":"ElementaryTypeName","src":"1080:5:11","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":1321,"indexed":false,"mutability":"mutable","name":"pool","nodeType":"VariableDeclaration","scope":1323,"src":"1107:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1320,"name":"address","nodeType":"ElementaryTypeName","src":"1107:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"978:147:11"},"src":"961:165:11"},{"anonymous":false,"documentation":{"id":1324,"nodeType":"StructuredDocumentation","src":"1132:275:11","text":"@notice Emitted when a new fee amount is enabled for pool creation via the factory\n @param fee The enabled fee, denominated in hundredths of a bip\n @param tickSpacing The minimum number of ticks between initialized ticks for pools created with the given fee"},"id":1330,"name":"FeeAmountEnabled","nodeType":"EventDefinition","parameters":{"id":1329,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1326,"indexed":true,"mutability":"mutable","name":"fee","nodeType":"VariableDeclaration","scope":1330,"src":"1435:18:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"},"typeName":{"id":1325,"name":"uint24","nodeType":"ElementaryTypeName","src":"1435:6:11","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"visibility":"internal"},{"constant":false,"id":1328,"indexed":true,"mutability":"mutable","name":"tickSpacing","nodeType":"VariableDeclaration","scope":1330,"src":"1455:25:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":1327,"name":"int24","nodeType":"ElementaryTypeName","src":"1455:5:11","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"}],"src":"1434:47:11"},"src":"1412:70:11"},{"documentation":{"id":1331,"nodeType":"StructuredDocumentation","src":"1488:163:11","text":"@notice Returns the current owner of the factory\n @dev Can be changed by the current owner via setOwner\n @return The address of the factory owner"},"functionSelector":"8da5cb5b","id":1336,"implemented":false,"kind":"function","modifiers":[],"name":"owner","nodeType":"FunctionDefinition","parameters":{"id":1332,"nodeType":"ParameterList","parameters":[],"src":"1670:2:11"},"returnParameters":{"id":1335,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1334,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":1336,"src":"1696:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1333,"name":"address","nodeType":"ElementaryTypeName","src":"1696:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1695:9:11"},"scope":1383,"src":"1656:49:11","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1337,"nodeType":"StructuredDocumentation","src":"1711:348:11","text":"@notice Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled\n @dev A fee amount can never be removed, so this value should be hard coded or cached in the calling context\n @param fee The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\n @return The tick spacing"},"functionSelector":"22afcccb","id":1344,"implemented":false,"kind":"function","modifiers":[],"name":"feeAmountTickSpacing","nodeType":"FunctionDefinition","parameters":{"id":1340,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1339,"mutability":"mutable","name":"fee","nodeType":"VariableDeclaration","scope":1344,"src":"2094:10:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"},"typeName":{"id":1338,"name":"uint24","nodeType":"ElementaryTypeName","src":"2094:6:11","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"visibility":"internal"}],"src":"2093:12:11"},"returnParameters":{"id":1343,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1342,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":1344,"src":"2129:5:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":1341,"name":"int24","nodeType":"ElementaryTypeName","src":"2129:5:11","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"}],"src":"2128:7:11"},"scope":1383,"src":"2064:72:11","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1345,"nodeType":"StructuredDocumentation","src":"2142:471:11","text":"@notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\n @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\n @param tokenA The contract address of either token0 or token1\n @param tokenB The contract address of the other token\n @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\n @return pool The pool address"},"functionSelector":"1698ee82","id":1356,"implemented":false,"kind":"function","modifiers":[],"name":"getPool","nodeType":"FunctionDefinition","parameters":{"id":1352,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1347,"mutability":"mutable","name":"tokenA","nodeType":"VariableDeclaration","scope":1356,"src":"2644:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1346,"name":"address","nodeType":"ElementaryTypeName","src":"2644:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1349,"mutability":"mutable","name":"tokenB","nodeType":"VariableDeclaration","scope":1356,"src":"2668:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1348,"name":"address","nodeType":"ElementaryTypeName","src":"2668:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1351,"mutability":"mutable","name":"fee","nodeType":"VariableDeclaration","scope":1356,"src":"2692:10:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"},"typeName":{"id":1350,"name":"uint24","nodeType":"ElementaryTypeName","src":"2692:6:11","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"visibility":"internal"}],"src":"2634:74:11"},"returnParameters":{"id":1355,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1354,"mutability":"mutable","name":"pool","nodeType":"VariableDeclaration","scope":1356,"src":"2732:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1353,"name":"address","nodeType":"ElementaryTypeName","src":"2732:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2731:14:11"},"scope":1383,"src":"2618:128:11","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1357,"nodeType":"StructuredDocumentation","src":"2752:554:11","text":"@notice Creates a pool for the given two tokens and fee\n @param tokenA One of the two tokens in the desired pool\n @param tokenB The other of the two tokens in the desired pool\n @param fee The desired fee for the pool\n @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved\n from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments\n are invalid.\n @return pool The address of the newly created pool"},"functionSelector":"a1671295","id":1368,"implemented":false,"kind":"function","modifiers":[],"name":"createPool","nodeType":"FunctionDefinition","parameters":{"id":1364,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1359,"mutability":"mutable","name":"tokenA","nodeType":"VariableDeclaration","scope":1368,"src":"3340:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1358,"name":"address","nodeType":"ElementaryTypeName","src":"3340:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1361,"mutability":"mutable","name":"tokenB","nodeType":"VariableDeclaration","scope":1368,"src":"3364:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1360,"name":"address","nodeType":"ElementaryTypeName","src":"3364:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1363,"mutability":"mutable","name":"fee","nodeType":"VariableDeclaration","scope":1368,"src":"3388:10:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"},"typeName":{"id":1362,"name":"uint24","nodeType":"ElementaryTypeName","src":"3388:6:11","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"visibility":"internal"}],"src":"3330:74:11"},"returnParameters":{"id":1367,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1366,"mutability":"mutable","name":"pool","nodeType":"VariableDeclaration","scope":1368,"src":"3423:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1365,"name":"address","nodeType":"ElementaryTypeName","src":"3423:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3422:14:11"},"scope":1383,"src":"3311:126:11","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1369,"nodeType":"StructuredDocumentation","src":"3443:144:11","text":"@notice Updates the owner of the factory\n @dev Must be called by the current owner\n @param _owner The new owner of the factory"},"functionSelector":"13af4035","id":1374,"implemented":false,"kind":"function","modifiers":[],"name":"setOwner","nodeType":"FunctionDefinition","parameters":{"id":1372,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1371,"mutability":"mutable","name":"_owner","nodeType":"VariableDeclaration","scope":1374,"src":"3610:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1370,"name":"address","nodeType":"ElementaryTypeName","src":"3610:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3609:16:11"},"returnParameters":{"id":1373,"nodeType":"ParameterList","parameters":[],"src":"3634:0:11"},"scope":1383,"src":"3592:43:11","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1375,"nodeType":"StructuredDocumentation","src":"3641:326:11","text":"@notice Enables a fee amount with the given tickSpacing\n @dev Fee amounts may never be removed once enabled\n @param fee The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)\n @param tickSpacing The spacing between ticks to be enforced for all pools created with the given fee amount"},"functionSelector":"8a7c195f","id":1382,"implemented":false,"kind":"function","modifiers":[],"name":"enableFeeAmount","nodeType":"FunctionDefinition","parameters":{"id":1380,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1377,"mutability":"mutable","name":"fee","nodeType":"VariableDeclaration","scope":1382,"src":"3997:10:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"},"typeName":{"id":1376,"name":"uint24","nodeType":"ElementaryTypeName","src":"3997:6:11","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"visibility":"internal"},{"constant":false,"id":1379,"mutability":"mutable","name":"tickSpacing","nodeType":"VariableDeclaration","scope":1382,"src":"4009:17:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":1378,"name":"int24","nodeType":"ElementaryTypeName","src":"4009:5:11","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"}],"src":"3996:31:11"},"returnParameters":{"id":1381,"nodeType":"ParameterList","parameters":[],"src":"4036:0:11"},"scope":1383,"src":"3972:65:11","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1384,"src":"234:3805:11"}],"src":"45:3995:11"},"id":11},"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol":{"ast":{"absolutePath":"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol","exportedSymbols":{"IUniswapV3Pool":[1405],"IUniswapV3PoolActions":[1529],"IUniswapV3PoolDerivedState":[1560],"IUniswapV3PoolEvents":[1679],"IUniswapV3PoolImmutables":[1719],"IUniswapV3PoolOwnerActions":[1745],"IUniswapV3PoolState":[1853]},"id":1406,"license":"GPL-2.0-or-later","nodeType":"SourceUnit","nodes":[{"id":1385,"literals":["solidity",">=","0.5",".0"],"nodeType":"PragmaDirective","src":"45:24:12"},{"absolutePath":"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol","file":"./pool/IUniswapV3PoolImmutables.sol","id":1386,"nodeType":"ImportDirective","scope":1406,"sourceUnit":1720,"src":"71:45:12","symbolAliases":[],"unitAlias":""},{"absolutePath":"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol","file":"./pool/IUniswapV3PoolState.sol","id":1387,"nodeType":"ImportDirective","scope":1406,"sourceUnit":1854,"src":"117:40:12","symbolAliases":[],"unitAlias":""},{"absolutePath":"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol","file":"./pool/IUniswapV3PoolDerivedState.sol","id":1388,"nodeType":"ImportDirective","scope":1406,"sourceUnit":1561,"src":"158:47:12","symbolAliases":[],"unitAlias":""},{"absolutePath":"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol","file":"./pool/IUniswapV3PoolActions.sol","id":1389,"nodeType":"ImportDirective","scope":1406,"sourceUnit":1530,"src":"206:42:12","symbolAliases":[],"unitAlias":""},{"absolutePath":"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol","file":"./pool/IUniswapV3PoolOwnerActions.sol","id":1390,"nodeType":"ImportDirective","scope":1406,"sourceUnit":1746,"src":"249:47:12","symbolAliases":[],"unitAlias":""},{"absolutePath":"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol","file":"./pool/IUniswapV3PoolEvents.sol","id":1391,"nodeType":"ImportDirective","scope":1406,"sourceUnit":1680,"src":"297:41:12","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":1393,"name":"IUniswapV3PoolImmutables","nodeType":"UserDefinedTypeName","referencedDeclaration":1719,"src":"637:24:12","typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3PoolImmutables_$1719","typeString":"contract IUniswapV3PoolImmutables"}},"id":1394,"nodeType":"InheritanceSpecifier","src":"637:24:12"},{"baseName":{"id":1395,"name":"IUniswapV3PoolState","nodeType":"UserDefinedTypeName","referencedDeclaration":1853,"src":"667:19:12","typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3PoolState_$1853","typeString":"contract IUniswapV3PoolState"}},"id":1396,"nodeType":"InheritanceSpecifier","src":"667:19:12"},{"baseName":{"id":1397,"name":"IUniswapV3PoolDerivedState","nodeType":"UserDefinedTypeName","referencedDeclaration":1560,"src":"692:26:12","typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3PoolDerivedState_$1560","typeString":"contract IUniswapV3PoolDerivedState"}},"id":1398,"nodeType":"InheritanceSpecifier","src":"692:26:12"},{"baseName":{"id":1399,"name":"IUniswapV3PoolActions","nodeType":"UserDefinedTypeName","referencedDeclaration":1529,"src":"724:21:12","typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3PoolActions_$1529","typeString":"contract IUniswapV3PoolActions"}},"id":1400,"nodeType":"InheritanceSpecifier","src":"724:21:12"},{"baseName":{"id":1401,"name":"IUniswapV3PoolOwnerActions","nodeType":"UserDefinedTypeName","referencedDeclaration":1745,"src":"751:26:12","typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3PoolOwnerActions_$1745","typeString":"contract IUniswapV3PoolOwnerActions"}},"id":1402,"nodeType":"InheritanceSpecifier","src":"751:26:12"},{"baseName":{"id":1403,"name":"IUniswapV3PoolEvents","nodeType":"UserDefinedTypeName","referencedDeclaration":1679,"src":"783:20:12","typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3PoolEvents_$1679","typeString":"contract IUniswapV3PoolEvents"}},"id":1404,"nodeType":"InheritanceSpecifier","src":"783:20:12"}],"contractDependencies":[1529,1560,1679,1719,1745,1853],"contractKind":"interface","documentation":{"id":1392,"nodeType":"StructuredDocumentation","src":"340:265:12","text":"@title The interface for a Uniswap V3 Pool\n @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\n to the ERC20 specification\n @dev The pool interface is broken up into many smaller pieces"},"fullyImplemented":false,"id":1405,"linearizedBaseContracts":[1405,1679,1745,1529,1560,1853,1719],"name":"IUniswapV3Pool","nodeType":"ContractDefinition","nodes":[],"scope":1406,"src":"605:203:12"}],"src":"45:764:12"},"id":12},"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3MintCallback.sol":{"ast":{"absolutePath":"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3MintCallback.sol","exportedSymbols":{"IUniswapV3MintCallback":[1419]},"id":1420,"license":"GPL-2.0-or-later","nodeType":"SourceUnit","nodes":[{"id":1407,"literals":["solidity",">=","0.5",".0"],"nodeType":"PragmaDirective","src":"45:24:13"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","documentation":{"id":1408,"nodeType":"StructuredDocumentation","src":"71:144:13","text":"@title Callback for IUniswapV3PoolActions#mint\n @notice Any contract that calls IUniswapV3PoolActions#mint must implement this interface"},"fullyImplemented":false,"id":1419,"linearizedBaseContracts":[1419],"name":"IUniswapV3MintCallback","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1409,"nodeType":"StructuredDocumentation","src":"254:585:13","text":"@notice Called to `msg.sender` after minting liquidity to a position from IUniswapV3Pool#mint.\n @dev In the implementation you must pay the pool tokens owed for the minted liquidity.\n The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\n @param amount0Owed The amount of token0 due to the pool for the minted liquidity\n @param amount1Owed The amount of token1 due to the pool for the minted liquidity\n @param data Any data passed through by the caller via the IUniswapV3PoolActions#mint call"},"functionSelector":"d3487997","id":1418,"implemented":false,"kind":"function","modifiers":[],"name":"uniswapV3MintCallback","nodeType":"FunctionDefinition","parameters":{"id":1416,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1411,"mutability":"mutable","name":"amount0Owed","nodeType":"VariableDeclaration","scope":1418,"src":"884:19:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1410,"name":"uint256","nodeType":"ElementaryTypeName","src":"884:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1413,"mutability":"mutable","name":"amount1Owed","nodeType":"VariableDeclaration","scope":1418,"src":"913:19:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1412,"name":"uint256","nodeType":"ElementaryTypeName","src":"913:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1415,"mutability":"mutable","name":"data","nodeType":"VariableDeclaration","scope":1418,"src":"942:19:13","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1414,"name":"bytes","nodeType":"ElementaryTypeName","src":"942:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"874:93:13"},"returnParameters":{"id":1417,"nodeType":"ParameterList","parameters":[],"src":"976:0:13"},"scope":1419,"src":"844:133:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1420,"src":"215:764:13"}],"src":"45:935:13"},"id":13},"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol":{"ast":{"absolutePath":"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol","exportedSymbols":{"IUniswapV3SwapCallback":[1433]},"id":1434,"license":"GPL-2.0-or-later","nodeType":"SourceUnit","nodes":[{"id":1421,"literals":["solidity",">=","0.5",".0"],"nodeType":"PragmaDirective","src":"45:24:14"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","documentation":{"id":1422,"nodeType":"StructuredDocumentation","src":"71:144:14","text":"@title Callback for IUniswapV3PoolActions#swap\n @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface"},"fullyImplemented":false,"id":1433,"linearizedBaseContracts":[1433],"name":"IUniswapV3SwapCallback","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1423,"nodeType":"StructuredDocumentation","src":"254:898:14","text":"@notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\n @dev In the implementation you must pay the pool tokens owed for the swap.\n The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\n amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\n @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\n the end of the swap. If positive, the callback must send that amount of token0 to the pool.\n @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\n the end of the swap. If positive, the callback must send that amount of token1 to the pool.\n @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call"},"functionSelector":"fa461e33","id":1432,"implemented":false,"kind":"function","modifiers":[],"name":"uniswapV3SwapCallback","nodeType":"FunctionDefinition","parameters":{"id":1430,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1425,"mutability":"mutable","name":"amount0Delta","nodeType":"VariableDeclaration","scope":1432,"src":"1197:19:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1424,"name":"int256","nodeType":"ElementaryTypeName","src":"1197:6:14","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":1427,"mutability":"mutable","name":"amount1Delta","nodeType":"VariableDeclaration","scope":1432,"src":"1226:19:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1426,"name":"int256","nodeType":"ElementaryTypeName","src":"1226:6:14","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":1429,"mutability":"mutable","name":"data","nodeType":"VariableDeclaration","scope":1432,"src":"1255:19:14","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1428,"name":"bytes","nodeType":"ElementaryTypeName","src":"1255:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1187:93:14"},"returnParameters":{"id":1431,"nodeType":"ParameterList","parameters":[],"src":"1289:0:14"},"scope":1433,"src":"1157:133:14","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1434,"src":"215:1077:14"}],"src":"45:1248:14"},"id":14},"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol":{"ast":{"absolutePath":"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol","exportedSymbols":{"IUniswapV3PoolActions":[1529]},"id":1530,"license":"GPL-2.0-or-later","nodeType":"SourceUnit","nodes":[{"id":1435,"literals":["solidity",">=","0.5",".0"],"nodeType":"PragmaDirective","src":"45:24:15"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","documentation":{"id":1436,"nodeType":"StructuredDocumentation","src":"71:102:15","text":"@title Permissionless pool actions\n @notice Contains pool methods that can be called by anyone"},"fullyImplemented":false,"id":1529,"linearizedBaseContracts":[1529],"name":"IUniswapV3PoolActions","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1437,"nodeType":"StructuredDocumentation","src":"211:206:15","text":"@notice Sets the initial price for the pool\n @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\n @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96"},"functionSelector":"f637731d","id":1442,"implemented":false,"kind":"function","modifiers":[],"name":"initialize","nodeType":"FunctionDefinition","parameters":{"id":1440,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1439,"mutability":"mutable","name":"sqrtPriceX96","nodeType":"VariableDeclaration","scope":1442,"src":"442:20:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":1438,"name":"uint160","nodeType":"ElementaryTypeName","src":"442:7:15","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"}],"src":"441:22:15"},"returnParameters":{"id":1441,"nodeType":"ParameterList","parameters":[],"src":"472:0:15"},"scope":1529,"src":"422:51:15","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1443,"nodeType":"StructuredDocumentation","src":"479:1029:15","text":"@notice Adds liquidity for the given recipient/tickLower/tickUpper position\n @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\n in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\n on tickLower, tickUpper, the amount of liquidity, and the current price.\n @param recipient The address for which the liquidity will be created\n @param tickLower The lower tick of the position in which to add liquidity\n @param tickUpper The upper tick of the position in which to add liquidity\n @param amount The amount of liquidity to mint\n @param data Any data that should be passed through to the callback\n @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\n @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback"},"functionSelector":"3c8a7d8d","id":1460,"implemented":false,"kind":"function","modifiers":[],"name":"mint","nodeType":"FunctionDefinition","parameters":{"id":1454,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1445,"mutability":"mutable","name":"recipient","nodeType":"VariableDeclaration","scope":1460,"src":"1536:17:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1444,"name":"address","nodeType":"ElementaryTypeName","src":"1536:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1447,"mutability":"mutable","name":"tickLower","nodeType":"VariableDeclaration","scope":1460,"src":"1563:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":1446,"name":"int24","nodeType":"ElementaryTypeName","src":"1563:5:15","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":1449,"mutability":"mutable","name":"tickUpper","nodeType":"VariableDeclaration","scope":1460,"src":"1588:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":1448,"name":"int24","nodeType":"ElementaryTypeName","src":"1588:5:15","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":1451,"mutability":"mutable","name":"amount","nodeType":"VariableDeclaration","scope":1460,"src":"1613:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":1450,"name":"uint128","nodeType":"ElementaryTypeName","src":"1613:7:15","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"},{"constant":false,"id":1453,"mutability":"mutable","name":"data","nodeType":"VariableDeclaration","scope":1460,"src":"1637:19:15","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1452,"name":"bytes","nodeType":"ElementaryTypeName","src":"1637:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1526:136:15"},"returnParameters":{"id":1459,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1456,"mutability":"mutable","name":"amount0","nodeType":"VariableDeclaration","scope":1460,"src":"1681:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1455,"name":"uint256","nodeType":"ElementaryTypeName","src":"1681:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1458,"mutability":"mutable","name":"amount1","nodeType":"VariableDeclaration","scope":1460,"src":"1698:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1457,"name":"uint256","nodeType":"ElementaryTypeName","src":"1698:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1680:34:15"},"scope":1529,"src":"1513:202:15","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1461,"nodeType":"StructuredDocumentation","src":"1721:1053:15","text":"@notice Collects tokens owed to a position\n @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\n Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\n amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\n actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\n @param recipient The address which should receive the fees collected\n @param tickLower The lower tick of the position for which to collect fees\n @param tickUpper The upper tick of the position for which to collect fees\n @param amount0Requested How much token0 should be withdrawn from the fees owed\n @param amount1Requested How much token1 should be withdrawn from the fees owed\n @return amount0 The amount of fees collected in token0\n @return amount1 The amount of fees collected in token1"},"functionSelector":"4f1eb3d8","id":1478,"implemented":false,"kind":"function","modifiers":[],"name":"collect","nodeType":"FunctionDefinition","parameters":{"id":1472,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1463,"mutability":"mutable","name":"recipient","nodeType":"VariableDeclaration","scope":1478,"src":"2805:17:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1462,"name":"address","nodeType":"ElementaryTypeName","src":"2805:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1465,"mutability":"mutable","name":"tickLower","nodeType":"VariableDeclaration","scope":1478,"src":"2832:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":1464,"name":"int24","nodeType":"ElementaryTypeName","src":"2832:5:15","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":1467,"mutability":"mutable","name":"tickUpper","nodeType":"VariableDeclaration","scope":1478,"src":"2857:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":1466,"name":"int24","nodeType":"ElementaryTypeName","src":"2857:5:15","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":1469,"mutability":"mutable","name":"amount0Requested","nodeType":"VariableDeclaration","scope":1478,"src":"2882:24:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":1468,"name":"uint128","nodeType":"ElementaryTypeName","src":"2882:7:15","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"},{"constant":false,"id":1471,"mutability":"mutable","name":"amount1Requested","nodeType":"VariableDeclaration","scope":1478,"src":"2916:24:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":1470,"name":"uint128","nodeType":"ElementaryTypeName","src":"2916:7:15","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"}],"src":"2795:151:15"},"returnParameters":{"id":1477,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1474,"mutability":"mutable","name":"amount0","nodeType":"VariableDeclaration","scope":1478,"src":"2965:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":1473,"name":"uint128","nodeType":"ElementaryTypeName","src":"2965:7:15","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"},{"constant":false,"id":1476,"mutability":"mutable","name":"amount1","nodeType":"VariableDeclaration","scope":1478,"src":"2982:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":1475,"name":"uint128","nodeType":"ElementaryTypeName","src":"2982:7:15","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"}],"src":"2964:34:15"},"scope":1529,"src":"2779:220:15","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1479,"nodeType":"StructuredDocumentation","src":"3005:631:15","text":"@notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\n @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\n @dev Fees must be collected separately via a call to #collect\n @param tickLower The lower tick of the position for which to burn liquidity\n @param tickUpper The upper tick of the position for which to burn liquidity\n @param amount How much liquidity to burn\n @return amount0 The amount of token0 sent to the recipient\n @return amount1 The amount of token1 sent to the recipient"},"functionSelector":"a34123a7","id":1492,"implemented":false,"kind":"function","modifiers":[],"name":"burn","nodeType":"FunctionDefinition","parameters":{"id":1486,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1481,"mutability":"mutable","name":"tickLower","nodeType":"VariableDeclaration","scope":1492,"src":"3664:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":1480,"name":"int24","nodeType":"ElementaryTypeName","src":"3664:5:15","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":1483,"mutability":"mutable","name":"tickUpper","nodeType":"VariableDeclaration","scope":1492,"src":"3689:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":1482,"name":"int24","nodeType":"ElementaryTypeName","src":"3689:5:15","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":1485,"mutability":"mutable","name":"amount","nodeType":"VariableDeclaration","scope":1492,"src":"3714:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":1484,"name":"uint128","nodeType":"ElementaryTypeName","src":"3714:7:15","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"}],"src":"3654:80:15"},"returnParameters":{"id":1491,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1488,"mutability":"mutable","name":"amount0","nodeType":"VariableDeclaration","scope":1492,"src":"3753:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1487,"name":"uint256","nodeType":"ElementaryTypeName","src":"3753:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1490,"mutability":"mutable","name":"amount1","nodeType":"VariableDeclaration","scope":1492,"src":"3770:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1489,"name":"uint256","nodeType":"ElementaryTypeName","src":"3770:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3752:34:15"},"scope":1529,"src":"3641:146:15","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1493,"nodeType":"StructuredDocumentation","src":"3793:1015:15","text":"@notice Swap token0 for token1, or token1 for token0\n @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\n @param recipient The address to receive the output of the swap\n @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\n @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\n @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\n value after the swap. If one for zero, the price cannot be greater than this value after the swap\n @param data Any data to be passed through to the callback\n @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\n @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive"},"functionSelector":"128acb08","id":1510,"implemented":false,"kind":"function","modifiers":[],"name":"swap","nodeType":"FunctionDefinition","parameters":{"id":1504,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1495,"mutability":"mutable","name":"recipient","nodeType":"VariableDeclaration","scope":1510,"src":"4836:17:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1494,"name":"address","nodeType":"ElementaryTypeName","src":"4836:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1497,"mutability":"mutable","name":"zeroForOne","nodeType":"VariableDeclaration","scope":1510,"src":"4863:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1496,"name":"bool","nodeType":"ElementaryTypeName","src":"4863:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1499,"mutability":"mutable","name":"amountSpecified","nodeType":"VariableDeclaration","scope":1510,"src":"4888:22:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1498,"name":"int256","nodeType":"ElementaryTypeName","src":"4888:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":1501,"mutability":"mutable","name":"sqrtPriceLimitX96","nodeType":"VariableDeclaration","scope":1510,"src":"4920:25:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":1500,"name":"uint160","nodeType":"ElementaryTypeName","src":"4920:7:15","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"},{"constant":false,"id":1503,"mutability":"mutable","name":"data","nodeType":"VariableDeclaration","scope":1510,"src":"4955:19:15","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1502,"name":"bytes","nodeType":"ElementaryTypeName","src":"4955:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4826:154:15"},"returnParameters":{"id":1509,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1506,"mutability":"mutable","name":"amount0","nodeType":"VariableDeclaration","scope":1510,"src":"4999:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1505,"name":"int256","nodeType":"ElementaryTypeName","src":"4999:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":1508,"mutability":"mutable","name":"amount1","nodeType":"VariableDeclaration","scope":1510,"src":"5015:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1507,"name":"int256","nodeType":"ElementaryTypeName","src":"5015:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"4998:32:15"},"scope":1529,"src":"4813:218:15","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1511,"nodeType":"StructuredDocumentation","src":"5037:657:15","text":"@notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\n @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\n @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\n with 0 amount{0,1} and sending the donation amount(s) from the callback\n @param recipient The address which will receive the token0 and token1 amounts\n @param amount0 The amount of token0 to send\n @param amount1 The amount of token1 to send\n @param data Any data to be passed through to the callback"},"functionSelector":"490e6cbc","id":1522,"implemented":false,"kind":"function","modifiers":[],"name":"flash","nodeType":"FunctionDefinition","parameters":{"id":1520,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1513,"mutability":"mutable","name":"recipient","nodeType":"VariableDeclaration","scope":1522,"src":"5723:17:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1512,"name":"address","nodeType":"ElementaryTypeName","src":"5723:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1515,"mutability":"mutable","name":"amount0","nodeType":"VariableDeclaration","scope":1522,"src":"5750:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1514,"name":"uint256","nodeType":"ElementaryTypeName","src":"5750:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1517,"mutability":"mutable","name":"amount1","nodeType":"VariableDeclaration","scope":1522,"src":"5775:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1516,"name":"uint256","nodeType":"ElementaryTypeName","src":"5775:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1519,"mutability":"mutable","name":"data","nodeType":"VariableDeclaration","scope":1522,"src":"5800:19:15","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1518,"name":"bytes","nodeType":"ElementaryTypeName","src":"5800:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5713:112:15"},"returnParameters":{"id":1521,"nodeType":"ParameterList","parameters":[],"src":"5834:0:15"},"scope":1529,"src":"5699:136:15","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1523,"nodeType":"StructuredDocumentation","src":"5841:367:15","text":"@notice Increase the maximum number of price and liquidity observations that this pool will store\n @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\n the input observationCardinalityNext.\n @param observationCardinalityNext The desired minimum number of observations for the pool to store"},"functionSelector":"32148f67","id":1528,"implemented":false,"kind":"function","modifiers":[],"name":"increaseObservationCardinalityNext","nodeType":"FunctionDefinition","parameters":{"id":1526,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1525,"mutability":"mutable","name":"observationCardinalityNext","nodeType":"VariableDeclaration","scope":1528,"src":"6257:33:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":1524,"name":"uint16","nodeType":"ElementaryTypeName","src":"6257:6:15","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"src":"6256:35:15"},"returnParameters":{"id":1527,"nodeType":"ParameterList","parameters":[],"src":"6300:0:15"},"scope":1529,"src":"6213:88:15","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1530,"src":"173:6130:15"}],"src":"45:6259:15"},"id":15},"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol":{"ast":{"absolutePath":"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol","exportedSymbols":{"IUniswapV3PoolDerivedState":[1560]},"id":1561,"license":"GPL-2.0-or-later","nodeType":"SourceUnit","nodes":[{"id":1531,"literals":["solidity",">=","0.5",".0"],"nodeType":"PragmaDirective","src":"45:24:16"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","documentation":{"id":1532,"nodeType":"StructuredDocumentation","src":"71:222:16","text":"@title Pool state that is not stored\n @notice Contains view functions to provide information about the pool that is computed rather than stored on the\n blockchain. The functions here may have variable gas costs."},"fullyImplemented":false,"id":1560,"linearizedBaseContracts":[1560],"name":"IUniswapV3PoolDerivedState","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1533,"nodeType":"StructuredDocumentation","src":"336:1045:16","text":"@notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\n @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\n the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\n you must call it with secondsAgos = [3600, 0].\n @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\n log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\n @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\n @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\n @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\n timestamp"},"functionSelector":"883bdbfd","id":1545,"implemented":false,"kind":"function","modifiers":[],"name":"observe","nodeType":"FunctionDefinition","parameters":{"id":1537,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1536,"mutability":"mutable","name":"secondsAgos","nodeType":"VariableDeclaration","scope":1545,"src":"1403:29:16","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint32_$dyn_calldata_ptr","typeString":"uint32[]"},"typeName":{"baseType":{"id":1534,"name":"uint32","nodeType":"ElementaryTypeName","src":"1403:6:16","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"id":1535,"nodeType":"ArrayTypeName","src":"1403:8:16","typeDescriptions":{"typeIdentifier":"t_array$_t_uint32_$dyn_storage_ptr","typeString":"uint32[]"}},"visibility":"internal"}],"src":"1402:31:16"},"returnParameters":{"id":1544,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1540,"mutability":"mutable","name":"tickCumulatives","nodeType":"VariableDeclaration","scope":1545,"src":"1481:30:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_int56_$dyn_memory_ptr","typeString":"int56[]"},"typeName":{"baseType":{"id":1538,"name":"int56","nodeType":"ElementaryTypeName","src":"1481:5:16","typeDescriptions":{"typeIdentifier":"t_int56","typeString":"int56"}},"id":1539,"nodeType":"ArrayTypeName","src":"1481:7:16","typeDescriptions":{"typeIdentifier":"t_array$_t_int56_$dyn_storage_ptr","typeString":"int56[]"}},"visibility":"internal"},{"constant":false,"id":1543,"mutability":"mutable","name":"secondsPerLiquidityCumulativeX128s","nodeType":"VariableDeclaration","scope":1545,"src":"1513:51:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint160_$dyn_memory_ptr","typeString":"uint160[]"},"typeName":{"baseType":{"id":1541,"name":"uint160","nodeType":"ElementaryTypeName","src":"1513:7:16","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"id":1542,"nodeType":"ArrayTypeName","src":"1513:9:16","typeDescriptions":{"typeIdentifier":"t_array$_t_uint160_$dyn_storage_ptr","typeString":"uint160[]"}},"visibility":"internal"}],"src":"1480:85:16"},"scope":1560,"src":"1386:180:16","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1546,"nodeType":"StructuredDocumentation","src":"1572:771:16","text":"@notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\n @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\n I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\n snapshot is taken and the second snapshot is taken.\n @param tickLower The lower tick of the range\n @param tickUpper The upper tick of the range\n @return tickCumulativeInside The snapshot of the tick accumulator for the range\n @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\n @return secondsInside The snapshot of seconds per liquidity for the range"},"functionSelector":"a38807f2","id":1559,"implemented":false,"kind":"function","modifiers":[],"name":"snapshotCumulativesInside","nodeType":"FunctionDefinition","parameters":{"id":1551,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1548,"mutability":"mutable","name":"tickLower","nodeType":"VariableDeclaration","scope":1559,"src":"2383:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":1547,"name":"int24","nodeType":"ElementaryTypeName","src":"2383:5:16","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":1550,"mutability":"mutable","name":"tickUpper","nodeType":"VariableDeclaration","scope":1559,"src":"2400:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":1549,"name":"int24","nodeType":"ElementaryTypeName","src":"2400:5:16","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"}],"src":"2382:34:16"},"returnParameters":{"id":1558,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1553,"mutability":"mutable","name":"tickCumulativeInside","nodeType":"VariableDeclaration","scope":1559,"src":"2477:26:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int56","typeString":"int56"},"typeName":{"id":1552,"name":"int56","nodeType":"ElementaryTypeName","src":"2477:5:16","typeDescriptions":{"typeIdentifier":"t_int56","typeString":"int56"}},"visibility":"internal"},{"constant":false,"id":1555,"mutability":"mutable","name":"secondsPerLiquidityInsideX128","nodeType":"VariableDeclaration","scope":1559,"src":"2517:37:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":1554,"name":"uint160","nodeType":"ElementaryTypeName","src":"2517:7:16","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"},{"constant":false,"id":1557,"mutability":"mutable","name":"secondsInside","nodeType":"VariableDeclaration","scope":1559,"src":"2568:20:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":1556,"name":"uint32","nodeType":"ElementaryTypeName","src":"2568:6:16","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"2463:135:16"},"scope":1560,"src":"2348:251:16","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1561,"src":"293:2308:16"}],"src":"45:2557:16"},"id":16},"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol":{"ast":{"absolutePath":"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol","exportedSymbols":{"IUniswapV3PoolEvents":[1679]},"id":1680,"license":"GPL-2.0-or-later","nodeType":"SourceUnit","nodes":[{"id":1562,"literals":["solidity",">=","0.5",".0"],"nodeType":"PragmaDirective","src":"45:24:17"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","documentation":{"id":1563,"nodeType":"StructuredDocumentation","src":"71:88:17","text":"@title Events emitted by a pool\n @notice Contains all events emitted by the pool"},"fullyImplemented":true,"id":1679,"linearizedBaseContracts":[1679],"name":"IUniswapV3PoolEvents","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":1564,"nodeType":"StructuredDocumentation","src":"196:344:17","text":"@notice Emitted exactly once by a pool when #initialize is first called on the pool\n @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\n @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\n @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool"},"id":1570,"name":"Initialize","nodeType":"EventDefinition","parameters":{"id":1569,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1566,"indexed":false,"mutability":"mutable","name":"sqrtPriceX96","nodeType":"VariableDeclaration","scope":1570,"src":"562:20:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":1565,"name":"uint160","nodeType":"ElementaryTypeName","src":"562:7:17","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"},{"constant":false,"id":1568,"indexed":false,"mutability":"mutable","name":"tick","nodeType":"VariableDeclaration","scope":1570,"src":"584:10:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":1567,"name":"int24","nodeType":"ElementaryTypeName","src":"584:5:17","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"}],"src":"561:34:17"},"src":"545:51:17"},{"anonymous":false,"documentation":{"id":1571,"nodeType":"StructuredDocumentation","src":"602:551:17","text":"@notice Emitted when liquidity is minted for a given position\n @param sender The address that minted the liquidity\n @param owner The owner of the position and recipient of any minted liquidity\n @param tickLower The lower tick of the position\n @param tickUpper The upper tick of the position\n @param amount The amount of liquidity minted to the position range\n @param amount0 How much token0 was required for the minted liquidity\n @param amount1 How much token1 was required for the minted liquidity"},"id":1587,"name":"Mint","nodeType":"EventDefinition","parameters":{"id":1586,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1573,"indexed":false,"mutability":"mutable","name":"sender","nodeType":"VariableDeclaration","scope":1587,"src":"1178:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1572,"name":"address","nodeType":"ElementaryTypeName","src":"1178:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1575,"indexed":true,"mutability":"mutable","name":"owner","nodeType":"VariableDeclaration","scope":1587,"src":"1202:21:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1574,"name":"address","nodeType":"ElementaryTypeName","src":"1202:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1577,"indexed":true,"mutability":"mutable","name":"tickLower","nodeType":"VariableDeclaration","scope":1587,"src":"1233:23:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":1576,"name":"int24","nodeType":"ElementaryTypeName","src":"1233:5:17","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":1579,"indexed":true,"mutability":"mutable","name":"tickUpper","nodeType":"VariableDeclaration","scope":1587,"src":"1266:23:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":1578,"name":"int24","nodeType":"ElementaryTypeName","src":"1266:5:17","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":1581,"indexed":false,"mutability":"mutable","name":"amount","nodeType":"VariableDeclaration","scope":1587,"src":"1299:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":1580,"name":"uint128","nodeType":"ElementaryTypeName","src":"1299:7:17","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"},{"constant":false,"id":1583,"indexed":false,"mutability":"mutable","name":"amount0","nodeType":"VariableDeclaration","scope":1587,"src":"1323:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1582,"name":"uint256","nodeType":"ElementaryTypeName","src":"1323:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1585,"indexed":false,"mutability":"mutable","name":"amount1","nodeType":"VariableDeclaration","scope":1587,"src":"1348:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1584,"name":"uint256","nodeType":"ElementaryTypeName","src":"1348:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1168:201:17"},"src":"1158:212:17"},{"anonymous":false,"documentation":{"id":1588,"nodeType":"StructuredDocumentation","src":"1376:493:17","text":"@notice Emitted when fees are collected by the owner of a position\n @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\n @param owner The owner of the position for which fees are collected\n @param tickLower The lower tick of the position\n @param tickUpper The upper tick of the position\n @param amount0 The amount of token0 fees collected\n @param amount1 The amount of token1 fees collected"},"id":1602,"name":"Collect","nodeType":"EventDefinition","parameters":{"id":1601,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1590,"indexed":true,"mutability":"mutable","name":"owner","nodeType":"VariableDeclaration","scope":1602,"src":"1897:21:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1589,"name":"address","nodeType":"ElementaryTypeName","src":"1897:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1592,"indexed":false,"mutability":"mutable","name":"recipient","nodeType":"VariableDeclaration","scope":1602,"src":"1928:17:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1591,"name":"address","nodeType":"ElementaryTypeName","src":"1928:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1594,"indexed":true,"mutability":"mutable","name":"tickLower","nodeType":"VariableDeclaration","scope":1602,"src":"1955:23:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":1593,"name":"int24","nodeType":"ElementaryTypeName","src":"1955:5:17","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":1596,"indexed":true,"mutability":"mutable","name":"tickUpper","nodeType":"VariableDeclaration","scope":1602,"src":"1988:23:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":1595,"name":"int24","nodeType":"ElementaryTypeName","src":"1988:5:17","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":1598,"indexed":false,"mutability":"mutable","name":"amount0","nodeType":"VariableDeclaration","scope":1602,"src":"2021:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":1597,"name":"uint128","nodeType":"ElementaryTypeName","src":"2021:7:17","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"},{"constant":false,"id":1600,"indexed":false,"mutability":"mutable","name":"amount1","nodeType":"VariableDeclaration","scope":1602,"src":"2046:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":1599,"name":"uint128","nodeType":"ElementaryTypeName","src":"2046:7:17","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"}],"src":"1887:180:17"},"src":"1874:194:17"},{"anonymous":false,"documentation":{"id":1603,"nodeType":"StructuredDocumentation","src":"2074:523:17","text":"@notice Emitted when a position's liquidity is removed\n @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\n @param owner The owner of the position for which liquidity is removed\n @param tickLower The lower tick of the position\n @param tickUpper The upper tick of the position\n @param amount The amount of liquidity to remove\n @param amount0 The amount of token0 withdrawn\n @param amount1 The amount of token1 withdrawn"},"id":1617,"name":"Burn","nodeType":"EventDefinition","parameters":{"id":1616,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1605,"indexed":true,"mutability":"mutable","name":"owner","nodeType":"VariableDeclaration","scope":1617,"src":"2622:21:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1604,"name":"address","nodeType":"ElementaryTypeName","src":"2622:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1607,"indexed":true,"mutability":"mutable","name":"tickLower","nodeType":"VariableDeclaration","scope":1617,"src":"2653:23:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":1606,"name":"int24","nodeType":"ElementaryTypeName","src":"2653:5:17","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":1609,"indexed":true,"mutability":"mutable","name":"tickUpper","nodeType":"VariableDeclaration","scope":1617,"src":"2686:23:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":1608,"name":"int24","nodeType":"ElementaryTypeName","src":"2686:5:17","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":1611,"indexed":false,"mutability":"mutable","name":"amount","nodeType":"VariableDeclaration","scope":1617,"src":"2719:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":1610,"name":"uint128","nodeType":"ElementaryTypeName","src":"2719:7:17","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"},{"constant":false,"id":1613,"indexed":false,"mutability":"mutable","name":"amount0","nodeType":"VariableDeclaration","scope":1617,"src":"2743:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1612,"name":"uint256","nodeType":"ElementaryTypeName","src":"2743:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1615,"indexed":false,"mutability":"mutable","name":"amount1","nodeType":"VariableDeclaration","scope":1617,"src":"2768:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1614,"name":"uint256","nodeType":"ElementaryTypeName","src":"2768:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2612:177:17"},"src":"2602:188:17"},{"anonymous":false,"documentation":{"id":1618,"nodeType":"StructuredDocumentation","src":"2796:600:17","text":"@notice Emitted by the pool for any swaps between token0 and token1\n @param sender The address that initiated the swap call, and that received the callback\n @param recipient The address that received the output of the swap\n @param amount0 The delta of the token0 balance of the pool\n @param amount1 The delta of the token1 balance of the pool\n @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\n @param liquidity The liquidity of the pool after the swap\n @param tick The log base 1.0001 of price of the pool after the swap"},"id":1634,"name":"Swap","nodeType":"EventDefinition","parameters":{"id":1633,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1620,"indexed":true,"mutability":"mutable","name":"sender","nodeType":"VariableDeclaration","scope":1634,"src":"3421:22:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1619,"name":"address","nodeType":"ElementaryTypeName","src":"3421:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1622,"indexed":true,"mutability":"mutable","name":"recipient","nodeType":"VariableDeclaration","scope":1634,"src":"3453:25:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1621,"name":"address","nodeType":"ElementaryTypeName","src":"3453:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1624,"indexed":false,"mutability":"mutable","name":"amount0","nodeType":"VariableDeclaration","scope":1634,"src":"3488:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1623,"name":"int256","nodeType":"ElementaryTypeName","src":"3488:6:17","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":1626,"indexed":false,"mutability":"mutable","name":"amount1","nodeType":"VariableDeclaration","scope":1634,"src":"3512:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1625,"name":"int256","nodeType":"ElementaryTypeName","src":"3512:6:17","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":1628,"indexed":false,"mutability":"mutable","name":"sqrtPriceX96","nodeType":"VariableDeclaration","scope":1634,"src":"3536:20:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":1627,"name":"uint160","nodeType":"ElementaryTypeName","src":"3536:7:17","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"},{"constant":false,"id":1630,"indexed":false,"mutability":"mutable","name":"liquidity","nodeType":"VariableDeclaration","scope":1634,"src":"3566:17:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":1629,"name":"uint128","nodeType":"ElementaryTypeName","src":"3566:7:17","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"},{"constant":false,"id":1632,"indexed":false,"mutability":"mutable","name":"tick","nodeType":"VariableDeclaration","scope":1634,"src":"3593:10:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":1631,"name":"int24","nodeType":"ElementaryTypeName","src":"3593:5:17","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"}],"src":"3411:198:17"},"src":"3401:209:17"},{"anonymous":false,"documentation":{"id":1635,"nodeType":"StructuredDocumentation","src":"3616:562:17","text":"@notice Emitted by the pool for any flashes of token0/token1\n @param sender The address that initiated the swap call, and that received the callback\n @param recipient The address that received the tokens from flash\n @param amount0 The amount of token0 that was flashed\n @param amount1 The amount of token1 that was flashed\n @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\n @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee"},"id":1649,"name":"Flash","nodeType":"EventDefinition","parameters":{"id":1648,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1637,"indexed":true,"mutability":"mutable","name":"sender","nodeType":"VariableDeclaration","scope":1649,"src":"4204:22:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1636,"name":"address","nodeType":"ElementaryTypeName","src":"4204:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1639,"indexed":true,"mutability":"mutable","name":"recipient","nodeType":"VariableDeclaration","scope":1649,"src":"4236:25:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1638,"name":"address","nodeType":"ElementaryTypeName","src":"4236:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1641,"indexed":false,"mutability":"mutable","name":"amount0","nodeType":"VariableDeclaration","scope":1649,"src":"4271:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1640,"name":"uint256","nodeType":"ElementaryTypeName","src":"4271:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1643,"indexed":false,"mutability":"mutable","name":"amount1","nodeType":"VariableDeclaration","scope":1649,"src":"4296:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1642,"name":"uint256","nodeType":"ElementaryTypeName","src":"4296:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1645,"indexed":false,"mutability":"mutable","name":"paid0","nodeType":"VariableDeclaration","scope":1649,"src":"4321:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1644,"name":"uint256","nodeType":"ElementaryTypeName","src":"4321:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1647,"indexed":false,"mutability":"mutable","name":"paid1","nodeType":"VariableDeclaration","scope":1649,"src":"4344:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1646,"name":"uint256","nodeType":"ElementaryTypeName","src":"4344:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4194:169:17"},"src":"4183:181:17"},{"anonymous":false,"documentation":{"id":1650,"nodeType":"StructuredDocumentation","src":"4370:451:17","text":"@notice Emitted by the pool for increases to the number of observations that can be stored\n @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\n just before a mint/swap/burn.\n @param observationCardinalityNextOld The previous value of the next observation cardinality\n @param observationCardinalityNextNew The updated value of the next observation cardinality"},"id":1656,"name":"IncreaseObservationCardinalityNext","nodeType":"EventDefinition","parameters":{"id":1655,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1652,"indexed":false,"mutability":"mutable","name":"observationCardinalityNextOld","nodeType":"VariableDeclaration","scope":1656,"src":"4876:36:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":1651,"name":"uint16","nodeType":"ElementaryTypeName","src":"4876:6:17","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":1654,"indexed":false,"mutability":"mutable","name":"observationCardinalityNextNew","nodeType":"VariableDeclaration","scope":1656,"src":"4922:36:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":1653,"name":"uint16","nodeType":"ElementaryTypeName","src":"4922:6:17","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"src":"4866:98:17"},"src":"4826:139:17"},{"anonymous":false,"documentation":{"id":1657,"nodeType":"StructuredDocumentation","src":"4971:370:17","text":"@notice Emitted when the protocol fee is changed by the pool\n @param feeProtocol0Old The previous value of the token0 protocol fee\n @param feeProtocol1Old The previous value of the token1 protocol fee\n @param feeProtocol0New The updated value of the token0 protocol fee\n @param feeProtocol1New The updated value of the token1 protocol fee"},"id":1667,"name":"SetFeeProtocol","nodeType":"EventDefinition","parameters":{"id":1666,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1659,"indexed":false,"mutability":"mutable","name":"feeProtocol0Old","nodeType":"VariableDeclaration","scope":1667,"src":"5367:21:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1658,"name":"uint8","nodeType":"ElementaryTypeName","src":"5367:5:17","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":1661,"indexed":false,"mutability":"mutable","name":"feeProtocol1Old","nodeType":"VariableDeclaration","scope":1667,"src":"5390:21:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1660,"name":"uint8","nodeType":"ElementaryTypeName","src":"5390:5:17","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":1663,"indexed":false,"mutability":"mutable","name":"feeProtocol0New","nodeType":"VariableDeclaration","scope":1667,"src":"5413:21:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1662,"name":"uint8","nodeType":"ElementaryTypeName","src":"5413:5:17","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":1665,"indexed":false,"mutability":"mutable","name":"feeProtocol1New","nodeType":"VariableDeclaration","scope":1667,"src":"5436:21:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1664,"name":"uint8","nodeType":"ElementaryTypeName","src":"5436:5:17","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"5366:92:17"},"src":"5346:113:17"},{"anonymous":false,"documentation":{"id":1668,"nodeType":"StructuredDocumentation","src":"5465:384:17","text":"@notice Emitted when the collected protocol fees are withdrawn by the factory owner\n @param sender The address that collects the protocol fees\n @param recipient The address that receives the collected protocol fees\n @param amount0 The amount of token0 protocol fees that is withdrawn\n @param amount0 The amount of token1 protocol fees that is withdrawn"},"id":1678,"name":"CollectProtocol","nodeType":"EventDefinition","parameters":{"id":1677,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1670,"indexed":true,"mutability":"mutable","name":"sender","nodeType":"VariableDeclaration","scope":1678,"src":"5876:22:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1669,"name":"address","nodeType":"ElementaryTypeName","src":"5876:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1672,"indexed":true,"mutability":"mutable","name":"recipient","nodeType":"VariableDeclaration","scope":1678,"src":"5900:25:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1671,"name":"address","nodeType":"ElementaryTypeName","src":"5900:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1674,"indexed":false,"mutability":"mutable","name":"amount0","nodeType":"VariableDeclaration","scope":1678,"src":"5927:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":1673,"name":"uint128","nodeType":"ElementaryTypeName","src":"5927:7:17","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"},{"constant":false,"id":1676,"indexed":false,"mutability":"mutable","name":"amount1","nodeType":"VariableDeclaration","scope":1678,"src":"5944:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":1675,"name":"uint128","nodeType":"ElementaryTypeName","src":"5944:7:17","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"}],"src":"5875:85:17"},"src":"5854:107:17"}],"scope":1680,"src":"159:5804:17"}],"src":"45:5919:17"},"id":17},"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol":{"ast":{"absolutePath":"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol","exportedSymbols":{"IUniswapV3PoolImmutables":[1719]},"id":1720,"license":"GPL-2.0-or-later","nodeType":"SourceUnit","nodes":[{"id":1681,"literals":["solidity",">=","0.5",".0"],"nodeType":"PragmaDirective","src":"45:24:18"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","documentation":{"id":1682,"nodeType":"StructuredDocumentation","src":"71:153:18","text":"@title Pool state that never changes\n @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values"},"fullyImplemented":false,"id":1719,"linearizedBaseContracts":[1719],"name":"IUniswapV3PoolImmutables","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1683,"nodeType":"StructuredDocumentation","src":"265:138:18","text":"@notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\n @return The contract address"},"functionSelector":"c45a0155","id":1688,"implemented":false,"kind":"function","modifiers":[],"name":"factory","nodeType":"FunctionDefinition","parameters":{"id":1684,"nodeType":"ParameterList","parameters":[],"src":"424:2:18"},"returnParameters":{"id":1687,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1686,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":1688,"src":"450:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1685,"name":"address","nodeType":"ElementaryTypeName","src":"450:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"449:9:18"},"scope":1719,"src":"408:51:18","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1689,"nodeType":"StructuredDocumentation","src":"465:113:18","text":"@notice The first of the two tokens of the pool, sorted by address\n @return The token contract address"},"functionSelector":"0dfe1681","id":1694,"implemented":false,"kind":"function","modifiers":[],"name":"token0","nodeType":"FunctionDefinition","parameters":{"id":1690,"nodeType":"ParameterList","parameters":[],"src":"598:2:18"},"returnParameters":{"id":1693,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1692,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":1694,"src":"624:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1691,"name":"address","nodeType":"ElementaryTypeName","src":"624:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"623:9:18"},"scope":1719,"src":"583:50:18","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1695,"nodeType":"StructuredDocumentation","src":"639:114:18","text":"@notice The second of the two tokens of the pool, sorted by address\n @return The token contract address"},"functionSelector":"d21220a7","id":1700,"implemented":false,"kind":"function","modifiers":[],"name":"token1","nodeType":"FunctionDefinition","parameters":{"id":1696,"nodeType":"ParameterList","parameters":[],"src":"773:2:18"},"returnParameters":{"id":1699,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1698,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":1700,"src":"799:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1697,"name":"address","nodeType":"ElementaryTypeName","src":"799:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"798:9:18"},"scope":1719,"src":"758:50:18","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1701,"nodeType":"StructuredDocumentation","src":"814:84:18","text":"@notice The pool's fee in hundredths of a bip, i.e. 1e-6\n @return The fee"},"functionSelector":"ddca3f43","id":1706,"implemented":false,"kind":"function","modifiers":[],"name":"fee","nodeType":"FunctionDefinition","parameters":{"id":1702,"nodeType":"ParameterList","parameters":[],"src":"915:2:18"},"returnParameters":{"id":1705,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1704,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":1706,"src":"941:6:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"},"typeName":{"id":1703,"name":"uint24","nodeType":"ElementaryTypeName","src":"941:6:18","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"visibility":"internal"}],"src":"940:8:18"},"scope":1719,"src":"903:46:18","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1707,"nodeType":"StructuredDocumentation","src":"955:358:18","text":"@notice The pool tick spacing\n @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\n e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\n This value is an int24 to avoid casting even though it is always positive.\n @return The tick spacing"},"functionSelector":"d0c93a7c","id":1712,"implemented":false,"kind":"function","modifiers":[],"name":"tickSpacing","nodeType":"FunctionDefinition","parameters":{"id":1708,"nodeType":"ParameterList","parameters":[],"src":"1338:2:18"},"returnParameters":{"id":1711,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1710,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":1712,"src":"1364:5:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":1709,"name":"int24","nodeType":"ElementaryTypeName","src":"1364:5:18","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"}],"src":"1363:7:18"},"scope":1719,"src":"1318:53:18","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1713,"nodeType":"StructuredDocumentation","src":"1377:363:18","text":"@notice The maximum amount of position liquidity that can use any tick in the range\n @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\n also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\n @return The max amount of liquidity per tick"},"functionSelector":"70cf754a","id":1718,"implemented":false,"kind":"function","modifiers":[],"name":"maxLiquidityPerTick","nodeType":"FunctionDefinition","parameters":{"id":1714,"nodeType":"ParameterList","parameters":[],"src":"1773:2:18"},"returnParameters":{"id":1717,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1716,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":1718,"src":"1799:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":1715,"name":"uint128","nodeType":"ElementaryTypeName","src":"1799:7:18","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"}],"src":"1798:9:18"},"scope":1719,"src":"1745:63:18","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1720,"src":"224:1586:18"}],"src":"45:1766:18"},"id":18},"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol":{"ast":{"absolutePath":"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol","exportedSymbols":{"IUniswapV3PoolOwnerActions":[1745]},"id":1746,"license":"GPL-2.0-or-later","nodeType":"SourceUnit","nodes":[{"id":1721,"literals":["solidity",">=","0.5",".0"],"nodeType":"PragmaDirective","src":"45:24:19"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","documentation":{"id":1722,"nodeType":"StructuredDocumentation","src":"71:116:19","text":"@title Permissioned pool actions\n @notice Contains pool methods that may only be called by the factory owner"},"fullyImplemented":false,"id":1745,"linearizedBaseContracts":[1745],"name":"IUniswapV3PoolOwnerActions","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1723,"nodeType":"StructuredDocumentation","src":"230:205:19","text":"@notice Set the denominator of the protocol's % share of the fees\n @param feeProtocol0 new protocol fee for token0 of the pool\n @param feeProtocol1 new protocol fee for token1 of the pool"},"functionSelector":"8206a4d1","id":1730,"implemented":false,"kind":"function","modifiers":[],"name":"setFeeProtocol","nodeType":"FunctionDefinition","parameters":{"id":1728,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1725,"mutability":"mutable","name":"feeProtocol0","nodeType":"VariableDeclaration","scope":1730,"src":"464:18:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1724,"name":"uint8","nodeType":"ElementaryTypeName","src":"464:5:19","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":1727,"mutability":"mutable","name":"feeProtocol1","nodeType":"VariableDeclaration","scope":1730,"src":"484:18:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1726,"name":"uint8","nodeType":"ElementaryTypeName","src":"484:5:19","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"463:40:19"},"returnParameters":{"id":1729,"nodeType":"ParameterList","parameters":[],"src":"512:0:19"},"scope":1745,"src":"440:73:19","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1731,"nodeType":"StructuredDocumentation","src":"519:483:19","text":"@notice Collect the protocol fee accrued to the pool\n @param recipient The address to which collected protocol fees should be sent\n @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\n @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\n @return amount0 The protocol fee collected in token0\n @return amount1 The protocol fee collected in token1"},"functionSelector":"85b66729","id":1744,"implemented":false,"kind":"function","modifiers":[],"name":"collectProtocol","nodeType":"FunctionDefinition","parameters":{"id":1738,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1733,"mutability":"mutable","name":"recipient","nodeType":"VariableDeclaration","scope":1744,"src":"1041:17:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1732,"name":"address","nodeType":"ElementaryTypeName","src":"1041:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1735,"mutability":"mutable","name":"amount0Requested","nodeType":"VariableDeclaration","scope":1744,"src":"1068:24:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":1734,"name":"uint128","nodeType":"ElementaryTypeName","src":"1068:7:19","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"},{"constant":false,"id":1737,"mutability":"mutable","name":"amount1Requested","nodeType":"VariableDeclaration","scope":1744,"src":"1102:24:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":1736,"name":"uint128","nodeType":"ElementaryTypeName","src":"1102:7:19","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"}],"src":"1031:101:19"},"returnParameters":{"id":1743,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1740,"mutability":"mutable","name":"amount0","nodeType":"VariableDeclaration","scope":1744,"src":"1151:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":1739,"name":"uint128","nodeType":"ElementaryTypeName","src":"1151:7:19","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"},{"constant":false,"id":1742,"mutability":"mutable","name":"amount1","nodeType":"VariableDeclaration","scope":1744,"src":"1168:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":1741,"name":"uint128","nodeType":"ElementaryTypeName","src":"1168:7:19","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"}],"src":"1150:34:19"},"scope":1745,"src":"1007:178:19","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1746,"src":"187:1000:19"}],"src":"45:1143:19"},"id":19},"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol":{"ast":{"absolutePath":"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol","exportedSymbols":{"IUniswapV3PoolState":[1853]},"id":1854,"license":"GPL-2.0-or-later","nodeType":"SourceUnit","nodes":[{"id":1747,"literals":["solidity",">=","0.5",".0"],"nodeType":"PragmaDirective","src":"45:24:20"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","documentation":{"id":1748,"nodeType":"StructuredDocumentation","src":"71:169:20","text":"@title Pool state that can change\n @notice These methods compose the pool's state, and can change with any frequency including multiple times\n per transaction"},"fullyImplemented":false,"id":1853,"linearizedBaseContracts":[1853],"name":"IUniswapV3PoolState","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1749,"nodeType":"StructuredDocumentation","src":"276:1140:20","text":"@notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\n when accessed externally.\n @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\n tick The current tick of the pool, i.e. according to the last tick transition that was run.\n This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\n boundary.\n observationIndex The index of the last oracle observation that was written,\n observationCardinality The current maximum number of observations stored in the pool,\n observationCardinalityNext The next maximum number of observations, to be updated when the observation.\n feeProtocol The protocol fee for both tokens of the pool.\n Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\n is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\n unlocked Whether the pool is currently locked to reentrancy"},"functionSelector":"3850c7bd","id":1766,"implemented":false,"kind":"function","modifiers":[],"name":"slot0","nodeType":"FunctionDefinition","parameters":{"id":1750,"nodeType":"ParameterList","parameters":[],"src":"1435:2:20"},"returnParameters":{"id":1765,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1752,"mutability":"mutable","name":"sqrtPriceX96","nodeType":"VariableDeclaration","scope":1766,"src":"1498:20:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":1751,"name":"uint160","nodeType":"ElementaryTypeName","src":"1498:7:20","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"},{"constant":false,"id":1754,"mutability":"mutable","name":"tick","nodeType":"VariableDeclaration","scope":1766,"src":"1532:10:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":1753,"name":"int24","nodeType":"ElementaryTypeName","src":"1532:5:20","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":1756,"mutability":"mutable","name":"observationIndex","nodeType":"VariableDeclaration","scope":1766,"src":"1556:23:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":1755,"name":"uint16","nodeType":"ElementaryTypeName","src":"1556:6:20","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":1758,"mutability":"mutable","name":"observationCardinality","nodeType":"VariableDeclaration","scope":1766,"src":"1593:29:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":1757,"name":"uint16","nodeType":"ElementaryTypeName","src":"1593:6:20","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":1760,"mutability":"mutable","name":"observationCardinalityNext","nodeType":"VariableDeclaration","scope":1766,"src":"1636:33:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":1759,"name":"uint16","nodeType":"ElementaryTypeName","src":"1636:6:20","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":1762,"mutability":"mutable","name":"feeProtocol","nodeType":"VariableDeclaration","scope":1766,"src":"1683:17:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1761,"name":"uint8","nodeType":"ElementaryTypeName","src":"1683:5:20","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":1764,"mutability":"mutable","name":"unlocked","nodeType":"VariableDeclaration","scope":1766,"src":"1714:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1763,"name":"bool","nodeType":"ElementaryTypeName","src":"1714:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1484:253:20"},"scope":1853,"src":"1421:317:20","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1767,"nodeType":"StructuredDocumentation","src":"1744:168:20","text":"@notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\n @dev This value can overflow the uint256"},"functionSelector":"f3058399","id":1772,"implemented":false,"kind":"function","modifiers":[],"name":"feeGrowthGlobal0X128","nodeType":"FunctionDefinition","parameters":{"id":1768,"nodeType":"ParameterList","parameters":[],"src":"1946:2:20"},"returnParameters":{"id":1771,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1770,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":1772,"src":"1972:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1769,"name":"uint256","nodeType":"ElementaryTypeName","src":"1972:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1971:9:20"},"scope":1853,"src":"1917:64:20","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1773,"nodeType":"StructuredDocumentation","src":"1987:168:20","text":"@notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\n @dev This value can overflow the uint256"},"functionSelector":"46141319","id":1778,"implemented":false,"kind":"function","modifiers":[],"name":"feeGrowthGlobal1X128","nodeType":"FunctionDefinition","parameters":{"id":1774,"nodeType":"ParameterList","parameters":[],"src":"2189:2:20"},"returnParameters":{"id":1777,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1776,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":1778,"src":"2215:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1775,"name":"uint256","nodeType":"ElementaryTypeName","src":"2215:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2214:9:20"},"scope":1853,"src":"2160:64:20","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1779,"nodeType":"StructuredDocumentation","src":"2230:147:20","text":"@notice The amounts of token0 and token1 that are owed to the protocol\n @dev Protocol fees will never exceed uint128 max in either token"},"functionSelector":"1ad8b03b","id":1786,"implemented":false,"kind":"function","modifiers":[],"name":"protocolFees","nodeType":"FunctionDefinition","parameters":{"id":1780,"nodeType":"ParameterList","parameters":[],"src":"2403:2:20"},"returnParameters":{"id":1785,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1782,"mutability":"mutable","name":"token0","nodeType":"VariableDeclaration","scope":1786,"src":"2429:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":1781,"name":"uint128","nodeType":"ElementaryTypeName","src":"2429:7:20","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"},{"constant":false,"id":1784,"mutability":"mutable","name":"token1","nodeType":"VariableDeclaration","scope":1786,"src":"2445:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":1783,"name":"uint128","nodeType":"ElementaryTypeName","src":"2445:7:20","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"}],"src":"2428:32:20"},"scope":1853,"src":"2382:79:20","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1787,"nodeType":"StructuredDocumentation","src":"2467:150:20","text":"@notice The currently in range liquidity available to the pool\n @dev This value has no relationship to the total liquidity across all ticks"},"functionSelector":"1a686502","id":1792,"implemented":false,"kind":"function","modifiers":[],"name":"liquidity","nodeType":"FunctionDefinition","parameters":{"id":1788,"nodeType":"ParameterList","parameters":[],"src":"2640:2:20"},"returnParameters":{"id":1791,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1790,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":1792,"src":"2666:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":1789,"name":"uint128","nodeType":"ElementaryTypeName","src":"2666:7:20","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"}],"src":"2665:9:20"},"scope":1853,"src":"2622:53:20","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1793,"nodeType":"StructuredDocumentation","src":"2681:1244:20","text":"@notice Look up information about a specific tick in the pool\n @param tick The tick to look up\n @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\n tick upper,\n liquidityNet how much liquidity changes when the pool price crosses the tick,\n feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\n feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\n tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\n secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\n secondsOutside the seconds spent on the other side of the tick from the current tick,\n initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\n Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\n In addition, these values are only relative and must be used only in comparison to previous snapshots for\n a specific position."},"functionSelector":"f30dba93","id":1814,"implemented":false,"kind":"function","modifiers":[],"name":"ticks","nodeType":"FunctionDefinition","parameters":{"id":1796,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1795,"mutability":"mutable","name":"tick","nodeType":"VariableDeclaration","scope":1814,"src":"3945:10:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":1794,"name":"int24","nodeType":"ElementaryTypeName","src":"3945:5:20","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"}],"src":"3944:12:20"},"returnParameters":{"id":1813,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1798,"mutability":"mutable","name":"liquidityGross","nodeType":"VariableDeclaration","scope":1814,"src":"4017:22:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":1797,"name":"uint128","nodeType":"ElementaryTypeName","src":"4017:7:20","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"},{"constant":false,"id":1800,"mutability":"mutable","name":"liquidityNet","nodeType":"VariableDeclaration","scope":1814,"src":"4053:19:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"},"typeName":{"id":1799,"name":"int128","nodeType":"ElementaryTypeName","src":"4053:6:20","typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"}},"visibility":"internal"},{"constant":false,"id":1802,"mutability":"mutable","name":"feeGrowthOutside0X128","nodeType":"VariableDeclaration","scope":1814,"src":"4086:29:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1801,"name":"uint256","nodeType":"ElementaryTypeName","src":"4086:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1804,"mutability":"mutable","name":"feeGrowthOutside1X128","nodeType":"VariableDeclaration","scope":1814,"src":"4129:29:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1803,"name":"uint256","nodeType":"ElementaryTypeName","src":"4129:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1806,"mutability":"mutable","name":"tickCumulativeOutside","nodeType":"VariableDeclaration","scope":1814,"src":"4172:27:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int56","typeString":"int56"},"typeName":{"id":1805,"name":"int56","nodeType":"ElementaryTypeName","src":"4172:5:20","typeDescriptions":{"typeIdentifier":"t_int56","typeString":"int56"}},"visibility":"internal"},{"constant":false,"id":1808,"mutability":"mutable","name":"secondsPerLiquidityOutsideX128","nodeType":"VariableDeclaration","scope":1814,"src":"4213:38:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":1807,"name":"uint160","nodeType":"ElementaryTypeName","src":"4213:7:20","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"},{"constant":false,"id":1810,"mutability":"mutable","name":"secondsOutside","nodeType":"VariableDeclaration","scope":1814,"src":"4265:21:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":1809,"name":"uint32","nodeType":"ElementaryTypeName","src":"4265:6:20","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":1812,"mutability":"mutable","name":"initialized","nodeType":"VariableDeclaration","scope":1814,"src":"4300:16:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1811,"name":"bool","nodeType":"ElementaryTypeName","src":"4300:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4003:323:20"},"scope":1853,"src":"3930:397:20","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1815,"nodeType":"StructuredDocumentation","src":"4333:99:20","text":"@notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information"},"functionSelector":"5339c296","id":1822,"implemented":false,"kind":"function","modifiers":[],"name":"tickBitmap","nodeType":"FunctionDefinition","parameters":{"id":1818,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1817,"mutability":"mutable","name":"wordPosition","nodeType":"VariableDeclaration","scope":1822,"src":"4457:18:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int16","typeString":"int16"},"typeName":{"id":1816,"name":"int16","nodeType":"ElementaryTypeName","src":"4457:5:20","typeDescriptions":{"typeIdentifier":"t_int16","typeString":"int16"}},"visibility":"internal"}],"src":"4456:20:20"},"returnParameters":{"id":1821,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1820,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":1822,"src":"4500:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1819,"name":"uint256","nodeType":"ElementaryTypeName","src":"4500:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4499:9:20"},"scope":1853,"src":"4437:72:20","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1823,"nodeType":"StructuredDocumentation","src":"4515:700:20","text":"@notice Returns the information about a position by the position's key\n @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\n @return _liquidity The amount of liquidity in the position,\n Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\n Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\n Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\n Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke"},"functionSelector":"514ea4bf","id":1838,"implemented":false,"kind":"function","modifiers":[],"name":"positions","nodeType":"FunctionDefinition","parameters":{"id":1826,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1825,"mutability":"mutable","name":"key","nodeType":"VariableDeclaration","scope":1838,"src":"5239:11:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1824,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5239:7:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5238:13:20"},"returnParameters":{"id":1837,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1828,"mutability":"mutable","name":"_liquidity","nodeType":"VariableDeclaration","scope":1838,"src":"5312:18:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":1827,"name":"uint128","nodeType":"ElementaryTypeName","src":"5312:7:20","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"},{"constant":false,"id":1830,"mutability":"mutable","name":"feeGrowthInside0LastX128","nodeType":"VariableDeclaration","scope":1838,"src":"5344:32:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1829,"name":"uint256","nodeType":"ElementaryTypeName","src":"5344:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1832,"mutability":"mutable","name":"feeGrowthInside1LastX128","nodeType":"VariableDeclaration","scope":1838,"src":"5390:32:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1831,"name":"uint256","nodeType":"ElementaryTypeName","src":"5390:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1834,"mutability":"mutable","name":"tokensOwed0","nodeType":"VariableDeclaration","scope":1838,"src":"5436:19:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":1833,"name":"uint128","nodeType":"ElementaryTypeName","src":"5436:7:20","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"},{"constant":false,"id":1836,"mutability":"mutable","name":"tokensOwed1","nodeType":"VariableDeclaration","scope":1838,"src":"5469:19:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":1835,"name":"uint128","nodeType":"ElementaryTypeName","src":"5469:7:20","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"}],"src":"5298:200:20"},"scope":1853,"src":"5220:279:20","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1839,"nodeType":"StructuredDocumentation","src":"5505:749:20","text":"@notice Returns data about a specific observation index\n @param index The element of the observations array to fetch\n @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\n ago, rather than at a specific index in the array.\n @return blockTimestamp The timestamp of the observation,\n Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\n Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\n Returns initialized whether the observation has been initialized and the values are safe to use"},"functionSelector":"252c09d7","id":1852,"implemented":false,"kind":"function","modifiers":[],"name":"observations","nodeType":"FunctionDefinition","parameters":{"id":1842,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1841,"mutability":"mutable","name":"index","nodeType":"VariableDeclaration","scope":1852,"src":"6281:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1840,"name":"uint256","nodeType":"ElementaryTypeName","src":"6281:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6280:15:20"},"returnParameters":{"id":1851,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1844,"mutability":"mutable","name":"blockTimestamp","nodeType":"VariableDeclaration","scope":1852,"src":"6356:21:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":1843,"name":"uint32","nodeType":"ElementaryTypeName","src":"6356:6:20","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":1846,"mutability":"mutable","name":"tickCumulative","nodeType":"VariableDeclaration","scope":1852,"src":"6391:20:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int56","typeString":"int56"},"typeName":{"id":1845,"name":"int56","nodeType":"ElementaryTypeName","src":"6391:5:20","typeDescriptions":{"typeIdentifier":"t_int56","typeString":"int56"}},"visibility":"internal"},{"constant":false,"id":1848,"mutability":"mutable","name":"secondsPerLiquidityCumulativeX128","nodeType":"VariableDeclaration","scope":1852,"src":"6425:41:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":1847,"name":"uint160","nodeType":"ElementaryTypeName","src":"6425:7:20","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"},{"constant":false,"id":1850,"mutability":"mutable","name":"initialized","nodeType":"VariableDeclaration","scope":1852,"src":"6480:16:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1849,"name":"bool","nodeType":"ElementaryTypeName","src":"6480:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6342:164:20"},"scope":1853,"src":"6259:248:20","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1854,"src":"240:6269:20"}],"src":"45:6465:20"},"id":20},"@uniswap/v3-core/contracts/libraries/TickMath.sol":{"ast":{"absolutePath":"@uniswap/v3-core/contracts/libraries/TickMath.sol","exportedSymbols":{"TickMath":[2388]},"id":2389,"license":"GPL-2.0-or-later","nodeType":"SourceUnit","nodes":[{"id":1855,"literals":["solidity",">=","0.5",".0"],"nodeType":"PragmaDirective","src":"45:24:21"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"library","documentation":{"id":1856,"nodeType":"StructuredDocumentation","src":"71:235:21","text":"@title Math library for computing sqrt prices from ticks and vice versa\n @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\n prices between 2**-128 and 2**128"},"fullyImplemented":true,"id":2388,"linearizedBaseContracts":[2388],"name":"TickMath","nodeType":"ContractDefinition","nodes":[{"constant":true,"documentation":{"id":1857,"nodeType":"StructuredDocumentation","src":"329:108:21","text":"@dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128"},"id":1861,"mutability":"constant","name":"MIN_TICK","nodeType":"VariableDeclaration","scope":2388,"src":"442:42:21","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":1858,"name":"int24","nodeType":"ElementaryTypeName","src":"442:5:21","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"value":{"id":1860,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"477:7:21","subExpression":{"hexValue":"383837323732","id":1859,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"478:6:21","typeDescriptions":{"typeIdentifier":"t_rational_887272_by_1","typeString":"int_const 887272"},"value":"887272"},"typeDescriptions":{"typeIdentifier":"t_rational_minus_887272_by_1","typeString":"int_const -887272"}},"visibility":"internal"},{"constant":true,"documentation":{"id":1862,"nodeType":"StructuredDocumentation","src":"490:107:21","text":"@dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128"},"id":1866,"mutability":"constant","name":"MAX_TICK","nodeType":"VariableDeclaration","scope":2388,"src":"602:44:21","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":1863,"name":"int24","nodeType":"ElementaryTypeName","src":"602:5:21","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"value":{"id":1865,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"637:9:21","subExpression":{"id":1864,"name":"MIN_TICK","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1861,"src":"638:8:21","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":true,"documentation":{"id":1867,"nodeType":"StructuredDocumentation","src":"653:116:21","text":"@dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)"},"id":1870,"mutability":"constant","name":"MIN_SQRT_RATIO","nodeType":"VariableDeclaration","scope":2388,"src":"774:53:21","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":1868,"name":"uint160","nodeType":"ElementaryTypeName","src":"774:7:21","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"value":{"hexValue":"34323935313238373339","id":1869,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"817:10:21","typeDescriptions":{"typeIdentifier":"t_rational_4295128739_by_1","typeString":"int_const 4295128739"},"value":"4295128739"},"visibility":"internal"},{"constant":true,"documentation":{"id":1871,"nodeType":"StructuredDocumentation","src":"833:116:21","text":"@dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)"},"id":1874,"mutability":"constant","name":"MAX_SQRT_RATIO","nodeType":"VariableDeclaration","scope":2388,"src":"954:92:21","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":1872,"name":"uint160","nodeType":"ElementaryTypeName","src":"954:7:21","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"value":{"hexValue":"31343631343436373033343835323130313033323837323733303532323033393838383232333738373233393730333432","id":1873,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"997:49:21","typeDescriptions":{"typeIdentifier":"t_rational_1461446703485210103287273052203988822378723970342_by_1","typeString":"int_const 1461...(41 digits omitted)...0342"},"value":"1461446703485210103287273052203988822378723970342"},"visibility":"internal"},{"body":{"id":2247,"nodeType":"Block","src":"1440:2495:21","statements":[{"assignments":[1883],"declarations":[{"constant":false,"id":1883,"mutability":"mutable","name":"absTick","nodeType":"VariableDeclaration","scope":2247,"src":"1450:15:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1882,"name":"uint256","nodeType":"ElementaryTypeName","src":"1450:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1903,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_int24","typeString":"int24"},"id":1886,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1884,"name":"tick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1877,"src":"1468:4:21","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"30","id":1885,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1475:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1468:8:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"arguments":[{"arguments":[{"id":1899,"name":"tick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1877,"src":"1519:4:21","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int24","typeString":"int24"}],"id":1898,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1512:6:21","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":1897,"name":"int256","nodeType":"ElementaryTypeName","src":"1512:6:21","typeDescriptions":{}}},"id":1900,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1512:12:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":1896,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1504:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1895,"name":"uint256","nodeType":"ElementaryTypeName","src":"1504:7:21","typeDescriptions":{}}},"id":1901,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1504:21:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1902,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1468:57:21","trueExpression":{"arguments":[{"id":1893,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"1487:13:21","subExpression":{"arguments":[{"id":1891,"name":"tick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1877,"src":"1495:4:21","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int24","typeString":"int24"}],"id":1890,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1488:6:21","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":1889,"name":"int256","nodeType":"ElementaryTypeName","src":"1488:6:21","typeDescriptions":{}}},"id":1892,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1488:12:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":1888,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1479:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1887,"name":"uint256","nodeType":"ElementaryTypeName","src":"1479:7:21","typeDescriptions":{}}},"id":1894,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1479:22:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1450:75:21"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1910,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1905,"name":"absTick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1883,"src":"1543:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"arguments":[{"id":1908,"name":"MAX_TICK","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1866,"src":"1562:8:21","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int24","typeString":"int24"}],"id":1907,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1554:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1906,"name":"uint256","nodeType":"ElementaryTypeName","src":"1554:7:21","typeDescriptions":{}}},"id":1909,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1554:17:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1543:28:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"54","id":1911,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1573:3:21","typeDescriptions":{"typeIdentifier":"t_stringliteral_846b7b6deb1cfa110d0ea7ec6162a7123b761785528db70cceed5143183b11fc","typeString":"literal_string \"T\""},"value":"T"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_846b7b6deb1cfa110d0ea7ec6162a7123b761785528db70cceed5143183b11fc","typeString":"literal_string \"T\""}],"id":1904,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1535:7:21","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1912,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1535:42:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1913,"nodeType":"ExpressionStatement","src":"1535:42:21"},{"assignments":[1915],"declarations":[{"constant":false,"id":1915,"mutability":"mutable","name":"ratio","nodeType":"VariableDeclaration","scope":2247,"src":"1588:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1914,"name":"uint256","nodeType":"ElementaryTypeName","src":"1588:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1924,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1920,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1918,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1916,"name":"absTick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1883,"src":"1604:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307831","id":1917,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1614:3:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"0x1"},"src":"1604:13:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":1919,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1621:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1604:18:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"3078313030303030303030303030303030303030303030303030303030303030303030","id":1922,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1662:35:21","typeDescriptions":{"typeIdentifier":"t_rational_340282366920938463463374607431768211456_by_1","typeString":"int_const 3402...(31 digits omitted)...1456"},"value":"0x100000000000000000000000000000000"},"id":1923,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1604:93:21","trueExpression":{"hexValue":"30786666666362393333626436666164333761613264313632643161353934303031","id":1921,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1625:34:21","typeDescriptions":{"typeIdentifier":"t_rational_340265354078544963557816517032075149313_by_1","typeString":"int_const 3402...(31 digits omitted)...9313"},"value":"0xfffcb933bd6fad37aa2d162d1a594001"},"typeDescriptions":{"typeIdentifier":"t_uint136","typeString":"uint136"}},"nodeType":"VariableDeclarationStatement","src":"1588:109:21"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1929,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1927,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1925,"name":"absTick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1883,"src":"1711:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307832","id":1926,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1721:3:21","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"0x2"},"src":"1711:13:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":1928,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1728:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1711:18:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1939,"nodeType":"IfStatement","src":"1707:83:21","trueBody":{"expression":{"id":1937,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1930,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1915,"src":"1731:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1936,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1933,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1931,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1915,"src":"1740:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"30786666663937323732333733643431333235396134363939303538306532313361","id":1932,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1748:34:21","typeDescriptions":{"typeIdentifier":"t_rational_340248342086729790484326174814286782778_by_1","typeString":"int_const 3402...(31 digits omitted)...2778"},"value":"0xfff97272373d413259a46990580e213a"},"src":"1740:42:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1934,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1739:44:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":1935,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1787:3:21","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"1739:51:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1731:59:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1938,"nodeType":"ExpressionStatement","src":"1731:59:21"}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1944,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1942,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1940,"name":"absTick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1883,"src":"1804:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307834","id":1941,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1814:3:21","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"0x4"},"src":"1804:13:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":1943,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1821:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1804:18:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1954,"nodeType":"IfStatement","src":"1800:83:21","trueBody":{"expression":{"id":1952,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1945,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1915,"src":"1824:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1951,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1948,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1946,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1915,"src":"1833:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"30786666663265353066356636353639333265663132333537636633633766646363","id":1947,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1841:34:21","typeDescriptions":{"typeIdentifier":"t_rational_340214320654664324051920982716015181260_by_1","typeString":"int_const 3402...(31 digits omitted)...1260"},"value":"0xfff2e50f5f656932ef12357cf3c7fdcc"},"src":"1833:42:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1949,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1832:44:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":1950,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1880:3:21","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"1832:51:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1824:59:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1953,"nodeType":"ExpressionStatement","src":"1824:59:21"}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1959,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1957,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1955,"name":"absTick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1883,"src":"1897:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307838","id":1956,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1907:3:21","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"0x8"},"src":"1897:13:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":1958,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1914:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1897:18:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1969,"nodeType":"IfStatement","src":"1893:83:21","trueBody":{"expression":{"id":1967,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1960,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1915,"src":"1917:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1966,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1963,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1961,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1915,"src":"1926:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"30786666653563616361376531306534653631633336323465616130393431636430","id":1962,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1934:34:21","typeDescriptions":{"typeIdentifier":"t_rational_340146287995602323631171512101879684304_by_1","typeString":"int_const 3401...(31 digits omitted)...4304"},"value":"0xffe5caca7e10e4e61c3624eaa0941cd0"},"src":"1926:42:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1964,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1925:44:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":1965,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1973:3:21","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"1925:51:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1917:59:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1968,"nodeType":"ExpressionStatement","src":"1917:59:21"}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1974,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1972,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1970,"name":"absTick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1883,"src":"1990:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"30783130","id":1971,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2000:4:21","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"0x10"},"src":"1990:14:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":1973,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2008:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1990:19:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1984,"nodeType":"IfStatement","src":"1986:84:21","trueBody":{"expression":{"id":1982,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1975,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1915,"src":"2011:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1981,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1978,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1976,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1915,"src":"2020:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"30786666636239383433643630663631353963396462353838333563393236363434","id":1977,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2028:34:21","typeDescriptions":{"typeIdentifier":"t_rational_340010263488231146823593991679159461444_by_1","typeString":"int_const 3400...(31 digits omitted)...1444"},"value":"0xffcb9843d60f6159c9db58835c926644"},"src":"2020:42:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1979,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2019:44:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":1980,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2067:3:21","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"2019:51:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2011:59:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1983,"nodeType":"ExpressionStatement","src":"2011:59:21"}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1989,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1987,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1985,"name":"absTick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1883,"src":"2084:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"30783230","id":1986,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2094:4:21","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"0x20"},"src":"2084:14:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":1988,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2102:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2084:19:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1999,"nodeType":"IfStatement","src":"2080:84:21","trueBody":{"expression":{"id":1997,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1990,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1915,"src":"2105:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1996,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1993,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1991,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1915,"src":"2114:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"30786666393733623431666139386330383134373265363839366466623235346330","id":1992,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2122:34:21","typeDescriptions":{"typeIdentifier":"t_rational_339738377640345403697157401104375502016_by_1","typeString":"int_const 3397...(31 digits omitted)...2016"},"value":"0xff973b41fa98c081472e6896dfb254c0"},"src":"2114:42:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1994,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2113:44:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":1995,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2161:3:21","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"2113:51:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2105:59:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1998,"nodeType":"ExpressionStatement","src":"2105:59:21"}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2004,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2002,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2000,"name":"absTick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1883,"src":"2178:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"30783430","id":2001,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2188:4:21","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"0x40"},"src":"2178:14:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2003,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2196:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2178:19:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2014,"nodeType":"IfStatement","src":"2174:84:21","trueBody":{"expression":{"id":2012,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2005,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1915,"src":"2199:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2011,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2008,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2006,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1915,"src":"2208:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"30786666326561313634363663393661333834336563373862333236623532383631","id":2007,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2216:34:21","typeDescriptions":{"typeIdentifier":"t_rational_339195258003219555707034227454543997025_by_1","typeString":"int_const 3391...(31 digits omitted)...7025"},"value":"0xff2ea16466c96a3843ec78b326b52861"},"src":"2208:42:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2009,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2207:44:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2010,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2255:3:21","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"2207:51:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2199:59:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2013,"nodeType":"ExpressionStatement","src":"2199:59:21"}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2019,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2017,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2015,"name":"absTick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1883,"src":"2272:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"30783830","id":2016,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2282:4:21","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"0x80"},"src":"2272:14:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2018,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2290:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2272:19:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2029,"nodeType":"IfStatement","src":"2268:84:21","trueBody":{"expression":{"id":2027,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2020,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1915,"src":"2293:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2026,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2023,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2021,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1915,"src":"2302:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"30786665356465653034366139396132613831316334363166313936396333303533","id":2022,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2310:34:21","typeDescriptions":{"typeIdentifier":"t_rational_338111622100601834656805679988414885971_by_1","typeString":"int_const 3381...(31 digits omitted)...5971"},"value":"0xfe5dee046a99a2a811c461f1969c3053"},"src":"2302:42:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2024,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2301:44:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2025,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2349:3:21","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"2301:51:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2293:59:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2028,"nodeType":"ExpressionStatement","src":"2293:59:21"}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2034,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2032,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2030,"name":"absTick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1883,"src":"2366:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"3078313030","id":2031,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2376:5:21","typeDescriptions":{"typeIdentifier":"t_rational_256_by_1","typeString":"int_const 256"},"value":"0x100"},"src":"2366:15:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2033,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2385:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2366:20:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2044,"nodeType":"IfStatement","src":"2362:85:21","trueBody":{"expression":{"id":2042,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2035,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1915,"src":"2388:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2041,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2038,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2036,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1915,"src":"2397:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"30786663626538366337393030613838616564636666633833623437396161336134","id":2037,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2405:34:21","typeDescriptions":{"typeIdentifier":"t_rational_335954724994790223023589805789778977700_by_1","typeString":"int_const 3359...(31 digits omitted)...7700"},"value":"0xfcbe86c7900a88aedcffc83b479aa3a4"},"src":"2397:42:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2039,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2396:44:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2040,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2444:3:21","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"2396:51:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2388:59:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2043,"nodeType":"ExpressionStatement","src":"2388:59:21"}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2049,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2047,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2045,"name":"absTick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1883,"src":"2461:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"3078323030","id":2046,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2471:5:21","typeDescriptions":{"typeIdentifier":"t_rational_512_by_1","typeString":"int_const 512"},"value":"0x200"},"src":"2461:15:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2048,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2480:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2461:20:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2059,"nodeType":"IfStatement","src":"2457:85:21","trueBody":{"expression":{"id":2057,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2050,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1915,"src":"2483:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2056,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2053,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2051,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1915,"src":"2492:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"30786639383761373235336163343133313736663262303734636637383135653534","id":2052,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2500:34:21","typeDescriptions":{"typeIdentifier":"t_rational_331682121138379247127172139078559817300_by_1","typeString":"int_const 3316...(31 digits omitted)...7300"},"value":"0xf987a7253ac413176f2b074cf7815e54"},"src":"2492:42:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2054,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2491:44:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2055,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2539:3:21","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"2491:51:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2483:59:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2058,"nodeType":"ExpressionStatement","src":"2483:59:21"}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2064,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2062,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2060,"name":"absTick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1883,"src":"2556:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"3078343030","id":2061,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2566:5:21","typeDescriptions":{"typeIdentifier":"t_rational_1024_by_1","typeString":"int_const 1024"},"value":"0x400"},"src":"2556:15:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2063,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2575:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2556:20:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2074,"nodeType":"IfStatement","src":"2552:85:21","trueBody":{"expression":{"id":2072,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2065,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1915,"src":"2578:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2071,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2068,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2066,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1915,"src":"2587:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"30786633333932623038323262373030303539343063376133393865346237306633","id":2067,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2595:34:21","typeDescriptions":{"typeIdentifier":"t_rational_323299236684853023288211250268160618739_by_1","typeString":"int_const 3232...(31 digits omitted)...8739"},"value":"0xf3392b0822b70005940c7a398e4b70f3"},"src":"2587:42:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2069,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2586:44:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2070,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2634:3:21","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"2586:51:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2578:59:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2073,"nodeType":"ExpressionStatement","src":"2578:59:21"}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2079,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2077,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2075,"name":"absTick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1883,"src":"2651:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"3078383030","id":2076,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2661:5:21","typeDescriptions":{"typeIdentifier":"t_rational_2048_by_1","typeString":"int_const 2048"},"value":"0x800"},"src":"2651:15:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2078,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2670:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2651:20:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2089,"nodeType":"IfStatement","src":"2647:85:21","trueBody":{"expression":{"id":2087,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2080,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1915,"src":"2673:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2086,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2083,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2081,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1915,"src":"2682:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"30786537313539343735613263323962373434336232396337666136653838396439","id":2082,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2690:34:21","typeDescriptions":{"typeIdentifier":"t_rational_307163716377032989948697243942600083929_by_1","typeString":"int_const 3071...(31 digits omitted)...3929"},"value":"0xe7159475a2c29b7443b29c7fa6e889d9"},"src":"2682:42:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2084,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2681:44:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2085,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2729:3:21","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"2681:51:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2673:59:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2088,"nodeType":"ExpressionStatement","src":"2673:59:21"}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2094,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2092,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2090,"name":"absTick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1883,"src":"2746:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307831303030","id":2091,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2756:6:21","typeDescriptions":{"typeIdentifier":"t_rational_4096_by_1","typeString":"int_const 4096"},"value":"0x1000"},"src":"2746:16:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2093,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2766:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2746:21:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2104,"nodeType":"IfStatement","src":"2742:86:21","trueBody":{"expression":{"id":2102,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2095,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1915,"src":"2769:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2101,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2098,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2096,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1915,"src":"2778:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"30786430393766336264666432303232623838343561643866373932616135383235","id":2097,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2786:34:21","typeDescriptions":{"typeIdentifier":"t_rational_277268403626896220162999269216087595045_by_1","typeString":"int_const 2772...(31 digits omitted)...5045"},"value":"0xd097f3bdfd2022b8845ad8f792aa5825"},"src":"2778:42:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2099,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2777:44:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2100,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2825:3:21","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"2777:51:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2769:59:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2103,"nodeType":"ExpressionStatement","src":"2769:59:21"}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2109,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2107,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2105,"name":"absTick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1883,"src":"2842:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307832303030","id":2106,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2852:6:21","typeDescriptions":{"typeIdentifier":"t_rational_8192_by_1","typeString":"int_const 8192"},"value":"0x2000"},"src":"2842:16:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2108,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2862:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2842:21:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2119,"nodeType":"IfStatement","src":"2838:86:21","trueBody":{"expression":{"id":2117,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2110,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1915,"src":"2865:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2116,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2113,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2111,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1915,"src":"2874:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"30786139663734363436326438373066646638613635646331663930653036316535","id":2112,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2882:34:21","typeDescriptions":{"typeIdentifier":"t_rational_225923453940442621947126027127485391333_by_1","typeString":"int_const 2259...(31 digits omitted)...1333"},"value":"0xa9f746462d870fdf8a65dc1f90e061e5"},"src":"2874:42:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2114,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2873:44:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2115,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2921:3:21","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"2873:51:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2865:59:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2118,"nodeType":"ExpressionStatement","src":"2865:59:21"}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2124,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2122,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2120,"name":"absTick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1883,"src":"2938:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307834303030","id":2121,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2948:6:21","typeDescriptions":{"typeIdentifier":"t_rational_16384_by_1","typeString":"int_const 16384"},"value":"0x4000"},"src":"2938:16:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2123,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2958:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2938:21:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2134,"nodeType":"IfStatement","src":"2934:86:21","trueBody":{"expression":{"id":2132,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2125,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1915,"src":"2961:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2131,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2128,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2126,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1915,"src":"2970:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"30783730643836396131353664326131623839306262336466363262616633326637","id":2127,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2978:34:21","typeDescriptions":{"typeIdentifier":"t_rational_149997214084966997727330242082538205943_by_1","typeString":"int_const 1499...(31 digits omitted)...5943"},"value":"0x70d869a156d2a1b890bb3df62baf32f7"},"src":"2970:42:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2129,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2969:44:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2130,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3017:3:21","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"2969:51:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2961:59:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2133,"nodeType":"ExpressionStatement","src":"2961:59:21"}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2139,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2137,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2135,"name":"absTick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1883,"src":"3034:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307838303030","id":2136,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3044:6:21","typeDescriptions":{"typeIdentifier":"t_rational_32768_by_1","typeString":"int_const 32768"},"value":"0x8000"},"src":"3034:16:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2138,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3054:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3034:21:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2149,"nodeType":"IfStatement","src":"3030:86:21","trueBody":{"expression":{"id":2147,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2140,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1915,"src":"3057:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2146,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2143,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2141,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1915,"src":"3066:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"30783331626531333566393764303866643938313233313530353534326663666136","id":2142,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3074:34:21","typeDescriptions":{"typeIdentifier":"t_rational_66119101136024775622716233608466517926_by_1","typeString":"int_const 6611...(30 digits omitted)...7926"},"value":"0x31be135f97d08fd981231505542fcfa6"},"src":"3066:42:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2144,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3065:44:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2145,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3113:3:21","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"3065:51:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3057:59:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2148,"nodeType":"ExpressionStatement","src":"3057:59:21"}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2154,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2152,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2150,"name":"absTick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1883,"src":"3130:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"30783130303030","id":2151,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3140:7:21","typeDescriptions":{"typeIdentifier":"t_rational_65536_by_1","typeString":"int_const 65536"},"value":"0x10000"},"src":"3130:17:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2153,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3151:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3130:22:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2164,"nodeType":"IfStatement","src":"3126:86:21","trueBody":{"expression":{"id":2162,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2155,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1915,"src":"3154:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2161,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2158,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2156,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1915,"src":"3163:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"307839616135303862356237613834653163363737646535346633653939626339","id":2157,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3171:33:21","typeDescriptions":{"typeIdentifier":"t_rational_12847376061809297530290974190478138313_by_1","typeString":"int_const 1284...(30 digits omitted)...8313"},"value":"0x9aa508b5b7a84e1c677de54f3e99bc9"},"src":"3163:41:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2159,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3162:43:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2160,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3209:3:21","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"3162:50:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3154:58:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2163,"nodeType":"ExpressionStatement","src":"3154:58:21"}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2169,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2167,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2165,"name":"absTick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1883,"src":"3226:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"30783230303030","id":2166,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3236:7:21","typeDescriptions":{"typeIdentifier":"t_rational_131072_by_1","typeString":"int_const 131072"},"value":"0x20000"},"src":"3226:17:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2168,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3247:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3226:22:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2179,"nodeType":"IfStatement","src":"3222:85:21","trueBody":{"expression":{"id":2177,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2170,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1915,"src":"3250:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2176,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2173,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2171,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1915,"src":"3259:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"3078356436616638646564623831313936363939633332393232356565363034","id":2172,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3267:32:21","typeDescriptions":{"typeIdentifier":"t_rational_485053260817066172746253684029974020_by_1","typeString":"int_const 4850...(28 digits omitted)...4020"},"value":"0x5d6af8dedb81196699c329225ee604"},"src":"3259:40:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2174,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3258:42:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2175,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3304:3:21","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"3258:49:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3250:57:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2178,"nodeType":"ExpressionStatement","src":"3250:57:21"}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2184,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2182,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2180,"name":"absTick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1883,"src":"3321:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"30783430303030","id":2181,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3331:7:21","typeDescriptions":{"typeIdentifier":"t_rational_262144_by_1","typeString":"int_const 262144"},"value":"0x40000"},"src":"3321:17:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2183,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3342:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3321:22:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2194,"nodeType":"IfStatement","src":"3317:83:21","trueBody":{"expression":{"id":2192,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2185,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1915,"src":"3345:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2191,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2188,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2186,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1915,"src":"3354:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"307832323136653538346635666131656139323630343162656466653938","id":2187,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3362:30:21","typeDescriptions":{"typeIdentifier":"t_rational_691415978906521570653435304214168_by_1","typeString":"int_const 6914...(25 digits omitted)...4168"},"value":"0x2216e584f5fa1ea926041bedfe98"},"src":"3354:38:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2189,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3353:40:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2190,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3397:3:21","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"3353:47:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3345:55:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2193,"nodeType":"ExpressionStatement","src":"3345:55:21"}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2199,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2197,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2195,"name":"absTick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1883,"src":"3414:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"30783830303030","id":2196,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3424:7:21","typeDescriptions":{"typeIdentifier":"t_rational_524288_by_1","typeString":"int_const 524288"},"value":"0x80000"},"src":"3414:17:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2198,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3435:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3414:22:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2209,"nodeType":"IfStatement","src":"3410:78:21","trueBody":{"expression":{"id":2207,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2200,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1915,"src":"3438:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2206,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2203,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2201,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1915,"src":"3447:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"30783438613137303339316637646334323434346538666132","id":2202,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3455:25:21","typeDescriptions":{"typeIdentifier":"t_rational_1404880482679654955896180642_by_1","typeString":"int_const 1404880482679654955896180642"},"value":"0x48a170391f7dc42444e8fa2"},"src":"3447:33:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2204,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3446:35:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2205,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3485:3:21","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"3446:42:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3438:50:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2208,"nodeType":"ExpressionStatement","src":"3438:50:21"}},{"condition":{"commonType":{"typeIdentifier":"t_int24","typeString":"int24"},"id":2212,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2210,"name":"tick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1877,"src":"3503:4:21","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2211,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3510:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3503:8:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2223,"nodeType":"IfStatement","src":"3499:47:21","trueBody":{"expression":{"id":2221,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2213,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1915,"src":"3513:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2220,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":2216,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3526:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2215,"name":"uint256","nodeType":"ElementaryTypeName","src":"3526:7:21","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"}],"id":2214,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"3521:4:21","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":2217,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3521:13:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint256","typeString":"type(uint256)"}},"id":2218,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"max","nodeType":"MemberAccess","src":"3521:17:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2219,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1915,"src":"3541:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3521:25:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3513:33:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2222,"nodeType":"ExpressionStatement","src":"3513:33:21"}},{"expression":{"id":2245,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2224,"name":"sqrtPriceX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1880,"src":"3856:12:21","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2243,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2229,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2227,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1915,"src":"3880:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":2228,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3889:2:21","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"3880:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2230,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3879:13:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2238,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2236,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2231,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1915,"src":"3896:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_rational_4294967296_by_1","typeString":"int_const 4294967296"},"id":2234,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2232,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3905:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"3332","id":2233,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3910:2:21","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"3905:7:21","typeDescriptions":{"typeIdentifier":"t_rational_4294967296_by_1","typeString":"int_const 4294967296"}}],"id":2235,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"3904:9:21","typeDescriptions":{"typeIdentifier":"t_rational_4294967296_by_1","typeString":"int_const 4294967296"}},"src":"3896:17:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2237,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3917:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3896:22:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"31","id":2240,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3925:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"id":2241,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"3896:30:21","trueExpression":{"hexValue":"30","id":2239,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3921:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2242,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3895:32:21","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"3879:48:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2226,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3871:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":2225,"name":"uint160","nodeType":"ElementaryTypeName","src":"3871:7:21","typeDescriptions":{}}},"id":2244,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3871:57:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"src":"3856:72:21","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"id":2246,"nodeType":"ExpressionStatement","src":"3856:72:21"}]},"documentation":{"id":1875,"nodeType":"StructuredDocumentation","src":"1053:297:21","text":"@notice Calculates sqrt(1.0001^tick) * 2^96\n @dev Throws if |tick| > max tick\n @param tick The input tick for the above formula\n @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\n at the given tick"},"id":2248,"implemented":true,"kind":"function","modifiers":[],"name":"getSqrtRatioAtTick","nodeType":"FunctionDefinition","parameters":{"id":1878,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1877,"mutability":"mutable","name":"tick","nodeType":"VariableDeclaration","scope":2248,"src":"1383:10:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":1876,"name":"int24","nodeType":"ElementaryTypeName","src":"1383:5:21","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"}],"src":"1382:12:21"},"returnParameters":{"id":1881,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1880,"mutability":"mutable","name":"sqrtPriceX96","nodeType":"VariableDeclaration","scope":2248,"src":"1418:20:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":1879,"name":"uint160","nodeType":"ElementaryTypeName","src":"1418:7:21","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"}],"src":"1417:22:21"},"scope":2388,"src":"1355:2580:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2386,"nodeType":"Block","src":"4439:4196:21","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2263,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint160","typeString":"uint160"},"id":2259,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2257,"name":"sqrtPriceX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2251,"src":"4556:12:21","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":2258,"name":"MIN_SQRT_RATIO","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1870,"src":"4572:14:21","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"src":"4556:30:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint160","typeString":"uint160"},"id":2262,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2260,"name":"sqrtPriceX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2251,"src":"4590:12:21","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2261,"name":"MAX_SQRT_RATIO","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1874,"src":"4605:14:21","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"src":"4590:29:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4556:63:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"52","id":2264,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4621:3:21","typeDescriptions":{"typeIdentifier":"t_stringliteral_ef22bddd350b943170a67d35191c27e310709a28c38b5762a152ff640108f5b2","typeString":"literal_string \"R\""},"value":"R"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ef22bddd350b943170a67d35191c27e310709a28c38b5762a152ff640108f5b2","typeString":"literal_string \"R\""}],"id":2256,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4548:7:21","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2265,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4548:77:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2266,"nodeType":"ExpressionStatement","src":"4548:77:21"},{"assignments":[2268],"declarations":[{"constant":false,"id":2268,"mutability":"mutable","name":"ratio","nodeType":"VariableDeclaration","scope":2386,"src":"4635:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2267,"name":"uint256","nodeType":"ElementaryTypeName","src":"4635:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2275,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2274,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2271,"name":"sqrtPriceX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2251,"src":"4659:12:21","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":2270,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4651:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2269,"name":"uint256","nodeType":"ElementaryTypeName","src":"4651:7:21","typeDescriptions":{}}},"id":2272,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4651:21:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"3332","id":2273,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4676:2:21","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"4651:27:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4635:43:21"},{"assignments":[2277],"declarations":[{"constant":false,"id":2277,"mutability":"mutable","name":"r","nodeType":"VariableDeclaration","scope":2386,"src":"4689:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2276,"name":"uint256","nodeType":"ElementaryTypeName","src":"4689:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2279,"initialValue":{"id":2278,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2268,"src":"4701:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4689:17:21"},{"assignments":[2281],"declarations":[{"constant":false,"id":2281,"mutability":"mutable","name":"msb","nodeType":"VariableDeclaration","scope":2386,"src":"4716:11:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2280,"name":"uint256","nodeType":"ElementaryTypeName","src":"4716:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2283,"initialValue":{"hexValue":"30","id":2282,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4730:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"4716:15:21"},{"AST":{"nodeType":"YulBlock","src":"4751:139:21","statements":[{"nodeType":"YulVariableDeclaration","src":"4765:58:21","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4778:1:21","type":"","value":"7"},{"arguments":[{"name":"r","nodeType":"YulIdentifier","src":"4784:1:21"},{"kind":"number","nodeType":"YulLiteral","src":"4787:34:21","type":"","value":"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4781:2:21"},"nodeType":"YulFunctionCall","src":"4781:41:21"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"4774:3:21"},"nodeType":"YulFunctionCall","src":"4774:49:21"},"variables":[{"name":"f","nodeType":"YulTypedName","src":"4769:1:21","type":""}]},{"nodeType":"YulAssignment","src":"4836:17:21","value":{"arguments":[{"name":"msb","nodeType":"YulIdentifier","src":"4846:3:21"},{"name":"f","nodeType":"YulIdentifier","src":"4851:1:21"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"4843:2:21"},"nodeType":"YulFunctionCall","src":"4843:10:21"},"variableNames":[{"name":"msb","nodeType":"YulIdentifier","src":"4836:3:21"}]},{"nodeType":"YulAssignment","src":"4866:14:21","value":{"arguments":[{"name":"f","nodeType":"YulIdentifier","src":"4875:1:21"},{"name":"r","nodeType":"YulIdentifier","src":"4878:1:21"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"4871:3:21"},"nodeType":"YulFunctionCall","src":"4871:9:21"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"4866:1:21"}]}]},"evmVersion":"istanbul","externalReferences":[{"declaration":2281,"isOffset":false,"isSlot":false,"src":"4836:3:21","valueSize":1},{"declaration":2281,"isOffset":false,"isSlot":false,"src":"4846:3:21","valueSize":1},{"declaration":2277,"isOffset":false,"isSlot":false,"src":"4784:1:21","valueSize":1},{"declaration":2277,"isOffset":false,"isSlot":false,"src":"4866:1:21","valueSize":1},{"declaration":2277,"isOffset":false,"isSlot":false,"src":"4878:1:21","valueSize":1}],"id":2284,"nodeType":"InlineAssembly","src":"4742:148:21"},{"AST":{"nodeType":"YulBlock","src":"4908:123:21","statements":[{"nodeType":"YulVariableDeclaration","src":"4922:42:21","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4935:1:21","type":"","value":"6"},{"arguments":[{"name":"r","nodeType":"YulIdentifier","src":"4941:1:21"},{"kind":"number","nodeType":"YulLiteral","src":"4944:18:21","type":"","value":"0xFFFFFFFFFFFFFFFF"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4938:2:21"},"nodeType":"YulFunctionCall","src":"4938:25:21"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"4931:3:21"},"nodeType":"YulFunctionCall","src":"4931:33:21"},"variables":[{"name":"f","nodeType":"YulTypedName","src":"4926:1:21","type":""}]},{"nodeType":"YulAssignment","src":"4977:17:21","value":{"arguments":[{"name":"msb","nodeType":"YulIdentifier","src":"4987:3:21"},{"name":"f","nodeType":"YulIdentifier","src":"4992:1:21"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"4984:2:21"},"nodeType":"YulFunctionCall","src":"4984:10:21"},"variableNames":[{"name":"msb","nodeType":"YulIdentifier","src":"4977:3:21"}]},{"nodeType":"YulAssignment","src":"5007:14:21","value":{"arguments":[{"name":"f","nodeType":"YulIdentifier","src":"5016:1:21"},{"name":"r","nodeType":"YulIdentifier","src":"5019:1:21"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"5012:3:21"},"nodeType":"YulFunctionCall","src":"5012:9:21"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"5007:1:21"}]}]},"evmVersion":"istanbul","externalReferences":[{"declaration":2281,"isOffset":false,"isSlot":false,"src":"4977:3:21","valueSize":1},{"declaration":2281,"isOffset":false,"isSlot":false,"src":"4987:3:21","valueSize":1},{"declaration":2277,"isOffset":false,"isSlot":false,"src":"4941:1:21","valueSize":1},{"declaration":2277,"isOffset":false,"isSlot":false,"src":"5007:1:21","valueSize":1},{"declaration":2277,"isOffset":false,"isSlot":false,"src":"5019:1:21","valueSize":1}],"id":2285,"nodeType":"InlineAssembly","src":"4899:132:21"},{"AST":{"nodeType":"YulBlock","src":"5049:115:21","statements":[{"nodeType":"YulVariableDeclaration","src":"5063:34:21","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5076:1:21","type":"","value":"5"},{"arguments":[{"name":"r","nodeType":"YulIdentifier","src":"5082:1:21"},{"kind":"number","nodeType":"YulLiteral","src":"5085:10:21","type":"","value":"0xFFFFFFFF"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5079:2:21"},"nodeType":"YulFunctionCall","src":"5079:17:21"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"5072:3:21"},"nodeType":"YulFunctionCall","src":"5072:25:21"},"variables":[{"name":"f","nodeType":"YulTypedName","src":"5067:1:21","type":""}]},{"nodeType":"YulAssignment","src":"5110:17:21","value":{"arguments":[{"name":"msb","nodeType":"YulIdentifier","src":"5120:3:21"},{"name":"f","nodeType":"YulIdentifier","src":"5125:1:21"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"5117:2:21"},"nodeType":"YulFunctionCall","src":"5117:10:21"},"variableNames":[{"name":"msb","nodeType":"YulIdentifier","src":"5110:3:21"}]},{"nodeType":"YulAssignment","src":"5140:14:21","value":{"arguments":[{"name":"f","nodeType":"YulIdentifier","src":"5149:1:21"},{"name":"r","nodeType":"YulIdentifier","src":"5152:1:21"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"5145:3:21"},"nodeType":"YulFunctionCall","src":"5145:9:21"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"5140:1:21"}]}]},"evmVersion":"istanbul","externalReferences":[{"declaration":2281,"isOffset":false,"isSlot":false,"src":"5110:3:21","valueSize":1},{"declaration":2281,"isOffset":false,"isSlot":false,"src":"5120:3:21","valueSize":1},{"declaration":2277,"isOffset":false,"isSlot":false,"src":"5082:1:21","valueSize":1},{"declaration":2277,"isOffset":false,"isSlot":false,"src":"5140:1:21","valueSize":1},{"declaration":2277,"isOffset":false,"isSlot":false,"src":"5152:1:21","valueSize":1}],"id":2286,"nodeType":"InlineAssembly","src":"5040:124:21"},{"AST":{"nodeType":"YulBlock","src":"5182:111:21","statements":[{"nodeType":"YulVariableDeclaration","src":"5196:30:21","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5209:1:21","type":"","value":"4"},{"arguments":[{"name":"r","nodeType":"YulIdentifier","src":"5215:1:21"},{"kind":"number","nodeType":"YulLiteral","src":"5218:6:21","type":"","value":"0xFFFF"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5212:2:21"},"nodeType":"YulFunctionCall","src":"5212:13:21"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"5205:3:21"},"nodeType":"YulFunctionCall","src":"5205:21:21"},"variables":[{"name":"f","nodeType":"YulTypedName","src":"5200:1:21","type":""}]},{"nodeType":"YulAssignment","src":"5239:17:21","value":{"arguments":[{"name":"msb","nodeType":"YulIdentifier","src":"5249:3:21"},{"name":"f","nodeType":"YulIdentifier","src":"5254:1:21"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"5246:2:21"},"nodeType":"YulFunctionCall","src":"5246:10:21"},"variableNames":[{"name":"msb","nodeType":"YulIdentifier","src":"5239:3:21"}]},{"nodeType":"YulAssignment","src":"5269:14:21","value":{"arguments":[{"name":"f","nodeType":"YulIdentifier","src":"5278:1:21"},{"name":"r","nodeType":"YulIdentifier","src":"5281:1:21"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"5274:3:21"},"nodeType":"YulFunctionCall","src":"5274:9:21"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"5269:1:21"}]}]},"evmVersion":"istanbul","externalReferences":[{"declaration":2281,"isOffset":false,"isSlot":false,"src":"5239:3:21","valueSize":1},{"declaration":2281,"isOffset":false,"isSlot":false,"src":"5249:3:21","valueSize":1},{"declaration":2277,"isOffset":false,"isSlot":false,"src":"5215:1:21","valueSize":1},{"declaration":2277,"isOffset":false,"isSlot":false,"src":"5269:1:21","valueSize":1},{"declaration":2277,"isOffset":false,"isSlot":false,"src":"5281:1:21","valueSize":1}],"id":2287,"nodeType":"InlineAssembly","src":"5173:120:21"},{"AST":{"nodeType":"YulBlock","src":"5311:109:21","statements":[{"nodeType":"YulVariableDeclaration","src":"5325:28:21","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5338:1:21","type":"","value":"3"},{"arguments":[{"name":"r","nodeType":"YulIdentifier","src":"5344:1:21"},{"kind":"number","nodeType":"YulLiteral","src":"5347:4:21","type":"","value":"0xFF"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5341:2:21"},"nodeType":"YulFunctionCall","src":"5341:11:21"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"5334:3:21"},"nodeType":"YulFunctionCall","src":"5334:19:21"},"variables":[{"name":"f","nodeType":"YulTypedName","src":"5329:1:21","type":""}]},{"nodeType":"YulAssignment","src":"5366:17:21","value":{"arguments":[{"name":"msb","nodeType":"YulIdentifier","src":"5376:3:21"},{"name":"f","nodeType":"YulIdentifier","src":"5381:1:21"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"5373:2:21"},"nodeType":"YulFunctionCall","src":"5373:10:21"},"variableNames":[{"name":"msb","nodeType":"YulIdentifier","src":"5366:3:21"}]},{"nodeType":"YulAssignment","src":"5396:14:21","value":{"arguments":[{"name":"f","nodeType":"YulIdentifier","src":"5405:1:21"},{"name":"r","nodeType":"YulIdentifier","src":"5408:1:21"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"5401:3:21"},"nodeType":"YulFunctionCall","src":"5401:9:21"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"5396:1:21"}]}]},"evmVersion":"istanbul","externalReferences":[{"declaration":2281,"isOffset":false,"isSlot":false,"src":"5366:3:21","valueSize":1},{"declaration":2281,"isOffset":false,"isSlot":false,"src":"5376:3:21","valueSize":1},{"declaration":2277,"isOffset":false,"isSlot":false,"src":"5344:1:21","valueSize":1},{"declaration":2277,"isOffset":false,"isSlot":false,"src":"5396:1:21","valueSize":1},{"declaration":2277,"isOffset":false,"isSlot":false,"src":"5408:1:21","valueSize":1}],"id":2288,"nodeType":"InlineAssembly","src":"5302:118:21"},{"AST":{"nodeType":"YulBlock","src":"5438:108:21","statements":[{"nodeType":"YulVariableDeclaration","src":"5452:27:21","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5465:1:21","type":"","value":"2"},{"arguments":[{"name":"r","nodeType":"YulIdentifier","src":"5471:1:21"},{"kind":"number","nodeType":"YulLiteral","src":"5474:3:21","type":"","value":"0xF"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5468:2:21"},"nodeType":"YulFunctionCall","src":"5468:10:21"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"5461:3:21"},"nodeType":"YulFunctionCall","src":"5461:18:21"},"variables":[{"name":"f","nodeType":"YulTypedName","src":"5456:1:21","type":""}]},{"nodeType":"YulAssignment","src":"5492:17:21","value":{"arguments":[{"name":"msb","nodeType":"YulIdentifier","src":"5502:3:21"},{"name":"f","nodeType":"YulIdentifier","src":"5507:1:21"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"5499:2:21"},"nodeType":"YulFunctionCall","src":"5499:10:21"},"variableNames":[{"name":"msb","nodeType":"YulIdentifier","src":"5492:3:21"}]},{"nodeType":"YulAssignment","src":"5522:14:21","value":{"arguments":[{"name":"f","nodeType":"YulIdentifier","src":"5531:1:21"},{"name":"r","nodeType":"YulIdentifier","src":"5534:1:21"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"5527:3:21"},"nodeType":"YulFunctionCall","src":"5527:9:21"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"5522:1:21"}]}]},"evmVersion":"istanbul","externalReferences":[{"declaration":2281,"isOffset":false,"isSlot":false,"src":"5492:3:21","valueSize":1},{"declaration":2281,"isOffset":false,"isSlot":false,"src":"5502:3:21","valueSize":1},{"declaration":2277,"isOffset":false,"isSlot":false,"src":"5471:1:21","valueSize":1},{"declaration":2277,"isOffset":false,"isSlot":false,"src":"5522:1:21","valueSize":1},{"declaration":2277,"isOffset":false,"isSlot":false,"src":"5534:1:21","valueSize":1}],"id":2289,"nodeType":"InlineAssembly","src":"5429:117:21"},{"AST":{"nodeType":"YulBlock","src":"5564:108:21","statements":[{"nodeType":"YulVariableDeclaration","src":"5578:27:21","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5591:1:21","type":"","value":"1"},{"arguments":[{"name":"r","nodeType":"YulIdentifier","src":"5597:1:21"},{"kind":"number","nodeType":"YulLiteral","src":"5600:3:21","type":"","value":"0x3"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5594:2:21"},"nodeType":"YulFunctionCall","src":"5594:10:21"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"5587:3:21"},"nodeType":"YulFunctionCall","src":"5587:18:21"},"variables":[{"name":"f","nodeType":"YulTypedName","src":"5582:1:21","type":""}]},{"nodeType":"YulAssignment","src":"5618:17:21","value":{"arguments":[{"name":"msb","nodeType":"YulIdentifier","src":"5628:3:21"},{"name":"f","nodeType":"YulIdentifier","src":"5633:1:21"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"5625:2:21"},"nodeType":"YulFunctionCall","src":"5625:10:21"},"variableNames":[{"name":"msb","nodeType":"YulIdentifier","src":"5618:3:21"}]},{"nodeType":"YulAssignment","src":"5648:14:21","value":{"arguments":[{"name":"f","nodeType":"YulIdentifier","src":"5657:1:21"},{"name":"r","nodeType":"YulIdentifier","src":"5660:1:21"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"5653:3:21"},"nodeType":"YulFunctionCall","src":"5653:9:21"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"5648:1:21"}]}]},"evmVersion":"istanbul","externalReferences":[{"declaration":2281,"isOffset":false,"isSlot":false,"src":"5618:3:21","valueSize":1},{"declaration":2281,"isOffset":false,"isSlot":false,"src":"5628:3:21","valueSize":1},{"declaration":2277,"isOffset":false,"isSlot":false,"src":"5597:1:21","valueSize":1},{"declaration":2277,"isOffset":false,"isSlot":false,"src":"5648:1:21","valueSize":1},{"declaration":2277,"isOffset":false,"isSlot":false,"src":"5660:1:21","valueSize":1}],"id":2290,"nodeType":"InlineAssembly","src":"5555:117:21"},{"AST":{"nodeType":"YulBlock","src":"5690:73:21","statements":[{"nodeType":"YulVariableDeclaration","src":"5704:19:21","value":{"arguments":[{"name":"r","nodeType":"YulIdentifier","src":"5716:1:21"},{"kind":"number","nodeType":"YulLiteral","src":"5719:3:21","type":"","value":"0x1"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5713:2:21"},"nodeType":"YulFunctionCall","src":"5713:10:21"},"variables":[{"name":"f","nodeType":"YulTypedName","src":"5708:1:21","type":""}]},{"nodeType":"YulAssignment","src":"5736:17:21","value":{"arguments":[{"name":"msb","nodeType":"YulIdentifier","src":"5746:3:21"},{"name":"f","nodeType":"YulIdentifier","src":"5751:1:21"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"5743:2:21"},"nodeType":"YulFunctionCall","src":"5743:10:21"},"variableNames":[{"name":"msb","nodeType":"YulIdentifier","src":"5736:3:21"}]}]},"evmVersion":"istanbul","externalReferences":[{"declaration":2281,"isOffset":false,"isSlot":false,"src":"5736:3:21","valueSize":1},{"declaration":2281,"isOffset":false,"isSlot":false,"src":"5746:3:21","valueSize":1},{"declaration":2277,"isOffset":false,"isSlot":false,"src":"5716:1:21","valueSize":1}],"id":2291,"nodeType":"InlineAssembly","src":"5681:82:21"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2294,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2292,"name":"msb","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2281,"src":"5777:3:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"313238","id":2293,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5784:3:21","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"5777:10:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"expression":{"id":2311,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2304,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2277,"src":"5828:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2310,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2305,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2268,"src":"5832:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2308,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"313237","id":2306,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5842:3:21","typeDescriptions":{"typeIdentifier":"t_rational_127_by_1","typeString":"int_const 127"},"value":"127"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":2307,"name":"msb","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2281,"src":"5848:3:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5842:9:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2309,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"5841:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5832:20:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5828:24:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2312,"nodeType":"ExpressionStatement","src":"5828:24:21"},"id":2313,"nodeType":"IfStatement","src":"5773:79:21","trueBody":{"expression":{"id":2302,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2295,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2277,"src":"5789:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2301,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2296,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2268,"src":"5793:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2299,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2297,"name":"msb","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2281,"src":"5803:3:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"313237","id":2298,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5809:3:21","typeDescriptions":{"typeIdentifier":"t_rational_127_by_1","typeString":"int_const 127"},"value":"127"},"src":"5803:9:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2300,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"5802:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5793:20:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5789:24:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2303,"nodeType":"ExpressionStatement","src":"5789:24:21"}},{"assignments":[2315],"declarations":[{"constant":false,"id":2315,"mutability":"mutable","name":"log_2","nodeType":"VariableDeclaration","scope":2386,"src":"5863:12:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2314,"name":"int256","nodeType":"ElementaryTypeName","src":"5863:6:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":2325,"initialValue":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2324,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2321,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2318,"name":"msb","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2281,"src":"5886:3:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2317,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5879:6:21","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":2316,"name":"int256","nodeType":"ElementaryTypeName","src":"5879:6:21","typeDescriptions":{}}},"id":2319,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5879:11:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"313238","id":2320,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5893:3:21","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"5879:17:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":2322,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"5878:19:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"3634","id":2323,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5901:2:21","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"5878:25:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"VariableDeclarationStatement","src":"5863:40:21"},{"AST":{"nodeType":"YulBlock","src":"5923:151:21","statements":[{"nodeType":"YulAssignment","src":"5937:24:21","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5946:3:21","type":"","value":"127"},{"arguments":[{"name":"r","nodeType":"YulIdentifier","src":"5955:1:21"},{"name":"r","nodeType":"YulIdentifier","src":"5958:1:21"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"5951:3:21"},"nodeType":"YulFunctionCall","src":"5951:9:21"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"5942:3:21"},"nodeType":"YulFunctionCall","src":"5942:19:21"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"5937:1:21"}]},{"nodeType":"YulVariableDeclaration","src":"5974:20:21","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5987:3:21","type":"","value":"128"},{"name":"r","nodeType":"YulIdentifier","src":"5992:1:21"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"5983:3:21"},"nodeType":"YulFunctionCall","src":"5983:11:21"},"variables":[{"name":"f","nodeType":"YulTypedName","src":"5978:1:21","type":""}]},{"nodeType":"YulAssignment","src":"6007:30:21","value":{"arguments":[{"name":"log_2","nodeType":"YulIdentifier","src":"6019:5:21"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6030:2:21","type":"","value":"63"},{"name":"f","nodeType":"YulIdentifier","src":"6034:1:21"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"6026:3:21"},"nodeType":"YulFunctionCall","src":"6026:10:21"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"6016:2:21"},"nodeType":"YulFunctionCall","src":"6016:21:21"},"variableNames":[{"name":"log_2","nodeType":"YulIdentifier","src":"6007:5:21"}]},{"nodeType":"YulAssignment","src":"6050:14:21","value":{"arguments":[{"name":"f","nodeType":"YulIdentifier","src":"6059:1:21"},{"name":"r","nodeType":"YulIdentifier","src":"6062:1:21"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"6055:3:21"},"nodeType":"YulFunctionCall","src":"6055:9:21"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"6050:1:21"}]}]},"evmVersion":"istanbul","externalReferences":[{"declaration":2315,"isOffset":false,"isSlot":false,"src":"6007:5:21","valueSize":1},{"declaration":2315,"isOffset":false,"isSlot":false,"src":"6019:5:21","valueSize":1},{"declaration":2277,"isOffset":false,"isSlot":false,"src":"5937:1:21","valueSize":1},{"declaration":2277,"isOffset":false,"isSlot":false,"src":"5955:1:21","valueSize":1},{"declaration":2277,"isOffset":false,"isSlot":false,"src":"5958:1:21","valueSize":1},{"declaration":2277,"isOffset":false,"isSlot":false,"src":"5992:1:21","valueSize":1},{"declaration":2277,"isOffset":false,"isSlot":false,"src":"6050:1:21","valueSize":1},{"declaration":2277,"isOffset":false,"isSlot":false,"src":"6062:1:21","valueSize":1}],"id":2326,"nodeType":"InlineAssembly","src":"5914:160:21"},{"AST":{"nodeType":"YulBlock","src":"6092:151:21","statements":[{"nodeType":"YulAssignment","src":"6106:24:21","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6115:3:21","type":"","value":"127"},{"arguments":[{"name":"r","nodeType":"YulIdentifier","src":"6124:1:21"},{"name":"r","nodeType":"YulIdentifier","src":"6127:1:21"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"6120:3:21"},"nodeType":"YulFunctionCall","src":"6120:9:21"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"6111:3:21"},"nodeType":"YulFunctionCall","src":"6111:19:21"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"6106:1:21"}]},{"nodeType":"YulVariableDeclaration","src":"6143:20:21","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6156:3:21","type":"","value":"128"},{"name":"r","nodeType":"YulIdentifier","src":"6161:1:21"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"6152:3:21"},"nodeType":"YulFunctionCall","src":"6152:11:21"},"variables":[{"name":"f","nodeType":"YulTypedName","src":"6147:1:21","type":""}]},{"nodeType":"YulAssignment","src":"6176:30:21","value":{"arguments":[{"name":"log_2","nodeType":"YulIdentifier","src":"6188:5:21"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6199:2:21","type":"","value":"62"},{"name":"f","nodeType":"YulIdentifier","src":"6203:1:21"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"6195:3:21"},"nodeType":"YulFunctionCall","src":"6195:10:21"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"6185:2:21"},"nodeType":"YulFunctionCall","src":"6185:21:21"},"variableNames":[{"name":"log_2","nodeType":"YulIdentifier","src":"6176:5:21"}]},{"nodeType":"YulAssignment","src":"6219:14:21","value":{"arguments":[{"name":"f","nodeType":"YulIdentifier","src":"6228:1:21"},{"name":"r","nodeType":"YulIdentifier","src":"6231:1:21"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"6224:3:21"},"nodeType":"YulFunctionCall","src":"6224:9:21"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"6219:1:21"}]}]},"evmVersion":"istanbul","externalReferences":[{"declaration":2315,"isOffset":false,"isSlot":false,"src":"6176:5:21","valueSize":1},{"declaration":2315,"isOffset":false,"isSlot":false,"src":"6188:5:21","valueSize":1},{"declaration":2277,"isOffset":false,"isSlot":false,"src":"6106:1:21","valueSize":1},{"declaration":2277,"isOffset":false,"isSlot":false,"src":"6124:1:21","valueSize":1},{"declaration":2277,"isOffset":false,"isSlot":false,"src":"6127:1:21","valueSize":1},{"declaration":2277,"isOffset":false,"isSlot":false,"src":"6161:1:21","valueSize":1},{"declaration":2277,"isOffset":false,"isSlot":false,"src":"6219:1:21","valueSize":1},{"declaration":2277,"isOffset":false,"isSlot":false,"src":"6231:1:21","valueSize":1}],"id":2327,"nodeType":"InlineAssembly","src":"6083:160:21"},{"AST":{"nodeType":"YulBlock","src":"6261:151:21","statements":[{"nodeType":"YulAssignment","src":"6275:24:21","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6284:3:21","type":"","value":"127"},{"arguments":[{"name":"r","nodeType":"YulIdentifier","src":"6293:1:21"},{"name":"r","nodeType":"YulIdentifier","src":"6296:1:21"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"6289:3:21"},"nodeType":"YulFunctionCall","src":"6289:9:21"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"6280:3:21"},"nodeType":"YulFunctionCall","src":"6280:19:21"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"6275:1:21"}]},{"nodeType":"YulVariableDeclaration","src":"6312:20:21","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6325:3:21","type":"","value":"128"},{"name":"r","nodeType":"YulIdentifier","src":"6330:1:21"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"6321:3:21"},"nodeType":"YulFunctionCall","src":"6321:11:21"},"variables":[{"name":"f","nodeType":"YulTypedName","src":"6316:1:21","type":""}]},{"nodeType":"YulAssignment","src":"6345:30:21","value":{"arguments":[{"name":"log_2","nodeType":"YulIdentifier","src":"6357:5:21"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6368:2:21","type":"","value":"61"},{"name":"f","nodeType":"YulIdentifier","src":"6372:1:21"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"6364:3:21"},"nodeType":"YulFunctionCall","src":"6364:10:21"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"6354:2:21"},"nodeType":"YulFunctionCall","src":"6354:21:21"},"variableNames":[{"name":"log_2","nodeType":"YulIdentifier","src":"6345:5:21"}]},{"nodeType":"YulAssignment","src":"6388:14:21","value":{"arguments":[{"name":"f","nodeType":"YulIdentifier","src":"6397:1:21"},{"name":"r","nodeType":"YulIdentifier","src":"6400:1:21"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"6393:3:21"},"nodeType":"YulFunctionCall","src":"6393:9:21"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"6388:1:21"}]}]},"evmVersion":"istanbul","externalReferences":[{"declaration":2315,"isOffset":false,"isSlot":false,"src":"6345:5:21","valueSize":1},{"declaration":2315,"isOffset":false,"isSlot":false,"src":"6357:5:21","valueSize":1},{"declaration":2277,"isOffset":false,"isSlot":false,"src":"6275:1:21","valueSize":1},{"declaration":2277,"isOffset":false,"isSlot":false,"src":"6293:1:21","valueSize":1},{"declaration":2277,"isOffset":false,"isSlot":false,"src":"6296:1:21","valueSize":1},{"declaration":2277,"isOffset":false,"isSlot":false,"src":"6330:1:21","valueSize":1},{"declaration":2277,"isOffset":false,"isSlot":false,"src":"6388:1:21","valueSize":1},{"declaration":2277,"isOffset":false,"isSlot":false,"src":"6400:1:21","valueSize":1}],"id":2328,"nodeType":"InlineAssembly","src":"6252:160:21"},{"AST":{"nodeType":"YulBlock","src":"6430:151:21","statements":[{"nodeType":"YulAssignment","src":"6444:24:21","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6453:3:21","type":"","value":"127"},{"arguments":[{"name":"r","nodeType":"YulIdentifier","src":"6462:1:21"},{"name":"r","nodeType":"YulIdentifier","src":"6465:1:21"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"6458:3:21"},"nodeType":"YulFunctionCall","src":"6458:9:21"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"6449:3:21"},"nodeType":"YulFunctionCall","src":"6449:19:21"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"6444:1:21"}]},{"nodeType":"YulVariableDeclaration","src":"6481:20:21","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6494:3:21","type":"","value":"128"},{"name":"r","nodeType":"YulIdentifier","src":"6499:1:21"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"6490:3:21"},"nodeType":"YulFunctionCall","src":"6490:11:21"},"variables":[{"name":"f","nodeType":"YulTypedName","src":"6485:1:21","type":""}]},{"nodeType":"YulAssignment","src":"6514:30:21","value":{"arguments":[{"name":"log_2","nodeType":"YulIdentifier","src":"6526:5:21"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6537:2:21","type":"","value":"60"},{"name":"f","nodeType":"YulIdentifier","src":"6541:1:21"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"6533:3:21"},"nodeType":"YulFunctionCall","src":"6533:10:21"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"6523:2:21"},"nodeType":"YulFunctionCall","src":"6523:21:21"},"variableNames":[{"name":"log_2","nodeType":"YulIdentifier","src":"6514:5:21"}]},{"nodeType":"YulAssignment","src":"6557:14:21","value":{"arguments":[{"name":"f","nodeType":"YulIdentifier","src":"6566:1:21"},{"name":"r","nodeType":"YulIdentifier","src":"6569:1:21"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"6562:3:21"},"nodeType":"YulFunctionCall","src":"6562:9:21"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"6557:1:21"}]}]},"evmVersion":"istanbul","externalReferences":[{"declaration":2315,"isOffset":false,"isSlot":false,"src":"6514:5:21","valueSize":1},{"declaration":2315,"isOffset":false,"isSlot":false,"src":"6526:5:21","valueSize":1},{"declaration":2277,"isOffset":false,"isSlot":false,"src":"6444:1:21","valueSize":1},{"declaration":2277,"isOffset":false,"isSlot":false,"src":"6462:1:21","valueSize":1},{"declaration":2277,"isOffset":false,"isSlot":false,"src":"6465:1:21","valueSize":1},{"declaration":2277,"isOffset":false,"isSlot":false,"src":"6499:1:21","valueSize":1},{"declaration":2277,"isOffset":false,"isSlot":false,"src":"6557:1:21","valueSize":1},{"declaration":2277,"isOffset":false,"isSlot":false,"src":"6569:1:21","valueSize":1}],"id":2329,"nodeType":"InlineAssembly","src":"6421:160:21"},{"AST":{"nodeType":"YulBlock","src":"6599:151:21","statements":[{"nodeType":"YulAssignment","src":"6613:24:21","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6622:3:21","type":"","value":"127"},{"arguments":[{"name":"r","nodeType":"YulIdentifier","src":"6631:1:21"},{"name":"r","nodeType":"YulIdentifier","src":"6634:1:21"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"6627:3:21"},"nodeType":"YulFunctionCall","src":"6627:9:21"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"6618:3:21"},"nodeType":"YulFunctionCall","src":"6618:19:21"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"6613:1:21"}]},{"nodeType":"YulVariableDeclaration","src":"6650:20:21","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6663:3:21","type":"","value":"128"},{"name":"r","nodeType":"YulIdentifier","src":"6668:1:21"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"6659:3:21"},"nodeType":"YulFunctionCall","src":"6659:11:21"},"variables":[{"name":"f","nodeType":"YulTypedName","src":"6654:1:21","type":""}]},{"nodeType":"YulAssignment","src":"6683:30:21","value":{"arguments":[{"name":"log_2","nodeType":"YulIdentifier","src":"6695:5:21"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6706:2:21","type":"","value":"59"},{"name":"f","nodeType":"YulIdentifier","src":"6710:1:21"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"6702:3:21"},"nodeType":"YulFunctionCall","src":"6702:10:21"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"6692:2:21"},"nodeType":"YulFunctionCall","src":"6692:21:21"},"variableNames":[{"name":"log_2","nodeType":"YulIdentifier","src":"6683:5:21"}]},{"nodeType":"YulAssignment","src":"6726:14:21","value":{"arguments":[{"name":"f","nodeType":"YulIdentifier","src":"6735:1:21"},{"name":"r","nodeType":"YulIdentifier","src":"6738:1:21"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"6731:3:21"},"nodeType":"YulFunctionCall","src":"6731:9:21"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"6726:1:21"}]}]},"evmVersion":"istanbul","externalReferences":[{"declaration":2315,"isOffset":false,"isSlot":false,"src":"6683:5:21","valueSize":1},{"declaration":2315,"isOffset":false,"isSlot":false,"src":"6695:5:21","valueSize":1},{"declaration":2277,"isOffset":false,"isSlot":false,"src":"6613:1:21","valueSize":1},{"declaration":2277,"isOffset":false,"isSlot":false,"src":"6631:1:21","valueSize":1},{"declaration":2277,"isOffset":false,"isSlot":false,"src":"6634:1:21","valueSize":1},{"declaration":2277,"isOffset":false,"isSlot":false,"src":"6668:1:21","valueSize":1},{"declaration":2277,"isOffset":false,"isSlot":false,"src":"6726:1:21","valueSize":1},{"declaration":2277,"isOffset":false,"isSlot":false,"src":"6738:1:21","valueSize":1}],"id":2330,"nodeType":"InlineAssembly","src":"6590:160:21"},{"AST":{"nodeType":"YulBlock","src":"6768:151:21","statements":[{"nodeType":"YulAssignment","src":"6782:24:21","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6791:3:21","type":"","value":"127"},{"arguments":[{"name":"r","nodeType":"YulIdentifier","src":"6800:1:21"},{"name":"r","nodeType":"YulIdentifier","src":"6803:1:21"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"6796:3:21"},"nodeType":"YulFunctionCall","src":"6796:9:21"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"6787:3:21"},"nodeType":"YulFunctionCall","src":"6787:19:21"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"6782:1:21"}]},{"nodeType":"YulVariableDeclaration","src":"6819:20:21","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6832:3:21","type":"","value":"128"},{"name":"r","nodeType":"YulIdentifier","src":"6837:1:21"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"6828:3:21"},"nodeType":"YulFunctionCall","src":"6828:11:21"},"variables":[{"name":"f","nodeType":"YulTypedName","src":"6823:1:21","type":""}]},{"nodeType":"YulAssignment","src":"6852:30:21","value":{"arguments":[{"name":"log_2","nodeType":"YulIdentifier","src":"6864:5:21"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6875:2:21","type":"","value":"58"},{"name":"f","nodeType":"YulIdentifier","src":"6879:1:21"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"6871:3:21"},"nodeType":"YulFunctionCall","src":"6871:10:21"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"6861:2:21"},"nodeType":"YulFunctionCall","src":"6861:21:21"},"variableNames":[{"name":"log_2","nodeType":"YulIdentifier","src":"6852:5:21"}]},{"nodeType":"YulAssignment","src":"6895:14:21","value":{"arguments":[{"name":"f","nodeType":"YulIdentifier","src":"6904:1:21"},{"name":"r","nodeType":"YulIdentifier","src":"6907:1:21"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"6900:3:21"},"nodeType":"YulFunctionCall","src":"6900:9:21"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"6895:1:21"}]}]},"evmVersion":"istanbul","externalReferences":[{"declaration":2315,"isOffset":false,"isSlot":false,"src":"6852:5:21","valueSize":1},{"declaration":2315,"isOffset":false,"isSlot":false,"src":"6864:5:21","valueSize":1},{"declaration":2277,"isOffset":false,"isSlot":false,"src":"6782:1:21","valueSize":1},{"declaration":2277,"isOffset":false,"isSlot":false,"src":"6800:1:21","valueSize":1},{"declaration":2277,"isOffset":false,"isSlot":false,"src":"6803:1:21","valueSize":1},{"declaration":2277,"isOffset":false,"isSlot":false,"src":"6837:1:21","valueSize":1},{"declaration":2277,"isOffset":false,"isSlot":false,"src":"6895:1:21","valueSize":1},{"declaration":2277,"isOffset":false,"isSlot":false,"src":"6907:1:21","valueSize":1}],"id":2331,"nodeType":"InlineAssembly","src":"6759:160:21"},{"AST":{"nodeType":"YulBlock","src":"6937:151:21","statements":[{"nodeType":"YulAssignment","src":"6951:24:21","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6960:3:21","type":"","value":"127"},{"arguments":[{"name":"r","nodeType":"YulIdentifier","src":"6969:1:21"},{"name":"r","nodeType":"YulIdentifier","src":"6972:1:21"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"6965:3:21"},"nodeType":"YulFunctionCall","src":"6965:9:21"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"6956:3:21"},"nodeType":"YulFunctionCall","src":"6956:19:21"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"6951:1:21"}]},{"nodeType":"YulVariableDeclaration","src":"6988:20:21","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7001:3:21","type":"","value":"128"},{"name":"r","nodeType":"YulIdentifier","src":"7006:1:21"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"6997:3:21"},"nodeType":"YulFunctionCall","src":"6997:11:21"},"variables":[{"name":"f","nodeType":"YulTypedName","src":"6992:1:21","type":""}]},{"nodeType":"YulAssignment","src":"7021:30:21","value":{"arguments":[{"name":"log_2","nodeType":"YulIdentifier","src":"7033:5:21"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7044:2:21","type":"","value":"57"},{"name":"f","nodeType":"YulIdentifier","src":"7048:1:21"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"7040:3:21"},"nodeType":"YulFunctionCall","src":"7040:10:21"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"7030:2:21"},"nodeType":"YulFunctionCall","src":"7030:21:21"},"variableNames":[{"name":"log_2","nodeType":"YulIdentifier","src":"7021:5:21"}]},{"nodeType":"YulAssignment","src":"7064:14:21","value":{"arguments":[{"name":"f","nodeType":"YulIdentifier","src":"7073:1:21"},{"name":"r","nodeType":"YulIdentifier","src":"7076:1:21"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"7069:3:21"},"nodeType":"YulFunctionCall","src":"7069:9:21"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"7064:1:21"}]}]},"evmVersion":"istanbul","externalReferences":[{"declaration":2315,"isOffset":false,"isSlot":false,"src":"7021:5:21","valueSize":1},{"declaration":2315,"isOffset":false,"isSlot":false,"src":"7033:5:21","valueSize":1},{"declaration":2277,"isOffset":false,"isSlot":false,"src":"6951:1:21","valueSize":1},{"declaration":2277,"isOffset":false,"isSlot":false,"src":"6969:1:21","valueSize":1},{"declaration":2277,"isOffset":false,"isSlot":false,"src":"6972:1:21","valueSize":1},{"declaration":2277,"isOffset":false,"isSlot":false,"src":"7006:1:21","valueSize":1},{"declaration":2277,"isOffset":false,"isSlot":false,"src":"7064:1:21","valueSize":1},{"declaration":2277,"isOffset":false,"isSlot":false,"src":"7076:1:21","valueSize":1}],"id":2332,"nodeType":"InlineAssembly","src":"6928:160:21"},{"AST":{"nodeType":"YulBlock","src":"7106:151:21","statements":[{"nodeType":"YulAssignment","src":"7120:24:21","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7129:3:21","type":"","value":"127"},{"arguments":[{"name":"r","nodeType":"YulIdentifier","src":"7138:1:21"},{"name":"r","nodeType":"YulIdentifier","src":"7141:1:21"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"7134:3:21"},"nodeType":"YulFunctionCall","src":"7134:9:21"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"7125:3:21"},"nodeType":"YulFunctionCall","src":"7125:19:21"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"7120:1:21"}]},{"nodeType":"YulVariableDeclaration","src":"7157:20:21","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7170:3:21","type":"","value":"128"},{"name":"r","nodeType":"YulIdentifier","src":"7175:1:21"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"7166:3:21"},"nodeType":"YulFunctionCall","src":"7166:11:21"},"variables":[{"name":"f","nodeType":"YulTypedName","src":"7161:1:21","type":""}]},{"nodeType":"YulAssignment","src":"7190:30:21","value":{"arguments":[{"name":"log_2","nodeType":"YulIdentifier","src":"7202:5:21"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7213:2:21","type":"","value":"56"},{"name":"f","nodeType":"YulIdentifier","src":"7217:1:21"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"7209:3:21"},"nodeType":"YulFunctionCall","src":"7209:10:21"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"7199:2:21"},"nodeType":"YulFunctionCall","src":"7199:21:21"},"variableNames":[{"name":"log_2","nodeType":"YulIdentifier","src":"7190:5:21"}]},{"nodeType":"YulAssignment","src":"7233:14:21","value":{"arguments":[{"name":"f","nodeType":"YulIdentifier","src":"7242:1:21"},{"name":"r","nodeType":"YulIdentifier","src":"7245:1:21"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"7238:3:21"},"nodeType":"YulFunctionCall","src":"7238:9:21"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"7233:1:21"}]}]},"evmVersion":"istanbul","externalReferences":[{"declaration":2315,"isOffset":false,"isSlot":false,"src":"7190:5:21","valueSize":1},{"declaration":2315,"isOffset":false,"isSlot":false,"src":"7202:5:21","valueSize":1},{"declaration":2277,"isOffset":false,"isSlot":false,"src":"7120:1:21","valueSize":1},{"declaration":2277,"isOffset":false,"isSlot":false,"src":"7138:1:21","valueSize":1},{"declaration":2277,"isOffset":false,"isSlot":false,"src":"7141:1:21","valueSize":1},{"declaration":2277,"isOffset":false,"isSlot":false,"src":"7175:1:21","valueSize":1},{"declaration":2277,"isOffset":false,"isSlot":false,"src":"7233:1:21","valueSize":1},{"declaration":2277,"isOffset":false,"isSlot":false,"src":"7245:1:21","valueSize":1}],"id":2333,"nodeType":"InlineAssembly","src":"7097:160:21"},{"AST":{"nodeType":"YulBlock","src":"7275:151:21","statements":[{"nodeType":"YulAssignment","src":"7289:24:21","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7298:3:21","type":"","value":"127"},{"arguments":[{"name":"r","nodeType":"YulIdentifier","src":"7307:1:21"},{"name":"r","nodeType":"YulIdentifier","src":"7310:1:21"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"7303:3:21"},"nodeType":"YulFunctionCall","src":"7303:9:21"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"7294:3:21"},"nodeType":"YulFunctionCall","src":"7294:19:21"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"7289:1:21"}]},{"nodeType":"YulVariableDeclaration","src":"7326:20:21","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7339:3:21","type":"","value":"128"},{"name":"r","nodeType":"YulIdentifier","src":"7344:1:21"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"7335:3:21"},"nodeType":"YulFunctionCall","src":"7335:11:21"},"variables":[{"name":"f","nodeType":"YulTypedName","src":"7330:1:21","type":""}]},{"nodeType":"YulAssignment","src":"7359:30:21","value":{"arguments":[{"name":"log_2","nodeType":"YulIdentifier","src":"7371:5:21"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7382:2:21","type":"","value":"55"},{"name":"f","nodeType":"YulIdentifier","src":"7386:1:21"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"7378:3:21"},"nodeType":"YulFunctionCall","src":"7378:10:21"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"7368:2:21"},"nodeType":"YulFunctionCall","src":"7368:21:21"},"variableNames":[{"name":"log_2","nodeType":"YulIdentifier","src":"7359:5:21"}]},{"nodeType":"YulAssignment","src":"7402:14:21","value":{"arguments":[{"name":"f","nodeType":"YulIdentifier","src":"7411:1:21"},{"name":"r","nodeType":"YulIdentifier","src":"7414:1:21"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"7407:3:21"},"nodeType":"YulFunctionCall","src":"7407:9:21"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"7402:1:21"}]}]},"evmVersion":"istanbul","externalReferences":[{"declaration":2315,"isOffset":false,"isSlot":false,"src":"7359:5:21","valueSize":1},{"declaration":2315,"isOffset":false,"isSlot":false,"src":"7371:5:21","valueSize":1},{"declaration":2277,"isOffset":false,"isSlot":false,"src":"7289:1:21","valueSize":1},{"declaration":2277,"isOffset":false,"isSlot":false,"src":"7307:1:21","valueSize":1},{"declaration":2277,"isOffset":false,"isSlot":false,"src":"7310:1:21","valueSize":1},{"declaration":2277,"isOffset":false,"isSlot":false,"src":"7344:1:21","valueSize":1},{"declaration":2277,"isOffset":false,"isSlot":false,"src":"7402:1:21","valueSize":1},{"declaration":2277,"isOffset":false,"isSlot":false,"src":"7414:1:21","valueSize":1}],"id":2334,"nodeType":"InlineAssembly","src":"7266:160:21"},{"AST":{"nodeType":"YulBlock","src":"7444:151:21","statements":[{"nodeType":"YulAssignment","src":"7458:24:21","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7467:3:21","type":"","value":"127"},{"arguments":[{"name":"r","nodeType":"YulIdentifier","src":"7476:1:21"},{"name":"r","nodeType":"YulIdentifier","src":"7479:1:21"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"7472:3:21"},"nodeType":"YulFunctionCall","src":"7472:9:21"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"7463:3:21"},"nodeType":"YulFunctionCall","src":"7463:19:21"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"7458:1:21"}]},{"nodeType":"YulVariableDeclaration","src":"7495:20:21","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7508:3:21","type":"","value":"128"},{"name":"r","nodeType":"YulIdentifier","src":"7513:1:21"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"7504:3:21"},"nodeType":"YulFunctionCall","src":"7504:11:21"},"variables":[{"name":"f","nodeType":"YulTypedName","src":"7499:1:21","type":""}]},{"nodeType":"YulAssignment","src":"7528:30:21","value":{"arguments":[{"name":"log_2","nodeType":"YulIdentifier","src":"7540:5:21"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7551:2:21","type":"","value":"54"},{"name":"f","nodeType":"YulIdentifier","src":"7555:1:21"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"7547:3:21"},"nodeType":"YulFunctionCall","src":"7547:10:21"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"7537:2:21"},"nodeType":"YulFunctionCall","src":"7537:21:21"},"variableNames":[{"name":"log_2","nodeType":"YulIdentifier","src":"7528:5:21"}]},{"nodeType":"YulAssignment","src":"7571:14:21","value":{"arguments":[{"name":"f","nodeType":"YulIdentifier","src":"7580:1:21"},{"name":"r","nodeType":"YulIdentifier","src":"7583:1:21"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"7576:3:21"},"nodeType":"YulFunctionCall","src":"7576:9:21"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"7571:1:21"}]}]},"evmVersion":"istanbul","externalReferences":[{"declaration":2315,"isOffset":false,"isSlot":false,"src":"7528:5:21","valueSize":1},{"declaration":2315,"isOffset":false,"isSlot":false,"src":"7540:5:21","valueSize":1},{"declaration":2277,"isOffset":false,"isSlot":false,"src":"7458:1:21","valueSize":1},{"declaration":2277,"isOffset":false,"isSlot":false,"src":"7476:1:21","valueSize":1},{"declaration":2277,"isOffset":false,"isSlot":false,"src":"7479:1:21","valueSize":1},{"declaration":2277,"isOffset":false,"isSlot":false,"src":"7513:1:21","valueSize":1},{"declaration":2277,"isOffset":false,"isSlot":false,"src":"7571:1:21","valueSize":1},{"declaration":2277,"isOffset":false,"isSlot":false,"src":"7583:1:21","valueSize":1}],"id":2335,"nodeType":"InlineAssembly","src":"7435:160:21"},{"AST":{"nodeType":"YulBlock","src":"7613:151:21","statements":[{"nodeType":"YulAssignment","src":"7627:24:21","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7636:3:21","type":"","value":"127"},{"arguments":[{"name":"r","nodeType":"YulIdentifier","src":"7645:1:21"},{"name":"r","nodeType":"YulIdentifier","src":"7648:1:21"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"7641:3:21"},"nodeType":"YulFunctionCall","src":"7641:9:21"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"7632:3:21"},"nodeType":"YulFunctionCall","src":"7632:19:21"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"7627:1:21"}]},{"nodeType":"YulVariableDeclaration","src":"7664:20:21","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7677:3:21","type":"","value":"128"},{"name":"r","nodeType":"YulIdentifier","src":"7682:1:21"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"7673:3:21"},"nodeType":"YulFunctionCall","src":"7673:11:21"},"variables":[{"name":"f","nodeType":"YulTypedName","src":"7668:1:21","type":""}]},{"nodeType":"YulAssignment","src":"7697:30:21","value":{"arguments":[{"name":"log_2","nodeType":"YulIdentifier","src":"7709:5:21"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7720:2:21","type":"","value":"53"},{"name":"f","nodeType":"YulIdentifier","src":"7724:1:21"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"7716:3:21"},"nodeType":"YulFunctionCall","src":"7716:10:21"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"7706:2:21"},"nodeType":"YulFunctionCall","src":"7706:21:21"},"variableNames":[{"name":"log_2","nodeType":"YulIdentifier","src":"7697:5:21"}]},{"nodeType":"YulAssignment","src":"7740:14:21","value":{"arguments":[{"name":"f","nodeType":"YulIdentifier","src":"7749:1:21"},{"name":"r","nodeType":"YulIdentifier","src":"7752:1:21"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"7745:3:21"},"nodeType":"YulFunctionCall","src":"7745:9:21"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"7740:1:21"}]}]},"evmVersion":"istanbul","externalReferences":[{"declaration":2315,"isOffset":false,"isSlot":false,"src":"7697:5:21","valueSize":1},{"declaration":2315,"isOffset":false,"isSlot":false,"src":"7709:5:21","valueSize":1},{"declaration":2277,"isOffset":false,"isSlot":false,"src":"7627:1:21","valueSize":1},{"declaration":2277,"isOffset":false,"isSlot":false,"src":"7645:1:21","valueSize":1},{"declaration":2277,"isOffset":false,"isSlot":false,"src":"7648:1:21","valueSize":1},{"declaration":2277,"isOffset":false,"isSlot":false,"src":"7682:1:21","valueSize":1},{"declaration":2277,"isOffset":false,"isSlot":false,"src":"7740:1:21","valueSize":1},{"declaration":2277,"isOffset":false,"isSlot":false,"src":"7752:1:21","valueSize":1}],"id":2336,"nodeType":"InlineAssembly","src":"7604:160:21"},{"AST":{"nodeType":"YulBlock","src":"7782:151:21","statements":[{"nodeType":"YulAssignment","src":"7796:24:21","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7805:3:21","type":"","value":"127"},{"arguments":[{"name":"r","nodeType":"YulIdentifier","src":"7814:1:21"},{"name":"r","nodeType":"YulIdentifier","src":"7817:1:21"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"7810:3:21"},"nodeType":"YulFunctionCall","src":"7810:9:21"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"7801:3:21"},"nodeType":"YulFunctionCall","src":"7801:19:21"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"7796:1:21"}]},{"nodeType":"YulVariableDeclaration","src":"7833:20:21","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7846:3:21","type":"","value":"128"},{"name":"r","nodeType":"YulIdentifier","src":"7851:1:21"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"7842:3:21"},"nodeType":"YulFunctionCall","src":"7842:11:21"},"variables":[{"name":"f","nodeType":"YulTypedName","src":"7837:1:21","type":""}]},{"nodeType":"YulAssignment","src":"7866:30:21","value":{"arguments":[{"name":"log_2","nodeType":"YulIdentifier","src":"7878:5:21"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7889:2:21","type":"","value":"52"},{"name":"f","nodeType":"YulIdentifier","src":"7893:1:21"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"7885:3:21"},"nodeType":"YulFunctionCall","src":"7885:10:21"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"7875:2:21"},"nodeType":"YulFunctionCall","src":"7875:21:21"},"variableNames":[{"name":"log_2","nodeType":"YulIdentifier","src":"7866:5:21"}]},{"nodeType":"YulAssignment","src":"7909:14:21","value":{"arguments":[{"name":"f","nodeType":"YulIdentifier","src":"7918:1:21"},{"name":"r","nodeType":"YulIdentifier","src":"7921:1:21"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"7914:3:21"},"nodeType":"YulFunctionCall","src":"7914:9:21"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"7909:1:21"}]}]},"evmVersion":"istanbul","externalReferences":[{"declaration":2315,"isOffset":false,"isSlot":false,"src":"7866:5:21","valueSize":1},{"declaration":2315,"isOffset":false,"isSlot":false,"src":"7878:5:21","valueSize":1},{"declaration":2277,"isOffset":false,"isSlot":false,"src":"7796:1:21","valueSize":1},{"declaration":2277,"isOffset":false,"isSlot":false,"src":"7814:1:21","valueSize":1},{"declaration":2277,"isOffset":false,"isSlot":false,"src":"7817:1:21","valueSize":1},{"declaration":2277,"isOffset":false,"isSlot":false,"src":"7851:1:21","valueSize":1},{"declaration":2277,"isOffset":false,"isSlot":false,"src":"7909:1:21","valueSize":1},{"declaration":2277,"isOffset":false,"isSlot":false,"src":"7921:1:21","valueSize":1}],"id":2337,"nodeType":"InlineAssembly","src":"7773:160:21"},{"AST":{"nodeType":"YulBlock","src":"7951:151:21","statements":[{"nodeType":"YulAssignment","src":"7965:24:21","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7974:3:21","type":"","value":"127"},{"arguments":[{"name":"r","nodeType":"YulIdentifier","src":"7983:1:21"},{"name":"r","nodeType":"YulIdentifier","src":"7986:1:21"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"7979:3:21"},"nodeType":"YulFunctionCall","src":"7979:9:21"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"7970:3:21"},"nodeType":"YulFunctionCall","src":"7970:19:21"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"7965:1:21"}]},{"nodeType":"YulVariableDeclaration","src":"8002:20:21","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8015:3:21","type":"","value":"128"},{"name":"r","nodeType":"YulIdentifier","src":"8020:1:21"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"8011:3:21"},"nodeType":"YulFunctionCall","src":"8011:11:21"},"variables":[{"name":"f","nodeType":"YulTypedName","src":"8006:1:21","type":""}]},{"nodeType":"YulAssignment","src":"8035:30:21","value":{"arguments":[{"name":"log_2","nodeType":"YulIdentifier","src":"8047:5:21"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8058:2:21","type":"","value":"51"},{"name":"f","nodeType":"YulIdentifier","src":"8062:1:21"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"8054:3:21"},"nodeType":"YulFunctionCall","src":"8054:10:21"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"8044:2:21"},"nodeType":"YulFunctionCall","src":"8044:21:21"},"variableNames":[{"name":"log_2","nodeType":"YulIdentifier","src":"8035:5:21"}]},{"nodeType":"YulAssignment","src":"8078:14:21","value":{"arguments":[{"name":"f","nodeType":"YulIdentifier","src":"8087:1:21"},{"name":"r","nodeType":"YulIdentifier","src":"8090:1:21"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"8083:3:21"},"nodeType":"YulFunctionCall","src":"8083:9:21"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"8078:1:21"}]}]},"evmVersion":"istanbul","externalReferences":[{"declaration":2315,"isOffset":false,"isSlot":false,"src":"8035:5:21","valueSize":1},{"declaration":2315,"isOffset":false,"isSlot":false,"src":"8047:5:21","valueSize":1},{"declaration":2277,"isOffset":false,"isSlot":false,"src":"7965:1:21","valueSize":1},{"declaration":2277,"isOffset":false,"isSlot":false,"src":"7983:1:21","valueSize":1},{"declaration":2277,"isOffset":false,"isSlot":false,"src":"7986:1:21","valueSize":1},{"declaration":2277,"isOffset":false,"isSlot":false,"src":"8020:1:21","valueSize":1},{"declaration":2277,"isOffset":false,"isSlot":false,"src":"8078:1:21","valueSize":1},{"declaration":2277,"isOffset":false,"isSlot":false,"src":"8090:1:21","valueSize":1}],"id":2338,"nodeType":"InlineAssembly","src":"7942:160:21"},{"AST":{"nodeType":"YulBlock","src":"8120:124:21","statements":[{"nodeType":"YulAssignment","src":"8134:24:21","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8143:3:21","type":"","value":"127"},{"arguments":[{"name":"r","nodeType":"YulIdentifier","src":"8152:1:21"},{"name":"r","nodeType":"YulIdentifier","src":"8155:1:21"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"8148:3:21"},"nodeType":"YulFunctionCall","src":"8148:9:21"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"8139:3:21"},"nodeType":"YulFunctionCall","src":"8139:19:21"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"8134:1:21"}]},{"nodeType":"YulVariableDeclaration","src":"8171:20:21","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8184:3:21","type":"","value":"128"},{"name":"r","nodeType":"YulIdentifier","src":"8189:1:21"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"8180:3:21"},"nodeType":"YulFunctionCall","src":"8180:11:21"},"variables":[{"name":"f","nodeType":"YulTypedName","src":"8175:1:21","type":""}]},{"nodeType":"YulAssignment","src":"8204:30:21","value":{"arguments":[{"name":"log_2","nodeType":"YulIdentifier","src":"8216:5:21"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8227:2:21","type":"","value":"50"},{"name":"f","nodeType":"YulIdentifier","src":"8231:1:21"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"8223:3:21"},"nodeType":"YulFunctionCall","src":"8223:10:21"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"8213:2:21"},"nodeType":"YulFunctionCall","src":"8213:21:21"},"variableNames":[{"name":"log_2","nodeType":"YulIdentifier","src":"8204:5:21"}]}]},"evmVersion":"istanbul","externalReferences":[{"declaration":2315,"isOffset":false,"isSlot":false,"src":"8204:5:21","valueSize":1},{"declaration":2315,"isOffset":false,"isSlot":false,"src":"8216:5:21","valueSize":1},{"declaration":2277,"isOffset":false,"isSlot":false,"src":"8134:1:21","valueSize":1},{"declaration":2277,"isOffset":false,"isSlot":false,"src":"8152:1:21","valueSize":1},{"declaration":2277,"isOffset":false,"isSlot":false,"src":"8155:1:21","valueSize":1},{"declaration":2277,"isOffset":false,"isSlot":false,"src":"8189:1:21","valueSize":1}],"id":2339,"nodeType":"InlineAssembly","src":"8111:133:21"},{"assignments":[2341],"declarations":[{"constant":false,"id":2341,"mutability":"mutable","name":"log_sqrt10001","nodeType":"VariableDeclaration","scope":2386,"src":"8254:20:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2340,"name":"int256","nodeType":"ElementaryTypeName","src":"8254:6:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":2345,"initialValue":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2344,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2342,"name":"log_2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2315,"src":"8277:5:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"323535373338393538393939363033383236333437313431","id":2343,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8285:24:21","typeDescriptions":{"typeIdentifier":"t_rational_255738958999603826347141_by_1","typeString":"int_const 255738958999603826347141"},"value":"255738958999603826347141"},"src":"8277:32:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"VariableDeclarationStatement","src":"8254:55:21"},{"assignments":[2347],"declarations":[{"constant":false,"id":2347,"mutability":"mutable","name":"tickLow","nodeType":"VariableDeclaration","scope":2386,"src":"8338:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":2346,"name":"int24","nodeType":"ElementaryTypeName","src":"8338:5:21","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"}],"id":2357,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2355,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2352,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2350,"name":"log_sqrt10001","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2341,"src":"8361:13:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"33343032393932393536383039313332343138353936313430313030363630323437323130","id":2351,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8377:37:21","typeDescriptions":{"typeIdentifier":"t_rational_3402992956809132418596140100660247210_by_1","typeString":"int_const 3402...(29 digits omitted)...7210"},"value":"3402992956809132418596140100660247210"},"src":"8361:53:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":2353,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8360:55:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2354,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8419:3:21","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8360:62:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":2349,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8354:5:21","typeDescriptions":{"typeIdentifier":"t_type$_t_int24_$","typeString":"type(int24)"},"typeName":{"id":2348,"name":"int24","nodeType":"ElementaryTypeName","src":"8354:5:21","typeDescriptions":{}}},"id":2356,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8354:69:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"VariableDeclarationStatement","src":"8338:85:21"},{"assignments":[2359],"declarations":[{"constant":false,"id":2359,"mutability":"mutable","name":"tickHi","nodeType":"VariableDeclaration","scope":2386,"src":"8433:12:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":2358,"name":"int24","nodeType":"ElementaryTypeName","src":"8433:5:21","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"}],"id":2369,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2367,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2364,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2362,"name":"log_sqrt10001","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2341,"src":"8455:13:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"323931333339343634373731393839363232393037303237363231313533333938303838343935","id":2363,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8471:39:21","typeDescriptions":{"typeIdentifier":"t_rational_291339464771989622907027621153398088495_by_1","typeString":"int_const 2913...(31 digits omitted)...8495"},"value":"291339464771989622907027621153398088495"},"src":"8455:55:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":2365,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8454:57:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2366,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8515:3:21","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8454:64:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":2361,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8448:5:21","typeDescriptions":{"typeIdentifier":"t_type$_t_int24_$","typeString":"type(int24)"},"typeName":{"id":2360,"name":"int24","nodeType":"ElementaryTypeName","src":"8448:5:21","typeDescriptions":{}}},"id":2368,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8448:71:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"VariableDeclarationStatement","src":"8433:86:21"},{"expression":{"id":2384,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2370,"name":"tick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2254,"src":"8530:4:21","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"condition":{"commonType":{"typeIdentifier":"t_int24","typeString":"int24"},"id":2373,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2371,"name":"tickLow","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2347,"src":"8537:7:21","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2372,"name":"tickHi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2359,"src":"8548:6:21","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"src":"8537:17:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"condition":{"commonType":{"typeIdentifier":"t_uint160","typeString":"uint160"},"id":2379,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2376,"name":"tickHi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2359,"src":"8586:6:21","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int24","typeString":"int24"}],"id":2375,"name":"getSqrtRatioAtTick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2248,"src":"8567:18:21","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_int24_$returns$_t_uint160_$","typeString":"function (int24) pure returns (uint160)"}},"id":2377,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8567:26:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":2378,"name":"sqrtPriceX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2251,"src":"8597:12:21","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"src":"8567:42:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":2381,"name":"tickLow","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2347,"src":"8621:7:21","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"id":2382,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8567:61:21","trueExpression":{"id":2380,"name":"tickHi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2359,"src":"8612:6:21","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"id":2383,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8537:91:21","trueExpression":{"id":2374,"name":"tickLow","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2347,"src":"8557:7:21","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"src":"8530:98:21","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"id":2385,"nodeType":"ExpressionStatement","src":"8530:98:21"}]},"documentation":{"id":2249,"nodeType":"StructuredDocumentation","src":"3941:408:21","text":"@notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\n @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\n ever return.\n @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\n @return tick The greatest tick for which the ratio is less than or equal to the input ratio"},"id":2387,"implemented":true,"kind":"function","modifiers":[],"name":"getTickAtSqrtRatio","nodeType":"FunctionDefinition","parameters":{"id":2252,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2251,"mutability":"mutable","name":"sqrtPriceX96","nodeType":"VariableDeclaration","scope":2387,"src":"4382:20:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":2250,"name":"uint160","nodeType":"ElementaryTypeName","src":"4382:7:21","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"}],"src":"4381:22:21"},"returnParameters":{"id":2255,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2254,"mutability":"mutable","name":"tick","nodeType":"VariableDeclaration","scope":2387,"src":"4427:10:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":2253,"name":"int24","nodeType":"ElementaryTypeName","src":"4427:5:21","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"}],"src":"4426:12:21"},"scope":2388,"src":"4354:4281:21","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2389,"src":"306:8331:21"}],"src":"45:8593:21"},"id":21},"@uniswap/v3-periphery/contracts/interfaces/IERC721Permit.sol":{"ast":{"absolutePath":"@uniswap/v3-periphery/contracts/interfaces/IERC721Permit.sol","exportedSymbols":{"IERC165":[121],"IERC721":[883],"IERC721Permit":[2423]},"id":2424,"license":"GPL-2.0-or-later","nodeType":"SourceUnit","nodes":[{"id":2390,"literals":["solidity",">=","0.7",".5"],"nodeType":"PragmaDirective","src":"45:24:22"},{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721.sol","file":"@openzeppelin/contracts/token/ERC721/IERC721.sol","id":2391,"nodeType":"ImportDirective","scope":2424,"sourceUnit":884,"src":"71:58:22","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":2393,"name":"IERC721","nodeType":"UserDefinedTypeName","referencedDeclaration":883,"src":"282:7:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC721_$883","typeString":"contract IERC721"}},"id":2394,"nodeType":"InheritanceSpecifier","src":"282:7:22"}],"contractDependencies":[121,883],"contractKind":"interface","documentation":{"id":2392,"nodeType":"StructuredDocumentation","src":"131:124:22","text":"@title ERC721 with permit\n @notice Extension to ERC721 that includes a permit function for signature based approvals"},"fullyImplemented":false,"id":2423,"linearizedBaseContracts":[2423,883,121],"name":"IERC721Permit","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2395,"nodeType":"StructuredDocumentation","src":"296:104:22","text":"@notice The permit typehash used in the permit signature\n @return The typehash for the permit"},"functionSelector":"30adf81f","id":2400,"implemented":false,"kind":"function","modifiers":[],"name":"PERMIT_TYPEHASH","nodeType":"FunctionDefinition","parameters":{"id":2396,"nodeType":"ParameterList","parameters":[],"src":"429:2:22"},"returnParameters":{"id":2399,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2398,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":2400,"src":"455:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2397,"name":"bytes32","nodeType":"ElementaryTypeName","src":"455:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"454:9:22"},"scope":2423,"src":"405:59:22","stateMutability":"pure","virtual":false,"visibility":"external"},{"documentation":{"id":2401,"nodeType":"StructuredDocumentation","src":"470:135:22","text":"@notice The domain separator used in the permit signature\n @return The domain seperator used in encoding of permit signature"},"functionSelector":"3644e515","id":2406,"implemented":false,"kind":"function","modifiers":[],"name":"DOMAIN_SEPARATOR","nodeType":"FunctionDefinition","parameters":{"id":2402,"nodeType":"ParameterList","parameters":[],"src":"635:2:22"},"returnParameters":{"id":2405,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2404,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":2406,"src":"661:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2403,"name":"bytes32","nodeType":"ElementaryTypeName","src":"661:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"660:9:22"},"scope":2423,"src":"610:60:22","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2407,"nodeType":"StructuredDocumentation","src":"676:605:22","text":"@notice Approve of a specific token ID for spending by spender via signature\n @param spender The account that is being approved\n @param tokenId The ID of the token that is being approved for spending\n @param deadline The deadline timestamp by which the call must be mined for the approve to work\n @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\n @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\n @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`"},"functionSelector":"7ac2ff7b","id":2422,"implemented":false,"kind":"function","modifiers":[],"name":"permit","nodeType":"FunctionDefinition","parameters":{"id":2420,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2409,"mutability":"mutable","name":"spender","nodeType":"VariableDeclaration","scope":2422,"src":"1311:15:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2408,"name":"address","nodeType":"ElementaryTypeName","src":"1311:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2411,"mutability":"mutable","name":"tokenId","nodeType":"VariableDeclaration","scope":2422,"src":"1336:15:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2410,"name":"uint256","nodeType":"ElementaryTypeName","src":"1336:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2413,"mutability":"mutable","name":"deadline","nodeType":"VariableDeclaration","scope":2422,"src":"1361:16:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2412,"name":"uint256","nodeType":"ElementaryTypeName","src":"1361:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2415,"mutability":"mutable","name":"v","nodeType":"VariableDeclaration","scope":2422,"src":"1387:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2414,"name":"uint8","nodeType":"ElementaryTypeName","src":"1387:5:22","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":2417,"mutability":"mutable","name":"r","nodeType":"VariableDeclaration","scope":2422,"src":"1404:9:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2416,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1404:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2419,"mutability":"mutable","name":"s","nodeType":"VariableDeclaration","scope":2422,"src":"1423:9:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2418,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1423:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1301:137:22"},"returnParameters":{"id":2421,"nodeType":"ParameterList","parameters":[],"src":"1455:0:22"},"scope":2423,"src":"1286:170:22","stateMutability":"payable","virtual":false,"visibility":"external"}],"scope":2424,"src":"255:1203:22"}],"src":"45:1414:22"},"id":22},"@uniswap/v3-periphery/contracts/interfaces/INonfungiblePositionManager.sol":{"ast":{"absolutePath":"@uniswap/v3-periphery/contracts/interfaces/INonfungiblePositionManager.sol","exportedSymbols":{"IERC165":[121],"IERC721":[883],"IERC721Enumerable":[914],"IERC721Metadata":[941],"IERC721Permit":[2423],"INonfungiblePositionManager":[2618],"IPeripheryImmutableState":[2634],"IPeripheryPayments":[2660],"IPoolInitializer":[2679],"PoolAddress":[2884]},"id":2619,"license":"GPL-2.0-or-later","nodeType":"SourceUnit","nodes":[{"id":2425,"literals":["solidity",">=","0.7",".5"],"nodeType":"PragmaDirective","src":"45:24:23"},{"id":2426,"literals":["abicoder","v2"],"nodeType":"PragmaDirective","src":"70:19:23"},{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol","file":"@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol","id":2427,"nodeType":"ImportDirective","scope":2619,"sourceUnit":942,"src":"91:66:23","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol","file":"@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol","id":2428,"nodeType":"ImportDirective","scope":2619,"sourceUnit":915,"src":"158:68:23","symbolAliases":[],"unitAlias":""},{"absolutePath":"@uniswap/v3-periphery/contracts/interfaces/IPoolInitializer.sol","file":"./IPoolInitializer.sol","id":2429,"nodeType":"ImportDirective","scope":2619,"sourceUnit":2680,"src":"228:32:23","symbolAliases":[],"unitAlias":""},{"absolutePath":"@uniswap/v3-periphery/contracts/interfaces/IERC721Permit.sol","file":"./IERC721Permit.sol","id":2430,"nodeType":"ImportDirective","scope":2619,"sourceUnit":2424,"src":"261:29:23","symbolAliases":[],"unitAlias":""},{"absolutePath":"@uniswap/v3-periphery/contracts/interfaces/IPeripheryPayments.sol","file":"./IPeripheryPayments.sol","id":2431,"nodeType":"ImportDirective","scope":2619,"sourceUnit":2661,"src":"291:34:23","symbolAliases":[],"unitAlias":""},{"absolutePath":"@uniswap/v3-periphery/contracts/interfaces/IPeripheryImmutableState.sol","file":"./IPeripheryImmutableState.sol","id":2432,"nodeType":"ImportDirective","scope":2619,"sourceUnit":2635,"src":"326:40:23","symbolAliases":[],"unitAlias":""},{"absolutePath":"@uniswap/v3-periphery/contracts/libraries/PoolAddress.sol","file":"../libraries/PoolAddress.sol","id":2433,"nodeType":"ImportDirective","scope":2619,"sourceUnit":2885,"src":"367:38:23","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":2435,"name":"IPoolInitializer","nodeType":"UserDefinedTypeName","referencedDeclaration":2679,"src":"629:16:23","typeDescriptions":{"typeIdentifier":"t_contract$_IPoolInitializer_$2679","typeString":"contract IPoolInitializer"}},"id":2436,"nodeType":"InheritanceSpecifier","src":"629:16:23"},{"baseName":{"id":2437,"name":"IPeripheryPayments","nodeType":"UserDefinedTypeName","referencedDeclaration":2660,"src":"651:18:23","typeDescriptions":{"typeIdentifier":"t_contract$_IPeripheryPayments_$2660","typeString":"contract IPeripheryPayments"}},"id":2438,"nodeType":"InheritanceSpecifier","src":"651:18:23"},{"baseName":{"id":2439,"name":"IPeripheryImmutableState","nodeType":"UserDefinedTypeName","referencedDeclaration":2634,"src":"675:24:23","typeDescriptions":{"typeIdentifier":"t_contract$_IPeripheryImmutableState_$2634","typeString":"contract IPeripheryImmutableState"}},"id":2440,"nodeType":"InheritanceSpecifier","src":"675:24:23"},{"baseName":{"id":2441,"name":"IERC721Metadata","nodeType":"UserDefinedTypeName","referencedDeclaration":941,"src":"705:15:23","typeDescriptions":{"typeIdentifier":"t_contract$_IERC721Metadata_$941","typeString":"contract IERC721Metadata"}},"id":2442,"nodeType":"InheritanceSpecifier","src":"705:15:23"},{"baseName":{"id":2443,"name":"IERC721Enumerable","nodeType":"UserDefinedTypeName","referencedDeclaration":914,"src":"726:17:23","typeDescriptions":{"typeIdentifier":"t_contract$_IERC721Enumerable_$914","typeString":"contract IERC721Enumerable"}},"id":2444,"nodeType":"InheritanceSpecifier","src":"726:17:23"},{"baseName":{"id":2445,"name":"IERC721Permit","nodeType":"UserDefinedTypeName","referencedDeclaration":2423,"src":"749:13:23","typeDescriptions":{"typeIdentifier":"t_contract$_IERC721Permit_$2423","typeString":"contract IERC721Permit"}},"id":2446,"nodeType":"InheritanceSpecifier","src":"749:13:23"}],"contractDependencies":[121,883,914,941,2423,2634,2660,2679],"contractKind":"interface","documentation":{"id":2434,"nodeType":"StructuredDocumentation","src":"407:177:23","text":"@title Non-fungible token for positions\n @notice Wraps Uniswap V3 positions in a non-fungible token interface which allows for them to be transferred\n and authorized."},"fullyImplemented":false,"id":2618,"linearizedBaseContracts":[2618,2423,914,941,883,121,2634,2660,2679],"name":"INonfungiblePositionManager","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":2447,"nodeType":"StructuredDocumentation","src":"769:458:23","text":"@notice Emitted when liquidity is increased for a position NFT\n @dev Also emitted when a token is minted\n @param tokenId The ID of the token for which liquidity was increased\n @param liquidity The amount by which liquidity for the NFT position was increased\n @param amount0 The amount of token0 that was paid for the increase in liquidity\n @param amount1 The amount of token1 that was paid for the increase in liquidity"},"id":2457,"name":"IncreaseLiquidity","nodeType":"EventDefinition","parameters":{"id":2456,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2449,"indexed":true,"mutability":"mutable","name":"tokenId","nodeType":"VariableDeclaration","scope":2457,"src":"1256:23:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2448,"name":"uint256","nodeType":"ElementaryTypeName","src":"1256:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2451,"indexed":false,"mutability":"mutable","name":"liquidity","nodeType":"VariableDeclaration","scope":2457,"src":"1281:17:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":2450,"name":"uint128","nodeType":"ElementaryTypeName","src":"1281:7:23","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"},{"constant":false,"id":2453,"indexed":false,"mutability":"mutable","name":"amount0","nodeType":"VariableDeclaration","scope":2457,"src":"1300:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2452,"name":"uint256","nodeType":"ElementaryTypeName","src":"1300:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2455,"indexed":false,"mutability":"mutable","name":"amount1","nodeType":"VariableDeclaration","scope":2457,"src":"1317:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2454,"name":"uint256","nodeType":"ElementaryTypeName","src":"1317:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1255:78:23"},"src":"1232:102:23"},{"anonymous":false,"documentation":{"id":2458,"nodeType":"StructuredDocumentation","src":"1339:419:23","text":"@notice Emitted when liquidity is decreased for a position NFT\n @param tokenId The ID of the token for which liquidity was decreased\n @param liquidity The amount by which liquidity for the NFT position was decreased\n @param amount0 The amount of token0 that was accounted for the decrease in liquidity\n @param amount1 The amount of token1 that was accounted for the decrease in liquidity"},"id":2468,"name":"DecreaseLiquidity","nodeType":"EventDefinition","parameters":{"id":2467,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2460,"indexed":true,"mutability":"mutable","name":"tokenId","nodeType":"VariableDeclaration","scope":2468,"src":"1787:23:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2459,"name":"uint256","nodeType":"ElementaryTypeName","src":"1787:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2462,"indexed":false,"mutability":"mutable","name":"liquidity","nodeType":"VariableDeclaration","scope":2468,"src":"1812:17:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":2461,"name":"uint128","nodeType":"ElementaryTypeName","src":"1812:7:23","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"},{"constant":false,"id":2464,"indexed":false,"mutability":"mutable","name":"amount0","nodeType":"VariableDeclaration","scope":2468,"src":"1831:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2463,"name":"uint256","nodeType":"ElementaryTypeName","src":"1831:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2466,"indexed":false,"mutability":"mutable","name":"amount1","nodeType":"VariableDeclaration","scope":2468,"src":"1848:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2465,"name":"uint256","nodeType":"ElementaryTypeName","src":"1848:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1786:78:23"},"src":"1763:102:23"},{"anonymous":false,"documentation":{"id":2469,"nodeType":"StructuredDocumentation","src":"1870:522:23","text":"@notice Emitted when tokens are collected for a position NFT\n @dev The amounts reported may not be exactly equivalent to the amounts transferred, due to rounding behavior\n @param tokenId The ID of the token for which underlying tokens were collected\n @param recipient The address of the account that received the collected tokens\n @param amount0 The amount of token0 owed to the position that was collected\n @param amount1 The amount of token1 owed to the position that was collected"},"id":2479,"name":"Collect","nodeType":"EventDefinition","parameters":{"id":2478,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2471,"indexed":true,"mutability":"mutable","name":"tokenId","nodeType":"VariableDeclaration","scope":2479,"src":"2411:23:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2470,"name":"uint256","nodeType":"ElementaryTypeName","src":"2411:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2473,"indexed":false,"mutability":"mutable","name":"recipient","nodeType":"VariableDeclaration","scope":2479,"src":"2436:17:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2472,"name":"address","nodeType":"ElementaryTypeName","src":"2436:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2475,"indexed":false,"mutability":"mutable","name":"amount0","nodeType":"VariableDeclaration","scope":2479,"src":"2455:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2474,"name":"uint256","nodeType":"ElementaryTypeName","src":"2455:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2477,"indexed":false,"mutability":"mutable","name":"amount1","nodeType":"VariableDeclaration","scope":2479,"src":"2472:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2476,"name":"uint256","nodeType":"ElementaryTypeName","src":"2472:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2410:78:23"},"src":"2397:92:23"},{"documentation":{"id":2480,"nodeType":"StructuredDocumentation","src":"2495:1157:23","text":"@notice Returns the position information associated with a given token ID.\n @dev Throws if the token ID is not valid.\n @param tokenId The ID of the token that represents the position\n @return nonce The nonce for permits\n @return operator The address that is approved for spending\n @return token0 The address of the token0 for a specific pool\n @return token1 The address of the token1 for a specific pool\n @return fee The fee associated with the pool\n @return tickLower The lower end of the tick range for the position\n @return tickUpper The higher end of the tick range for the position\n @return liquidity The liquidity of the position\n @return feeGrowthInside0LastX128 The fee growth of token0 as of the last action on the individual position\n @return feeGrowthInside1LastX128 The fee growth of token1 as of the last action on the individual position\n @return tokensOwed0 The uncollected amount of token0 owed to the position as of the last computation\n @return tokensOwed1 The uncollected amount of token1 owed to the position as of the last computation"},"functionSelector":"99fbab88","id":2509,"implemented":false,"kind":"function","modifiers":[],"name":"positions","nodeType":"FunctionDefinition","parameters":{"id":2483,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2482,"mutability":"mutable","name":"tokenId","nodeType":"VariableDeclaration","scope":2509,"src":"3676:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2481,"name":"uint256","nodeType":"ElementaryTypeName","src":"3676:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3675:17:23"},"returnParameters":{"id":2508,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2485,"mutability":"mutable","name":"nonce","nodeType":"VariableDeclaration","scope":2509,"src":"3753:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":2484,"name":"uint96","nodeType":"ElementaryTypeName","src":"3753:6:23","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"},{"constant":false,"id":2487,"mutability":"mutable","name":"operator","nodeType":"VariableDeclaration","scope":2509,"src":"3779:16:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2486,"name":"address","nodeType":"ElementaryTypeName","src":"3779:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2489,"mutability":"mutable","name":"token0","nodeType":"VariableDeclaration","scope":2509,"src":"3809:14:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2488,"name":"address","nodeType":"ElementaryTypeName","src":"3809:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2491,"mutability":"mutable","name":"token1","nodeType":"VariableDeclaration","scope":2509,"src":"3837:14:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2490,"name":"address","nodeType":"ElementaryTypeName","src":"3837:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2493,"mutability":"mutable","name":"fee","nodeType":"VariableDeclaration","scope":2509,"src":"3865:10:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"},"typeName":{"id":2492,"name":"uint24","nodeType":"ElementaryTypeName","src":"3865:6:23","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"visibility":"internal"},{"constant":false,"id":2495,"mutability":"mutable","name":"tickLower","nodeType":"VariableDeclaration","scope":2509,"src":"3889:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":2494,"name":"int24","nodeType":"ElementaryTypeName","src":"3889:5:23","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":2497,"mutability":"mutable","name":"tickUpper","nodeType":"VariableDeclaration","scope":2509,"src":"3918:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":2496,"name":"int24","nodeType":"ElementaryTypeName","src":"3918:5:23","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":2499,"mutability":"mutable","name":"liquidity","nodeType":"VariableDeclaration","scope":2509,"src":"3947:17:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":2498,"name":"uint128","nodeType":"ElementaryTypeName","src":"3947:7:23","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"},{"constant":false,"id":2501,"mutability":"mutable","name":"feeGrowthInside0LastX128","nodeType":"VariableDeclaration","scope":2509,"src":"3978:32:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2500,"name":"uint256","nodeType":"ElementaryTypeName","src":"3978:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2503,"mutability":"mutable","name":"feeGrowthInside1LastX128","nodeType":"VariableDeclaration","scope":2509,"src":"4024:32:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2502,"name":"uint256","nodeType":"ElementaryTypeName","src":"4024:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2505,"mutability":"mutable","name":"tokensOwed0","nodeType":"VariableDeclaration","scope":2509,"src":"4070:19:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":2504,"name":"uint128","nodeType":"ElementaryTypeName","src":"4070:7:23","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"},{"constant":false,"id":2507,"mutability":"mutable","name":"tokensOwed1","nodeType":"VariableDeclaration","scope":2509,"src":"4103:19:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":2506,"name":"uint128","nodeType":"ElementaryTypeName","src":"4103:7:23","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"}],"src":"3739:393:23"},"scope":2618,"src":"3657:476:23","stateMutability":"view","virtual":false,"visibility":"external"},{"canonicalName":"INonfungiblePositionManager.MintParams","id":2532,"members":[{"constant":false,"id":2511,"mutability":"mutable","name":"token0","nodeType":"VariableDeclaration","scope":2532,"src":"4167:14:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2510,"name":"address","nodeType":"ElementaryTypeName","src":"4167:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2513,"mutability":"mutable","name":"token1","nodeType":"VariableDeclaration","scope":2532,"src":"4191:14:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2512,"name":"address","nodeType":"ElementaryTypeName","src":"4191:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2515,"mutability":"mutable","name":"fee","nodeType":"VariableDeclaration","scope":2532,"src":"4215:10:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"},"typeName":{"id":2514,"name":"uint24","nodeType":"ElementaryTypeName","src":"4215:6:23","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"visibility":"internal"},{"constant":false,"id":2517,"mutability":"mutable","name":"tickLower","nodeType":"VariableDeclaration","scope":2532,"src":"4235:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":2516,"name":"int24","nodeType":"ElementaryTypeName","src":"4235:5:23","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":2519,"mutability":"mutable","name":"tickUpper","nodeType":"VariableDeclaration","scope":2532,"src":"4260:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":2518,"name":"int24","nodeType":"ElementaryTypeName","src":"4260:5:23","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":2521,"mutability":"mutable","name":"amount0Desired","nodeType":"VariableDeclaration","scope":2532,"src":"4285:22:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2520,"name":"uint256","nodeType":"ElementaryTypeName","src":"4285:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2523,"mutability":"mutable","name":"amount1Desired","nodeType":"VariableDeclaration","scope":2532,"src":"4317:22:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2522,"name":"uint256","nodeType":"ElementaryTypeName","src":"4317:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2525,"mutability":"mutable","name":"amount0Min","nodeType":"VariableDeclaration","scope":2532,"src":"4349:18:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2524,"name":"uint256","nodeType":"ElementaryTypeName","src":"4349:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2527,"mutability":"mutable","name":"amount1Min","nodeType":"VariableDeclaration","scope":2532,"src":"4377:18:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2526,"name":"uint256","nodeType":"ElementaryTypeName","src":"4377:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2529,"mutability":"mutable","name":"recipient","nodeType":"VariableDeclaration","scope":2532,"src":"4405:17:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2528,"name":"address","nodeType":"ElementaryTypeName","src":"4405:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2531,"mutability":"mutable","name":"deadline","nodeType":"VariableDeclaration","scope":2532,"src":"4432:16:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2530,"name":"uint256","nodeType":"ElementaryTypeName","src":"4432:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"MintParams","nodeType":"StructDefinition","scope":2618,"src":"4139:316:23","visibility":"public"},{"documentation":{"id":2533,"nodeType":"StructuredDocumentation","src":"4461:586:23","text":"@notice Creates a new position wrapped in a NFT\n @dev Call this when the pool does exist and is initialized. Note that if the pool is created but not initialized\n a method does not exist, i.e. the pool is assumed to be initialized.\n @param params The params necessary to mint a position, encoded as `MintParams` in calldata\n @return tokenId The ID of the token that represents the minted position\n @return liquidity The amount of liquidity for this position\n @return amount0 The amount of token0\n @return amount1 The amount of token1"},"functionSelector":"88316456","id":2546,"implemented":false,"kind":"function","modifiers":[],"name":"mint","nodeType":"FunctionDefinition","parameters":{"id":2536,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2535,"mutability":"mutable","name":"params","nodeType":"VariableDeclaration","scope":2546,"src":"5066:26:23","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_MintParams_$2532_calldata_ptr","typeString":"struct INonfungiblePositionManager.MintParams"},"typeName":{"id":2534,"name":"MintParams","nodeType":"UserDefinedTypeName","referencedDeclaration":2532,"src":"5066:10:23","typeDescriptions":{"typeIdentifier":"t_struct$_MintParams_$2532_storage_ptr","typeString":"struct INonfungiblePositionManager.MintParams"}},"visibility":"internal"}],"src":"5065:28:23"},"returnParameters":{"id":2545,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2538,"mutability":"mutable","name":"tokenId","nodeType":"VariableDeclaration","scope":2546,"src":"5157:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2537,"name":"uint256","nodeType":"ElementaryTypeName","src":"5157:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2540,"mutability":"mutable","name":"liquidity","nodeType":"VariableDeclaration","scope":2546,"src":"5186:17:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":2539,"name":"uint128","nodeType":"ElementaryTypeName","src":"5186:7:23","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"},{"constant":false,"id":2542,"mutability":"mutable","name":"amount0","nodeType":"VariableDeclaration","scope":2546,"src":"5217:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2541,"name":"uint256","nodeType":"ElementaryTypeName","src":"5217:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2544,"mutability":"mutable","name":"amount1","nodeType":"VariableDeclaration","scope":2546,"src":"5246:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2543,"name":"uint256","nodeType":"ElementaryTypeName","src":"5246:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5143:128:23"},"scope":2618,"src":"5052:220:23","stateMutability":"payable","virtual":false,"visibility":"external"},{"canonicalName":"INonfungiblePositionManager.IncreaseLiquidityParams","id":2559,"members":[{"constant":false,"id":2548,"mutability":"mutable","name":"tokenId","nodeType":"VariableDeclaration","scope":2559,"src":"5319:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2547,"name":"uint256","nodeType":"ElementaryTypeName","src":"5319:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2550,"mutability":"mutable","name":"amount0Desired","nodeType":"VariableDeclaration","scope":2559,"src":"5344:22:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2549,"name":"uint256","nodeType":"ElementaryTypeName","src":"5344:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2552,"mutability":"mutable","name":"amount1Desired","nodeType":"VariableDeclaration","scope":2559,"src":"5376:22:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2551,"name":"uint256","nodeType":"ElementaryTypeName","src":"5376:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2554,"mutability":"mutable","name":"amount0Min","nodeType":"VariableDeclaration","scope":2559,"src":"5408:18:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2553,"name":"uint256","nodeType":"ElementaryTypeName","src":"5408:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2556,"mutability":"mutable","name":"amount1Min","nodeType":"VariableDeclaration","scope":2559,"src":"5436:18:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2555,"name":"uint256","nodeType":"ElementaryTypeName","src":"5436:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2558,"mutability":"mutable","name":"deadline","nodeType":"VariableDeclaration","scope":2559,"src":"5464:16:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2557,"name":"uint256","nodeType":"ElementaryTypeName","src":"5464:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"IncreaseLiquidityParams","nodeType":"StructDefinition","scope":2618,"src":"5278:209:23","visibility":"public"},{"documentation":{"id":2560,"nodeType":"StructuredDocumentation","src":"5493:821:23","text":"@notice Increases the amount of liquidity in a position, with tokens paid by the `msg.sender`\n @param params tokenId The ID of the token for which liquidity is being increased,\n amount0Desired The desired amount of token0 to be spent,\n amount1Desired The desired amount of token1 to be spent,\n amount0Min The minimum amount of token0 to spend, which serves as a slippage check,\n amount1Min The minimum amount of token1 to spend, which serves as a slippage check,\n deadline The time by which the transaction must be included to effect the change\n @return liquidity The new liquidity amount as a result of the increase\n @return amount0 The amount of token0 to acheive resulting liquidity\n @return amount1 The amount of token1 to acheive resulting liquidity"},"functionSelector":"219f5d17","id":2571,"implemented":false,"kind":"function","modifiers":[],"name":"increaseLiquidity","nodeType":"FunctionDefinition","parameters":{"id":2563,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2562,"mutability":"mutable","name":"params","nodeType":"VariableDeclaration","scope":2571,"src":"6346:39:23","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_IncreaseLiquidityParams_$2559_calldata_ptr","typeString":"struct INonfungiblePositionManager.IncreaseLiquidityParams"},"typeName":{"id":2561,"name":"IncreaseLiquidityParams","nodeType":"UserDefinedTypeName","referencedDeclaration":2559,"src":"6346:23:23","typeDescriptions":{"typeIdentifier":"t_struct$_IncreaseLiquidityParams_$2559_storage_ptr","typeString":"struct INonfungiblePositionManager.IncreaseLiquidityParams"}},"visibility":"internal"}],"src":"6345:41:23"},"returnParameters":{"id":2570,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2565,"mutability":"mutable","name":"liquidity","nodeType":"VariableDeclaration","scope":2571,"src":"6450:17:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":2564,"name":"uint128","nodeType":"ElementaryTypeName","src":"6450:7:23","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"},{"constant":false,"id":2567,"mutability":"mutable","name":"amount0","nodeType":"VariableDeclaration","scope":2571,"src":"6481:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2566,"name":"uint256","nodeType":"ElementaryTypeName","src":"6481:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2569,"mutability":"mutable","name":"amount1","nodeType":"VariableDeclaration","scope":2571,"src":"6510:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2568,"name":"uint256","nodeType":"ElementaryTypeName","src":"6510:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6436:99:23"},"scope":2618,"src":"6319:217:23","stateMutability":"payable","virtual":false,"visibility":"external"},{"canonicalName":"INonfungiblePositionManager.DecreaseLiquidityParams","id":2582,"members":[{"constant":false,"id":2573,"mutability":"mutable","name":"tokenId","nodeType":"VariableDeclaration","scope":2582,"src":"6583:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2572,"name":"uint256","nodeType":"ElementaryTypeName","src":"6583:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2575,"mutability":"mutable","name":"liquidity","nodeType":"VariableDeclaration","scope":2582,"src":"6608:17:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":2574,"name":"uint128","nodeType":"ElementaryTypeName","src":"6608:7:23","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"},{"constant":false,"id":2577,"mutability":"mutable","name":"amount0Min","nodeType":"VariableDeclaration","scope":2582,"src":"6635:18:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2576,"name":"uint256","nodeType":"ElementaryTypeName","src":"6635:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2579,"mutability":"mutable","name":"amount1Min","nodeType":"VariableDeclaration","scope":2582,"src":"6663:18:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2578,"name":"uint256","nodeType":"ElementaryTypeName","src":"6663:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2581,"mutability":"mutable","name":"deadline","nodeType":"VariableDeclaration","scope":2582,"src":"6691:16:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2580,"name":"uint256","nodeType":"ElementaryTypeName","src":"6691:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"DecreaseLiquidityParams","nodeType":"StructDefinition","scope":2618,"src":"6542:172:23","visibility":"public"},{"documentation":{"id":2583,"nodeType":"StructuredDocumentation","src":"6720:702:23","text":"@notice Decreases the amount of liquidity in a position and accounts it to the position\n @param params tokenId The ID of the token for which liquidity is being decreased,\n amount The amount by which liquidity will be decreased,\n amount0Min The minimum amount of token0 that should be accounted for the burned liquidity,\n amount1Min The minimum amount of token1 that should be accounted for the burned liquidity,\n deadline The time by which the transaction must be included to effect the change\n @return amount0 The amount of token0 accounted to the position's tokens owed\n @return amount1 The amount of token1 accounted to the position's tokens owed"},"functionSelector":"0c49ccbe","id":2592,"implemented":false,"kind":"function","modifiers":[],"name":"decreaseLiquidity","nodeType":"FunctionDefinition","parameters":{"id":2586,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2585,"mutability":"mutable","name":"params","nodeType":"VariableDeclaration","scope":2592,"src":"7454:39:23","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_DecreaseLiquidityParams_$2582_calldata_ptr","typeString":"struct INonfungiblePositionManager.DecreaseLiquidityParams"},"typeName":{"id":2584,"name":"DecreaseLiquidityParams","nodeType":"UserDefinedTypeName","referencedDeclaration":2582,"src":"7454:23:23","typeDescriptions":{"typeIdentifier":"t_struct$_DecreaseLiquidityParams_$2582_storage_ptr","typeString":"struct INonfungiblePositionManager.DecreaseLiquidityParams"}},"visibility":"internal"}],"src":"7453:41:23"},"returnParameters":{"id":2591,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2588,"mutability":"mutable","name":"amount0","nodeType":"VariableDeclaration","scope":2592,"src":"7545:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2587,"name":"uint256","nodeType":"ElementaryTypeName","src":"7545:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2590,"mutability":"mutable","name":"amount1","nodeType":"VariableDeclaration","scope":2592,"src":"7562:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2589,"name":"uint256","nodeType":"ElementaryTypeName","src":"7562:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7544:34:23"},"scope":2618,"src":"7427:152:23","stateMutability":"payable","virtual":false,"visibility":"external"},{"canonicalName":"INonfungiblePositionManager.CollectParams","id":2601,"members":[{"constant":false,"id":2594,"mutability":"mutable","name":"tokenId","nodeType":"VariableDeclaration","scope":2601,"src":"7616:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2593,"name":"uint256","nodeType":"ElementaryTypeName","src":"7616:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2596,"mutability":"mutable","name":"recipient","nodeType":"VariableDeclaration","scope":2601,"src":"7641:17:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2595,"name":"address","nodeType":"ElementaryTypeName","src":"7641:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2598,"mutability":"mutable","name":"amount0Max","nodeType":"VariableDeclaration","scope":2601,"src":"7668:18:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":2597,"name":"uint128","nodeType":"ElementaryTypeName","src":"7668:7:23","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"},{"constant":false,"id":2600,"mutability":"mutable","name":"amount1Max","nodeType":"VariableDeclaration","scope":2601,"src":"7696:18:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":2599,"name":"uint128","nodeType":"ElementaryTypeName","src":"7696:7:23","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"}],"name":"CollectParams","nodeType":"StructDefinition","scope":2618,"src":"7585:136:23","visibility":"public"},{"documentation":{"id":2602,"nodeType":"StructuredDocumentation","src":"7727:489:23","text":"@notice Collects up to a maximum amount of fees owed to a specific position to the recipient\n @param params tokenId The ID of the NFT for which tokens are being collected,\n recipient The account that should receive the tokens,\n amount0Max The maximum amount of token0 to collect,\n amount1Max The maximum amount of token1 to collect\n @return amount0 The amount of fees collected in token0\n @return amount1 The amount of fees collected in token1"},"functionSelector":"fc6f7865","id":2611,"implemented":false,"kind":"function","modifiers":[],"name":"collect","nodeType":"FunctionDefinition","parameters":{"id":2605,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2604,"mutability":"mutable","name":"params","nodeType":"VariableDeclaration","scope":2611,"src":"8238:29:23","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_CollectParams_$2601_calldata_ptr","typeString":"struct INonfungiblePositionManager.CollectParams"},"typeName":{"id":2603,"name":"CollectParams","nodeType":"UserDefinedTypeName","referencedDeclaration":2601,"src":"8238:13:23","typeDescriptions":{"typeIdentifier":"t_struct$_CollectParams_$2601_storage_ptr","typeString":"struct INonfungiblePositionManager.CollectParams"}},"visibility":"internal"}],"src":"8237:31:23"},"returnParameters":{"id":2610,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2607,"mutability":"mutable","name":"amount0","nodeType":"VariableDeclaration","scope":2611,"src":"8295:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2606,"name":"uint256","nodeType":"ElementaryTypeName","src":"8295:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2609,"mutability":"mutable","name":"amount1","nodeType":"VariableDeclaration","scope":2611,"src":"8312:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2608,"name":"uint256","nodeType":"ElementaryTypeName","src":"8312:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8294:34:23"},"scope":2618,"src":"8221:108:23","stateMutability":"payable","virtual":false,"visibility":"external"},{"documentation":{"id":2612,"nodeType":"StructuredDocumentation","src":"8335:213:23","text":"@notice Burns a token ID, which deletes it from the NFT contract. The token must have 0 liquidity and all tokens\n must be collected first.\n @param tokenId The ID of the token that is being burned"},"functionSelector":"42966c68","id":2617,"implemented":false,"kind":"function","modifiers":[],"name":"burn","nodeType":"FunctionDefinition","parameters":{"id":2615,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2614,"mutability":"mutable","name":"tokenId","nodeType":"VariableDeclaration","scope":2617,"src":"8567:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2613,"name":"uint256","nodeType":"ElementaryTypeName","src":"8567:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8566:17:23"},"returnParameters":{"id":2616,"nodeType":"ParameterList","parameters":[],"src":"8600:0:23"},"scope":2618,"src":"8553:48:23","stateMutability":"payable","virtual":false,"visibility":"external"}],"scope":2619,"src":"584:8019:23"}],"src":"45:8559:23"},"id":23},"@uniswap/v3-periphery/contracts/interfaces/IPeripheryImmutableState.sol":{"ast":{"absolutePath":"@uniswap/v3-periphery/contracts/interfaces/IPeripheryImmutableState.sol","exportedSymbols":{"IPeripheryImmutableState":[2634]},"id":2635,"license":"GPL-2.0-or-later","nodeType":"SourceUnit","nodes":[{"id":2620,"literals":["solidity",">=","0.5",".0"],"nodeType":"PragmaDirective","src":"45:24:24"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","documentation":{"id":2621,"nodeType":"StructuredDocumentation","src":"71:91:24","text":"@title Immutable state\n @notice Functions that return immutable state of the router"},"fullyImplemented":false,"id":2634,"linearizedBaseContracts":[2634],"name":"IPeripheryImmutableState","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2622,"nodeType":"StructuredDocumentation","src":"203:57:24","text":"@return Returns the address of the Uniswap V3 factory"},"functionSelector":"c45a0155","id":2627,"implemented":false,"kind":"function","modifiers":[],"name":"factory","nodeType":"FunctionDefinition","parameters":{"id":2623,"nodeType":"ParameterList","parameters":[],"src":"281:2:24"},"returnParameters":{"id":2626,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2625,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":2627,"src":"307:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2624,"name":"address","nodeType":"ElementaryTypeName","src":"307:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"306:9:24"},"scope":2634,"src":"265:51:24","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2628,"nodeType":"StructuredDocumentation","src":"322:40:24","text":"@return Returns the address of WETH9"},"functionSelector":"4aa4a4fc","id":2633,"implemented":false,"kind":"function","modifiers":[],"name":"WETH9","nodeType":"FunctionDefinition","parameters":{"id":2629,"nodeType":"ParameterList","parameters":[],"src":"381:2:24"},"returnParameters":{"id":2632,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2631,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":2633,"src":"407:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2630,"name":"address","nodeType":"ElementaryTypeName","src":"407:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"406:9:24"},"scope":2634,"src":"367:49:24","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":2635,"src":"162:256:24"}],"src":"45:374:24"},"id":24},"@uniswap/v3-periphery/contracts/interfaces/IPeripheryPayments.sol":{"ast":{"absolutePath":"@uniswap/v3-periphery/contracts/interfaces/IPeripheryPayments.sol","exportedSymbols":{"IPeripheryPayments":[2660]},"id":2661,"license":"GPL-2.0-or-later","nodeType":"SourceUnit","nodes":[{"id":2636,"literals":["solidity",">=","0.7",".5"],"nodeType":"PragmaDirective","src":"45:24:25"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","documentation":{"id":2637,"nodeType":"StructuredDocumentation","src":"71:92:25","text":"@title Periphery Payments\n @notice Functions to ease deposits and withdrawals of ETH"},"fullyImplemented":false,"id":2660,"linearizedBaseContracts":[2660],"name":"IPeripheryPayments","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2638,"nodeType":"StructuredDocumentation","src":"198:302:25","text":"@notice Unwraps the contract's WETH9 balance and sends it to recipient as ETH.\n @dev The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.\n @param amountMinimum The minimum amount of WETH9 to unwrap\n @param recipient The address receiving ETH"},"functionSelector":"49404b7c","id":2645,"implemented":false,"kind":"function","modifiers":[],"name":"unwrapWETH9","nodeType":"FunctionDefinition","parameters":{"id":2643,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2640,"mutability":"mutable","name":"amountMinimum","nodeType":"VariableDeclaration","scope":2645,"src":"526:21:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2639,"name":"uint256","nodeType":"ElementaryTypeName","src":"526:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2642,"mutability":"mutable","name":"recipient","nodeType":"VariableDeclaration","scope":2645,"src":"549:17:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2641,"name":"address","nodeType":"ElementaryTypeName","src":"549:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"525:42:25"},"returnParameters":{"id":2644,"nodeType":"ParameterList","parameters":[],"src":"584:0:25"},"scope":2660,"src":"505:80:25","stateMutability":"payable","virtual":false,"visibility":"external"},{"documentation":{"id":2646,"nodeType":"StructuredDocumentation","src":"591:225:25","text":"@notice Refunds any ETH balance held by this contract to the `msg.sender`\n @dev Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps\n that use ether for the input amount"},"functionSelector":"12210e8a","id":2649,"implemented":false,"kind":"function","modifiers":[],"name":"refundETH","nodeType":"FunctionDefinition","parameters":{"id":2647,"nodeType":"ParameterList","parameters":[],"src":"839:2:25"},"returnParameters":{"id":2648,"nodeType":"ParameterList","parameters":[],"src":"858:0:25"},"scope":2660,"src":"821:38:25","stateMutability":"payable","virtual":false,"visibility":"external"},{"documentation":{"id":2650,"nodeType":"StructuredDocumentation","src":"865:427:25","text":"@notice Transfers the full amount of a token held by this contract to recipient\n @dev The amountMinimum parameter prevents malicious contracts from stealing the token from users\n @param token The contract address of the token which will be transferred to `recipient`\n @param amountMinimum The minimum amount of token required for a transfer\n @param recipient The destination address of the token"},"functionSelector":"df2ab5bb","id":2659,"implemented":false,"kind":"function","modifiers":[],"name":"sweepToken","nodeType":"FunctionDefinition","parameters":{"id":2657,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2652,"mutability":"mutable","name":"token","nodeType":"VariableDeclaration","scope":2659,"src":"1326:13:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2651,"name":"address","nodeType":"ElementaryTypeName","src":"1326:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2654,"mutability":"mutable","name":"amountMinimum","nodeType":"VariableDeclaration","scope":2659,"src":"1349:21:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2653,"name":"uint256","nodeType":"ElementaryTypeName","src":"1349:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2656,"mutability":"mutable","name":"recipient","nodeType":"VariableDeclaration","scope":2659,"src":"1380:17:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2655,"name":"address","nodeType":"ElementaryTypeName","src":"1380:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1316:87:25"},"returnParameters":{"id":2658,"nodeType":"ParameterList","parameters":[],"src":"1420:0:25"},"scope":2660,"src":"1297:124:25","stateMutability":"payable","virtual":false,"visibility":"external"}],"scope":2661,"src":"163:1260:25"}],"src":"45:1379:25"},"id":25},"@uniswap/v3-periphery/contracts/interfaces/IPoolInitializer.sol":{"ast":{"absolutePath":"@uniswap/v3-periphery/contracts/interfaces/IPoolInitializer.sol","exportedSymbols":{"IPoolInitializer":[2679]},"id":2680,"license":"GPL-2.0-or-later","nodeType":"SourceUnit","nodes":[{"id":2662,"literals":["solidity",">=","0.7",".5"],"nodeType":"PragmaDirective","src":"45:24:26"},{"id":2663,"literals":["abicoder","v2"],"nodeType":"PragmaDirective","src":"70:19:26"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","documentation":{"id":2664,"nodeType":"StructuredDocumentation","src":"91:194:26","text":"@title Creates and initializes V3 Pools\n @notice Provides a method for creating and initializing a pool, if necessary, for bundling with other methods that\n require the pool to exist."},"fullyImplemented":false,"id":2679,"linearizedBaseContracts":[2679],"name":"IPoolInitializer","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2665,"nodeType":"StructuredDocumentation","src":"318:648:26","text":"@notice Creates a new pool if it does not exist, then initializes if not initialized\n @dev This method can be bundled with others via IMulticall for the first action (e.g. mint) performed against a pool\n @param token0 The contract address of token0 of the pool\n @param token1 The contract address of token1 of the pool\n @param fee The fee amount of the v3 pool for the specified token pair\n @param sqrtPriceX96 The initial square root price of the pool as a Q64.96 value\n @return pool Returns the pool address based on the pair of tokens and fee, will return the newly created pool address if necessary"},"functionSelector":"13ead562","id":2678,"implemented":false,"kind":"function","modifiers":[],"name":"createAndInitializePoolIfNecessary","nodeType":"FunctionDefinition","parameters":{"id":2674,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2667,"mutability":"mutable","name":"token0","nodeType":"VariableDeclaration","scope":2678,"src":"1024:14:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2666,"name":"address","nodeType":"ElementaryTypeName","src":"1024:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2669,"mutability":"mutable","name":"token1","nodeType":"VariableDeclaration","scope":2678,"src":"1048:14:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2668,"name":"address","nodeType":"ElementaryTypeName","src":"1048:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2671,"mutability":"mutable","name":"fee","nodeType":"VariableDeclaration","scope":2678,"src":"1072:10:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"},"typeName":{"id":2670,"name":"uint24","nodeType":"ElementaryTypeName","src":"1072:6:26","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"visibility":"internal"},{"constant":false,"id":2673,"mutability":"mutable","name":"sqrtPriceX96","nodeType":"VariableDeclaration","scope":2678,"src":"1092:20:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":2672,"name":"uint160","nodeType":"ElementaryTypeName","src":"1092:7:26","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"}],"src":"1014:104:26"},"returnParameters":{"id":2677,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2676,"mutability":"mutable","name":"pool","nodeType":"VariableDeclaration","scope":2678,"src":"1145:12:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2675,"name":"address","nodeType":"ElementaryTypeName","src":"1145:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1144:14:26"},"scope":2679,"src":"971:188:26","stateMutability":"payable","virtual":false,"visibility":"external"}],"scope":2680,"src":"285:876:26"}],"src":"45:1117:26"},"id":26},"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol":{"ast":{"absolutePath":"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol","exportedSymbols":{"ISwapRouter":[2775],"IUniswapV3SwapCallback":[1433]},"id":2776,"license":"GPL-2.0-or-later","nodeType":"SourceUnit","nodes":[{"id":2681,"literals":["solidity",">=","0.7",".5"],"nodeType":"PragmaDirective","src":"45:24:27"},{"id":2682,"literals":["abicoder","v2"],"nodeType":"PragmaDirective","src":"70:19:27"},{"absolutePath":"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol","file":"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol","id":2683,"nodeType":"ImportDirective","scope":2776,"sourceUnit":1434,"src":"91:83:27","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":2685,"name":"IUniswapV3SwapCallback","nodeType":"UserDefinedTypeName","referencedDeclaration":1433,"src":"305:22:27","typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3SwapCallback_$1433","typeString":"contract IUniswapV3SwapCallback"}},"id":2686,"nodeType":"InheritanceSpecifier","src":"305:22:27"}],"contractDependencies":[1433],"contractKind":"interface","documentation":{"id":2684,"nodeType":"StructuredDocumentation","src":"176:104:27","text":"@title Router token swapping functionality\n @notice Functions for swapping tokens via Uniswap V3"},"fullyImplemented":false,"id":2775,"linearizedBaseContracts":[2775,1433],"name":"ISwapRouter","nodeType":"ContractDefinition","nodes":[{"canonicalName":"ISwapRouter.ExactInputSingleParams","id":2703,"members":[{"constant":false,"id":2688,"mutability":"mutable","name":"tokenIn","nodeType":"VariableDeclaration","scope":2703,"src":"374:15:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2687,"name":"address","nodeType":"ElementaryTypeName","src":"374:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2690,"mutability":"mutable","name":"tokenOut","nodeType":"VariableDeclaration","scope":2703,"src":"399:16:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2689,"name":"address","nodeType":"ElementaryTypeName","src":"399:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2692,"mutability":"mutable","name":"fee","nodeType":"VariableDeclaration","scope":2703,"src":"425:10:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"},"typeName":{"id":2691,"name":"uint24","nodeType":"ElementaryTypeName","src":"425:6:27","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"visibility":"internal"},{"constant":false,"id":2694,"mutability":"mutable","name":"recipient","nodeType":"VariableDeclaration","scope":2703,"src":"445:17:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2693,"name":"address","nodeType":"ElementaryTypeName","src":"445:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2696,"mutability":"mutable","name":"deadline","nodeType":"VariableDeclaration","scope":2703,"src":"472:16:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2695,"name":"uint256","nodeType":"ElementaryTypeName","src":"472:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2698,"mutability":"mutable","name":"amountIn","nodeType":"VariableDeclaration","scope":2703,"src":"498:16:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2697,"name":"uint256","nodeType":"ElementaryTypeName","src":"498:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2700,"mutability":"mutable","name":"amountOutMinimum","nodeType":"VariableDeclaration","scope":2703,"src":"524:24:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2699,"name":"uint256","nodeType":"ElementaryTypeName","src":"524:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2702,"mutability":"mutable","name":"sqrtPriceLimitX96","nodeType":"VariableDeclaration","scope":2703,"src":"558:25:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":2701,"name":"uint160","nodeType":"ElementaryTypeName","src":"558:7:27","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"}],"name":"ExactInputSingleParams","nodeType":"StructDefinition","scope":2775,"src":"334:256:27","visibility":"public"},{"documentation":{"id":2704,"nodeType":"StructuredDocumentation","src":"596:250:27","text":"@notice Swaps `amountIn` of one token for as much as possible of another token\n @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\n @return amountOut The amount of the received token"},"functionSelector":"414bf389","id":2711,"implemented":false,"kind":"function","modifiers":[],"name":"exactInputSingle","nodeType":"FunctionDefinition","parameters":{"id":2707,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2706,"mutability":"mutable","name":"params","nodeType":"VariableDeclaration","scope":2711,"src":"877:38:27","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_ExactInputSingleParams_$2703_calldata_ptr","typeString":"struct ISwapRouter.ExactInputSingleParams"},"typeName":{"id":2705,"name":"ExactInputSingleParams","nodeType":"UserDefinedTypeName","referencedDeclaration":2703,"src":"877:22:27","typeDescriptions":{"typeIdentifier":"t_struct$_ExactInputSingleParams_$2703_storage_ptr","typeString":"struct ISwapRouter.ExactInputSingleParams"}},"visibility":"internal"}],"src":"876:40:27"},"returnParameters":{"id":2710,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2709,"mutability":"mutable","name":"amountOut","nodeType":"VariableDeclaration","scope":2711,"src":"943:17:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2708,"name":"uint256","nodeType":"ElementaryTypeName","src":"943:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"942:19:27"},"scope":2775,"src":"851:111:27","stateMutability":"payable","virtual":false,"visibility":"external"},{"canonicalName":"ISwapRouter.ExactInputParams","id":2722,"members":[{"constant":false,"id":2713,"mutability":"mutable","name":"path","nodeType":"VariableDeclaration","scope":2722,"src":"1002:10:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":2712,"name":"bytes","nodeType":"ElementaryTypeName","src":"1002:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2715,"mutability":"mutable","name":"recipient","nodeType":"VariableDeclaration","scope":2722,"src":"1022:17:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2714,"name":"address","nodeType":"ElementaryTypeName","src":"1022:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2717,"mutability":"mutable","name":"deadline","nodeType":"VariableDeclaration","scope":2722,"src":"1049:16:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2716,"name":"uint256","nodeType":"ElementaryTypeName","src":"1049:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2719,"mutability":"mutable","name":"amountIn","nodeType":"VariableDeclaration","scope":2722,"src":"1075:16:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2718,"name":"uint256","nodeType":"ElementaryTypeName","src":"1075:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2721,"mutability":"mutable","name":"amountOutMinimum","nodeType":"VariableDeclaration","scope":2722,"src":"1101:24:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2720,"name":"uint256","nodeType":"ElementaryTypeName","src":"1101:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"ExactInputParams","nodeType":"StructDefinition","scope":2775,"src":"968:164:27","visibility":"public"},{"documentation":{"id":2723,"nodeType":"StructuredDocumentation","src":"1138:273:27","text":"@notice Swaps `amountIn` of one token for as much as possible of another along the specified path\n @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\n @return amountOut The amount of the received token"},"functionSelector":"c04b8d59","id":2730,"implemented":false,"kind":"function","modifiers":[],"name":"exactInput","nodeType":"FunctionDefinition","parameters":{"id":2726,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2725,"mutability":"mutable","name":"params","nodeType":"VariableDeclaration","scope":2730,"src":"1436:32:27","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_ExactInputParams_$2722_calldata_ptr","typeString":"struct ISwapRouter.ExactInputParams"},"typeName":{"id":2724,"name":"ExactInputParams","nodeType":"UserDefinedTypeName","referencedDeclaration":2722,"src":"1436:16:27","typeDescriptions":{"typeIdentifier":"t_struct$_ExactInputParams_$2722_storage_ptr","typeString":"struct ISwapRouter.ExactInputParams"}},"visibility":"internal"}],"src":"1435:34:27"},"returnParameters":{"id":2729,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2728,"mutability":"mutable","name":"amountOut","nodeType":"VariableDeclaration","scope":2730,"src":"1496:17:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2727,"name":"uint256","nodeType":"ElementaryTypeName","src":"1496:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1495:19:27"},"scope":2775,"src":"1416:99:27","stateMutability":"payable","virtual":false,"visibility":"external"},{"canonicalName":"ISwapRouter.ExactOutputSingleParams","id":2747,"members":[{"constant":false,"id":2732,"mutability":"mutable","name":"tokenIn","nodeType":"VariableDeclaration","scope":2747,"src":"1562:15:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2731,"name":"address","nodeType":"ElementaryTypeName","src":"1562:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2734,"mutability":"mutable","name":"tokenOut","nodeType":"VariableDeclaration","scope":2747,"src":"1587:16:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2733,"name":"address","nodeType":"ElementaryTypeName","src":"1587:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2736,"mutability":"mutable","name":"fee","nodeType":"VariableDeclaration","scope":2747,"src":"1613:10:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"},"typeName":{"id":2735,"name":"uint24","nodeType":"ElementaryTypeName","src":"1613:6:27","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"visibility":"internal"},{"constant":false,"id":2738,"mutability":"mutable","name":"recipient","nodeType":"VariableDeclaration","scope":2747,"src":"1633:17:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2737,"name":"address","nodeType":"ElementaryTypeName","src":"1633:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2740,"mutability":"mutable","name":"deadline","nodeType":"VariableDeclaration","scope":2747,"src":"1660:16:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2739,"name":"uint256","nodeType":"ElementaryTypeName","src":"1660:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2742,"mutability":"mutable","name":"amountOut","nodeType":"VariableDeclaration","scope":2747,"src":"1686:17:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2741,"name":"uint256","nodeType":"ElementaryTypeName","src":"1686:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2744,"mutability":"mutable","name":"amountInMaximum","nodeType":"VariableDeclaration","scope":2747,"src":"1713:23:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2743,"name":"uint256","nodeType":"ElementaryTypeName","src":"1713:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2746,"mutability":"mutable","name":"sqrtPriceLimitX96","nodeType":"VariableDeclaration","scope":2747,"src":"1746:25:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":2745,"name":"uint160","nodeType":"ElementaryTypeName","src":"1746:7:27","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"}],"name":"ExactOutputSingleParams","nodeType":"StructDefinition","scope":2775,"src":"1521:257:27","visibility":"public"},{"documentation":{"id":2748,"nodeType":"StructuredDocumentation","src":"1784:250:27","text":"@notice Swaps as little as possible of one token for `amountOut` of another token\n @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\n @return amountIn The amount of the input token"},"functionSelector":"db3e2198","id":2755,"implemented":false,"kind":"function","modifiers":[],"name":"exactOutputSingle","nodeType":"FunctionDefinition","parameters":{"id":2751,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2750,"mutability":"mutable","name":"params","nodeType":"VariableDeclaration","scope":2755,"src":"2066:39:27","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_ExactOutputSingleParams_$2747_calldata_ptr","typeString":"struct ISwapRouter.ExactOutputSingleParams"},"typeName":{"id":2749,"name":"ExactOutputSingleParams","nodeType":"UserDefinedTypeName","referencedDeclaration":2747,"src":"2066:23:27","typeDescriptions":{"typeIdentifier":"t_struct$_ExactOutputSingleParams_$2747_storage_ptr","typeString":"struct ISwapRouter.ExactOutputSingleParams"}},"visibility":"internal"}],"src":"2065:41:27"},"returnParameters":{"id":2754,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2753,"mutability":"mutable","name":"amountIn","nodeType":"VariableDeclaration","scope":2755,"src":"2133:16:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2752,"name":"uint256","nodeType":"ElementaryTypeName","src":"2133:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2132:18:27"},"scope":2775,"src":"2039:112:27","stateMutability":"payable","virtual":false,"visibility":"external"},{"canonicalName":"ISwapRouter.ExactOutputParams","id":2766,"members":[{"constant":false,"id":2757,"mutability":"mutable","name":"path","nodeType":"VariableDeclaration","scope":2766,"src":"2192:10:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":2756,"name":"bytes","nodeType":"ElementaryTypeName","src":"2192:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2759,"mutability":"mutable","name":"recipient","nodeType":"VariableDeclaration","scope":2766,"src":"2212:17:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2758,"name":"address","nodeType":"ElementaryTypeName","src":"2212:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2761,"mutability":"mutable","name":"deadline","nodeType":"VariableDeclaration","scope":2766,"src":"2239:16:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2760,"name":"uint256","nodeType":"ElementaryTypeName","src":"2239:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2763,"mutability":"mutable","name":"amountOut","nodeType":"VariableDeclaration","scope":2766,"src":"2265:17:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2762,"name":"uint256","nodeType":"ElementaryTypeName","src":"2265:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2765,"mutability":"mutable","name":"amountInMaximum","nodeType":"VariableDeclaration","scope":2766,"src":"2292:23:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2764,"name":"uint256","nodeType":"ElementaryTypeName","src":"2292:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"ExactOutputParams","nodeType":"StructDefinition","scope":2775,"src":"2157:165:27","visibility":"public"},{"documentation":{"id":2767,"nodeType":"StructuredDocumentation","src":"2328:284:27","text":"@notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\n @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\n @return amountIn The amount of the input token"},"functionSelector":"f28c0498","id":2774,"implemented":false,"kind":"function","modifiers":[],"name":"exactOutput","nodeType":"FunctionDefinition","parameters":{"id":2770,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2769,"mutability":"mutable","name":"params","nodeType":"VariableDeclaration","scope":2774,"src":"2638:33:27","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_ExactOutputParams_$2766_calldata_ptr","typeString":"struct ISwapRouter.ExactOutputParams"},"typeName":{"id":2768,"name":"ExactOutputParams","nodeType":"UserDefinedTypeName","referencedDeclaration":2766,"src":"2638:17:27","typeDescriptions":{"typeIdentifier":"t_struct$_ExactOutputParams_$2766_storage_ptr","typeString":"struct ISwapRouter.ExactOutputParams"}},"visibility":"internal"}],"src":"2637:35:27"},"returnParameters":{"id":2773,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2772,"mutability":"mutable","name":"amountIn","nodeType":"VariableDeclaration","scope":2774,"src":"2699:16:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2771,"name":"uint256","nodeType":"ElementaryTypeName","src":"2699:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2698:18:27"},"scope":2775,"src":"2617:100:27","stateMutability":"payable","virtual":false,"visibility":"external"}],"scope":2776,"src":"280:2439:27"}],"src":"45:2675:27"},"id":27},"@uniswap/v3-periphery/contracts/interfaces/external/IWETH9.sol":{"ast":{"absolutePath":"@uniswap/v3-periphery/contracts/interfaces/external/IWETH9.sol","exportedSymbols":{"IERC20":[554],"IWETH9":[2792]},"id":2793,"license":"GPL-2.0-or-later","nodeType":"SourceUnit","nodes":[{"id":2777,"literals":["solidity","=","0.7",".6"],"nodeType":"PragmaDirective","src":"45:23:28"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"@openzeppelin/contracts/token/ERC20/IERC20.sol","id":2778,"nodeType":"ImportDirective","scope":2793,"sourceUnit":555,"src":"70:56:28","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":2780,"name":"IERC20","nodeType":"UserDefinedTypeName","referencedDeclaration":554,"src":"179:6:28","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$554","typeString":"contract IERC20"}},"id":2781,"nodeType":"InheritanceSpecifier","src":"179:6:28"}],"contractDependencies":[554],"contractKind":"interface","documentation":{"id":2779,"nodeType":"StructuredDocumentation","src":"128:31:28","text":"@title Interface for WETH9"},"fullyImplemented":false,"id":2792,"linearizedBaseContracts":[2792,554],"name":"IWETH9","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2782,"nodeType":"StructuredDocumentation","src":"192:46:28","text":"@notice Deposit ether to get wrapped ether"},"functionSelector":"d0e30db0","id":2785,"implemented":false,"kind":"function","modifiers":[],"name":"deposit","nodeType":"FunctionDefinition","parameters":{"id":2783,"nodeType":"ParameterList","parameters":[],"src":"259:2:28"},"returnParameters":{"id":2784,"nodeType":"ParameterList","parameters":[],"src":"278:0:28"},"scope":2792,"src":"243:36:28","stateMutability":"payable","virtual":false,"visibility":"external"},{"documentation":{"id":2786,"nodeType":"StructuredDocumentation","src":"285:47:28","text":"@notice Withdraw wrapped ether to get ether"},"functionSelector":"2e1a7d4d","id":2791,"implemented":false,"kind":"function","modifiers":[],"name":"withdraw","nodeType":"FunctionDefinition","parameters":{"id":2789,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2788,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":2791,"src":"355:7:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2787,"name":"uint256","nodeType":"ElementaryTypeName","src":"355:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"354:9:28"},"returnParameters":{"id":2790,"nodeType":"ParameterList","parameters":[],"src":"372:0:28"},"scope":2792,"src":"337:36:28","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":2793,"src":"159:216:28"}],"src":"45:331:28"},"id":28},"@uniswap/v3-periphery/contracts/libraries/PoolAddress.sol":{"ast":{"absolutePath":"@uniswap/v3-periphery/contracts/libraries/PoolAddress.sol","exportedSymbols":{"PoolAddress":[2884]},"id":2885,"license":"GPL-2.0-or-later","nodeType":"SourceUnit","nodes":[{"id":2794,"literals":["solidity",">=","0.5",".0"],"nodeType":"PragmaDirective","src":"45:24:29"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"library","documentation":{"id":2795,"nodeType":"StructuredDocumentation","src":"71:96:29","text":"@title Provides functions for deriving a pool address from the factory, tokens, and the fee"},"fullyImplemented":true,"id":2884,"linearizedBaseContracts":[2884],"name":"PoolAddress","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":2798,"mutability":"constant","name":"POOL_INIT_CODE_HASH","nodeType":"VariableDeclaration","scope":2884,"src":"193:114:29","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2796,"name":"bytes32","nodeType":"ElementaryTypeName","src":"193:7:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307865333466313939623139623262346634376636383434323631396435353535323764323434663738613332393765613839333235663834336638376238623534","id":2797,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"241:66:29","typeDescriptions":{"typeIdentifier":"t_rational_102814774271675688723325049954498779091328469440286648861889194717372678376276_by_1","typeString":"int_const 1028...(70 digits omitted)...6276"},"value":"0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54"},"visibility":"internal"},{"canonicalName":"PoolAddress.PoolKey","id":2805,"members":[{"constant":false,"id":2800,"mutability":"mutable","name":"token0","nodeType":"VariableDeclaration","scope":2805,"src":"387:14:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2799,"name":"address","nodeType":"ElementaryTypeName","src":"387:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2802,"mutability":"mutable","name":"token1","nodeType":"VariableDeclaration","scope":2805,"src":"411:14:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2801,"name":"address","nodeType":"ElementaryTypeName","src":"411:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2804,"mutability":"mutable","name":"fee","nodeType":"VariableDeclaration","scope":2805,"src":"435:10:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"},"typeName":{"id":2803,"name":"uint24","nodeType":"ElementaryTypeName","src":"435:6:29","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"visibility":"internal"}],"name":"PoolKey","nodeType":"StructDefinition","scope":2884,"src":"362:90:29","visibility":"public"},{"body":{"id":2835,"nodeType":"Block","src":"917:141:29","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2819,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2817,"name":"tokenA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2808,"src":"931:6:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":2818,"name":"tokenB","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2810,"src":"940:6:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"931:15:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2828,"nodeType":"IfStatement","src":"927:56:29","trueBody":{"expression":{"id":2826,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"components":[{"id":2820,"name":"tokenA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2808,"src":"949:6:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2821,"name":"tokenB","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2810,"src":"957:6:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":2822,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"948:16:29","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_address_$","typeString":"tuple(address,address)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"components":[{"id":2823,"name":"tokenB","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2810,"src":"968:6:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2824,"name":"tokenA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2808,"src":"976:6:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":2825,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"967:16:29","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_address_$","typeString":"tuple(address,address)"}},"src":"948:35:29","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2827,"nodeType":"ExpressionStatement","src":"948:35:29"}},{"expression":{"arguments":[{"id":2830,"name":"tokenA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2808,"src":"1017:6:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2831,"name":"tokenB","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2810,"src":"1033:6:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2832,"name":"fee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2812,"src":"1046:3:29","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint24","typeString":"uint24"}],"id":2829,"name":"PoolKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2805,"src":"1000:7:29","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_PoolKey_$2805_storage_ptr_$","typeString":"type(struct PoolAddress.PoolKey storage pointer)"}},"id":2833,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"names":["token0","token1","fee"],"nodeType":"FunctionCall","src":"1000:51:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_PoolKey_$2805_memory_ptr","typeString":"struct PoolAddress.PoolKey memory"}},"functionReturnParameters":2816,"id":2834,"nodeType":"Return","src":"993:58:29"}]},"documentation":{"id":2806,"nodeType":"StructuredDocumentation","src":"458:321:29","text":"@notice Returns PoolKey: the ordered tokens with the matched fee levels\n @param tokenA The first token of a pool, unsorted\n @param tokenB The second token of a pool, unsorted\n @param fee The fee level of the pool\n @return Poolkey The pool details with ordered token0 and token1 assignments"},"id":2836,"implemented":true,"kind":"function","modifiers":[],"name":"getPoolKey","nodeType":"FunctionDefinition","parameters":{"id":2813,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2808,"mutability":"mutable","name":"tokenA","nodeType":"VariableDeclaration","scope":2836,"src":"813:14:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2807,"name":"address","nodeType":"ElementaryTypeName","src":"813:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2810,"mutability":"mutable","name":"tokenB","nodeType":"VariableDeclaration","scope":2836,"src":"837:14:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2809,"name":"address","nodeType":"ElementaryTypeName","src":"837:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2812,"mutability":"mutable","name":"fee","nodeType":"VariableDeclaration","scope":2836,"src":"861:10:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"},"typeName":{"id":2811,"name":"uint24","nodeType":"ElementaryTypeName","src":"861:6:29","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"visibility":"internal"}],"src":"803:74:29"},"returnParameters":{"id":2816,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2815,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":2836,"src":"901:14:29","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_PoolKey_$2805_memory_ptr","typeString":"struct PoolAddress.PoolKey"},"typeName":{"id":2814,"name":"PoolKey","nodeType":"UserDefinedTypeName","referencedDeclaration":2805,"src":"901:7:29","typeDescriptions":{"typeIdentifier":"t_struct$_PoolKey_$2805_storage_ptr","typeString":"struct PoolAddress.PoolKey"}},"visibility":"internal"}],"src":"900:16:29"},"scope":2884,"src":"784:274:29","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2882,"nodeType":"Block","src":"1403:414:29","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2851,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2847,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2841,"src":"1421:3:29","typeDescriptions":{"typeIdentifier":"t_struct$_PoolKey_$2805_memory_ptr","typeString":"struct PoolAddress.PoolKey memory"}},"id":2848,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"token0","nodeType":"MemberAccess","referencedDeclaration":2800,"src":"1421:10:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":2849,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2841,"src":"1434:3:29","typeDescriptions":{"typeIdentifier":"t_struct$_PoolKey_$2805_memory_ptr","typeString":"struct PoolAddress.PoolKey memory"}},"id":2850,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"token1","nodeType":"MemberAccess","referencedDeclaration":2802,"src":"1434:10:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1421:23:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":2846,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1413:7:29","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":2852,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1413:32:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2853,"nodeType":"ExpressionStatement","src":"1413:32:29"},{"expression":{"id":2880,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2854,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2844,"src":"1455:4:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"hexValue":"ff","id":2862,"isConstant":false,"isLValue":false,"isPure":true,"kind":"hexString","lValueRequested":false,"nodeType":"Literal","src":"1581:7:29","typeDescriptions":{"typeIdentifier":"t_stringliteral_8b1a944cf13a9a1c08facb2c9e98623ef3254d2ddb48113885c3e8e97fec8db9","typeString":"literal_string hex\"ff\""}},{"id":2863,"name":"factory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2839,"src":"1614:7:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"arguments":[{"expression":{"id":2867,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2841,"src":"1668:3:29","typeDescriptions":{"typeIdentifier":"t_struct$_PoolKey_$2805_memory_ptr","typeString":"struct PoolAddress.PoolKey memory"}},"id":2868,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"token0","nodeType":"MemberAccess","referencedDeclaration":2800,"src":"1668:10:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":2869,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2841,"src":"1680:3:29","typeDescriptions":{"typeIdentifier":"t_struct$_PoolKey_$2805_memory_ptr","typeString":"struct PoolAddress.PoolKey memory"}},"id":2870,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"token1","nodeType":"MemberAccess","referencedDeclaration":2802,"src":"1680:10:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":2871,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2841,"src":"1692:3:29","typeDescriptions":{"typeIdentifier":"t_struct$_PoolKey_$2805_memory_ptr","typeString":"struct PoolAddress.PoolKey memory"}},"id":2872,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"fee","nodeType":"MemberAccess","referencedDeclaration":2804,"src":"1692:7:29","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint24","typeString":"uint24"}],"expression":{"id":2865,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1657:3:29","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2866,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encode","nodeType":"MemberAccess","src":"1657:10:29","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":2873,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1657:43:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2864,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1647:9:29","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2874,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1647:54:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2875,"name":"POOL_INIT_CODE_HASH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2798,"src":"1727:19:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_8b1a944cf13a9a1c08facb2c9e98623ef3254d2ddb48113885c3e8e97fec8db9","typeString":"literal_string hex\"ff\""},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":2860,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1539:3:29","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2861,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodePacked","nodeType":"MemberAccess","src":"1539:16:29","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":2876,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1539:229:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2859,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1508:9:29","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2877,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1508:278:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2858,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1483:7:29","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2857,"name":"uint256","nodeType":"ElementaryTypeName","src":"1483:7:29","typeDescriptions":{}}},"id":2878,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1483:317:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2856,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1462:7:29","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2855,"name":"address","nodeType":"ElementaryTypeName","src":"1462:7:29","typeDescriptions":{}}},"id":2879,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1462:348:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"1455:355:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2881,"nodeType":"ExpressionStatement","src":"1455:355:29"}]},"documentation":{"id":2837,"nodeType":"StructuredDocumentation","src":"1064:236:29","text":"@notice Deterministically computes the pool address given the factory and PoolKey\n @param factory The Uniswap V3 factory contract address\n @param key The PoolKey\n @return pool The contract address of the V3 pool"},"id":2883,"implemented":true,"kind":"function","modifiers":[],"name":"computeAddress","nodeType":"FunctionDefinition","parameters":{"id":2842,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2839,"mutability":"mutable","name":"factory","nodeType":"VariableDeclaration","scope":2883,"src":"1329:15:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2838,"name":"address","nodeType":"ElementaryTypeName","src":"1329:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2841,"mutability":"mutable","name":"key","nodeType":"VariableDeclaration","scope":2883,"src":"1346:18:29","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_PoolKey_$2805_memory_ptr","typeString":"struct PoolAddress.PoolKey"},"typeName":{"id":2840,"name":"PoolKey","nodeType":"UserDefinedTypeName","referencedDeclaration":2805,"src":"1346:7:29","typeDescriptions":{"typeIdentifier":"t_struct$_PoolKey_$2805_storage_ptr","typeString":"struct PoolAddress.PoolKey"}},"visibility":"internal"}],"src":"1328:37:29"},"returnParameters":{"id":2845,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2844,"mutability":"mutable","name":"pool","nodeType":"VariableDeclaration","scope":2883,"src":"1389:12:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2843,"name":"address","nodeType":"ElementaryTypeName","src":"1389:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1388:14:29"},"scope":2884,"src":"1305:512:29","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2885,"src":"167:1652:29"}],"src":"45:1775:29"},"id":29},"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol":{"ast":{"absolutePath":"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol","exportedSymbols":{"IERC20":[554],"TransferHelper":[3055]},"id":3056,"license":"GPL-2.0-or-later","nodeType":"SourceUnit","nodes":[{"id":2886,"literals":["solidity",">=","0.6",".0"],"nodeType":"PragmaDirective","src":"45:24:30"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"@openzeppelin/contracts/token/ERC20/IERC20.sol","id":2887,"nodeType":"ImportDirective","scope":3056,"sourceUnit":555,"src":"71:56:30","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":3055,"linearizedBaseContracts":[3055],"name":"TransferHelper","nodeType":"ContractDefinition","nodes":[{"body":{"id":2935,"nodeType":"Block","src":"690:229:30","statements":[{"assignments":[2900,2902],"declarations":[{"constant":false,"id":2900,"mutability":"mutable","name":"success","nodeType":"VariableDeclaration","scope":2935,"src":"701:12:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2899,"name":"bool","nodeType":"ElementaryTypeName","src":"701:4:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2902,"mutability":"mutable","name":"data","nodeType":"VariableDeclaration","scope":2935,"src":"715:17:30","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2901,"name":"bytes","nodeType":"ElementaryTypeName","src":"715:5:30","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":2915,"initialValue":{"arguments":[{"arguments":[{"expression":{"expression":{"id":2907,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":554,"src":"782:6:30","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$554_$","typeString":"type(contract IERC20)"}},"id":2908,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"transferFrom","nodeType":"MemberAccess","referencedDeclaration":535,"src":"782:19:30","typeDescriptions":{"typeIdentifier":"t_function_declaration_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function IERC20.transferFrom(address,address,uint256) returns (bool)"}},"id":2909,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"selector","nodeType":"MemberAccess","src":"782:28:30","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":2910,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2892,"src":"812:4:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2911,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2894,"src":"818:2:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2912,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2896,"src":"822:5:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2905,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"759:3:30","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2906,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"759:22:30","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":2913,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"759:69:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":2903,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2890,"src":"748:5:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2904,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"call","nodeType":"MemberAccess","src":"748:10:30","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":2914,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"748:81:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"700:129:30"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2931,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2917,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2900,"src":"847:7:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2929,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2921,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2918,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2902,"src":"859:4:30","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2919,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"859:11:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2920,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"874:1:30","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"859:16:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":2924,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2902,"src":"890:4:30","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":2926,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"897:4:30","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"},"typeName":{"id":2925,"name":"bool","nodeType":"ElementaryTypeName","src":"897:4:30","typeDescriptions":{}}}],"id":2927,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"896:6:30","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}],"expression":{"id":2922,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"879:3:30","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2923,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"decode","nodeType":"MemberAccess","src":"879:10:30","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":2928,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"879:24:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"859:44:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":2930,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"858:46:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"847:57:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"535446","id":2932,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"906:5:30","typeDescriptions":{"typeIdentifier":"t_stringliteral_a1c4b1d67db284650e7cfb49cb11ce76848206ad466478425bd3418f8bbb9a86","typeString":"literal_string \"STF\""},"value":"STF"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_a1c4b1d67db284650e7cfb49cb11ce76848206ad466478425bd3418f8bbb9a86","typeString":"literal_string \"STF\""}],"id":2916,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"839:7:30","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2933,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"839:73:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2934,"nodeType":"ExpressionStatement","src":"839:73:30"}]},"documentation":{"id":2888,"nodeType":"StructuredDocumentation","src":"158:398:30","text":"@notice Transfers tokens from the targeted address to the given destination\n @notice Errors with 'STF' if transfer fails\n @param token The contract address of the token to be transferred\n @param from The originating address from which the tokens will be transferred\n @param to The destination address of the transfer\n @param value The amount to be transferred"},"id":2936,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nodeType":"FunctionDefinition","parameters":{"id":2897,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2890,"mutability":"mutable","name":"token","nodeType":"VariableDeclaration","scope":2936,"src":"596:13:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2889,"name":"address","nodeType":"ElementaryTypeName","src":"596:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2892,"mutability":"mutable","name":"from","nodeType":"VariableDeclaration","scope":2936,"src":"619:12:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2891,"name":"address","nodeType":"ElementaryTypeName","src":"619:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2894,"mutability":"mutable","name":"to","nodeType":"VariableDeclaration","scope":2936,"src":"641:10:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2893,"name":"address","nodeType":"ElementaryTypeName","src":"641:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2896,"mutability":"mutable","name":"value","nodeType":"VariableDeclaration","scope":2936,"src":"661:13:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2895,"name":"uint256","nodeType":"ElementaryTypeName","src":"661:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"586:94:30"},"returnParameters":{"id":2898,"nodeType":"ParameterList","parameters":[],"src":"690:0:30"},"scope":3055,"src":"561:358:30","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2981,"nodeType":"Block","src":"1314:206:30","statements":[{"assignments":[2947,2949],"declarations":[{"constant":false,"id":2947,"mutability":"mutable","name":"success","nodeType":"VariableDeclaration","scope":2981,"src":"1325:12:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2946,"name":"bool","nodeType":"ElementaryTypeName","src":"1325:4:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2949,"mutability":"mutable","name":"data","nodeType":"VariableDeclaration","scope":2981,"src":"1339:17:30","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2948,"name":"bytes","nodeType":"ElementaryTypeName","src":"1339:5:30","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":2961,"initialValue":{"arguments":[{"arguments":[{"expression":{"expression":{"id":2954,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":554,"src":"1394:6:30","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$554_$","typeString":"type(contract IERC20)"}},"id":2955,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":503,"src":"1394:15:30","typeDescriptions":{"typeIdentifier":"t_function_declaration_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function IERC20.transfer(address,uint256) returns (bool)"}},"id":2956,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"selector","nodeType":"MemberAccess","src":"1394:24:30","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":2957,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2941,"src":"1420:2:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2958,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2943,"src":"1424:5:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2952,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1371:3:30","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2953,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"1371:22:30","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":2959,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1371:59:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":2950,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2939,"src":"1360:5:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2951,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"call","nodeType":"MemberAccess","src":"1360:10:30","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":2960,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1360:71:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"1324:107:30"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2977,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2963,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2947,"src":"1449:7:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2975,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2967,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2964,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2949,"src":"1461:4:30","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2965,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"1461:11:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2966,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1476:1:30","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1461:16:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":2970,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2949,"src":"1492:4:30","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":2972,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1499:4:30","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"},"typeName":{"id":2971,"name":"bool","nodeType":"ElementaryTypeName","src":"1499:4:30","typeDescriptions":{}}}],"id":2973,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1498:6:30","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}],"expression":{"id":2968,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1481:3:30","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2969,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"decode","nodeType":"MemberAccess","src":"1481:10:30","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":2974,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1481:24:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1461:44:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":2976,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1460:46:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1449:57:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5354","id":2978,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1508:4:30","typeDescriptions":{"typeIdentifier":"t_stringliteral_8e992d6a09e3feb7936717fa482f3a7086f18407e19b697f3153d17fd25870ca","typeString":"literal_string \"ST\""},"value":"ST"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_8e992d6a09e3feb7936717fa482f3a7086f18407e19b697f3153d17fd25870ca","typeString":"literal_string \"ST\""}],"id":2962,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1441:7:30","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2979,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1441:72:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2980,"nodeType":"ExpressionStatement","src":"1441:72:30"}]},"documentation":{"id":2937,"nodeType":"StructuredDocumentation","src":"925:281:30","text":"@notice Transfers tokens from msg.sender to a recipient\n @dev Errors with ST if transfer fails\n @param token The contract address of the token which will be transferred\n @param to The recipient of the transfer\n @param value The value of the transfer"},"id":2982,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransfer","nodeType":"FunctionDefinition","parameters":{"id":2944,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2939,"mutability":"mutable","name":"token","nodeType":"VariableDeclaration","scope":2982,"src":"1242:13:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2938,"name":"address","nodeType":"ElementaryTypeName","src":"1242:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2941,"mutability":"mutable","name":"to","nodeType":"VariableDeclaration","scope":2982,"src":"1265:10:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2940,"name":"address","nodeType":"ElementaryTypeName","src":"1265:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2943,"mutability":"mutable","name":"value","nodeType":"VariableDeclaration","scope":2982,"src":"1285:13:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2942,"name":"uint256","nodeType":"ElementaryTypeName","src":"1285:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1232:72:30"},"returnParameters":{"id":2945,"nodeType":"ParameterList","parameters":[],"src":"1314:0:30"},"scope":3055,"src":"1211:309:30","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3027,"nodeType":"Block","src":"1975:205:30","statements":[{"assignments":[2993,2995],"declarations":[{"constant":false,"id":2993,"mutability":"mutable","name":"success","nodeType":"VariableDeclaration","scope":3027,"src":"1986:12:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2992,"name":"bool","nodeType":"ElementaryTypeName","src":"1986:4:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2995,"mutability":"mutable","name":"data","nodeType":"VariableDeclaration","scope":3027,"src":"2000:17:30","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2994,"name":"bytes","nodeType":"ElementaryTypeName","src":"2000:5:30","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":3007,"initialValue":{"arguments":[{"arguments":[{"expression":{"expression":{"id":3000,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":554,"src":"2055:6:30","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$554_$","typeString":"type(contract IERC20)"}},"id":3001,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":523,"src":"2055:14:30","typeDescriptions":{"typeIdentifier":"t_function_declaration_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function IERC20.approve(address,uint256) returns (bool)"}},"id":3002,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"selector","nodeType":"MemberAccess","src":"2055:23:30","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":3003,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2987,"src":"2080:2:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3004,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2989,"src":"2084:5:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2998,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2032:3:30","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2999,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"2032:22:30","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":3005,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2032:58:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":2996,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2985,"src":"2021:5:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2997,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"call","nodeType":"MemberAccess","src":"2021:10:30","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":3006,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2021:70:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"1985:106:30"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3023,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3009,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2993,"src":"2109:7:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3021,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3013,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3010,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2995,"src":"2121:4:30","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3011,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"2121:11:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3012,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2136:1:30","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2121:16:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":3016,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2995,"src":"2152:4:30","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":3018,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2159:4:30","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"},"typeName":{"id":3017,"name":"bool","nodeType":"ElementaryTypeName","src":"2159:4:30","typeDescriptions":{}}}],"id":3019,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"2158:6:30","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}],"expression":{"id":3014,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2141:3:30","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3015,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"decode","nodeType":"MemberAccess","src":"2141:10:30","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":3020,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2141:24:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2121:44:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":3022,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2120:46:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2109:57:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5341","id":3024,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2168:4:30","typeDescriptions":{"typeIdentifier":"t_stringliteral_0c382912095e7706ed01a66755a50c713445aceaf5a9168954498b03dd381faa","typeString":"literal_string \"SA\""},"value":"SA"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_0c382912095e7706ed01a66755a50c713445aceaf5a9168954498b03dd381faa","typeString":"literal_string \"SA\""}],"id":3008,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2101:7:30","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3025,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2101:72:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3026,"nodeType":"ExpressionStatement","src":"2101:72:30"}]},"documentation":{"id":2983,"nodeType":"StructuredDocumentation","src":"1526:342:30","text":"@notice Approves the stipulated contract to spend the given allowance in the given token\n @dev Errors with 'SA' if transfer fails\n @param token The contract address of the token to be approved\n @param to The target of the approval\n @param value The amount of the given token the target will be allowed to spend"},"id":3028,"implemented":true,"kind":"function","modifiers":[],"name":"safeApprove","nodeType":"FunctionDefinition","parameters":{"id":2990,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2985,"mutability":"mutable","name":"token","nodeType":"VariableDeclaration","scope":3028,"src":"1903:13:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2984,"name":"address","nodeType":"ElementaryTypeName","src":"1903:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2987,"mutability":"mutable","name":"to","nodeType":"VariableDeclaration","scope":3028,"src":"1926:10:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2986,"name":"address","nodeType":"ElementaryTypeName","src":"1926:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2989,"mutability":"mutable","name":"value","nodeType":"VariableDeclaration","scope":3028,"src":"1946:13:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2988,"name":"uint256","nodeType":"ElementaryTypeName","src":"1946:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1893:72:30"},"returnParameters":{"id":2991,"nodeType":"ParameterList","parameters":[],"src":"1975:0:30"},"scope":3055,"src":"1873:307:30","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3053,"nodeType":"Block","src":"2431:104:30","statements":[{"assignments":[3037,null],"declarations":[{"constant":false,"id":3037,"mutability":"mutable","name":"success","nodeType":"VariableDeclaration","scope":3053,"src":"2442:12:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3036,"name":"bool","nodeType":"ElementaryTypeName","src":"2442:4:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":3047,"initialValue":{"arguments":[{"arguments":[{"hexValue":"30","id":3044,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2492:1:30","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3043,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"2482:9:30","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":3042,"name":"bytes","nodeType":"ElementaryTypeName","src":"2486:5:30","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":3045,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2482:12:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":3038,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3031,"src":"2460:2:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3039,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"call","nodeType":"MemberAccess","src":"2460:7:30","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":3041,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":3040,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3033,"src":"2475:5:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"2460:21:30","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":3046,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2460:35:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"2441:54:30"},{"expression":{"arguments":[{"id":3049,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3037,"src":"2513:7:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"535445","id":3050,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2522:5:30","typeDescriptions":{"typeIdentifier":"t_stringliteral_48541fce89df928ec30caa1aed6c0cd94b8e2ef76b3c68b10b9a184ceadb93d4","typeString":"literal_string \"STE\""},"value":"STE"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_48541fce89df928ec30caa1aed6c0cd94b8e2ef76b3c68b10b9a184ceadb93d4","typeString":"literal_string \"STE\""}],"id":3048,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2505:7:30","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3051,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2505:23:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3052,"nodeType":"ExpressionStatement","src":"2505:23:30"}]},"documentation":{"id":3029,"nodeType":"StructuredDocumentation","src":"2186:179:30","text":"@notice Transfers ETH to the recipient address\n @dev Fails with `STE`\n @param to The destination of the transfer\n @param value The value to be transferred"},"id":3054,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferETH","nodeType":"FunctionDefinition","parameters":{"id":3034,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3031,"mutability":"mutable","name":"to","nodeType":"VariableDeclaration","scope":3054,"src":"2395:10:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3030,"name":"address","nodeType":"ElementaryTypeName","src":"2395:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3033,"mutability":"mutable","name":"value","nodeType":"VariableDeclaration","scope":3054,"src":"2407:13:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3032,"name":"uint256","nodeType":"ElementaryTypeName","src":"2407:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2394:27:30"},"returnParameters":{"id":3035,"nodeType":"ParameterList","parameters":[],"src":"2431:0:30"},"scope":3055,"src":"2370:165:30","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":3056,"src":"129:2408:30"}],"src":"45:2493:30"},"id":30},"contracts/BaselineMinimal.sol":{"ast":{"absolutePath":"contracts/BaselineMinimal.sol","exportedSymbols":{"Address":[1237],"BaselineMinimal":[3828],"Context":[1260],"IERC165":[121],"IERC20":[554],"IERC721":[883],"IERC721Enumerable":[914],"IERC721Metadata":[941],"IERC721Permit":[2423],"INonfungiblePositionManager":[2618],"IPeripheryImmutableState":[2634],"IPeripheryPayments":[2660],"IPoolInitializer":[2679],"ISwapRouter":[2775],"IUniswapV3Factory":[1383],"IUniswapV3Pool":[1405],"IUniswapV3PoolActions":[1529],"IUniswapV3PoolDerivedState":[1560],"IUniswapV3PoolEvents":[1679],"IUniswapV3PoolImmutables":[1719],"IUniswapV3PoolOwnerActions":[1745],"IUniswapV3PoolState":[1853],"IUniswapV3SwapCallback":[1433],"IWETH":[3075],"Ownable":[109],"PoolAddress":[2884],"SafeERC20":[767],"SafeMath":[476],"TransferHelper":[3055]},"id":3829,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3057,"literals":["solidity","^","0.7",".6"],"nodeType":"PragmaDirective","src":"33:23:31"},{"id":3058,"literals":["abicoder","v2"],"nodeType":"PragmaDirective","src":"58:19:31"},{"absolutePath":"@openzeppelin/contracts/access/Ownable.sol","file":"@openzeppelin/contracts/access/Ownable.sol","id":3059,"nodeType":"ImportDirective","scope":3829,"sourceUnit":110,"src":"81:52:31","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"@openzeppelin/contracts/token/ERC20/IERC20.sol","id":3060,"nodeType":"ImportDirective","scope":3829,"sourceUnit":555,"src":"135:56:31","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/SafeERC20.sol","file":"@openzeppelin/contracts/token/ERC20/SafeERC20.sol","id":3061,"nodeType":"ImportDirective","scope":3829,"sourceUnit":768,"src":"193:59:31","symbolAliases":[],"unitAlias":""},{"absolutePath":"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol","file":"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol","id":3062,"nodeType":"ImportDirective","scope":3829,"sourceUnit":1406,"src":"254:66:31","symbolAliases":[],"unitAlias":""},{"absolutePath":"@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol","file":"@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol","id":3063,"nodeType":"ImportDirective","scope":3829,"sourceUnit":1384,"src":"322:69:31","symbolAliases":[],"unitAlias":""},{"absolutePath":"@uniswap/v3-periphery/contracts/interfaces/INonfungiblePositionManager.sol","file":"@uniswap/v3-periphery/contracts/interfaces/INonfungiblePositionManager.sol","id":3064,"nodeType":"ImportDirective","scope":3829,"sourceUnit":2619,"src":"393:84:31","symbolAliases":[],"unitAlias":""},{"absolutePath":"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol","file":"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol","id":3065,"nodeType":"ImportDirective","scope":3829,"sourceUnit":2776,"src":"479:68:31","symbolAliases":[],"unitAlias":""},{"absolutePath":"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol","file":"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol","id":3066,"nodeType":"ImportDirective","scope":3829,"sourceUnit":3056,"src":"549:70:31","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":3075,"linearizedBaseContracts":[3075],"name":"IWETH","nodeType":"ContractDefinition","nodes":[{"functionSelector":"d0e30db0","id":3069,"implemented":false,"kind":"function","modifiers":[],"name":"deposit","nodeType":"FunctionDefinition","parameters":{"id":3067,"nodeType":"ParameterList","parameters":[],"src":"662:2:31"},"returnParameters":{"id":3068,"nodeType":"ParameterList","parameters":[],"src":"681:0:31"},"scope":3075,"src":"646:36:31","stateMutability":"payable","virtual":false,"visibility":"external"},{"functionSelector":"2e1a7d4d","id":3074,"implemented":false,"kind":"function","modifiers":[],"name":"withdraw","nodeType":"FunctionDefinition","parameters":{"id":3072,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3071,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":3074,"src":"706:7:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3070,"name":"uint256","nodeType":"ElementaryTypeName","src":"706:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"705:9:31"},"returnParameters":{"id":3073,"nodeType":"ParameterList","parameters":[],"src":"723:0:31"},"scope":3075,"src":"688:36:31","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":3829,"src":"623:104:31"},{"abstract":false,"baseContracts":[{"baseName":{"id":3077,"name":"Ownable","nodeType":"UserDefinedTypeName","referencedDeclaration":109,"src":"891:7:31","typeDescriptions":{"typeIdentifier":"t_contract$_Ownable_$109","typeString":"contract Ownable"}},"id":3078,"nodeType":"InheritanceSpecifier","src":"891:7:31"}],"contractDependencies":[109,1260],"contractKind":"contract","documentation":{"id":3076,"nodeType":"StructuredDocumentation","src":"731:130:31","text":" @title BaselineMinimal\n @notice نسخه حداقلی قرارداد مدیریت نقدینگی بیس‌لاین"},"fullyImplemented":true,"id":3828,"linearizedBaseContracts":[3828,109,1260],"name":"BaselineMinimal","nodeType":"ContractDefinition","nodes":[{"id":3081,"libraryName":{"id":3079,"name":"SafeERC20","nodeType":"UserDefinedTypeName","referencedDeclaration":767,"src":"912:9:31","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20_$767","typeString":"library SafeERC20"}},"nodeType":"UsingForDirective","src":"906:27:31","typeName":{"id":3080,"name":"IERC20","nodeType":"UserDefinedTypeName","referencedDeclaration":554,"src":"926:6:31","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$554","typeString":"contract IERC20"}}},{"constant":false,"functionSelector":"c45a0155","id":3083,"mutability":"immutable","name":"factory","nodeType":"VariableDeclaration","scope":3828,"src":"994:42:31","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3Factory_$1383","typeString":"contract IUniswapV3Factory"},"typeName":{"id":3082,"name":"IUniswapV3Factory","nodeType":"UserDefinedTypeName","referencedDeclaration":1383,"src":"994:17:31","typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3Factory_$1383","typeString":"contract IUniswapV3Factory"}},"visibility":"public"},{"constant":false,"functionSelector":"791b98bc","id":3085,"mutability":"immutable","name":"positionManager","nodeType":"VariableDeclaration","scope":3828,"src":"1043:60:31","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_INonfungiblePositionManager_$2618","typeString":"contract INonfungiblePositionManager"},"typeName":{"id":3084,"name":"INonfungiblePositionManager","nodeType":"UserDefinedTypeName","referencedDeclaration":2618,"src":"1043:27:31","typeDescriptions":{"typeIdentifier":"t_contract$_INonfungiblePositionManager_$2618","typeString":"contract INonfungiblePositionManager"}},"visibility":"public"},{"constant":false,"functionSelector":"c31c9c07","id":3087,"mutability":"immutable","name":"swapRouter","nodeType":"VariableDeclaration","scope":3828,"src":"1110:39:31","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_ISwapRouter_$2775","typeString":"contract ISwapRouter"},"typeName":{"id":3086,"name":"ISwapRouter","nodeType":"UserDefinedTypeName","referencedDeclaration":2775,"src":"1110:11:31","typeDescriptions":{"typeIdentifier":"t_contract$_ISwapRouter_$2775","typeString":"contract ISwapRouter"}},"visibility":"public"},{"constant":false,"functionSelector":"0dfe1681","id":3089,"mutability":"immutable","name":"token0","nodeType":"VariableDeclaration","scope":3828,"src":"1156:31:31","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3088,"name":"address","nodeType":"ElementaryTypeName","src":"1156:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"public"},{"constant":false,"functionSelector":"d21220a7","id":3091,"mutability":"immutable","name":"token1","nodeType":"VariableDeclaration","scope":3828,"src":"1194:31:31","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3090,"name":"address","nodeType":"ElementaryTypeName","src":"1194:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"public"},{"constant":false,"functionSelector":"ddca3f43","id":3093,"mutability":"immutable","name":"fee","nodeType":"VariableDeclaration","scope":3828,"src":"1232:27:31","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"},"typeName":{"id":3092,"name":"uint24","nodeType":"ElementaryTypeName","src":"1232:6:31","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"visibility":"public"},{"constant":false,"functionSelector":"d0c93a7c","id":3095,"mutability":"immutable","name":"tickSpacing","nodeType":"VariableDeclaration","scope":3828,"src":"1266:34:31","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":3094,"name":"int24","nodeType":"ElementaryTypeName","src":"1266:5:31","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"public"},{"constant":false,"functionSelector":"009a9b7b","id":3097,"mutability":"mutable","name":"currentTokenId","nodeType":"VariableDeclaration","scope":3828,"src":"1377:29:31","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3096,"name":"uint256","nodeType":"ElementaryTypeName","src":"1377:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"functionSelector":"75a6a7a9","id":3099,"mutability":"mutable","name":"hasPosition","nodeType":"VariableDeclaration","scope":3828,"src":"1413:23:31","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3098,"name":"bool","nodeType":"ElementaryTypeName","src":"1413:4:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"public"},{"constant":false,"functionSelector":"9b1344ac","id":3101,"mutability":"mutable","name":"lowerTick","nodeType":"VariableDeclaration","scope":3828,"src":"1443:22:31","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":3100,"name":"int24","nodeType":"ElementaryTypeName","src":"1443:5:31","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"public"},{"constant":false,"functionSelector":"727dd228","id":3103,"mutability":"mutable","name":"upperTick","nodeType":"VariableDeclaration","scope":3828,"src":"1472:22:31","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":3102,"name":"int24","nodeType":"ElementaryTypeName","src":"1472:5:31","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"public"},{"anonymous":false,"id":3111,"name":"PositionChanged","nodeType":"EventDefinition","parameters":{"id":3110,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3105,"indexed":false,"mutability":"mutable","name":"hasPosition","nodeType":"VariableDeclaration","scope":3111,"src":"1558:16:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3104,"name":"bool","nodeType":"ElementaryTypeName","src":"1558:4:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3107,"indexed":false,"mutability":"mutable","name":"lowerTick","nodeType":"VariableDeclaration","scope":3111,"src":"1576:15:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":3106,"name":"int24","nodeType":"ElementaryTypeName","src":"1576:5:31","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":3109,"indexed":false,"mutability":"mutable","name":"upperTick","nodeType":"VariableDeclaration","scope":3111,"src":"1593:15:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":3108,"name":"int24","nodeType":"ElementaryTypeName","src":"1593:5:31","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"}],"src":"1557:52:31"},"src":"1536:74:31"},{"anonymous":false,"id":3125,"name":"BaselineAdjustmentMetrics","nodeType":"EventDefinition","parameters":{"id":3124,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3113,"indexed":false,"mutability":"mutable","name":"timestamp","nodeType":"VariableDeclaration","scope":3125,"src":"1658:17:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3112,"name":"uint256","nodeType":"ElementaryTypeName","src":"1658:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3115,"indexed":false,"mutability":"mutable","name":"currentPrice","nodeType":"VariableDeclaration","scope":3125,"src":"1686:20:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3114,"name":"uint256","nodeType":"ElementaryTypeName","src":"1686:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3117,"indexed":false,"mutability":"mutable","name":"currentTick","nodeType":"VariableDeclaration","scope":3125,"src":"1717:17:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":3116,"name":"int24","nodeType":"ElementaryTypeName","src":"1717:5:31","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":3119,"indexed":false,"mutability":"mutable","name":"finalTickLower","nodeType":"VariableDeclaration","scope":3125,"src":"1745:20:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":3118,"name":"int24","nodeType":"ElementaryTypeName","src":"1745:5:31","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":3121,"indexed":false,"mutability":"mutable","name":"finalTickUpper","nodeType":"VariableDeclaration","scope":3125,"src":"1776:20:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":3120,"name":"int24","nodeType":"ElementaryTypeName","src":"1776:5:31","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":3123,"indexed":false,"mutability":"mutable","name":"adjusted","nodeType":"VariableDeclaration","scope":3125,"src":"1807:13:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3122,"name":"bool","nodeType":"ElementaryTypeName","src":"1807:4:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1647:180:31"},"src":"1616:212:31"},{"anonymous":false,"id":3131,"name":"TokensSwapped","nodeType":"EventDefinition","parameters":{"id":3130,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3127,"indexed":false,"mutability":"mutable","name":"amountIn","nodeType":"VariableDeclaration","scope":3131,"src":"1854:16:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3126,"name":"uint256","nodeType":"ElementaryTypeName","src":"1854:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3129,"indexed":false,"mutability":"mutable","name":"amountOut","nodeType":"VariableDeclaration","scope":3131,"src":"1872:17:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3128,"name":"uint256","nodeType":"ElementaryTypeName","src":"1872:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1853:37:31"},"src":"1834:57:31"},{"body":{"id":3322,"nodeType":"Block","src":"2113:1344:31","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3152,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3147,"name":"_factory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3133,"src":"2132:8:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":3150,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2152:1:31","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3149,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2144:7:31","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3148,"name":"address","nodeType":"ElementaryTypeName","src":"2144:7:31","typeDescriptions":{}}},"id":3151,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2144:10:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"2132:22:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e76616c696420666163746f72792061646472657373","id":3153,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2156:25:31","typeDescriptions":{"typeIdentifier":"t_stringliteral_16cfceb364b99915d337c26d8ba3bdcbce06c3595a535f586d679980d6a44d7d","typeString":"literal_string \"Invalid factory address\""},"value":"Invalid factory address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_16cfceb364b99915d337c26d8ba3bdcbce06c3595a535f586d679980d6a44d7d","typeString":"literal_string \"Invalid factory address\""}],"id":3146,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2124:7:31","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3154,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2124:58:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3155,"nodeType":"ExpressionStatement","src":"2124:58:31"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3162,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3157,"name":"_positionManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3135,"src":"2201:16:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":3160,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2229:1:31","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3159,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2221:7:31","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3158,"name":"address","nodeType":"ElementaryTypeName","src":"2221:7:31","typeDescriptions":{}}},"id":3161,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2221:10:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"2201:30:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e76616c696420706f736974696f6e206d616e61676572","id":3163,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2233:26:31","typeDescriptions":{"typeIdentifier":"t_stringliteral_c93e361b037cd714035f17dd926b952b8bfa26f6ec37918364159fab925b85cc","typeString":"literal_string \"Invalid position manager\""},"value":"Invalid position manager"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c93e361b037cd714035f17dd926b952b8bfa26f6ec37918364159fab925b85cc","typeString":"literal_string \"Invalid position manager\""}],"id":3156,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2193:7:31","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3164,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2193:67:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3165,"nodeType":"ExpressionStatement","src":"2193:67:31"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3172,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3167,"name":"_swapRouter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3137,"src":"2279:11:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":3170,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2302:1:31","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3169,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2294:7:31","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3168,"name":"address","nodeType":"ElementaryTypeName","src":"2294:7:31","typeDescriptions":{}}},"id":3171,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2294:10:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"2279:25:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e76616c6964207377617020726f75746572","id":3173,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2306:21:31","typeDescriptions":{"typeIdentifier":"t_stringliteral_a80ff0b859aa4f4f9d71f3bd675f38ba96b010e98f529811ec38e8b4da949a9c","typeString":"literal_string \"Invalid swap router\""},"value":"Invalid swap router"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_a80ff0b859aa4f4f9d71f3bd675f38ba96b010e98f529811ec38e8b4da949a9c","typeString":"literal_string \"Invalid swap router\""}],"id":3166,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2271:7:31","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3174,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2271:57:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3175,"nodeType":"ExpressionStatement","src":"2271:57:31"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3182,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3177,"name":"_token0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3139,"src":"2347:7:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":3180,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2366:1:31","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3179,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2358:7:31","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3178,"name":"address","nodeType":"ElementaryTypeName","src":"2358:7:31","typeDescriptions":{}}},"id":3181,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2358:10:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"2347:21:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e76616c696420746f6b656e30","id":3183,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2370:16:31","typeDescriptions":{"typeIdentifier":"t_stringliteral_b6d5a7bdcfb780f231026790364d4d2382ce8e57553b444e7dcd9b8bf1483029","typeString":"literal_string \"Invalid token0\""},"value":"Invalid token0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b6d5a7bdcfb780f231026790364d4d2382ce8e57553b444e7dcd9b8bf1483029","typeString":"literal_string \"Invalid token0\""}],"id":3176,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2339:7:31","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3184,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2339:48:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3185,"nodeType":"ExpressionStatement","src":"2339:48:31"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3192,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3187,"name":"_token1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3141,"src":"2406:7:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":3190,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2425:1:31","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3189,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2417:7:31","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3188,"name":"address","nodeType":"ElementaryTypeName","src":"2417:7:31","typeDescriptions":{}}},"id":3191,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2417:10:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"2406:21:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e76616c696420746f6b656e31","id":3193,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2429:16:31","typeDescriptions":{"typeIdentifier":"t_stringliteral_cdc277a530a3ae06e75e0b2a5974d2c1da8131c539ac243fcb5311ed1b234a7c","typeString":"literal_string \"Invalid token1\""},"value":"Invalid token1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cdc277a530a3ae06e75e0b2a5974d2c1da8131c539ac243fcb5311ed1b234a7c","typeString":"literal_string \"Invalid token1\""}],"id":3186,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2398:7:31","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3194,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2398:48:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3195,"nodeType":"ExpressionStatement","src":"2398:48:31"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint24","typeString":"uint24"},"id":3199,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3197,"name":"_fee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3143,"src":"2465:4:31","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3198,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2472:1:31","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2465:8:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e76616c696420666565","id":3200,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2475:13:31","typeDescriptions":{"typeIdentifier":"t_stringliteral_7ff6289abbb0687399ebc1aafeab18832fc5a110fcdbd805e18f72d422711e7a","typeString":"literal_string \"Invalid fee\""},"value":"Invalid fee"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_7ff6289abbb0687399ebc1aafeab18832fc5a110fcdbd805e18f72d422711e7a","typeString":"literal_string \"Invalid fee\""}],"id":3196,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2457:7:31","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3201,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2457:32:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3202,"nodeType":"ExpressionStatement","src":"2457:32:31"},{"expression":{"id":3207,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3203,"name":"factory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3083,"src":"2502:7:31","typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3Factory_$1383","typeString":"contract IUniswapV3Factory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":3205,"name":"_factory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3133,"src":"2530:8:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3204,"name":"IUniswapV3Factory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1383,"src":"2512:17:31","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IUniswapV3Factory_$1383_$","typeString":"type(contract IUniswapV3Factory)"}},"id":3206,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2512:27:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3Factory_$1383","typeString":"contract IUniswapV3Factory"}},"src":"2502:37:31","typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3Factory_$1383","typeString":"contract IUniswapV3Factory"}},"id":3208,"nodeType":"ExpressionStatement","src":"2502:37:31"},{"expression":{"id":3213,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3209,"name":"positionManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3085,"src":"2550:15:31","typeDescriptions":{"typeIdentifier":"t_contract$_INonfungiblePositionManager_$2618","typeString":"contract INonfungiblePositionManager"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":3211,"name":"_positionManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3135,"src":"2596:16:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3210,"name":"INonfungiblePositionManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2618,"src":"2568:27:31","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_INonfungiblePositionManager_$2618_$","typeString":"type(contract INonfungiblePositionManager)"}},"id":3212,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2568:45:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_INonfungiblePositionManager_$2618","typeString":"contract INonfungiblePositionManager"}},"src":"2550:63:31","typeDescriptions":{"typeIdentifier":"t_contract$_INonfungiblePositionManager_$2618","typeString":"contract INonfungiblePositionManager"}},"id":3214,"nodeType":"ExpressionStatement","src":"2550:63:31"},{"expression":{"id":3219,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3215,"name":"swapRouter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3087,"src":"2624:10:31","typeDescriptions":{"typeIdentifier":"t_contract$_ISwapRouter_$2775","typeString":"contract ISwapRouter"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":3217,"name":"_swapRouter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3137,"src":"2649:11:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3216,"name":"ISwapRouter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2775,"src":"2637:11:31","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ISwapRouter_$2775_$","typeString":"type(contract ISwapRouter)"}},"id":3218,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2637:24:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_ISwapRouter_$2775","typeString":"contract ISwapRouter"}},"src":"2624:37:31","typeDescriptions":{"typeIdentifier":"t_contract$_ISwapRouter_$2775","typeString":"contract ISwapRouter"}},"id":3220,"nodeType":"ExpressionStatement","src":"2624:37:31"},{"expression":{"id":3223,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3221,"name":"token0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3089,"src":"2672:6:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3222,"name":"_token0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3139,"src":"2681:7:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2672:16:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3224,"nodeType":"ExpressionStatement","src":"2672:16:31"},{"expression":{"id":3227,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3225,"name":"token1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3091,"src":"2699:6:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3226,"name":"_token1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3141,"src":"2708:7:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2699:16:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3228,"nodeType":"ExpressionStatement","src":"2699:16:31"},{"expression":{"id":3231,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3229,"name":"fee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3093,"src":"2726:3:31","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3230,"name":"_fee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3143,"src":"2732:4:31","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"src":"2726:10:31","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"id":3232,"nodeType":"ExpressionStatement","src":"2726:10:31"},{"assignments":[3234],"declarations":[{"constant":false,"id":3234,"mutability":"mutable","name":"poolAddress","nodeType":"VariableDeclaration","scope":3322,"src":"2816:19:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3233,"name":"address","nodeType":"ElementaryTypeName","src":"2816:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":3243,"initialValue":{"arguments":[{"id":3239,"name":"_token0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3139,"src":"2888:7:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3240,"name":"_token1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3141,"src":"2910:7:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3241,"name":"_fee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3143,"src":"2932:4:31","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint24","typeString":"uint24"}],"expression":{"arguments":[{"id":3236,"name":"_factory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3133,"src":"2856:8:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3235,"name":"IUniswapV3Factory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1383,"src":"2838:17:31","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IUniswapV3Factory_$1383_$","typeString":"type(contract IUniswapV3Factory)"}},"id":3237,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2838:27:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3Factory_$1383","typeString":"contract IUniswapV3Factory"}},"id":3238,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"getPool","nodeType":"MemberAccess","referencedDeclaration":1356,"src":"2838:35:31","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$_t_uint24_$returns$_t_address_$","typeString":"function (address,address,uint24) view external returns (address)"}},"id":3242,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2838:109:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2816:131:31"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3250,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3245,"name":"poolAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3234,"src":"2966:11:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":3248,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2989:1:31","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3247,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2981:7:31","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3246,"name":"address","nodeType":"ElementaryTypeName","src":"2981:7:31","typeDescriptions":{}}},"id":3249,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2981:10:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"2966:25:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"506f6f6c20646f6573206e6f74206578697374","id":3251,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2993:21:31","typeDescriptions":{"typeIdentifier":"t_stringliteral_5431fb1d188dcb2accc598cd1f0bfc0c6d8ac1fdd8f589953b20179c9a903b37","typeString":"literal_string \"Pool does not exist\""},"value":"Pool does not exist"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5431fb1d188dcb2accc598cd1f0bfc0c6d8ac1fdd8f589953b20179c9a903b37","typeString":"literal_string \"Pool does not exist\""}],"id":3244,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2958:7:31","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3252,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2958:57:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3253,"nodeType":"ExpressionStatement","src":"2958:57:31"},{"expression":{"id":3260,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3254,"name":"tickSpacing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3095,"src":"3026:11:31","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":3256,"name":"poolAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3234,"src":"3055:11:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3255,"name":"IUniswapV3Pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1405,"src":"3040:14:31","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IUniswapV3Pool_$1405_$","typeString":"type(contract IUniswapV3Pool)"}},"id":3257,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3040:27:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3Pool_$1405","typeString":"contract IUniswapV3Pool"}},"id":3258,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"tickSpacing","nodeType":"MemberAccess","referencedDeclaration":1712,"src":"3040:39:31","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_int24_$","typeString":"function () view external returns (int24)"}},"id":3259,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3040:41:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"src":"3026:55:31","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"id":3261,"nodeType":"ExpressionStatement","src":"3026:55:31"},{"expression":{"arguments":[{"arguments":[{"id":3268,"name":"_positionManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3135,"src":"3182:16:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3267,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3174:7:31","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3266,"name":"address","nodeType":"ElementaryTypeName","src":"3174:7:31","typeDescriptions":{}}},"id":3269,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3174:25:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"arguments":[{"id":3272,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3206:7:31","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3271,"name":"uint256","nodeType":"ElementaryTypeName","src":"3206:7:31","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"}],"id":3270,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"3201:4:31","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3273,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3201:13:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint256","typeString":"type(uint256)"}},"id":3274,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"max","nodeType":"MemberAccess","src":"3201:17:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":3263,"name":"_token0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3139,"src":"3157:7:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3262,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":554,"src":"3150:6:31","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$554_$","typeString":"type(contract IERC20)"}},"id":3264,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3150:15:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$554","typeString":"contract IERC20"}},"id":3265,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":523,"src":"3150:23:31","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":3275,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3150:69:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3276,"nodeType":"ExpressionStatement","src":"3150:69:31"},{"expression":{"arguments":[{"arguments":[{"id":3283,"name":"_positionManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3135,"src":"3262:16:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3282,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3254:7:31","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3281,"name":"address","nodeType":"ElementaryTypeName","src":"3254:7:31","typeDescriptions":{}}},"id":3284,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3254:25:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"arguments":[{"id":3287,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3286:7:31","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3286,"name":"uint256","nodeType":"ElementaryTypeName","src":"3286:7:31","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"}],"id":3285,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"3281:4:31","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3288,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3281:13:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint256","typeString":"type(uint256)"}},"id":3289,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"max","nodeType":"MemberAccess","src":"3281:17:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":3278,"name":"_token1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3141,"src":"3237:7:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3277,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":554,"src":"3230:6:31","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$554_$","typeString":"type(contract IERC20)"}},"id":3279,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3230:15:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$554","typeString":"contract IERC20"}},"id":3280,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":523,"src":"3230:23:31","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":3290,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3230:69:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3291,"nodeType":"ExpressionStatement","src":"3230:69:31"},{"expression":{"arguments":[{"arguments":[{"id":3298,"name":"_swapRouter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3137,"src":"3342:11:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3297,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3334:7:31","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3296,"name":"address","nodeType":"ElementaryTypeName","src":"3334:7:31","typeDescriptions":{}}},"id":3299,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3334:20:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"arguments":[{"id":3302,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3361:7:31","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3301,"name":"uint256","nodeType":"ElementaryTypeName","src":"3361:7:31","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"}],"id":3300,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"3356:4:31","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3303,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3356:13:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint256","typeString":"type(uint256)"}},"id":3304,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"max","nodeType":"MemberAccess","src":"3356:17:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":3293,"name":"_token0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3139,"src":"3317:7:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3292,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":554,"src":"3310:6:31","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$554_$","typeString":"type(contract IERC20)"}},"id":3294,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3310:15:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$554","typeString":"contract IERC20"}},"id":3295,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":523,"src":"3310:23:31","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":3305,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3310:64:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3306,"nodeType":"ExpressionStatement","src":"3310:64:31"},{"expression":{"arguments":[{"arguments":[{"id":3313,"name":"_swapRouter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3137,"src":"3417:11:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3312,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3409:7:31","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3311,"name":"address","nodeType":"ElementaryTypeName","src":"3409:7:31","typeDescriptions":{}}},"id":3314,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3409:20:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"arguments":[{"id":3317,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3436:7:31","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3316,"name":"uint256","nodeType":"ElementaryTypeName","src":"3436:7:31","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"}],"id":3315,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"3431:4:31","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3318,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3431:13:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint256","typeString":"type(uint256)"}},"id":3319,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"max","nodeType":"MemberAccess","src":"3431:17:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":3308,"name":"_token1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3141,"src":"3392:7:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3307,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":554,"src":"3385:6:31","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$554_$","typeString":"type(contract IERC20)"}},"id":3309,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3385:15:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$554","typeString":"contract IERC20"}},"id":3310,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":523,"src":"3385:23:31","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":3320,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3385:64:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3321,"nodeType":"ExpressionStatement","src":"3385:64:31"}]},"id":3323,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nodeType":"FunctionDefinition","parameters":{"id":3144,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3133,"mutability":"mutable","name":"_factory","nodeType":"VariableDeclaration","scope":3323,"src":"1950:16:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3132,"name":"address","nodeType":"ElementaryTypeName","src":"1950:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3135,"mutability":"mutable","name":"_positionManager","nodeType":"VariableDeclaration","scope":3323,"src":"1977:24:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3134,"name":"address","nodeType":"ElementaryTypeName","src":"1977:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3137,"mutability":"mutable","name":"_swapRouter","nodeType":"VariableDeclaration","scope":3323,"src":"2012:19:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3136,"name":"address","nodeType":"ElementaryTypeName","src":"2012:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3139,"mutability":"mutable","name":"_token0","nodeType":"VariableDeclaration","scope":3323,"src":"2042:15:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3138,"name":"address","nodeType":"ElementaryTypeName","src":"2042:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3141,"mutability":"mutable","name":"_token1","nodeType":"VariableDeclaration","scope":3323,"src":"2068:15:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3140,"name":"address","nodeType":"ElementaryTypeName","src":"2068:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3143,"mutability":"mutable","name":"_fee","nodeType":"VariableDeclaration","scope":3323,"src":"2094:11:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"},"typeName":{"id":3142,"name":"uint24","nodeType":"ElementaryTypeName","src":"2094:6:31","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"visibility":"internal"}],"src":"1939:173:31"},"returnParameters":{"id":3145,"nodeType":"ParameterList","parameters":[],"src":"2113:0:31"},"scope":3828,"src":"1928:1529:31","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":3351,"nodeType":"Block","src":"3534:372:31","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":3327,"name":"token1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3091,"src":"3588:6:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3326,"name":"IWETH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3075,"src":"3582:5:31","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IWETH_$3075_$","typeString":"type(contract IWETH)"}},"id":3328,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3582:13:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IWETH_$3075","typeString":"contract IWETH"}},"id":3329,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"deposit","nodeType":"MemberAccess","referencedDeclaration":3069,"src":"3582:21:31","typeDescriptions":{"typeIdentifier":"t_function_external_payable$__$returns$__$","typeString":"function () payable external"}},"id":3332,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"expression":{"id":3330,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3611:3:31","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3331,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"value","nodeType":"MemberAccess","src":"3611:9:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"3582:39:31","typeDescriptions":{"typeIdentifier":"t_function_external_payable$__$returns$__$value","typeString":"function () payable external"}},"id":3333,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3582:41:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3334,"nodeType":"ExpressionStatement","src":"3582:41:31"},{"assignments":[3336],"declarations":[{"constant":false,"id":3336,"mutability":"mutable","name":"halfAmount","nodeType":"VariableDeclaration","scope":3351,"src":"3688:18:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3335,"name":"uint256","nodeType":"ElementaryTypeName","src":"3688:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3341,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3340,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3337,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3709:3:31","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3338,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"value","nodeType":"MemberAccess","src":"3709:9:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"32","id":3339,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3721:1:31","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"3709:13:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3688:34:31"},{"expression":{"arguments":[{"id":3343,"name":"token1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3091,"src":"3755:6:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3344,"name":"token0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3089,"src":"3763:6:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3345,"name":"halfAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3336,"src":"3771:10:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3342,"name":"_swapExactInputSingle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3396,"src":"3733:21:31","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_uint256_$","typeString":"function (address,address,uint256) returns (uint256)"}},"id":3346,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3733:49:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3347,"nodeType":"ExpressionStatement","src":"3733:49:31"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":3348,"name":"adjustLiquidityWithCurrentPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3492,"src":"3865:31:31","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":3349,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3865:33:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3350,"nodeType":"ExpressionStatement","src":"3865:33:31"}]},"id":3352,"implemented":true,"kind":"receive","modifiers":[],"name":"","nodeType":"FunctionDefinition","parameters":{"id":3324,"nodeType":"ParameterList","parameters":[],"src":"3514:2:31"},"returnParameters":{"id":3325,"nodeType":"ParameterList","parameters":[],"src":"3534:0:31"},"scope":3828,"src":"3507:399:31","stateMutability":"payable","virtual":false,"visibility":"external"},{"body":{"id":3395,"nodeType":"Block","src":"4103:545:31","statements":[{"assignments":[3366],"declarations":[{"constant":false,"id":3366,"mutability":"mutable","name":"params","nodeType":"VariableDeclaration","scope":3395,"src":"4114:48:31","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_ExactInputSingleParams_$2703_memory_ptr","typeString":"struct ISwapRouter.ExactInputSingleParams"},"typeName":{"id":3365,"name":"ISwapRouter.ExactInputSingleParams","nodeType":"UserDefinedTypeName","referencedDeclaration":2703,"src":"4114:34:31","typeDescriptions":{"typeIdentifier":"t_struct$_ExactInputSingleParams_$2703_storage_ptr","typeString":"struct ISwapRouter.ExactInputSingleParams"}},"visibility":"internal"}],"id":3382,"initialValue":{"arguments":[{"id":3369,"name":"tokenIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3354,"src":"4242:7:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3370,"name":"tokenOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3356,"src":"4278:8:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3371,"name":"fee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3093,"src":"4310:3:31","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},{"arguments":[{"id":3374,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"4351:4:31","typeDescriptions":{"typeIdentifier":"t_contract$_BaselineMinimal_$3828","typeString":"contract BaselineMinimal"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_BaselineMinimal_$3828","typeString":"contract BaselineMinimal"}],"id":3373,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4343:7:31","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3372,"name":"address","nodeType":"ElementaryTypeName","src":"4343:7:31","typeDescriptions":{}}},"id":3375,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4343:13:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"expression":{"id":3376,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"4385:5:31","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":3377,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"timestamp","nodeType":"MemberAccess","src":"4385:15:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3378,"name":"amountIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3358,"src":"4429:8:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"30","id":3379,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4474:1:31","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":3380,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4513:1:31","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint24","typeString":"uint24"},{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"expression":{"id":3367,"name":"ISwapRouter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2775,"src":"4165:11:31","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ISwapRouter_$2775_$","typeString":"type(contract ISwapRouter)"}},"id":3368,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"ExactInputSingleParams","nodeType":"MemberAccess","referencedDeclaration":2703,"src":"4165:48:31","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_ExactInputSingleParams_$2703_storage_ptr_$","typeString":"type(struct ISwapRouter.ExactInputSingleParams storage pointer)"}},"id":3381,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"names":["tokenIn","tokenOut","fee","recipient","deadline","amountIn","amountOutMinimum","sqrtPriceLimitX96"],"nodeType":"FunctionCall","src":"4165:365:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_ExactInputSingleParams_$2703_memory_ptr","typeString":"struct ISwapRouter.ExactInputSingleParams memory"}},"nodeType":"VariableDeclarationStatement","src":"4114:416:31"},{"expression":{"id":3388,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3383,"name":"amountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3361,"src":"4543:9:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":3386,"name":"params","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3366,"src":"4583:6:31","typeDescriptions":{"typeIdentifier":"t_struct$_ExactInputSingleParams_$2703_memory_ptr","typeString":"struct ISwapRouter.ExactInputSingleParams memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_ExactInputSingleParams_$2703_memory_ptr","typeString":"struct ISwapRouter.ExactInputSingleParams memory"}],"expression":{"id":3384,"name":"swapRouter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3087,"src":"4555:10:31","typeDescriptions":{"typeIdentifier":"t_contract$_ISwapRouter_$2775","typeString":"contract ISwapRouter"}},"id":3385,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"exactInputSingle","nodeType":"MemberAccess","referencedDeclaration":2711,"src":"4555:27:31","typeDescriptions":{"typeIdentifier":"t_function_external_payable$_t_struct$_ExactInputSingleParams_$2703_memory_ptr_$returns$_t_uint256_$","typeString":"function (struct ISwapRouter.ExactInputSingleParams memory) payable external returns (uint256)"}},"id":3387,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4555:35:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4543:47:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3389,"nodeType":"ExpressionStatement","src":"4543:47:31"},{"eventCall":{"arguments":[{"id":3391,"name":"amountIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3358,"src":"4620:8:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3392,"name":"amountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3361,"src":"4630:9:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3390,"name":"TokensSwapped","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3131,"src":"4606:13:31","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256)"}},"id":3393,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4606:34:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3394,"nodeType":"EmitStatement","src":"4601:39:31"}]},"id":3396,"implemented":true,"kind":"function","modifiers":[],"name":"_swapExactInputSingle","nodeType":"FunctionDefinition","parameters":{"id":3359,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3354,"mutability":"mutable","name":"tokenIn","nodeType":"VariableDeclaration","scope":3396,"src":"3989:15:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3353,"name":"address","nodeType":"ElementaryTypeName","src":"3989:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3356,"mutability":"mutable","name":"tokenOut","nodeType":"VariableDeclaration","scope":3396,"src":"4015:16:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3355,"name":"address","nodeType":"ElementaryTypeName","src":"4015:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3358,"mutability":"mutable","name":"amountIn","nodeType":"VariableDeclaration","scope":3396,"src":"4042:16:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3357,"name":"uint256","nodeType":"ElementaryTypeName","src":"4042:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3978:87:31"},"returnParameters":{"id":3362,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3361,"mutability":"mutable","name":"amountOut","nodeType":"VariableDeclaration","scope":3396,"src":"4084:17:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3360,"name":"uint256","nodeType":"ElementaryTypeName","src":"4084:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4083:19:31"},"scope":3828,"src":"3948:700:31","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3491,"nodeType":"Block","src":"4766:1162:31","statements":[{"assignments":[3400],"declarations":[{"constant":false,"id":3400,"mutability":"mutable","name":"pool","nodeType":"VariableDeclaration","scope":3491,"src":"4846:12:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3399,"name":"address","nodeType":"ElementaryTypeName","src":"4846:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":3407,"initialValue":{"arguments":[{"id":3403,"name":"token0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3089,"src":"4877:6:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3404,"name":"token1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3091,"src":"4885:6:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3405,"name":"fee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3093,"src":"4893:3:31","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint24","typeString":"uint24"}],"expression":{"id":3401,"name":"factory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3083,"src":"4861:7:31","typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3Factory_$1383","typeString":"contract IUniswapV3Factory"}},"id":3402,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"getPool","nodeType":"MemberAccess","referencedDeclaration":1356,"src":"4861:15:31","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$_t_uint24_$returns$_t_address_$","typeString":"function (address,address,uint24) view external returns (address)"}},"id":3406,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4861:36:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"4846:51:31"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3414,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3409,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3400,"src":"4916:4:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":3412,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4932:1:31","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3411,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4924:7:31","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3410,"name":"address","nodeType":"ElementaryTypeName","src":"4924:7:31","typeDescriptions":{}}},"id":3413,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4924:10:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"4916:18:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"506f6f6c206e6f7420666f756e64","id":3415,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4936:16:31","typeDescriptions":{"typeIdentifier":"t_stringliteral_fe7e6a141e3b44702009b5d1e2c3268e1a572059382817edb68e0f82d474906f","typeString":"literal_string \"Pool not found\""},"value":"Pool not found"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_fe7e6a141e3b44702009b5d1e2c3268e1a572059382817edb68e0f82d474906f","typeString":"literal_string \"Pool not found\""}],"id":3408,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4908:7:31","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3416,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4908:45:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3417,"nodeType":"ExpressionStatement","src":"4908:45:31"},{"assignments":[3419],"declarations":[{"constant":false,"id":3419,"mutability":"mutable","name":"sqrtPriceX96","nodeType":"VariableDeclaration","scope":3491,"src":"4966:20:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":3418,"name":"uint160","nodeType":"ElementaryTypeName","src":"4966:7:31","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"}],"id":3420,"nodeType":"VariableDeclarationStatement","src":"4966:20:31"},{"assignments":[3422],"declarations":[{"constant":false,"id":3422,"mutability":"mutable","name":"currentTick","nodeType":"VariableDeclaration","scope":3491,"src":"4997:17:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":3421,"name":"int24","nodeType":"ElementaryTypeName","src":"4997:5:31","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"}],"id":3423,"nodeType":"VariableDeclarationStatement","src":"4997:17:31"},{"expression":{"id":3432,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"components":[{"id":3424,"name":"sqrtPriceX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3419,"src":"5026:12:31","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},{"id":3425,"name":"currentTick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3422,"src":"5040:11:31","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},null,null,null,null,null],"id":3426,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"5025:37:31","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint160_$_t_int24_$__$__$__$__$__$","typeString":"tuple(uint160,int24,,,,,)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":3428,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3400,"src":"5080:4:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3427,"name":"IUniswapV3Pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1405,"src":"5065:14:31","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IUniswapV3Pool_$1405_$","typeString":"type(contract IUniswapV3Pool)"}},"id":3429,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5065:20:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3Pool_$1405","typeString":"contract IUniswapV3Pool"}},"id":3430,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"slot0","nodeType":"MemberAccess","referencedDeclaration":1766,"src":"5065:26:31","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_uint160_$_t_int24_$_t_uint16_$_t_uint16_$_t_uint16_$_t_uint8_$_t_bool_$","typeString":"function () view external returns (uint160,int24,uint16,uint16,uint16,uint8,bool)"}},"id":3431,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5065:28:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint160_$_t_int24_$_t_uint16_$_t_uint16_$_t_uint16_$_t_uint8_$_t_bool_$","typeString":"tuple(uint160,int24,uint16,uint16,uint16,uint8,bool)"}},"src":"5025:68:31","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3433,"nodeType":"ExpressionStatement","src":"5025:68:31"},{"assignments":[3435],"declarations":[{"constant":false,"id":3435,"mutability":"mutable","name":"width","nodeType":"VariableDeclaration","scope":3491,"src":"5161:11:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":3434,"name":"int24","nodeType":"ElementaryTypeName","src":"5161:5:31","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"}],"id":3439,"initialValue":{"commonType":{"typeIdentifier":"t_int24","typeString":"int24"},"id":3438,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3436,"name":"tickSpacing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3095,"src":"5175:11:31","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"34","id":3437,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5189:1:31","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"5175:15:31","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"VariableDeclarationStatement","src":"5161:29:31"},{"assignments":[3441],"declarations":[{"constant":false,"id":3441,"mutability":"mutable","name":"newLowerTick","nodeType":"VariableDeclaration","scope":3491,"src":"5201:18:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":3440,"name":"int24","nodeType":"ElementaryTypeName","src":"5201:5:31","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"}],"id":3453,"initialValue":{"commonType":{"typeIdentifier":"t_int24","typeString":"int24"},"id":3452,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int24","typeString":"int24"},"id":3449,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int24","typeString":"int24"},"id":3446,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3442,"name":"currentTick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3422,"src":"5224:11:31","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_int24","typeString":"int24"},"id":3445,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3443,"name":"width","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3435,"src":"5238:5:31","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"32","id":3444,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5246:1:31","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"5238:9:31","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"src":"5224:23:31","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}}],"id":3447,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"5223:25:31","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3448,"name":"tickSpacing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3095,"src":"5251:11:31","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"src":"5223:39:31","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}}],"id":3450,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"5222:41:31","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3451,"name":"tickSpacing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3095,"src":"5279:11:31","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"src":"5222:68:31","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"VariableDeclarationStatement","src":"5201:89:31"},{"assignments":[3455],"declarations":[{"constant":false,"id":3455,"mutability":"mutable","name":"newUpperTick","nodeType":"VariableDeclaration","scope":3491,"src":"5301:18:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":3454,"name":"int24","nodeType":"ElementaryTypeName","src":"5301:5:31","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"}],"id":3467,"initialValue":{"commonType":{"typeIdentifier":"t_int24","typeString":"int24"},"id":3466,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int24","typeString":"int24"},"id":3463,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int24","typeString":"int24"},"id":3460,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3456,"name":"currentTick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3422,"src":"5324:11:31","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_int24","typeString":"int24"},"id":3459,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3457,"name":"width","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3435,"src":"5338:5:31","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"32","id":3458,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5346:1:31","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"5338:9:31","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"src":"5324:23:31","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}}],"id":3461,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"5323:25:31","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3462,"name":"tickSpacing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3095,"src":"5351:11:31","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"src":"5323:39:31","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}}],"id":3464,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"5322:41:31","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3465,"name":"tickSpacing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3095,"src":"5379:11:31","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"src":"5322:68:31","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"VariableDeclarationStatement","src":"5301:89:31"},{"condition":{"id":3468,"name":"hasPosition","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3099,"src":"5453:11:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3473,"nodeType":"IfStatement","src":"5449:61:31","trueBody":{"id":3472,"nodeType":"Block","src":"5466:44:31","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":3469,"name":"_removePosition","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3578,"src":"5481:15:31","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":3470,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5481:17:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3471,"nodeType":"ExpressionStatement","src":"5481:17:31"}]}},{"expression":{"arguments":[{"id":3475,"name":"newLowerTick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3441,"src":"5620:12:31","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},{"id":3476,"name":"newUpperTick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3455,"src":"5634:12:31","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int24","typeString":"int24"},{"typeIdentifier":"t_int24","typeString":"int24"}],"id":3474,"name":"_createPosition","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3689,"src":"5604:15:31","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_int24_$_t_int24_$returns$__$","typeString":"function (int24,int24)"}},"id":3477,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5604:43:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3478,"nodeType":"ExpressionStatement","src":"5604:43:31"},{"eventCall":{"arguments":[{"expression":{"id":3480,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"5746:5:31","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":3481,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"timestamp","nodeType":"MemberAccess","src":"5746:15:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"id":3483,"name":"sqrtPriceX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3419,"src":"5797:12:31","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":3482,"name":"_sqrtPriceX96ToPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3720,"src":"5776:20:31","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint160_$returns$_t_uint256_$","typeString":"function (uint160) pure returns (uint256)"}},"id":3484,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5776:34:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3485,"name":"currentTick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3422,"src":"5825:11:31","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},{"id":3486,"name":"newLowerTick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3441,"src":"5851:12:31","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},{"id":3487,"name":"newUpperTick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3455,"src":"5878:12:31","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},{"hexValue":"74727565","id":3488,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5905:4:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_int24","typeString":"int24"},{"typeIdentifier":"t_int24","typeString":"int24"},{"typeIdentifier":"t_int24","typeString":"int24"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":3479,"name":"BaselineAdjustmentMetrics","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3125,"src":"5706:25:31","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_uint256_$_t_int24_$_t_int24_$_t_int24_$_t_bool_$returns$__$","typeString":"function (uint256,uint256,int24,int24,int24,bool)"}},"id":3489,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5706:214:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3490,"nodeType":"EmitStatement","src":"5701:219:31"}]},"functionSelector":"62ca5772","id":3492,"implemented":true,"kind":"function","modifiers":[],"name":"adjustLiquidityWithCurrentPrice","nodeType":"FunctionDefinition","parameters":{"id":3397,"nodeType":"ParameterList","parameters":[],"src":"4756:2:31"},"returnParameters":{"id":3398,"nodeType":"ParameterList","parameters":[],"src":"4766:0:31"},"scope":3828,"src":"4716:1212:31","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":3577,"nodeType":"Block","src":"6008:1216:31","statements":[{"expression":{"arguments":[{"id":3496,"name":"hasPosition","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3099,"src":"6027:11:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4e6f20706f736974696f6e20746f2072656d6f7665","id":3497,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6040:23:31","typeDescriptions":{"typeIdentifier":"t_stringliteral_d3f3a127142a3a087ded95fcff040c1c8ace07bf5efa58badf473bbf6b2d666e","typeString":"literal_string \"No position to remove\""},"value":"No position to remove"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d3f3a127142a3a087ded95fcff040c1c8ace07bf5efa58badf473bbf6b2d666e","typeString":"literal_string \"No position to remove\""}],"id":3495,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6019:7:31","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3498,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6019:45:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3499,"nodeType":"ExpressionStatement","src":"6019:45:31"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3503,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3501,"name":"currentTokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3097,"src":"6083:14:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3502,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6100:1:31","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6083:18:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e76616c696420746f6b656e204944","id":3504,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6103:18:31","typeDescriptions":{"typeIdentifier":"t_stringliteral_b44e5a2e76d616f71f124d91f8560c46215c55a45ba6a1b6e492edf2295dcc48","typeString":"literal_string \"Invalid token ID\""},"value":"Invalid token ID"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b44e5a2e76d616f71f124d91f8560c46215c55a45ba6a1b6e492edf2295dcc48","typeString":"literal_string \"Invalid token ID\""}],"id":3500,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6075:7:31","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3505,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6075:47:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3506,"nodeType":"ExpressionStatement","src":"6075:47:31"},{"clauses":[{"block":{"id":3523,"nodeType":"Block","src":"6552:2:31","statements":[]},"errorName":"","id":3524,"nodeType":"TryCatchClause","src":"6552:2:31"},{"block":{"id":3525,"nodeType":"Block","src":"6561:2:31","statements":[]},"errorName":"","id":3526,"nodeType":"TryCatchClause","src":"6555:8:31"}],"externalCall":{"arguments":[{"arguments":[{"id":3511,"name":"currentTokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3097,"src":"6322:14:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"arguments":[{"id":3514,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6375:7:31","typeDescriptions":{"typeIdentifier":"t_type$_t_uint128_$","typeString":"type(uint128)"},"typeName":{"id":3513,"name":"uint128","nodeType":"ElementaryTypeName","src":"6375:7:31","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint128_$","typeString":"type(uint128)"}],"id":3512,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"6370:4:31","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3515,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6370:13:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint128","typeString":"type(uint128)"}},"id":3516,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"max","nodeType":"MemberAccess","src":"6370:17:31","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},{"hexValue":"30","id":3517,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6422:1:31","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":3518,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6458:1:31","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"expression":{"id":3519,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"6492:5:31","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":3520,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"timestamp","nodeType":"MemberAccess","src":"6492:15:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint128","typeString":"uint128"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3509,"name":"INonfungiblePositionManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2618,"src":"6238:27:31","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_INonfungiblePositionManager_$2618_$","typeString":"type(contract INonfungiblePositionManager)"}},"id":3510,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"DecreaseLiquidityParams","nodeType":"MemberAccess","referencedDeclaration":2582,"src":"6238:51:31","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_DecreaseLiquidityParams_$2582_storage_ptr_$","typeString":"type(struct INonfungiblePositionManager.DecreaseLiquidityParams storage pointer)"}},"id":3521,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"names":["tokenId","liquidity","amount0Min","amount1Min","deadline"],"nodeType":"FunctionCall","src":"6238:289:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_DecreaseLiquidityParams_$2582_memory_ptr","typeString":"struct INonfungiblePositionManager.DecreaseLiquidityParams memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_DecreaseLiquidityParams_$2582_memory_ptr","typeString":"struct INonfungiblePositionManager.DecreaseLiquidityParams memory"}],"expression":{"id":3507,"name":"positionManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3085,"src":"6186:15:31","typeDescriptions":{"typeIdentifier":"t_contract$_INonfungiblePositionManager_$2618","typeString":"contract INonfungiblePositionManager"}},"id":3508,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"decreaseLiquidity","nodeType":"MemberAccess","referencedDeclaration":2592,"src":"6186:33:31","typeDescriptions":{"typeIdentifier":"t_function_external_payable$_t_struct$_DecreaseLiquidityParams_$2582_memory_ptr_$returns$_t_uint256_$_t_uint256_$","typeString":"function (struct INonfungiblePositionManager.DecreaseLiquidityParams memory) payable external returns (uint256,uint256)"}},"id":3522,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6186:356:31","tryCall":true,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"id":3527,"nodeType":"TryStatement","src":"6169:394:31"},{"clauses":[{"block":{"id":3549,"nodeType":"Block","src":"6964:2:31","statements":[]},"errorName":"","id":3550,"nodeType":"TryCatchClause","src":"6964:2:31"},{"block":{"id":3551,"nodeType":"Block","src":"6973:2:31","statements":[]},"errorName":"","id":3552,"nodeType":"TryCatchClause","src":"6967:8:31"}],"externalCall":{"arguments":[{"arguments":[{"id":3532,"name":"currentTokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3097,"src":"6754:14:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"id":3535,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"6810:4:31","typeDescriptions":{"typeIdentifier":"t_contract$_BaselineMinimal_$3828","typeString":"contract BaselineMinimal"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_BaselineMinimal_$3828","typeString":"contract BaselineMinimal"}],"id":3534,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6802:7:31","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3533,"name":"address","nodeType":"ElementaryTypeName","src":"6802:7:31","typeDescriptions":{}}},"id":3536,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6802:13:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"expression":{"arguments":[{"id":3539,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6855:7:31","typeDescriptions":{"typeIdentifier":"t_type$_t_uint128_$","typeString":"type(uint128)"},"typeName":{"id":3538,"name":"uint128","nodeType":"ElementaryTypeName","src":"6855:7:31","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint128_$","typeString":"type(uint128)"}],"id":3537,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"6850:4:31","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3540,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6850:13:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint128","typeString":"type(uint128)"}},"id":3541,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"max","nodeType":"MemberAccess","src":"6850:17:31","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},{"expression":{"arguments":[{"id":3544,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6907:7:31","typeDescriptions":{"typeIdentifier":"t_type$_t_uint128_$","typeString":"type(uint128)"},"typeName":{"id":3543,"name":"uint128","nodeType":"ElementaryTypeName","src":"6907:7:31","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint128_$","typeString":"type(uint128)"}],"id":3542,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"6902:4:31","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3545,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6902:13:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint128","typeString":"type(uint128)"}},"id":3546,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"max","nodeType":"MemberAccess","src":"6902:17:31","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_uint128","typeString":"uint128"},{"typeIdentifier":"t_uint128","typeString":"uint128"}],"expression":{"id":3530,"name":"INonfungiblePositionManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2618,"src":"6680:27:31","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_INonfungiblePositionManager_$2618_$","typeString":"type(contract INonfungiblePositionManager)"}},"id":3531,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"CollectParams","nodeType":"MemberAccess","referencedDeclaration":2601,"src":"6680:41:31","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_CollectParams_$2601_storage_ptr_$","typeString":"type(struct INonfungiblePositionManager.CollectParams storage pointer)"}},"id":3547,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"names":["tokenId","recipient","amount0Max","amount1Max"],"nodeType":"FunctionCall","src":"6680:259:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_CollectParams_$2601_memory_ptr","typeString":"struct INonfungiblePositionManager.CollectParams memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_CollectParams_$2601_memory_ptr","typeString":"struct INonfungiblePositionManager.CollectParams memory"}],"expression":{"id":3528,"name":"positionManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3085,"src":"6638:15:31","typeDescriptions":{"typeIdentifier":"t_contract$_INonfungiblePositionManager_$2618","typeString":"contract INonfungiblePositionManager"}},"id":3529,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"collect","nodeType":"MemberAccess","referencedDeclaration":2611,"src":"6638:23:31","typeDescriptions":{"typeIdentifier":"t_function_external_payable$_t_struct$_CollectParams_$2601_memory_ptr_$returns$_t_uint256_$_t_uint256_$","typeString":"function (struct INonfungiblePositionManager.CollectParams memory) payable external returns (uint256,uint256)"}},"id":3548,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6638:316:31","tryCall":true,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"id":3553,"nodeType":"TryStatement","src":"6621:354:31"},{"clauses":[{"block":{"id":3558,"nodeType":"Block","src":"7059:2:31","statements":[]},"errorName":"","id":3559,"nodeType":"TryCatchClause","src":"7059:2:31"},{"block":{"id":3560,"nodeType":"Block","src":"7068:2:31","statements":[]},"errorName":"","id":3561,"nodeType":"TryCatchClause","src":"7062:8:31"}],"externalCall":{"arguments":[{"id":3556,"name":"currentTokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3097,"src":"7043:14:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3554,"name":"positionManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3085,"src":"7022:15:31","typeDescriptions":{"typeIdentifier":"t_contract$_INonfungiblePositionManager_$2618","typeString":"contract INonfungiblePositionManager"}},"id":3555,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"burn","nodeType":"MemberAccess","referencedDeclaration":2617,"src":"7022:20:31","typeDescriptions":{"typeIdentifier":"t_function_external_payable$_t_uint256_$returns$__$","typeString":"function (uint256) payable external"}},"id":3557,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7022:36:31","tryCall":true,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3562,"nodeType":"TryStatement","src":"7018:52:31"},{"expression":{"id":3565,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3563,"name":"hasPosition","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3099,"src":"7122:11:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":3564,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"7136:5:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"7122:19:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3566,"nodeType":"ExpressionStatement","src":"7122:19:31"},{"expression":{"id":3569,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3567,"name":"currentTokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3097,"src":"7152:14:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":3568,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7169:1:31","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7152:18:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3570,"nodeType":"ExpressionStatement","src":"7152:18:31"},{"eventCall":{"arguments":[{"hexValue":"66616c7365","id":3572,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"7204:5:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":3573,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7211:1:31","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":3574,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7214:1:31","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3571,"name":"PositionChanged","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3111,"src":"7188:15:31","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bool_$_t_int24_$_t_int24_$returns$__$","typeString":"function (bool,int24,int24)"}},"id":3575,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7188:28:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3576,"nodeType":"EmitStatement","src":"7183:33:31"}]},"id":3578,"implemented":true,"kind":"function","modifiers":[],"name":"_removePosition","nodeType":"FunctionDefinition","parameters":{"id":3493,"nodeType":"ParameterList","parameters":[],"src":"5996:2:31"},"returnParameters":{"id":3494,"nodeType":"ParameterList","parameters":[],"src":"6008:0:31"},"scope":3828,"src":"5972:1252:31","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3688,"nodeType":"Block","src":"7342:1248:31","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_int24","typeString":"int24"},"id":3588,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3586,"name":"_lowerTick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3580,"src":"7361:10:31","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3587,"name":"_upperTick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3582,"src":"7374:10:31","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"src":"7361:23:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e76616c6964207469636b2072616e6765","id":3589,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7386:20:31","typeDescriptions":{"typeIdentifier":"t_stringliteral_5fb447cb8a73099b715c4ab92ff6f271e9605295d15c8841bc0b730a60ec7abf","typeString":"literal_string \"Invalid tick range\""},"value":"Invalid tick range"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5fb447cb8a73099b715c4ab92ff6f271e9605295d15c8841bc0b730a60ec7abf","typeString":"literal_string \"Invalid tick range\""}],"id":3585,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7353:7:31","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3590,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7353:54:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3591,"nodeType":"ExpressionStatement","src":"7353:54:31"},{"assignments":[3593],"declarations":[{"constant":false,"id":3593,"mutability":"mutable","name":"amount0","nodeType":"VariableDeclaration","scope":3688,"src":"7420:15:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3592,"name":"uint256","nodeType":"ElementaryTypeName","src":"7420:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3603,"initialValue":{"arguments":[{"arguments":[{"id":3600,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"7471:4:31","typeDescriptions":{"typeIdentifier":"t_contract$_BaselineMinimal_$3828","typeString":"contract BaselineMinimal"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_BaselineMinimal_$3828","typeString":"contract BaselineMinimal"}],"id":3599,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7463:7:31","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3598,"name":"address","nodeType":"ElementaryTypeName","src":"7463:7:31","typeDescriptions":{}}},"id":3601,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7463:13:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"}],"expression":{"arguments":[{"id":3595,"name":"token0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3089,"src":"7445:6:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3594,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":554,"src":"7438:6:31","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$554_$","typeString":"type(contract IERC20)"}},"id":3596,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7438:14:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$554","typeString":"contract IERC20"}},"id":3597,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balanceOf","nodeType":"MemberAccess","referencedDeclaration":493,"src":"7438:24:31","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":3602,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7438:39:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7420:57:31"},{"assignments":[3605],"declarations":[{"constant":false,"id":3605,"mutability":"mutable","name":"amount1","nodeType":"VariableDeclaration","scope":3688,"src":"7488:15:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3604,"name":"uint256","nodeType":"ElementaryTypeName","src":"7488:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3615,"initialValue":{"arguments":[{"arguments":[{"id":3612,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"7539:4:31","typeDescriptions":{"typeIdentifier":"t_contract$_BaselineMinimal_$3828","typeString":"contract BaselineMinimal"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_BaselineMinimal_$3828","typeString":"contract BaselineMinimal"}],"id":3611,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7531:7:31","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3610,"name":"address","nodeType":"ElementaryTypeName","src":"7531:7:31","typeDescriptions":{}}},"id":3613,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7531:13:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"}],"expression":{"arguments":[{"id":3607,"name":"token1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3091,"src":"7513:6:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3606,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":554,"src":"7506:6:31","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$554_$","typeString":"type(contract IERC20)"}},"id":3608,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7506:14:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$554","typeString":"contract IERC20"}},"id":3609,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balanceOf","nodeType":"MemberAccess","referencedDeclaration":493,"src":"7506:24:31","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":3614,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7506:39:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7488:57:31"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3622,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3618,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3616,"name":"amount0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3593,"src":"7562:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3617,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7573:1:31","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7562:12:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3621,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3619,"name":"amount1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3605,"src":"7578:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3620,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7589:1:31","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7578:12:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"7562:28:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3625,"nodeType":"IfStatement","src":"7558:67:31","trueBody":{"id":3624,"nodeType":"Block","src":"7592:33:31","statements":[{"functionReturnParameters":3584,"id":3623,"nodeType":"Return","src":"7607:7:31"}]}},{"clauses":[{"block":{"id":3683,"nodeType":"Block","src":"8282:292:31","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3658,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3656,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3648,"src":"8301:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3657,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8311:1:31","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8301:11:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3682,"nodeType":"IfStatement","src":"8297:266:31","trueBody":{"id":3681,"nodeType":"Block","src":"8314:249:31","statements":[{"expression":{"id":3661,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3659,"name":"currentTokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3097,"src":"8333:14:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3660,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3648,"src":"8350:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8333:24:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3662,"nodeType":"ExpressionStatement","src":"8333:24:31"},{"expression":{"id":3665,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3663,"name":"hasPosition","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3099,"src":"8376:11:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":3664,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"8390:4:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"8376:18:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3666,"nodeType":"ExpressionStatement","src":"8376:18:31"},{"expression":{"id":3669,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3667,"name":"lowerTick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3101,"src":"8413:9:31","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3668,"name":"_lowerTick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3580,"src":"8425:10:31","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"src":"8413:22:31","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"id":3670,"nodeType":"ExpressionStatement","src":"8413:22:31"},{"expression":{"id":3673,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3671,"name":"upperTick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3103,"src":"8454:9:31","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3672,"name":"_upperTick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3582,"src":"8466:10:31","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"src":"8454:22:31","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"id":3674,"nodeType":"ExpressionStatement","src":"8454:22:31"},{"eventCall":{"arguments":[{"hexValue":"74727565","id":3676,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"8518:4:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"id":3677,"name":"_lowerTick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3580,"src":"8524:10:31","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},{"id":3678,"name":"_upperTick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3582,"src":"8536:10:31","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_int24","typeString":"int24"},{"typeIdentifier":"t_int24","typeString":"int24"}],"id":3675,"name":"PositionChanged","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3111,"src":"8502:15:31","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bool_$_t_int24_$_t_int24_$returns$__$","typeString":"function (bool,int24,int24)"}},"id":3679,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8502:45:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3680,"nodeType":"EmitStatement","src":"8497:50:31"}]}}]},"errorName":"","id":3684,"nodeType":"TryCatchClause","parameters":{"id":3655,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3648,"mutability":"mutable","name":"tokenId","nodeType":"VariableDeclaration","scope":3684,"src":"8238:15:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3647,"name":"uint256","nodeType":"ElementaryTypeName","src":"8238:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3650,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":3684,"src":"8255:7:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":3649,"name":"uint128","nodeType":"ElementaryTypeName","src":"8255:7:31","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"},{"constant":false,"id":3652,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":3684,"src":"8264:7:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3651,"name":"uint256","nodeType":"ElementaryTypeName","src":"8264:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3654,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":3684,"src":"8273:7:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3653,"name":"uint256","nodeType":"ElementaryTypeName","src":"8273:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8237:44:31"},"src":"8229:345:31"},{"block":{"id":3685,"nodeType":"Block","src":"8581:2:31","statements":[]},"errorName":"","id":3686,"nodeType":"TryCatchClause","src":"8575:8:31"}],"externalCall":{"arguments":[{"arguments":[{"id":3630,"name":"token0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3089,"src":"7763:6:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3631,"name":"token1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3091,"src":"7800:6:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3632,"name":"fee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3093,"src":"7834:3:31","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},{"id":3633,"name":"_lowerTick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3580,"src":"7871:10:31","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},{"id":3634,"name":"_upperTick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3582,"src":"7915:10:31","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},{"id":3635,"name":"amount0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3593,"src":"7964:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3636,"name":"amount1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3605,"src":"8010:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"30","id":3637,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8052:1:31","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":3638,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8088:1:31","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"arguments":[{"id":3641,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"8131:4:31","typeDescriptions":{"typeIdentifier":"t_contract$_BaselineMinimal_$3828","typeString":"contract BaselineMinimal"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_BaselineMinimal_$3828","typeString":"contract BaselineMinimal"}],"id":3640,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8123:7:31","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3639,"name":"address","nodeType":"ElementaryTypeName","src":"8123:7:31","typeDescriptions":{}}},"id":3642,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8123:13:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"expression":{"id":3643,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"8169:5:31","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":3644,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"timestamp","nodeType":"MemberAccess","src":"8169:15:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint24","typeString":"uint24"},{"typeIdentifier":"t_int24","typeString":"int24"},{"typeIdentifier":"t_int24","typeString":"int24"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3628,"name":"INonfungiblePositionManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2618,"src":"7693:27:31","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_INonfungiblePositionManager_$2618_$","typeString":"type(contract INonfungiblePositionManager)"}},"id":3629,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"MintParams","nodeType":"MemberAccess","referencedDeclaration":2532,"src":"7693:38:31","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_MintParams_$2532_storage_ptr_$","typeString":"type(struct INonfungiblePositionManager.MintParams storage pointer)"}},"id":3645,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"names":["token0","token1","fee","tickLower","tickUpper","amount0Desired","amount1Desired","amount0Min","amount1Min","recipient","deadline"],"nodeType":"FunctionCall","src":"7693:511:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_MintParams_$2532_memory_ptr","typeString":"struct INonfungiblePositionManager.MintParams memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_MintParams_$2532_memory_ptr","typeString":"struct INonfungiblePositionManager.MintParams memory"}],"expression":{"id":3626,"name":"positionManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3085,"src":"7654:15:31","typeDescriptions":{"typeIdentifier":"t_contract$_INonfungiblePositionManager_$2618","typeString":"contract INonfungiblePositionManager"}},"id":3627,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"mint","nodeType":"MemberAccess","referencedDeclaration":2546,"src":"7654:20:31","typeDescriptions":{"typeIdentifier":"t_function_external_payable$_t_struct$_MintParams_$2532_memory_ptr_$returns$_t_uint256_$_t_uint128_$_t_uint256_$_t_uint256_$","typeString":"function (struct INonfungiblePositionManager.MintParams memory) payable external returns (uint256,uint128,uint256,uint256)"}},"id":3646,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7654:565:31","tryCall":true,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint128_$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint128,uint256,uint256)"}},"id":3687,"nodeType":"TryStatement","src":"7637:946:31"}]},"id":3689,"implemented":true,"kind":"function","modifiers":[],"name":"_createPosition","nodeType":"FunctionDefinition","parameters":{"id":3583,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3580,"mutability":"mutable","name":"_lowerTick","nodeType":"VariableDeclaration","scope":3689,"src":"7297:16:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":3579,"name":"int24","nodeType":"ElementaryTypeName","src":"7297:5:31","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":3582,"mutability":"mutable","name":"_upperTick","nodeType":"VariableDeclaration","scope":3689,"src":"7315:16:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":3581,"name":"int24","nodeType":"ElementaryTypeName","src":"7315:5:31","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"}],"src":"7296:36:31"},"returnParameters":{"id":3584,"nodeType":"ParameterList","parameters":[],"src":"7342:0:31"},"scope":3828,"src":"7272:1318:31","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3719,"nodeType":"Block","src":"8763:175:31","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint160","typeString":"uint160"},"id":3699,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3697,"name":"sqrtPriceX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3691,"src":"8782:12:31","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3698,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8797:1:31","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8782:16:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e76616c69642073717274207072696365","id":3700,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8800:20:31","typeDescriptions":{"typeIdentifier":"t_stringliteral_663e6e22dacb5d5dea25b1d77198b7fe22ac7eb174bc95a4c49dc1a7be65da33","typeString":"literal_string \"Invalid sqrt price\""},"value":"Invalid sqrt price"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_663e6e22dacb5d5dea25b1d77198b7fe22ac7eb174bc95a4c49dc1a7be65da33","typeString":"literal_string \"Invalid sqrt price\""}],"id":3696,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8774:7:31","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3701,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8774:47:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3702,"nodeType":"ExpressionStatement","src":"8774:47:31"},{"assignments":[3704],"declarations":[{"constant":false,"id":3704,"mutability":"mutable","name":"priceX192","nodeType":"VariableDeclaration","scope":3719,"src":"8832:17:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3703,"name":"uint256","nodeType":"ElementaryTypeName","src":"8832:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3714,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3713,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3707,"name":"sqrtPriceX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3691,"src":"8860:12:31","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":3706,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8852:7:31","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3705,"name":"uint256","nodeType":"ElementaryTypeName","src":"8852:7:31","typeDescriptions":{}}},"id":3708,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8852:21:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"arguments":[{"id":3711,"name":"sqrtPriceX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3691,"src":"8884:12:31","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":3710,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8876:7:31","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3709,"name":"uint256","nodeType":"ElementaryTypeName","src":"8876:7:31","typeDescriptions":{}}},"id":3712,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8876:21:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8852:45:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8832:65:31"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3717,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3715,"name":"priceX192","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3704,"src":"8915:9:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3936","id":3716,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8928:2:31","typeDescriptions":{"typeIdentifier":"t_rational_96_by_1","typeString":"int_const 96"},"value":"96"},"src":"8915:15:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3695,"id":3718,"nodeType":"Return","src":"8908:22:31"}]},"id":3720,"implemented":true,"kind":"function","modifiers":[],"name":"_sqrtPriceX96ToPrice","nodeType":"FunctionDefinition","parameters":{"id":3692,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3691,"mutability":"mutable","name":"sqrtPriceX96","nodeType":"VariableDeclaration","scope":3720,"src":"8703:20:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":3690,"name":"uint160","nodeType":"ElementaryTypeName","src":"8703:7:31","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"}],"src":"8692:38:31"},"returnParameters":{"id":3695,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3694,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":3720,"src":"8754:7:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3693,"name":"uint256","nodeType":"ElementaryTypeName","src":"8754:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8753:9:31"},"scope":3828,"src":"8663:275:31","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3774,"nodeType":"Block","src":"9074:280:31","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3735,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3730,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3722,"src":"9093:5:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":3733,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9110:1:31","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3732,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9102:7:31","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3731,"name":"address","nodeType":"ElementaryTypeName","src":"9102:7:31","typeDescriptions":{}}},"id":3734,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9102:10:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"9093:19:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e76616c696420746f6b656e","id":3736,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9114:15:31","typeDescriptions":{"typeIdentifier":"t_stringliteral_5e70ebd1d4072d337a7fabaa7bda70fa2633d6e3f89d5cb725a16b10d07e54c6","typeString":"literal_string \"Invalid token\""},"value":"Invalid token"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5e70ebd1d4072d337a7fabaa7bda70fa2633d6e3f89d5cb725a16b10d07e54c6","typeString":"literal_string \"Invalid token\""}],"id":3729,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9085:7:31","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3737,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9085:45:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3738,"nodeType":"ExpressionStatement","src":"9085:45:31"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3745,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3740,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3724,"src":"9149:2:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":3743,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9163:1:31","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3742,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9155:7:31","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3741,"name":"address","nodeType":"ElementaryTypeName","src":"9155:7:31","typeDescriptions":{}}},"id":3744,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9155:10:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"9149:16:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e76616c696420726563697069656e74","id":3746,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9167:19:31","typeDescriptions":{"typeIdentifier":"t_stringliteral_a6664b97aef19c137d44ec81dfc0c0cc28a2c3470357b125208345a2c048425d","typeString":"literal_string \"Invalid recipient\""},"value":"Invalid recipient"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_a6664b97aef19c137d44ec81dfc0c0cc28a2c3470357b125208345a2c048425d","typeString":"literal_string \"Invalid recipient\""}],"id":3739,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9141:7:31","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3747,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9141:46:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3748,"nodeType":"ExpressionStatement","src":"9141:46:31"},{"assignments":[3750],"declarations":[{"constant":false,"id":3750,"mutability":"mutable","name":"amount","nodeType":"VariableDeclaration","scope":3774,"src":"9200:14:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3749,"name":"uint256","nodeType":"ElementaryTypeName","src":"9200:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3760,"initialValue":{"arguments":[{"arguments":[{"id":3757,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"9249:4:31","typeDescriptions":{"typeIdentifier":"t_contract$_BaselineMinimal_$3828","typeString":"contract BaselineMinimal"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_BaselineMinimal_$3828","typeString":"contract BaselineMinimal"}],"id":3756,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9241:7:31","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3755,"name":"address","nodeType":"ElementaryTypeName","src":"9241:7:31","typeDescriptions":{}}},"id":3758,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9241:13:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"}],"expression":{"arguments":[{"id":3752,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3722,"src":"9224:5:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3751,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":554,"src":"9217:6:31","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$554_$","typeString":"type(contract IERC20)"}},"id":3753,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9217:13:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$554","typeString":"contract IERC20"}},"id":3754,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balanceOf","nodeType":"MemberAccess","referencedDeclaration":493,"src":"9217:23:31","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":3759,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9217:38:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9200:55:31"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3763,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3761,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3750,"src":"9270:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3762,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9279:1:31","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9270:10:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3773,"nodeType":"IfStatement","src":"9266:81:31","trueBody":{"id":3772,"nodeType":"Block","src":"9282:65:31","statements":[{"expression":{"arguments":[{"id":3768,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3724,"src":"9324:2:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3769,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3750,"src":"9328:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":3765,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3722,"src":"9304:5:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3764,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":554,"src":"9297:6:31","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$554_$","typeString":"type(contract IERC20)"}},"id":3766,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9297:13:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$554","typeString":"contract IERC20"}},"id":3767,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"safeTransfer","nodeType":"MemberAccess","referencedDeclaration":588,"src":"9297:26:31","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$554_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20_$554_$","typeString":"function (contract IERC20,address,uint256)"}},"id":3770,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9297:38:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3771,"nodeType":"ExpressionStatement","src":"9297:38:31"}]}}]},"functionSelector":"5431c94e","id":3775,"implemented":true,"kind":"function","modifiers":[{"id":3727,"modifierName":{"id":3726,"name":"onlyOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":58,"src":"9064:9:31","typeDescriptions":{"typeIdentifier":"t_modifier$__$","typeString":"modifier ()"}},"nodeType":"ModifierInvocation","src":"9064:9:31"}],"name":"rescueTokens","nodeType":"FunctionDefinition","parameters":{"id":3725,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3722,"mutability":"mutable","name":"token","nodeType":"VariableDeclaration","scope":3775,"src":"9028:13:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3721,"name":"address","nodeType":"ElementaryTypeName","src":"9028:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3724,"mutability":"mutable","name":"to","nodeType":"VariableDeclaration","scope":3775,"src":"9043:10:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3723,"name":"address","nodeType":"ElementaryTypeName","src":"9043:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"9027:27:31"},"returnParameters":{"id":3728,"nodeType":"ParameterList","parameters":[],"src":"9074:0:31"},"scope":3828,"src":"9006:348:31","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":3802,"nodeType":"Block","src":"9459:146:31","statements":[{"assignments":[3781],"declarations":[{"constant":false,"id":3781,"mutability":"mutable","name":"balance","nodeType":"VariableDeclaration","scope":3802,"src":"9470:15:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3780,"name":"uint256","nodeType":"ElementaryTypeName","src":"9470:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3787,"initialValue":{"expression":{"arguments":[{"id":3784,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"9496:4:31","typeDescriptions":{"typeIdentifier":"t_contract$_BaselineMinimal_$3828","typeString":"contract BaselineMinimal"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_BaselineMinimal_$3828","typeString":"contract BaselineMinimal"}],"id":3783,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9488:7:31","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3782,"name":"address","nodeType":"ElementaryTypeName","src":"9488:7:31","typeDescriptions":{}}},"id":3785,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9488:13:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":3786,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balance","nodeType":"MemberAccess","src":"9488:21:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9470:39:31"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3790,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3788,"name":"balance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3781,"src":"9524:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3789,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9534:1:31","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9524:11:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3801,"nodeType":"IfStatement","src":"9520:78:31","trueBody":{"id":3800,"nodeType":"Block","src":"9537:61:31","statements":[{"expression":{"arguments":[{"id":3797,"name":"balance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3781,"src":"9578:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":3793,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44,"src":"9560:5:31","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":3794,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9560:7:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3792,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9552:8:31","typeDescriptions":{"typeIdentifier":"t_type$_t_address_payable_$","typeString":"type(address payable)"},"typeName":{"id":3791,"name":"address","nodeType":"ElementaryTypeName","src":"9552:8:31","stateMutability":"payable","typeDescriptions":{}}},"id":3795,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9552:16:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":3796,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"transfer","nodeType":"MemberAccess","src":"9552:25:31","typeDescriptions":{"typeIdentifier":"t_function_transfer_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":3798,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9552:34:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3799,"nodeType":"ExpressionStatement","src":"9552:34:31"}]}}]},"functionSelector":"20800a00","id":3803,"implemented":true,"kind":"function","modifiers":[{"id":3778,"modifierName":{"id":3777,"name":"onlyOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":58,"src":"9449:9:31","typeDescriptions":{"typeIdentifier":"t_modifier$__$","typeString":"modifier ()"}},"nodeType":"ModifierInvocation","src":"9449:9:31"}],"name":"rescueETH","nodeType":"FunctionDefinition","parameters":{"id":3776,"nodeType":"ParameterList","parameters":[],"src":"9437:2:31"},"returnParameters":{"id":3779,"nodeType":"ParameterList","parameters":[],"src":"9459:0:31"},"scope":3828,"src":"9419:186:31","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":3826,"nodeType":"Block","src":"9726:93:31","statements":[{"expression":{"arguments":[{"id":3814,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3805,"src":"9760:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":3811,"name":"token1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3091,"src":"9743:6:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3810,"name":"IWETH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3075,"src":"9737:5:31","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IWETH_$3075_$","typeString":"type(contract IWETH)"}},"id":3812,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9737:13:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IWETH_$3075","typeString":"contract IWETH"}},"id":3813,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"withdraw","nodeType":"MemberAccess","referencedDeclaration":3074,"src":"9737:22:31","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256) external"}},"id":3815,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9737:30:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3816,"nodeType":"ExpressionStatement","src":"9737:30:31"},{"expression":{"arguments":[{"id":3823,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3805,"src":"9804:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":3819,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44,"src":"9786:5:31","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":3820,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9786:7:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3818,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9778:8:31","typeDescriptions":{"typeIdentifier":"t_type$_t_address_payable_$","typeString":"type(address payable)"},"typeName":{"id":3817,"name":"address","nodeType":"ElementaryTypeName","src":"9778:8:31","stateMutability":"payable","typeDescriptions":{}}},"id":3821,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9778:16:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":3822,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"transfer","nodeType":"MemberAccess","src":"9778:25:31","typeDescriptions":{"typeIdentifier":"t_function_transfer_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":3824,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9778:33:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3825,"nodeType":"ExpressionStatement","src":"9778:33:31"}]},"functionSelector":"c853c4bc","id":3827,"implemented":true,"kind":"function","modifiers":[{"id":3808,"modifierName":{"id":3807,"name":"onlyOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":58,"src":"9716:9:31","typeDescriptions":{"typeIdentifier":"t_modifier$__$","typeString":"modifier ()"}},"nodeType":"ModifierInvocation","src":"9716:9:31"}],"name":"rescueWETH","nodeType":"FunctionDefinition","parameters":{"id":3806,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3805,"mutability":"mutable","name":"amount","nodeType":"VariableDeclaration","scope":3827,"src":"9691:14:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3804,"name":"uint256","nodeType":"ElementaryTypeName","src":"9691:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9690:16:31"},"returnParameters":{"id":3809,"nodeType":"ParameterList","parameters":[],"src":"9726:0:31"},"scope":3828,"src":"9671:148:31","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":3829,"src":"863:8959:31"}],"src":"33:9791:31"},"id":31},"contracts/PredictiveLiquidityManager.sol":{"ast":{"absolutePath":"contracts/PredictiveLiquidityManager.sol","exportedSymbols":{"Address":[1237],"Context":[1260],"IERC165":[121],"IERC20":[554],"IERC20Decimals":[3849],"IERC721":[883],"IERC721Enumerable":[914],"IERC721Metadata":[941],"IERC721Permit":[2423],"INonfungiblePositionManager":[2618],"IPeripheryImmutableState":[2634],"IPeripheryPayments":[2660],"IPoolInitializer":[2679],"IUniswapV3Factory":[1383],"IUniswapV3MintCallback":[1419],"IUniswapV3Pool":[1405],"IUniswapV3PoolActions":[1529],"IUniswapV3PoolDerivedState":[1560],"IUniswapV3PoolEvents":[1679],"IUniswapV3PoolImmutables":[1719],"IUniswapV3PoolOwnerActions":[1745],"IUniswapV3PoolState":[1853],"IWETH9":[2792],"Ownable":[109],"PoolAddress":[2884],"PredictiveLiquidityManager":[5220],"ReentrancyGuard":[1300],"SafeERC20":[767],"SafeMath":[476],"SqrtMath":[5955],"TickMath":[2388]},"id":5221,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3830,"literals":["solidity","^","0.7",".6"],"nodeType":"PragmaDirective","src":"33:23:32"},{"id":3831,"literals":["abicoder","v2"],"nodeType":"PragmaDirective","src":"58:19:32"},{"absolutePath":"@openzeppelin/contracts/access/Ownable.sol","file":"@openzeppelin/contracts/access/Ownable.sol","id":3832,"nodeType":"ImportDirective","scope":5221,"sourceUnit":110,"src":"149:52:32","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"@openzeppelin/contracts/token/ERC20/IERC20.sol","id":3833,"nodeType":"ImportDirective","scope":5221,"sourceUnit":555,"src":"203:56:32","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/SafeERC20.sol","file":"@openzeppelin/contracts/token/ERC20/SafeERC20.sol","id":3834,"nodeType":"ImportDirective","scope":5221,"sourceUnit":768,"src":"261:59:32","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/math/SafeMath.sol","file":"@openzeppelin/contracts/math/SafeMath.sol","id":3835,"nodeType":"ImportDirective","scope":5221,"sourceUnit":477,"src":"322:51:32","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/ReentrancyGuard.sol","file":"@openzeppelin/contracts/utils/ReentrancyGuard.sol","id":3836,"nodeType":"ImportDirective","scope":5221,"sourceUnit":1301,"src":"375:59:32","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/libraries/SqrtMath.sol","file":"./libraries/SqrtMath.sol","id":3837,"nodeType":"ImportDirective","scope":5221,"sourceUnit":5956,"src":"461:34:32","symbolAliases":[],"unitAlias":""},{"absolutePath":"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol","file":"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol","id":3838,"nodeType":"ImportDirective","scope":5221,"sourceUnit":1406,"src":"519:66:32","symbolAliases":[],"unitAlias":""},{"absolutePath":"@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol","file":"@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol","id":3839,"nodeType":"ImportDirective","scope":5221,"sourceUnit":1384,"src":"587:69:32","symbolAliases":[],"unitAlias":""},{"absolutePath":"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3MintCallback.sol","file":"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3MintCallback.sol","id":3840,"nodeType":"ImportDirective","scope":5221,"sourceUnit":1420,"src":"658:83:32","symbolAliases":[],"unitAlias":""},{"absolutePath":"@uniswap/v3-core/contracts/libraries/TickMath.sol","file":"@uniswap/v3-core/contracts/libraries/TickMath.sol","id":3841,"nodeType":"ImportDirective","scope":5221,"sourceUnit":2389,"src":"743:59:32","symbolAliases":[],"unitAlias":""},{"absolutePath":"@uniswap/v3-periphery/contracts/interfaces/INonfungiblePositionManager.sol","file":"@uniswap/v3-periphery/contracts/interfaces/INonfungiblePositionManager.sol","id":3842,"nodeType":"ImportDirective","scope":5221,"sourceUnit":2619,"src":"831:84:32","symbolAliases":[],"unitAlias":""},{"absolutePath":"@uniswap/v3-periphery/contracts/interfaces/external/IWETH9.sol","file":"@uniswap/v3-periphery/contracts/interfaces/external/IWETH9.sol","id":3843,"nodeType":"ImportDirective","scope":5221,"sourceUnit":2793,"src":"917:72:32","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":3849,"linearizedBaseContracts":[3849],"name":"IERC20Decimals","nodeType":"ContractDefinition","nodes":[{"functionSelector":"313ce567","id":3848,"implemented":false,"kind":"function","modifiers":[],"name":"decimals","nodeType":"FunctionDefinition","parameters":{"id":3844,"nodeType":"ParameterList","parameters":[],"src":"1071:2:32"},"returnParameters":{"id":3847,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3846,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":3848,"src":"1097:5:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":3845,"name":"uint8","nodeType":"ElementaryTypeName","src":"1097:5:32","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"1096:7:32"},"scope":3849,"src":"1054:50:32","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":5221,"src":"1022:85:32"},{"abstract":false,"baseContracts":[{"baseName":{"id":3851,"name":"Ownable","nodeType":"UserDefinedTypeName","referencedDeclaration":109,"src":"1304:7:32","typeDescriptions":{"typeIdentifier":"t_contract$_Ownable_$109","typeString":"contract Ownable"}},"id":3852,"nodeType":"InheritanceSpecifier","src":"1304:7:32"},{"baseName":{"id":3853,"name":"ReentrancyGuard","nodeType":"UserDefinedTypeName","referencedDeclaration":1300,"src":"1318:15:32","typeDescriptions":{"typeIdentifier":"t_contract$_ReentrancyGuard_$1300","typeString":"contract ReentrancyGuard"}},"id":3854,"nodeType":"InheritanceSpecifier","src":"1318:15:32"},{"baseName":{"id":3855,"name":"IUniswapV3MintCallback","nodeType":"UserDefinedTypeName","referencedDeclaration":1419,"src":"1340:22:32","typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3MintCallback_$1419","typeString":"contract IUniswapV3MintCallback"}},"id":3856,"nodeType":"InheritanceSpecifier","src":"1340:22:32"}],"contractDependencies":[109,1260,1300,1419],"contractKind":"contract","documentation":{"id":3850,"nodeType":"StructuredDocumentation","src":"1111:147:32","text":" @title PredictiveLiquidityManager\n @notice The main liquidity management contract that adjusts positions based on price predictions"},"fullyImplemented":true,"id":5220,"linearizedBaseContracts":[5220,1419,1300,109,1260],"name":"PredictiveLiquidityManager","nodeType":"ContractDefinition","nodes":[{"id":3859,"libraryName":{"id":3857,"name":"SafeERC20","nodeType":"UserDefinedTypeName","referencedDeclaration":767,"src":"1377:9:32","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20_$767","typeString":"library SafeERC20"}},"nodeType":"UsingForDirective","src":"1371:27:32","typeName":{"id":3858,"name":"IERC20","nodeType":"UserDefinedTypeName","referencedDeclaration":554,"src":"1391:6:32","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$554","typeString":"contract IERC20"}}},{"id":3862,"libraryName":{"id":3860,"name":"SafeMath","nodeType":"UserDefinedTypeName","referencedDeclaration":476,"src":"1410:8:32","typeDescriptions":{"typeIdentifier":"t_contract$_SafeMath_$476","typeString":"library SafeMath"}},"nodeType":"UsingForDirective","src":"1404:27:32","typeName":{"id":3861,"name":"uint256","nodeType":"ElementaryTypeName","src":"1423:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},{"constant":false,"functionSelector":"c45a0155","id":3864,"mutability":"immutable","name":"factory","nodeType":"VariableDeclaration","scope":5220,"src":"1471:42:32","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3Factory_$1383","typeString":"contract IUniswapV3Factory"},"typeName":{"id":3863,"name":"IUniswapV3Factory","nodeType":"UserDefinedTypeName","referencedDeclaration":1383,"src":"1471:17:32","typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3Factory_$1383","typeString":"contract IUniswapV3Factory"}},"visibility":"public"},{"constant":false,"functionSelector":"791b98bc","id":3866,"mutability":"immutable","name":"positionManager","nodeType":"VariableDeclaration","scope":5220,"src":"1520:60:32","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_INonfungiblePositionManager_$2618","typeString":"contract INonfungiblePositionManager"},"typeName":{"id":3865,"name":"INonfungiblePositionManager","nodeType":"UserDefinedTypeName","referencedDeclaration":2618,"src":"1520:27:32","typeDescriptions":{"typeIdentifier":"t_contract$_INonfungiblePositionManager_$2618","typeString":"contract INonfungiblePositionManager"}},"visibility":"public"},{"constant":false,"functionSelector":"0dfe1681","id":3868,"mutability":"immutable","name":"token0","nodeType":"VariableDeclaration","scope":5220,"src":"1587:31:32","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3867,"name":"address","nodeType":"ElementaryTypeName","src":"1587:7:32","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"public"},{"constant":false,"functionSelector":"d21220a7","id":3870,"mutability":"immutable","name":"token1","nodeType":"VariableDeclaration","scope":5220,"src":"1625:31:32","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3869,"name":"address","nodeType":"ElementaryTypeName","src":"1625:7:32","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"public"},{"constant":false,"functionSelector":"b31ac6e2","id":3872,"mutability":"immutable","name":"token0Decimals","nodeType":"VariableDeclaration","scope":5220,"src":"1663:37:32","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":3871,"name":"uint8","nodeType":"ElementaryTypeName","src":"1663:5:32","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"public"},{"constant":false,"functionSelector":"0b77884d","id":3874,"mutability":"immutable","name":"token1Decimals","nodeType":"VariableDeclaration","scope":5220,"src":"1707:37:32","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":3873,"name":"uint8","nodeType":"ElementaryTypeName","src":"1707:5:32","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"public"},{"constant":false,"functionSelector":"ddca3f43","id":3876,"mutability":"immutable","name":"fee","nodeType":"VariableDeclaration","scope":5220,"src":"1751:27:32","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"},"typeName":{"id":3875,"name":"uint24","nodeType":"ElementaryTypeName","src":"1751:6:32","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"visibility":"public"},{"constant":false,"functionSelector":"d0c93a7c","id":3878,"mutability":"immutable","name":"tickSpacing","nodeType":"VariableDeclaration","scope":5220,"src":"1785:34:32","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":3877,"name":"int24","nodeType":"ElementaryTypeName","src":"1785:5:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"public"},{"constant":false,"functionSelector":"4aa4a4fc","id":3880,"mutability":"immutable","name":"WETH9","nodeType":"VariableDeclaration","scope":5220,"src":"1826:30:32","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3879,"name":"address","nodeType":"ElementaryTypeName","src":"1826:7:32","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"public"},{"canonicalName":"PredictiveLiquidityManager.Position","id":3891,"members":[{"constant":false,"id":3882,"mutability":"mutable","name":"tokenId","nodeType":"VariableDeclaration","scope":3891,"src":"1934:15:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3881,"name":"uint256","nodeType":"ElementaryTypeName","src":"1934:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3884,"mutability":"mutable","name":"liquidity","nodeType":"VariableDeclaration","scope":3891,"src":"1960:17:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":3883,"name":"uint128","nodeType":"ElementaryTypeName","src":"1960:7:32","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"},{"constant":false,"id":3886,"mutability":"mutable","name":"tickLower","nodeType":"VariableDeclaration","scope":3891,"src":"1988:15:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":3885,"name":"int24","nodeType":"ElementaryTypeName","src":"1988:5:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":3888,"mutability":"mutable","name":"tickUpper","nodeType":"VariableDeclaration","scope":3891,"src":"2014:15:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":3887,"name":"int24","nodeType":"ElementaryTypeName","src":"2014:5:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":3890,"mutability":"mutable","name":"active","nodeType":"VariableDeclaration","scope":3891,"src":"2040:11:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3889,"name":"bool","nodeType":"ElementaryTypeName","src":"2040:4:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"Position","nodeType":"StructDefinition","scope":5220,"src":"1907:152:32","visibility":"public"},{"constant":false,"functionSelector":"d534d636","id":3893,"mutability":"mutable","name":"currentPosition","nodeType":"VariableDeclaration","scope":5220,"src":"2065:31:32","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Position_$3891_storage","typeString":"struct PredictiveLiquidityManager.Position"},"typeName":{"id":3892,"name":"Position","nodeType":"UserDefinedTypeName","referencedDeclaration":3891,"src":"2065:8:32","typeDescriptions":{"typeIdentifier":"t_struct$_Position_$3891_storage_ptr","typeString":"struct PredictiveLiquidityManager.Position"}},"visibility":"public"},{"constant":false,"functionSelector":"01d31e7c","id":3896,"mutability":"mutable","name":"rangeWidthMultiplier","nodeType":"VariableDeclaration","scope":5220,"src":"2133:38:32","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"},"typeName":{"id":3894,"name":"uint24","nodeType":"ElementaryTypeName","src":"2133:6:32","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"value":{"hexValue":"34","id":3895,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2170:1:32","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"visibility":"public"},{"anonymous":false,"id":3914,"name":"LiquidityOperation","nodeType":"EventDefinition","parameters":{"id":3913,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3898,"indexed":false,"mutability":"mutable","name":"operationType","nodeType":"VariableDeclaration","scope":3914,"src":"2277:20:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3897,"name":"string","nodeType":"ElementaryTypeName","src":"2277:6:32","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3900,"indexed":true,"mutability":"mutable","name":"tokenId","nodeType":"VariableDeclaration","scope":3914,"src":"2308:23:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3899,"name":"uint256","nodeType":"ElementaryTypeName","src":"2308:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3902,"indexed":false,"mutability":"mutable","name":"tickLower","nodeType":"VariableDeclaration","scope":3914,"src":"2342:15:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":3901,"name":"int24","nodeType":"ElementaryTypeName","src":"2342:5:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":3904,"indexed":false,"mutability":"mutable","name":"tickUpper","nodeType":"VariableDeclaration","scope":3914,"src":"2368:15:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":3903,"name":"int24","nodeType":"ElementaryTypeName","src":"2368:5:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":3906,"indexed":false,"mutability":"mutable","name":"liquidity","nodeType":"VariableDeclaration","scope":3914,"src":"2394:17:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":3905,"name":"uint128","nodeType":"ElementaryTypeName","src":"2394:7:32","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"},{"constant":false,"id":3908,"indexed":false,"mutability":"mutable","name":"amount0","nodeType":"VariableDeclaration","scope":3914,"src":"2422:15:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3907,"name":"uint256","nodeType":"ElementaryTypeName","src":"2422:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3910,"indexed":false,"mutability":"mutable","name":"amount1","nodeType":"VariableDeclaration","scope":3914,"src":"2448:15:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3909,"name":"uint256","nodeType":"ElementaryTypeName","src":"2448:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3912,"indexed":false,"mutability":"mutable","name":"success","nodeType":"VariableDeclaration","scope":3914,"src":"2474:12:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3911,"name":"bool","nodeType":"ElementaryTypeName","src":"2474:4:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2266:227:32"},"src":"2242:252:32"},{"anonymous":false,"id":3930,"name":"PredictionAdjustmentMetrics","nodeType":"EventDefinition","parameters":{"id":3929,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3916,"indexed":false,"mutability":"mutable","name":"timestamp","nodeType":"VariableDeclaration","scope":3930,"src":"2597:17:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3915,"name":"uint256","nodeType":"ElementaryTypeName","src":"2597:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3918,"indexed":false,"mutability":"mutable","name":"actualPrice","nodeType":"VariableDeclaration","scope":3930,"src":"2625:19:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3917,"name":"uint256","nodeType":"ElementaryTypeName","src":"2625:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3920,"indexed":false,"mutability":"mutable","name":"predictedPrice","nodeType":"VariableDeclaration","scope":3930,"src":"2655:22:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3919,"name":"uint256","nodeType":"ElementaryTypeName","src":"2655:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3922,"indexed":false,"mutability":"mutable","name":"predictedTick","nodeType":"VariableDeclaration","scope":3930,"src":"2688:19:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":3921,"name":"int24","nodeType":"ElementaryTypeName","src":"2688:5:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":3924,"indexed":false,"mutability":"mutable","name":"finalTickLower","nodeType":"VariableDeclaration","scope":3930,"src":"2718:20:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":3923,"name":"int24","nodeType":"ElementaryTypeName","src":"2718:5:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":3926,"indexed":false,"mutability":"mutable","name":"finalTickUpper","nodeType":"VariableDeclaration","scope":3930,"src":"2749:20:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":3925,"name":"int24","nodeType":"ElementaryTypeName","src":"2749:5:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":3928,"indexed":false,"mutability":"mutable","name":"adjusted","nodeType":"VariableDeclaration","scope":3930,"src":"2780:13:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3927,"name":"bool","nodeType":"ElementaryTypeName","src":"2780:4:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2586:214:32"},"src":"2553:248:32"},{"anonymous":false,"id":3936,"name":"StrategyParamUpdated","nodeType":"EventDefinition","parameters":{"id":3935,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3932,"indexed":true,"mutability":"mutable","name":"paramName","nodeType":"VariableDeclaration","scope":3936,"src":"2836:24:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3931,"name":"string","nodeType":"ElementaryTypeName","src":"2836:6:32","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3934,"indexed":false,"mutability":"mutable","name":"newValue","nodeType":"VariableDeclaration","scope":3936,"src":"2862:16:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3933,"name":"uint256","nodeType":"ElementaryTypeName","src":"2862:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2835:44:32"},"src":"2809:71:32"},{"body":{"id":4094,"nodeType":"Block","src":"3128:1465:32","statements":[{"expression":{"id":3957,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3953,"name":"factory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3864,"src":"3187:7:32","typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3Factory_$1383","typeString":"contract IUniswapV3Factory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":3955,"name":"_factory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3938,"src":"3215:8:32","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3954,"name":"IUniswapV3Factory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1383,"src":"3197:17:32","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IUniswapV3Factory_$1383_$","typeString":"type(contract IUniswapV3Factory)"}},"id":3956,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3197:27:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3Factory_$1383","typeString":"contract IUniswapV3Factory"}},"src":"3187:37:32","typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3Factory_$1383","typeString":"contract IUniswapV3Factory"}},"id":3958,"nodeType":"ExpressionStatement","src":"3187:37:32"},{"expression":{"id":3963,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3959,"name":"positionManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3866,"src":"3235:15:32","typeDescriptions":{"typeIdentifier":"t_contract$_INonfungiblePositionManager_$2618","typeString":"contract INonfungiblePositionManager"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":3961,"name":"_positionManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3940,"src":"3281:16:32","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3960,"name":"INonfungiblePositionManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2618,"src":"3253:27:32","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_INonfungiblePositionManager_$2618_$","typeString":"type(contract INonfungiblePositionManager)"}},"id":3962,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3253:45:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_INonfungiblePositionManager_$2618","typeString":"contract INonfungiblePositionManager"}},"src":"3235:63:32","typeDescriptions":{"typeIdentifier":"t_contract$_INonfungiblePositionManager_$2618","typeString":"contract INonfungiblePositionManager"}},"id":3964,"nodeType":"ExpressionStatement","src":"3235:63:32"},{"expression":{"id":3967,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3965,"name":"token0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3868,"src":"3309:6:32","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3966,"name":"_token0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3942,"src":"3318:7:32","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3309:16:32","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3968,"nodeType":"ExpressionStatement","src":"3309:16:32"},{"expression":{"id":3971,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3969,"name":"token1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3870,"src":"3336:6:32","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3970,"name":"_token1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3944,"src":"3345:7:32","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3336:16:32","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3972,"nodeType":"ExpressionStatement","src":"3336:16:32"},{"expression":{"id":3975,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3973,"name":"fee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3876,"src":"3363:3:32","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3974,"name":"_fee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3946,"src":"3369:4:32","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"src":"3363:10:32","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"id":3976,"nodeType":"ExpressionStatement","src":"3363:10:32"},{"expression":{"id":3979,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3977,"name":"WETH9","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3880,"src":"3384:5:32","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3978,"name":"_weth9","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3948,"src":"3392:6:32","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3384:14:32","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3980,"nodeType":"ExpressionStatement","src":"3384:14:32"},{"clauses":[{"block":{"id":3993,"nodeType":"Block","src":"3519:53:32","statements":[{"expression":{"id":3991,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3989,"name":"token0Decimals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3872,"src":"3534:14:32","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3990,"name":"_decimals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3987,"src":"3551:9:32","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"3534:26:32","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":3992,"nodeType":"ExpressionStatement","src":"3534:26:32"}]},"errorName":"","id":3994,"nodeType":"TryCatchClause","parameters":{"id":3988,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3987,"mutability":"mutable","name":"_decimals","nodeType":"VariableDeclaration","scope":3994,"src":"3502:15:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":3986,"name":"uint8","nodeType":"ElementaryTypeName","src":"3502:5:32","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"3501:17:32"},"src":"3493:79:32"},{"block":{"id":3999,"nodeType":"Block","src":"3579:71:32","statements":[{"expression":{"arguments":[{"hexValue":"546f6b656e3020646f6573206e6f7420737570706f727420646563696d616c732829","id":3996,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3601:36:32","typeDescriptions":{"typeIdentifier":"t_stringliteral_661d8ba06e4fe11f48d275e6363a31b01958af1680fc61f9e1e59f57f2f459e5","typeString":"literal_string \"Token0 does not support decimals()\""},"value":"Token0 does not support decimals()"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_661d8ba06e4fe11f48d275e6363a31b01958af1680fc61f9e1e59f57f2f459e5","typeString":"literal_string \"Token0 does not support decimals()\""}],"id":3995,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"3594:6:32","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":3997,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3594:44:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3998,"nodeType":"ExpressionStatement","src":"3594:44:32"}]},"errorName":"","id":4000,"nodeType":"TryCatchClause","src":"3573:77:32"}],"externalCall":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":3982,"name":"_token0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3942,"src":"3473:7:32","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3981,"name":"IERC20Decimals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3849,"src":"3458:14:32","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20Decimals_$3849_$","typeString":"type(contract IERC20Decimals)"}},"id":3983,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3458:23:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Decimals_$3849","typeString":"contract IERC20Decimals"}},"id":3984,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"decimals","nodeType":"MemberAccess","referencedDeclaration":3848,"src":"3458:32:32","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_uint8_$","typeString":"function () view external returns (uint8)"}},"id":3985,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3458:34:32","tryCall":true,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":4001,"nodeType":"TryStatement","src":"3454:196:32"},{"clauses":[{"block":{"id":4014,"nodeType":"Block","src":"3727:53:32","statements":[{"expression":{"id":4012,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4010,"name":"token1Decimals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3874,"src":"3742:14:32","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4011,"name":"_decimals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4008,"src":"3759:9:32","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"3742:26:32","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":4013,"nodeType":"ExpressionStatement","src":"3742:26:32"}]},"errorName":"","id":4015,"nodeType":"TryCatchClause","parameters":{"id":4009,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4008,"mutability":"mutable","name":"_decimals","nodeType":"VariableDeclaration","scope":4015,"src":"3710:15:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":4007,"name":"uint8","nodeType":"ElementaryTypeName","src":"3710:5:32","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"3709:17:32"},"src":"3701:79:32"},{"block":{"id":4020,"nodeType":"Block","src":"3787:71:32","statements":[{"expression":{"arguments":[{"hexValue":"546f6b656e3120646f6573206e6f7420737570706f727420646563696d616c732829","id":4017,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3809:36:32","typeDescriptions":{"typeIdentifier":"t_stringliteral_1a7fec9648706a07f007a7b8cfb0532c4d975c09980513eb1cfb7916bca8e585","typeString":"literal_string \"Token1 does not support decimals()\""},"value":"Token1 does not support decimals()"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_1a7fec9648706a07f007a7b8cfb0532c4d975c09980513eb1cfb7916bca8e585","typeString":"literal_string \"Token1 does not support decimals()\""}],"id":4016,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"3802:6:32","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":4018,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3802:44:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4019,"nodeType":"ExpressionStatement","src":"3802:44:32"}]},"errorName":"","id":4021,"nodeType":"TryCatchClause","src":"3781:77:32"}],"externalCall":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":4003,"name":"_token1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3944,"src":"3681:7:32","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4002,"name":"IERC20Decimals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3849,"src":"3666:14:32","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20Decimals_$3849_$","typeString":"type(contract IERC20Decimals)"}},"id":4004,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3666:23:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Decimals_$3849","typeString":"contract IERC20Decimals"}},"id":4005,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"decimals","nodeType":"MemberAccess","referencedDeclaration":3848,"src":"3666:32:32","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_uint8_$","typeString":"function () view external returns (uint8)"}},"id":4006,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3666:34:32","tryCall":true,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":4022,"nodeType":"TryStatement","src":"3662:196:32"},{"assignments":[4024],"declarations":[{"constant":false,"id":4024,"mutability":"mutable","name":"poolAddress","nodeType":"VariableDeclaration","scope":4094,"src":"3924:19:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4023,"name":"address","nodeType":"ElementaryTypeName","src":"3924:7:32","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":4033,"initialValue":{"arguments":[{"id":4029,"name":"_token0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3942,"src":"3996:7:32","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4030,"name":"_token1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3944,"src":"4018:7:32","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4031,"name":"_fee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3946,"src":"4040:4:32","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint24","typeString":"uint24"}],"expression":{"arguments":[{"id":4026,"name":"_factory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3938,"src":"3964:8:32","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4025,"name":"IUniswapV3Factory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1383,"src":"3946:17:32","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IUniswapV3Factory_$1383_$","typeString":"type(contract IUniswapV3Factory)"}},"id":4027,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3946:27:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3Factory_$1383","typeString":"contract IUniswapV3Factory"}},"id":4028,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"getPool","nodeType":"MemberAccess","referencedDeclaration":1356,"src":"3946:35:32","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$_t_uint24_$returns$_t_address_$","typeString":"function (address,address,uint24) view external returns (address)"}},"id":4032,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3946:109:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"3924:131:32"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4040,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4035,"name":"poolAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4024,"src":"4074:11:32","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":4038,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4097:1:32","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4037,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4089:7:32","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4036,"name":"address","nodeType":"ElementaryTypeName","src":"4089:7:32","typeDescriptions":{}}},"id":4039,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4089:10:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"4074:25:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"506f6f6c20646f6573206e6f74206578697374","id":4041,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4101:21:32","typeDescriptions":{"typeIdentifier":"t_stringliteral_5431fb1d188dcb2accc598cd1f0bfc0c6d8ac1fdd8f589953b20179c9a903b37","typeString":"literal_string \"Pool does not exist\""},"value":"Pool does not exist"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5431fb1d188dcb2accc598cd1f0bfc0c6d8ac1fdd8f589953b20179c9a903b37","typeString":"literal_string \"Pool does not exist\""}],"id":4034,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4066:7:32","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4042,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4066:57:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4043,"nodeType":"ExpressionStatement","src":"4066:57:32"},{"expression":{"id":4050,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4044,"name":"tickSpacing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3878,"src":"4134:11:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":4046,"name":"poolAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4024,"src":"4163:11:32","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4045,"name":"IUniswapV3Pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1405,"src":"4148:14:32","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IUniswapV3Pool_$1405_$","typeString":"type(contract IUniswapV3Pool)"}},"id":4047,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4148:27:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3Pool_$1405","typeString":"contract IUniswapV3Pool"}},"id":4048,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"tickSpacing","nodeType":"MemberAccess","referencedDeclaration":1712,"src":"4148:39:32","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_int24_$","typeString":"function () view external returns (int24)"}},"id":4049,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4148:41:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"src":"4134:55:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"id":4051,"nodeType":"ExpressionStatement","src":"4134:55:32"},{"expression":{"arguments":[{"arguments":[{"id":4058,"name":"_positionManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3940,"src":"4300:16:32","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4057,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4292:7:32","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4056,"name":"address","nodeType":"ElementaryTypeName","src":"4292:7:32","typeDescriptions":{}}},"id":4059,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4292:25:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"arguments":[{"id":4062,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4337:7:32","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":4061,"name":"uint256","nodeType":"ElementaryTypeName","src":"4337:7:32","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"}],"id":4060,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"4332:4:32","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4063,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4332:13:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint256","typeString":"type(uint256)"}},"id":4064,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"max","nodeType":"MemberAccess","src":"4332:17:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":4053,"name":"_token0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3942,"src":"4257:7:32","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4052,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":554,"src":"4250:6:32","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$554_$","typeString":"type(contract IERC20)"}},"id":4054,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4250:15:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$554","typeString":"contract IERC20"}},"id":4055,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"safeApprove","nodeType":"MemberAccess","referencedDeclaration":656,"src":"4250:27:32","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$554_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20_$554_$","typeString":"function (contract IERC20,address,uint256)"}},"id":4065,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4250:110:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4066,"nodeType":"ExpressionStatement","src":"4250:110:32"},{"expression":{"arguments":[{"arguments":[{"id":4073,"name":"_positionManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3940,"src":"4421:16:32","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4072,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4413:7:32","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4071,"name":"address","nodeType":"ElementaryTypeName","src":"4413:7:32","typeDescriptions":{}}},"id":4074,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4413:25:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"arguments":[{"id":4077,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4458:7:32","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":4076,"name":"uint256","nodeType":"ElementaryTypeName","src":"4458:7:32","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"}],"id":4075,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"4453:4:32","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4078,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4453:13:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint256","typeString":"type(uint256)"}},"id":4079,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"max","nodeType":"MemberAccess","src":"4453:17:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":4068,"name":"_token1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3944,"src":"4378:7:32","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4067,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":554,"src":"4371:6:32","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$554_$","typeString":"type(contract IERC20)"}},"id":4069,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4371:15:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$554","typeString":"contract IERC20"}},"id":4070,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"safeApprove","nodeType":"MemberAccess","referencedDeclaration":656,"src":"4371:27:32","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$554_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20_$554_$","typeString":"function (contract IERC20,address,uint256)"}},"id":4080,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4371:110:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4081,"nodeType":"ExpressionStatement","src":"4371:110:32"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4087,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4082,"name":"_initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3950,"src":"4498:13:32","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":4085,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4523:1:32","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4084,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4515:7:32","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4083,"name":"address","nodeType":"ElementaryTypeName","src":"4515:7:32","typeDescriptions":{}}},"id":4086,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4515:10:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"4498:27:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4093,"nodeType":"IfStatement","src":"4494:92:32","trueBody":{"id":4092,"nodeType":"Block","src":"4527:59:32","statements":[{"expression":{"arguments":[{"id":4089,"name":"_initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3950,"src":"4560:13:32","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4088,"name":"transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":108,"src":"4542:17:32","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":4090,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4542:32:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4091,"nodeType":"ExpressionStatement","src":"4542:32:32"}]}}]},"id":4095,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nodeType":"FunctionDefinition","parameters":{"id":3951,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3938,"mutability":"mutable","name":"_factory","nodeType":"VariableDeclaration","scope":4095,"src":"2938:16:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3937,"name":"address","nodeType":"ElementaryTypeName","src":"2938:7:32","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3940,"mutability":"mutable","name":"_positionManager","nodeType":"VariableDeclaration","scope":4095,"src":"2965:24:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3939,"name":"address","nodeType":"ElementaryTypeName","src":"2965:7:32","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3942,"mutability":"mutable","name":"_token0","nodeType":"VariableDeclaration","scope":4095,"src":"3000:15:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3941,"name":"address","nodeType":"ElementaryTypeName","src":"3000:7:32","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3944,"mutability":"mutable","name":"_token1","nodeType":"VariableDeclaration","scope":4095,"src":"3026:15:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3943,"name":"address","nodeType":"ElementaryTypeName","src":"3026:7:32","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3946,"mutability":"mutable","name":"_fee","nodeType":"VariableDeclaration","scope":4095,"src":"3052:11:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"},"typeName":{"id":3945,"name":"uint24","nodeType":"ElementaryTypeName","src":"3052:6:32","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"visibility":"internal"},{"constant":false,"id":3948,"mutability":"mutable","name":"_weth9","nodeType":"VariableDeclaration","scope":4095,"src":"3074:14:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3947,"name":"address","nodeType":"ElementaryTypeName","src":"3074:7:32","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3950,"mutability":"mutable","name":"_initialOwner","nodeType":"VariableDeclaration","scope":4095,"src":"3099:21:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3949,"name":"address","nodeType":"ElementaryTypeName","src":"3099:7:32","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2927:200:32"},"returnParameters":{"id":3952,"nodeType":"ParameterList","parameters":[],"src":"3128:0:32"},"scope":5220,"src":"2916:1677:32","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":4134,"nodeType":"Block","src":"4775:808:32","statements":[{"assignments":[4105,4107,4109,4111,4113],"declarations":[{"constant":false,"id":4105,"mutability":"mutable","name":"currentPriceDecimal","nodeType":"VariableDeclaration","scope":4134,"src":"4868:27:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4104,"name":"uint256","nodeType":"ElementaryTypeName","src":"4868:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4107,"mutability":"mutable","name":"currentTick","nodeType":"VariableDeclaration","scope":4134,"src":"4910:17:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":4106,"name":"int24","nodeType":"ElementaryTypeName","src":"4910:5:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":4109,"mutability":"mutable","name":"predictedTick","nodeType":"VariableDeclaration","scope":4134,"src":"4942:19:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":4108,"name":"int24","nodeType":"ElementaryTypeName","src":"4942:5:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":4111,"mutability":"mutable","name":"targetTickLower","nodeType":"VariableDeclaration","scope":4134,"src":"4976:21:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":4110,"name":"int24","nodeType":"ElementaryTypeName","src":"4976:5:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":4113,"mutability":"mutable","name":"targetTickUpper","nodeType":"VariableDeclaration","scope":4134,"src":"5012:21:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":4112,"name":"int24","nodeType":"ElementaryTypeName","src":"5012:5:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"}],"id":4117,"initialValue":{"arguments":[{"id":4115,"name":"predictedPriceDecimal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4097,"src":"5072:21:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4114,"name":"_calculatePredictionData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4195,"src":"5047:24:32","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_uint256_$_t_int24_$_t_int24_$_t_int24_$_t_int24_$","typeString":"function (uint256) view returns (uint256,int24,int24,int24,int24)"}},"id":4116,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5047:47:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_int24_$_t_int24_$_t_int24_$_t_int24_$","typeString":"tuple(uint256,int24,int24,int24,int24)"}},"nodeType":"VariableDeclarationStatement","src":"4853:241:32"},{"assignments":[4119],"declarations":[{"constant":false,"id":4119,"mutability":"mutable","name":"adjusted","nodeType":"VariableDeclaration","scope":4134,"src":"5145:13:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4118,"name":"bool","nodeType":"ElementaryTypeName","src":"5145:4:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":4124,"initialValue":{"arguments":[{"id":4121,"name":"targetTickLower","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4111,"src":"5199:15:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},{"id":4122,"name":"targetTickUpper","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4113,"src":"5229:15:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int24","typeString":"int24"},{"typeIdentifier":"t_int24","typeString":"int24"}],"id":4120,"name":"_updatePositionIfNeeded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4229,"src":"5161:23:32","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_int24_$_t_int24_$returns$_t_bool_$","typeString":"function (int24,int24) returns (bool)"}},"id":4123,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5161:94:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"5145:110:32"},{"expression":{"arguments":[{"id":4126,"name":"currentPriceDecimal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4105,"src":"5398:19:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4127,"name":"predictedPriceDecimal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4097,"src":"5432:21:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4128,"name":"predictedTick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4109,"src":"5468:13:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},{"id":4129,"name":"targetTickLower","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4111,"src":"5496:15:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},{"id":4130,"name":"targetTickUpper","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4113,"src":"5526:15:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},{"id":4131,"name":"adjusted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4119,"src":"5556:8:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_int24","typeString":"int24"},{"typeIdentifier":"t_int24","typeString":"int24"},{"typeIdentifier":"t_int24","typeString":"int24"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":4125,"name":"_emitPredictionMetrics","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5169,"src":"5361:22:32","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_uint256_$_t_int24_$_t_int24_$_t_int24_$_t_bool_$returns$__$","typeString":"function (uint256,uint256,int24,int24,int24,bool)"}},"id":4132,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5361:214:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4133,"nodeType":"ExpressionStatement","src":"5361:214:32"}]},"functionSelector":"41675b05","id":4135,"implemented":true,"kind":"function","modifiers":[{"id":4100,"modifierName":{"id":4099,"name":"nonReentrant","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1299,"src":"4752:12:32","typeDescriptions":{"typeIdentifier":"t_modifier$__$","typeString":"modifier ()"}},"nodeType":"ModifierInvocation","src":"4752:12:32"},{"id":4102,"modifierName":{"id":4101,"name":"onlyOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":58,"src":"4765:9:32","typeDescriptions":{"typeIdentifier":"t_modifier$__$","typeString":"modifier ()"}},"nodeType":"ModifierInvocation","src":"4765:9:32"}],"name":"updatePredictionAndAdjust","nodeType":"FunctionDefinition","parameters":{"id":4098,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4097,"mutability":"mutable","name":"predictedPriceDecimal","nodeType":"VariableDeclaration","scope":4135,"src":"4706:29:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4096,"name":"uint256","nodeType":"ElementaryTypeName","src":"4706:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4695:47:32"},"returnParameters":{"id":4103,"nodeType":"ParameterList","parameters":[],"src":"4775:0:32"},"scope":5220,"src":"4661:922:32","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":4194,"nodeType":"Block","src":"5997:631:32","statements":[{"assignments":[4151],"declarations":[{"constant":false,"id":4151,"mutability":"mutable","name":"sqrtPriceX96","nodeType":"VariableDeclaration","scope":4194,"src":"6064:20:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":4150,"name":"uint160","nodeType":"ElementaryTypeName","src":"6064:7:32","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"}],"id":4152,"nodeType":"VariableDeclarationStatement","src":"6064:20:32"},{"assignments":[4154],"declarations":[{"constant":false,"id":4154,"mutability":"mutable","name":"tick","nodeType":"VariableDeclaration","scope":4194,"src":"6095:10:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":4153,"name":"int24","nodeType":"ElementaryTypeName","src":"6095:5:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"}],"id":4155,"nodeType":"VariableDeclarationStatement","src":"6095:10:32"},{"expression":{"id":4161,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"components":[{"id":4156,"name":"sqrtPriceX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4151,"src":"6117:12:32","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},{"id":4157,"name":"tick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4154,"src":"6131:4:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}}],"id":4158,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"6116:20:32","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint160_$_t_int24_$","typeString":"tuple(uint160,int24)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[],"expression":{"argumentTypes":[],"id":4159,"name":"_getCurrentSqrtPriceAndTick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4949,"src":"6139:27:32","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint160_$_t_int24_$","typeString":"function () view returns (uint160,int24)"}},"id":4160,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6139:29:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint160_$_t_int24_$","typeString":"tuple(uint160,int24)"}},"src":"6116:52:32","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4162,"nodeType":"ExpressionStatement","src":"6116:52:32"},{"expression":{"id":4165,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4163,"name":"currentTick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4142,"src":"6179:11:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4164,"name":"tick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4154,"src":"6193:4:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"src":"6179:18:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"id":4166,"nodeType":"ExpressionStatement","src":"6179:18:32"},{"expression":{"id":4171,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4167,"name":"currentPriceDecimal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4140,"src":"6208:19:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4169,"name":"sqrtPriceX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4151,"src":"6251:12:32","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":4168,"name":"_sqrtPriceX96ToPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5011,"src":"6230:20:32","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint160_$returns$_t_uint256_$","typeString":"function (uint160) view returns (uint256)"}},"id":4170,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6230:34:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6208:56:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4172,"nodeType":"ExpressionStatement","src":"6208:56:32"},{"expression":{"id":4177,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4173,"name":"predictedTick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4144,"src":"6275:13:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4175,"name":"predictedPriceDecimal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4137,"src":"6304:21:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4174,"name":"_priceToTick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5142,"src":"6291:12:32","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_int24_$","typeString":"function (uint256) view returns (int24)"}},"id":4176,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6291:35:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"src":"6275:51:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"id":4178,"nodeType":"ExpressionStatement","src":"6275:51:32"},{"expression":{"id":4185,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"components":[{"id":4179,"name":"targetTickLower","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4146,"src":"6375:15:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},{"id":4180,"name":"targetTickUpper","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4148,"src":"6392:15:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}}],"id":4181,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"6374:34:32","typeDescriptions":{"typeIdentifier":"t_tuple$_t_int24_$_t_int24_$","typeString":"tuple(int24,int24)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4183,"name":"predictedTick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4144,"src":"6427:13:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int24","typeString":"int24"}],"id":4182,"name":"_calculateTicks","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4870,"src":"6411:15:32","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_int24_$returns$_t_int24_$_t_int24_$","typeString":"function (int24) view returns (int24,int24)"}},"id":4184,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6411:30:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_int24_$_t_int24_$","typeString":"tuple(int24,int24)"}},"src":"6374:67:32","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4186,"nodeType":"ExpressionStatement","src":"6374:67:32"},{"expression":{"components":[{"id":4187,"name":"currentPriceDecimal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4140,"src":"6476:19:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4188,"name":"currentTick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4142,"src":"6510:11:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},{"id":4189,"name":"predictedTick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4144,"src":"6536:13:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},{"id":4190,"name":"targetTickLower","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4146,"src":"6564:15:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},{"id":4191,"name":"targetTickUpper","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4148,"src":"6594:15:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}}],"id":4192,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6461:159:32","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_int24_$_t_int24_$_t_int24_$_t_int24_$","typeString":"tuple(uint256,int24,int24,int24,int24)"}},"functionReturnParameters":4149,"id":4193,"nodeType":"Return","src":"6454:166:32"}]},"id":4195,"implemented":true,"kind":"function","modifiers":[],"name":"_calculatePredictionData","nodeType":"FunctionDefinition","parameters":{"id":4138,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4137,"mutability":"mutable","name":"predictedPriceDecimal","nodeType":"VariableDeclaration","scope":4195,"src":"5714:29:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4136,"name":"uint256","nodeType":"ElementaryTypeName","src":"5714:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5703:47:32"},"returnParameters":{"id":4149,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4140,"mutability":"mutable","name":"currentPriceDecimal","nodeType":"VariableDeclaration","scope":4195,"src":"5815:27:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4139,"name":"uint256","nodeType":"ElementaryTypeName","src":"5815:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4142,"mutability":"mutable","name":"currentTick","nodeType":"VariableDeclaration","scope":4195,"src":"5857:17:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":4141,"name":"int24","nodeType":"ElementaryTypeName","src":"5857:5:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":4144,"mutability":"mutable","name":"predictedTick","nodeType":"VariableDeclaration","scope":4195,"src":"5889:19:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":4143,"name":"int24","nodeType":"ElementaryTypeName","src":"5889:5:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":4146,"mutability":"mutable","name":"targetTickLower","nodeType":"VariableDeclaration","scope":4195,"src":"5923:21:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":4145,"name":"int24","nodeType":"ElementaryTypeName","src":"5923:5:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":4148,"mutability":"mutable","name":"targetTickUpper","nodeType":"VariableDeclaration","scope":4195,"src":"5959:21:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":4147,"name":"int24","nodeType":"ElementaryTypeName","src":"5959:5:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"}],"src":"5800:191:32"},"scope":5220,"src":"5670:958:32","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":4228,"nodeType":"Block","src":"6849:319:32","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4216,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4211,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4206,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"6878:23:32","subExpression":{"expression":{"id":4204,"name":"currentPosition","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3893,"src":"6879:15:32","typeDescriptions":{"typeIdentifier":"t_struct$_Position_$3891_storage","typeString":"struct PredictiveLiquidityManager.Position storage ref"}},"id":4205,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"active","nodeType":"MemberAccess","referencedDeclaration":3890,"src":"6879:22:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_int24","typeString":"int24"},"id":4210,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4207,"name":"targetTickLower","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4197,"src":"6918:15:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":4208,"name":"currentPosition","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3893,"src":"6937:15:32","typeDescriptions":{"typeIdentifier":"t_struct$_Position_$3891_storage","typeString":"struct PredictiveLiquidityManager.Position storage ref"}},"id":4209,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"tickLower","nodeType":"MemberAccess","referencedDeclaration":3886,"src":"6937:25:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"src":"6918:44:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6878:84:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_int24","typeString":"int24"},"id":4215,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4212,"name":"targetTickUpper","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4199,"src":"6979:15:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":4213,"name":"currentPosition","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3893,"src":"6998:15:32","typeDescriptions":{"typeIdentifier":"t_struct$_Position_$3891_storage","typeString":"struct PredictiveLiquidityManager.Position storage ref"}},"id":4214,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"tickUpper","nodeType":"MemberAccess","referencedDeclaration":3888,"src":"6998:25:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"src":"6979:44:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6878:145:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4225,"nodeType":"IfStatement","src":"6860:278:32","trueBody":{"id":4224,"nodeType":"Block","src":"7035:103:32","statements":[{"expression":{"arguments":[{"id":4218,"name":"targetTickLower","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4197,"src":"7067:15:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},{"id":4219,"name":"targetTickUpper","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4199,"src":"7084:15:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int24","typeString":"int24"},{"typeIdentifier":"t_int24","typeString":"int24"}],"id":4217,"name":"_adjustLiquidity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4295,"src":"7050:16:32","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_int24_$_t_int24_$returns$__$","typeString":"function (int24,int24)"}},"id":4220,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7050:50:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4221,"nodeType":"ExpressionStatement","src":"7050:50:32"},{"expression":{"hexValue":"74727565","id":4222,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"7122:4:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":4203,"id":4223,"nodeType":"Return","src":"7115:11:32"}]}},{"expression":{"hexValue":"66616c7365","id":4226,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"7155:5:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":4203,"id":4227,"nodeType":"Return","src":"7148:12:32"}]},"id":4229,"implemented":true,"kind":"function","modifiers":[],"name":"_updatePositionIfNeeded","nodeType":"FunctionDefinition","parameters":{"id":4200,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4197,"mutability":"mutable","name":"targetTickLower","nodeType":"VariableDeclaration","scope":4229,"src":"6755:21:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":4196,"name":"int24","nodeType":"ElementaryTypeName","src":"6755:5:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":4199,"mutability":"mutable","name":"targetTickUpper","nodeType":"VariableDeclaration","scope":4229,"src":"6787:21:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":4198,"name":"int24","nodeType":"ElementaryTypeName","src":"6787:5:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"}],"src":"6744:71:32"},"returnParameters":{"id":4203,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4202,"mutability":"mutable","name":"adjusted","nodeType":"VariableDeclaration","scope":4229,"src":"6834:13:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4201,"name":"bool","nodeType":"ElementaryTypeName","src":"6834:4:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6833:15:32"},"scope":5220,"src":"6712:456:32","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4294,"nodeType":"Block","src":"7299:434:32","statements":[{"condition":{"expression":{"id":4236,"name":"currentPosition","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3893,"src":"7314:15:32","typeDescriptions":{"typeIdentifier":"t_struct$_Position_$3891_storage","typeString":"struct PredictiveLiquidityManager.Position storage ref"}},"id":4237,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"active","nodeType":"MemberAccess","referencedDeclaration":3890,"src":"7314:22:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4242,"nodeType":"IfStatement","src":"7310:73:32","trueBody":{"id":4241,"nodeType":"Block","src":"7338:45:32","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":4238,"name":"_removeLiquidity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4376,"src":"7353:16:32","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":4239,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7353:18:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4240,"nodeType":"ExpressionStatement","src":"7353:18:32"}]}},{"assignments":[4244],"declarations":[{"constant":false,"id":4244,"mutability":"mutable","name":"balance0","nodeType":"VariableDeclaration","scope":4294,"src":"7393:16:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4243,"name":"uint256","nodeType":"ElementaryTypeName","src":"7393:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4254,"initialValue":{"arguments":[{"arguments":[{"id":4251,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"7445:4:32","typeDescriptions":{"typeIdentifier":"t_contract$_PredictiveLiquidityManager_$5220","typeString":"contract PredictiveLiquidityManager"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_PredictiveLiquidityManager_$5220","typeString":"contract PredictiveLiquidityManager"}],"id":4250,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7437:7:32","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4249,"name":"address","nodeType":"ElementaryTypeName","src":"7437:7:32","typeDescriptions":{}}},"id":4252,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7437:13:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[{"id":4246,"name":"token0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3868,"src":"7419:6:32","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4245,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":554,"src":"7412:6:32","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$554_$","typeString":"type(contract IERC20)"}},"id":4247,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7412:14:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$554","typeString":"contract IERC20"}},"id":4248,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balanceOf","nodeType":"MemberAccess","referencedDeclaration":493,"src":"7412:24:32","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":4253,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7412:39:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7393:58:32"},{"assignments":[4256],"declarations":[{"constant":false,"id":4256,"mutability":"mutable","name":"balance1","nodeType":"VariableDeclaration","scope":4294,"src":"7462:16:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4255,"name":"uint256","nodeType":"ElementaryTypeName","src":"7462:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4266,"initialValue":{"arguments":[{"arguments":[{"id":4263,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"7514:4:32","typeDescriptions":{"typeIdentifier":"t_contract$_PredictiveLiquidityManager_$5220","typeString":"contract PredictiveLiquidityManager"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_PredictiveLiquidityManager_$5220","typeString":"contract PredictiveLiquidityManager"}],"id":4262,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7506:7:32","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4261,"name":"address","nodeType":"ElementaryTypeName","src":"7506:7:32","typeDescriptions":{}}},"id":4264,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7506:13:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[{"id":4258,"name":"token1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3870,"src":"7488:6:32","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4257,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":554,"src":"7481:6:32","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$554_$","typeString":"type(contract IERC20)"}},"id":4259,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7481:14:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$554","typeString":"contract IERC20"}},"id":4260,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balanceOf","nodeType":"MemberAccess","referencedDeclaration":493,"src":"7481:24:32","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":4265,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7481:39:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7462:58:32"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4273,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4269,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4267,"name":"balance0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4244,"src":"7535:8:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4268,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7546:1:32","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7535:12:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4272,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4270,"name":"balance1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4256,"src":"7551:8:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4271,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7562:1:32","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7551:12:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"7535:28:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":4292,"nodeType":"Block","src":"7654:72:32","statements":[{"expression":{"id":4290,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4282,"name":"currentPosition","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3893,"src":"7669:15:32","typeDescriptions":{"typeIdentifier":"t_struct$_Position_$3891_storage","typeString":"struct PredictiveLiquidityManager.Position storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"hexValue":"30","id":4284,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7696:1:32","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":4285,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7699:1:32","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":4286,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7702:1:32","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":4287,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7705:1:32","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"66616c7365","id":4288,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"7708:5:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":4283,"name":"Position","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3891,"src":"7687:8:32","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Position_$3891_storage_ptr_$","typeString":"type(struct PredictiveLiquidityManager.Position storage pointer)"}},"id":4289,"isConstant":false,"isLValue":false,"isPure":true,"kind":"structConstructorCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7687:27:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Position_$3891_memory_ptr","typeString":"struct PredictiveLiquidityManager.Position memory"}},"src":"7669:45:32","typeDescriptions":{"typeIdentifier":"t_struct$_Position_$3891_storage","typeString":"struct PredictiveLiquidityManager.Position storage ref"}},"id":4291,"nodeType":"ExpressionStatement","src":"7669:45:32"}]},"id":4293,"nodeType":"IfStatement","src":"7531:195:32","trueBody":{"id":4281,"nodeType":"Block","src":"7565:83:32","statements":[{"expression":{"arguments":[{"id":4275,"name":"tickLower","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4231,"src":"7595:9:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},{"id":4276,"name":"tickUpper","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4233,"src":"7606:9:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},{"id":4277,"name":"balance0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4244,"src":"7617:8:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4278,"name":"balance1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4256,"src":"7627:8:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int24","typeString":"int24"},{"typeIdentifier":"t_int24","typeString":"int24"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4274,"name":"_mintLiquidity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4583,"src":"7580:14:32","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_int24_$_t_int24_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (int24,int24,uint256,uint256)"}},"id":4279,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7580:56:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4280,"nodeType":"ExpressionStatement","src":"7580:56:32"}]}}]},"id":4295,"implemented":true,"kind":"function","modifiers":[],"name":"_adjustLiquidity","nodeType":"FunctionDefinition","parameters":{"id":4234,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4231,"mutability":"mutable","name":"tickLower","nodeType":"VariableDeclaration","scope":4295,"src":"7256:15:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":4230,"name":"int24","nodeType":"ElementaryTypeName","src":"7256:5:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":4233,"mutability":"mutable","name":"tickUpper","nodeType":"VariableDeclaration","scope":4295,"src":"7273:15:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":4232,"name":"int24","nodeType":"ElementaryTypeName","src":"7273:5:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"}],"src":"7255:34:32"},"returnParameters":{"id":4235,"nodeType":"ParameterList","parameters":[],"src":"7299:0:32"},"scope":5220,"src":"7230:503:32","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4323,"nodeType":"Block","src":"8058:236:32","statements":[{"eventCall":{"arguments":[{"hexValue":"52454d4f5645","id":4313,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8107:8:32","typeDescriptions":{"typeIdentifier":"t_stringliteral_8503b41ae6bc3c81c6fa6652ef11a964d3fe84420f61398c3faa65b1c9f5e77c","typeString":"literal_string \"REMOVE\""},"value":"REMOVE"},{"id":4314,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4297,"src":"8130:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4315,"name":"tickLower","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4299,"src":"8152:9:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},{"id":4316,"name":"tickUpper","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4301,"src":"8176:9:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},{"id":4317,"name":"liquidity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4303,"src":"8200:9:32","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},{"id":4318,"name":"amount0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4305,"src":"8224:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4319,"name":"amount1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4307,"src":"8246:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4320,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4309,"src":"8268:7:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_8503b41ae6bc3c81c6fa6652ef11a964d3fe84420f61398c3faa65b1c9f5e77c","typeString":"literal_string \"REMOVE\""},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_int24","typeString":"int24"},{"typeIdentifier":"t_int24","typeString":"int24"},{"typeIdentifier":"t_uint128","typeString":"uint128"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":4312,"name":"LiquidityOperation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3914,"src":"8074:18:32","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_string_memory_ptr_$_t_uint256_$_t_int24_$_t_int24_$_t_uint128_$_t_uint256_$_t_uint256_$_t_bool_$returns$__$","typeString":"function (string memory,uint256,int24,int24,uint128,uint256,uint256,bool)"}},"id":4321,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8074:212:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4322,"nodeType":"EmitStatement","src":"8069:217:32"}]},"id":4324,"implemented":true,"kind":"function","modifiers":[],"name":"_emitLiquidityRemoveEvent","nodeType":"FunctionDefinition","parameters":{"id":4310,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4297,"mutability":"mutable","name":"tokenId","nodeType":"VariableDeclaration","scope":4324,"src":"7871:15:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4296,"name":"uint256","nodeType":"ElementaryTypeName","src":"7871:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4299,"mutability":"mutable","name":"tickLower","nodeType":"VariableDeclaration","scope":4324,"src":"7897:15:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":4298,"name":"int24","nodeType":"ElementaryTypeName","src":"7897:5:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":4301,"mutability":"mutable","name":"tickUpper","nodeType":"VariableDeclaration","scope":4324,"src":"7923:15:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":4300,"name":"int24","nodeType":"ElementaryTypeName","src":"7923:5:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":4303,"mutability":"mutable","name":"liquidity","nodeType":"VariableDeclaration","scope":4324,"src":"7949:17:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":4302,"name":"uint128","nodeType":"ElementaryTypeName","src":"7949:7:32","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"},{"constant":false,"id":4305,"mutability":"mutable","name":"amount0","nodeType":"VariableDeclaration","scope":4324,"src":"7977:15:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4304,"name":"uint256","nodeType":"ElementaryTypeName","src":"7977:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4307,"mutability":"mutable","name":"amount1","nodeType":"VariableDeclaration","scope":4324,"src":"8003:15:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4306,"name":"uint256","nodeType":"ElementaryTypeName","src":"8003:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4309,"mutability":"mutable","name":"success","nodeType":"VariableDeclaration","scope":4324,"src":"8029:12:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4308,"name":"bool","nodeType":"ElementaryTypeName","src":"8029:4:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"7860:188:32"},"returnParameters":{"id":4311,"nodeType":"ParameterList","parameters":[],"src":"8058:0:32"},"scope":5220,"src":"7826:468:32","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4375,"nodeType":"Block","src":"8339:580:32","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4334,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4328,"name":"currentPosition","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3893,"src":"8372:15:32","typeDescriptions":{"typeIdentifier":"t_struct$_Position_$3891_storage","typeString":"struct PredictiveLiquidityManager.Position storage ref"}},"id":4329,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"active","nodeType":"MemberAccess","referencedDeclaration":3890,"src":"8372:22:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4333,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4330,"name":"currentPosition","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3893,"src":"8398:15:32","typeDescriptions":{"typeIdentifier":"t_struct$_Position_$3891_storage","typeString":"struct PredictiveLiquidityManager.Position storage ref"}},"id":4331,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"tokenId","nodeType":"MemberAccess","referencedDeclaration":3882,"src":"8398:23:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":4332,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8425:1:32","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8398:28:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8372:54:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4e6f2061637469766520706f736974696f6e","id":4335,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8441:20:32","typeDescriptions":{"typeIdentifier":"t_stringliteral_7f8125015117dd75b23ce94a1f1b95a56c6b263752737858dfbd59ad91b03334","typeString":"literal_string \"No active position\""},"value":"No active position"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_7f8125015117dd75b23ce94a1f1b95a56c6b263752737858dfbd59ad91b03334","typeString":"literal_string \"No active position\""}],"id":4327,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8350:7:32","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4336,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8350:122:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4337,"nodeType":"ExpressionStatement","src":"8350:122:32"},{"assignments":[4339],"declarations":[{"constant":false,"id":4339,"mutability":"mutable","name":"_tokenId","nodeType":"VariableDeclaration","scope":4375,"src":"8483:16:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4338,"name":"uint256","nodeType":"ElementaryTypeName","src":"8483:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4342,"initialValue":{"expression":{"id":4340,"name":"currentPosition","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3893,"src":"8502:15:32","typeDescriptions":{"typeIdentifier":"t_struct$_Position_$3891_storage","typeString":"struct PredictiveLiquidityManager.Position storage ref"}},"id":4341,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"tokenId","nodeType":"MemberAccess","referencedDeclaration":3882,"src":"8502:23:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8483:42:32"},{"assignments":[4344],"declarations":[{"constant":false,"id":4344,"mutability":"mutable","name":"_liquidity","nodeType":"VariableDeclaration","scope":4375,"src":"8536:18:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":4343,"name":"uint128","nodeType":"ElementaryTypeName","src":"8536:7:32","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"}],"id":4347,"initialValue":{"expression":{"id":4345,"name":"currentPosition","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3893,"src":"8557:15:32","typeDescriptions":{"typeIdentifier":"t_struct$_Position_$3891_storage","typeString":"struct PredictiveLiquidityManager.Position storage ref"}},"id":4346,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"liquidity","nodeType":"MemberAccess","referencedDeclaration":3884,"src":"8557:25:32","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"nodeType":"VariableDeclarationStatement","src":"8536:46:32"},{"assignments":[4349],"declarations":[{"constant":false,"id":4349,"mutability":"mutable","name":"_tickLower","nodeType":"VariableDeclaration","scope":4375,"src":"8593:16:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":4348,"name":"int24","nodeType":"ElementaryTypeName","src":"8593:5:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"}],"id":4352,"initialValue":{"expression":{"id":4350,"name":"currentPosition","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3893,"src":"8612:15:32","typeDescriptions":{"typeIdentifier":"t_struct$_Position_$3891_storage","typeString":"struct PredictiveLiquidityManager.Position storage ref"}},"id":4351,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"tickLower","nodeType":"MemberAccess","referencedDeclaration":3886,"src":"8612:25:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"VariableDeclarationStatement","src":"8593:44:32"},{"assignments":[4354],"declarations":[{"constant":false,"id":4354,"mutability":"mutable","name":"_tickUpper","nodeType":"VariableDeclaration","scope":4375,"src":"8648:16:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":4353,"name":"int24","nodeType":"ElementaryTypeName","src":"8648:5:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"}],"id":4357,"initialValue":{"expression":{"id":4355,"name":"currentPosition","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3893,"src":"8667:15:32","typeDescriptions":{"typeIdentifier":"t_struct$_Position_$3891_storage","typeString":"struct PredictiveLiquidityManager.Position storage ref"}},"id":4356,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"tickUpper","nodeType":"MemberAccess","referencedDeclaration":3888,"src":"8667:25:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"VariableDeclarationStatement","src":"8648:44:32"},{"expression":{"id":4366,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4358,"name":"currentPosition","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3893,"src":"8705:15:32","typeDescriptions":{"typeIdentifier":"t_struct$_Position_$3891_storage","typeString":"struct PredictiveLiquidityManager.Position storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"hexValue":"30","id":4360,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8732:1:32","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":4361,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8735:1:32","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":4362,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8738:1:32","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":4363,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8741:1:32","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"66616c7365","id":4364,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"8744:5:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":4359,"name":"Position","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3891,"src":"8723:8:32","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Position_$3891_storage_ptr_$","typeString":"type(struct PredictiveLiquidityManager.Position storage pointer)"}},"id":4365,"isConstant":false,"isLValue":false,"isPure":true,"kind":"structConstructorCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8723:27:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Position_$3891_memory_ptr","typeString":"struct PredictiveLiquidityManager.Position memory"}},"src":"8705:45:32","typeDescriptions":{"typeIdentifier":"t_struct$_Position_$3891_storage","typeString":"struct PredictiveLiquidityManager.Position storage ref"}},"id":4367,"nodeType":"ExpressionStatement","src":"8705:45:32"},{"expression":{"arguments":[{"id":4369,"name":"_tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4339,"src":"8866:8:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4370,"name":"_liquidity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4344,"src":"8876:10:32","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},{"id":4371,"name":"_tickLower","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4349,"src":"8888:10:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},{"id":4372,"name":"_tickUpper","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4354,"src":"8900:10:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint128","typeString":"uint128"},{"typeIdentifier":"t_int24","typeString":"int24"},{"typeIdentifier":"t_int24","typeString":"int24"}],"id":4368,"name":"_executeRemoval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4506,"src":"8850:15:32","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_uint128_$_t_int24_$_t_int24_$returns$__$","typeString":"function (uint256,uint128,int24,int24)"}},"id":4373,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8850:61:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4374,"nodeType":"ExpressionStatement","src":"8850:61:32"}]},"id":4376,"implemented":true,"kind":"function","modifiers":[],"name":"_removeLiquidity","nodeType":"FunctionDefinition","parameters":{"id":4325,"nodeType":"ParameterList","parameters":[],"src":"8327:2:32"},"returnParameters":{"id":4326,"nodeType":"ParameterList","parameters":[],"src":"8339:0:32"},"scope":5220,"src":"8302:617:32","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4505,"nodeType":"Block","src":"9157:2047:32","statements":[{"assignments":[4388],"declarations":[{"constant":false,"id":4388,"mutability":"mutable","name":"decreaseSuccess","nodeType":"VariableDeclaration","scope":4505,"src":"9168:20:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4387,"name":"bool","nodeType":"ElementaryTypeName","src":"9168:4:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":4390,"initialValue":{"hexValue":"66616c7365","id":4389,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"9191:5:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"nodeType":"VariableDeclarationStatement","src":"9168:28:32"},{"assignments":[4392],"declarations":[{"constant":false,"id":4392,"mutability":"mutable","name":"collectSuccess","nodeType":"VariableDeclaration","scope":4505,"src":"9207:19:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4391,"name":"bool","nodeType":"ElementaryTypeName","src":"9207:4:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":4394,"initialValue":{"hexValue":"66616c7365","id":4393,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"9229:5:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"nodeType":"VariableDeclarationStatement","src":"9207:27:32"},{"assignments":[4396],"declarations":[{"constant":false,"id":4396,"mutability":"mutable","name":"amount0Collected","nodeType":"VariableDeclaration","scope":4505,"src":"9245:24:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4395,"name":"uint256","nodeType":"ElementaryTypeName","src":"9245:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4398,"initialValue":{"hexValue":"30","id":4397,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9272:1:32","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"9245:28:32"},{"assignments":[4400],"declarations":[{"constant":false,"id":4400,"mutability":"mutable","name":"amount1Collected","nodeType":"VariableDeclaration","scope":4505,"src":"9284:24:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4399,"name":"uint256","nodeType":"ElementaryTypeName","src":"9284:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4402,"initialValue":{"hexValue":"30","id":4401,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9311:1:32","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"9284:28:32"},{"condition":{"commonType":{"typeIdentifier":"t_uint128","typeString":"uint128"},"id":4405,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4403,"name":"_liquidity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4380,"src":"9329:10:32","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4404,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9342:1:32","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9329:14:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":4432,"nodeType":"Block","src":"9947:49:32","statements":[{"expression":{"id":4430,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4428,"name":"decreaseSuccess","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4388,"src":"9962:15:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":4429,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"9980:4:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"9962:22:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4431,"nodeType":"ExpressionStatement","src":"9962:22:32"}]},"id":4433,"nodeType":"IfStatement","src":"9325:671:32","trueBody":{"id":4427,"nodeType":"Block","src":"9345:596:32","statements":[{"clauses":[{"block":{"id":4422,"nodeType":"Block","src":"9770:57:32","statements":[{"expression":{"id":4420,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4418,"name":"decreaseSuccess","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4388,"src":"9789:15:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":4419,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"9807:4:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"9789:22:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4421,"nodeType":"ExpressionStatement","src":"9789:22:32"}]},"errorName":"","id":4423,"nodeType":"TryCatchClause","src":"9770:57:32"},{"block":{"id":4424,"nodeType":"Block","src":"9834:96:32","statements":[]},"errorName":"","id":4425,"nodeType":"TryCatchClause","src":"9828:102:32"}],"externalCall":{"arguments":[{"arguments":[{"id":4410,"name":"_tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4378,"src":"9525:8:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4411,"name":"_liquidity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4380,"src":"9571:10:32","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},{"hexValue":"30","id":4412,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9620:1:32","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":4413,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9660:1:32","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"expression":{"id":4414,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"9698:5:32","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":4415,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"timestamp","nodeType":"MemberAccess","src":"9698:15:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint128","typeString":"uint128"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4408,"name":"INonfungiblePositionManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2618,"src":"9437:27:32","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_INonfungiblePositionManager_$2618_$","typeString":"type(contract INonfungiblePositionManager)"}},"id":4409,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"DecreaseLiquidityParams","nodeType":"MemberAccess","referencedDeclaration":2582,"src":"9437:51:32","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_DecreaseLiquidityParams_$2582_storage_ptr_$","typeString":"type(struct INonfungiblePositionManager.DecreaseLiquidityParams storage pointer)"}},"id":4416,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"names":["tokenId","liquidity","amount0Min","amount1Min","deadline"],"nodeType":"FunctionCall","src":"9437:300:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_DecreaseLiquidityParams_$2582_memory_ptr","typeString":"struct INonfungiblePositionManager.DecreaseLiquidityParams memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_DecreaseLiquidityParams_$2582_memory_ptr","typeString":"struct INonfungiblePositionManager.DecreaseLiquidityParams memory"}],"expression":{"id":4406,"name":"positionManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3866,"src":"9381:15:32","typeDescriptions":{"typeIdentifier":"t_contract$_INonfungiblePositionManager_$2618","typeString":"contract INonfungiblePositionManager"}},"id":4407,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"decreaseLiquidity","nodeType":"MemberAccess","referencedDeclaration":2592,"src":"9381:33:32","typeDescriptions":{"typeIdentifier":"t_function_external_payable$_t_struct$_DecreaseLiquidityParams_$2582_memory_ptr_$returns$_t_uint256_$_t_uint256_$","typeString":"function (struct INonfungiblePositionManager.DecreaseLiquidityParams memory) payable external returns (uint256,uint256)"}},"id":4417,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9381:375:32","tryCall":true,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"id":4426,"nodeType":"TryStatement","src":"9360:570:32"}]}},{"condition":{"id":4434,"name":"decreaseSuccess","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4388,"src":"10012:15:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4488,"nodeType":"IfStatement","src":"10008:812:32","trueBody":{"id":4487,"nodeType":"Block","src":"10029:791:32","statements":[{"clauses":[{"block":{"id":4473,"nodeType":"Block","src":"10450:136:32","statements":[{"expression":{"id":4463,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4461,"name":"amount0Collected","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4396,"src":"10469:16:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4462,"name":"a0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4457,"src":"10488:2:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10469:21:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4464,"nodeType":"ExpressionStatement","src":"10469:21:32"},{"expression":{"id":4467,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4465,"name":"amount1Collected","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4400,"src":"10509:16:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4466,"name":"a1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4459,"src":"10528:2:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10509:21:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4468,"nodeType":"ExpressionStatement","src":"10509:21:32"},{"expression":{"id":4471,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4469,"name":"collectSuccess","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4392,"src":"10549:14:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":4470,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"10566:4:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"10549:21:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4472,"nodeType":"ExpressionStatement","src":"10549:21:32"}]},"errorName":"","id":4474,"nodeType":"TryCatchClause","parameters":{"id":4460,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4457,"mutability":"mutable","name":"a0","nodeType":"VariableDeclaration","scope":4474,"src":"10426:10:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4456,"name":"uint256","nodeType":"ElementaryTypeName","src":"10426:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4459,"mutability":"mutable","name":"a1","nodeType":"VariableDeclaration","scope":4474,"src":"10438:10:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4458,"name":"uint256","nodeType":"ElementaryTypeName","src":"10438:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10425:24:32"},"src":"10417:169:32"},{"block":{"id":4475,"nodeType":"Block","src":"10593:96:32","statements":[]},"errorName":"","id":4476,"nodeType":"TryCatchClause","src":"10587:102:32"}],"externalCall":{"arguments":[{"arguments":[{"id":4439,"name":"_tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4378,"src":"10189:8:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"id":4442,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"10243:4:32","typeDescriptions":{"typeIdentifier":"t_contract$_PredictiveLiquidityManager_$5220","typeString":"contract PredictiveLiquidityManager"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_PredictiveLiquidityManager_$5220","typeString":"contract PredictiveLiquidityManager"}],"id":4441,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10235:7:32","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4440,"name":"address","nodeType":"ElementaryTypeName","src":"10235:7:32","typeDescriptions":{}}},"id":4443,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10235:13:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"arguments":[{"id":4446,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10292:7:32","typeDescriptions":{"typeIdentifier":"t_type$_t_uint128_$","typeString":"type(uint128)"},"typeName":{"id":4445,"name":"uint128","nodeType":"ElementaryTypeName","src":"10292:7:32","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint128_$","typeString":"type(uint128)"}],"id":4444,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"10287:4:32","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4447,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10287:13:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint128","typeString":"type(uint128)"}},"id":4448,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"max","nodeType":"MemberAccess","src":"10287:17:32","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},{"expression":{"arguments":[{"id":4451,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10348:7:32","typeDescriptions":{"typeIdentifier":"t_type$_t_uint128_$","typeString":"type(uint128)"},"typeName":{"id":4450,"name":"uint128","nodeType":"ElementaryTypeName","src":"10348:7:32","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint128_$","typeString":"type(uint128)"}],"id":4449,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"10343:4:32","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4452,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10343:13:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint128","typeString":"type(uint128)"}},"id":4453,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"max","nodeType":"MemberAccess","src":"10343:17:32","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint128","typeString":"uint128"},{"typeIdentifier":"t_uint128","typeString":"uint128"}],"expression":{"id":4437,"name":"INonfungiblePositionManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2618,"src":"10111:27:32","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_INonfungiblePositionManager_$2618_$","typeString":"type(contract INonfungiblePositionManager)"}},"id":4438,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"CollectParams","nodeType":"MemberAccess","referencedDeclaration":2601,"src":"10111:41:32","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_CollectParams_$2601_storage_ptr_$","typeString":"type(struct INonfungiblePositionManager.CollectParams storage pointer)"}},"id":4454,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"names":["tokenId","recipient","amount0Max","amount1Max"],"nodeType":"FunctionCall","src":"10111:273:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_CollectParams_$2601_memory_ptr","typeString":"struct INonfungiblePositionManager.CollectParams memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_CollectParams_$2601_memory_ptr","typeString":"struct INonfungiblePositionManager.CollectParams memory"}],"expression":{"id":4435,"name":"positionManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3866,"src":"10065:15:32","typeDescriptions":{"typeIdentifier":"t_contract$_INonfungiblePositionManager_$2618","typeString":"contract INonfungiblePositionManager"}},"id":4436,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"collect","nodeType":"MemberAccess","referencedDeclaration":2611,"src":"10065:23:32","typeDescriptions":{"typeIdentifier":"t_function_external_payable$_t_struct$_CollectParams_$2601_memory_ptr_$returns$_t_uint256_$_t_uint256_$","typeString":"function (struct INonfungiblePositionManager.CollectParams memory) payable external returns (uint256,uint256)"}},"id":4455,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10065:338:32","tryCall":true,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"id":4477,"nodeType":"TryStatement","src":"10044:645:32"},{"clauses":[{"block":{"id":4482,"nodeType":"Block","src":"10798:2:32","statements":[]},"errorName":"","id":4483,"nodeType":"TryCatchClause","src":"10798:2:32"},{"block":{"id":4484,"nodeType":"Block","src":"10807:2:32","statements":[]},"errorName":"","id":4485,"nodeType":"TryCatchClause","src":"10801:8:32"}],"externalCall":{"arguments":[{"id":4480,"name":"_tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4378,"src":"10788:8:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4478,"name":"positionManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3866,"src":"10767:15:32","typeDescriptions":{"typeIdentifier":"t_contract$_INonfungiblePositionManager_$2618","typeString":"contract INonfungiblePositionManager"}},"id":4479,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"burn","nodeType":"MemberAccess","referencedDeclaration":2617,"src":"10767:20:32","typeDescriptions":{"typeIdentifier":"t_function_external_payable$_t_uint256_$returns$__$","typeString":"function (uint256) payable external"}},"id":4481,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10767:30:32","tryCall":true,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4486,"nodeType":"TryStatement","src":"10763:46:32"}]}},{"assignments":[4490],"declarations":[{"constant":false,"id":4490,"mutability":"mutable","name":"overallSuccess","nodeType":"VariableDeclaration","scope":4505,"src":"10832:19:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4489,"name":"bool","nodeType":"ElementaryTypeName","src":"10832:4:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":4494,"initialValue":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4493,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4491,"name":"decreaseSuccess","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4388,"src":"10854:15:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"id":4492,"name":"collectSuccess","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4392,"src":"10873:14:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"10854:33:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"10832:55:32"},{"expression":{"arguments":[{"id":4496,"name":"_tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4378,"src":"11011:8:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4497,"name":"_tickLower","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4382,"src":"11034:10:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},{"id":4498,"name":"_tickUpper","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4384,"src":"11059:10:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},{"id":4499,"name":"_liquidity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4380,"src":"11084:10:32","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},{"id":4500,"name":"amount0Collected","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4396,"src":"11109:16:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4501,"name":"amount1Collected","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4400,"src":"11140:16:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4502,"name":"overallSuccess","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4490,"src":"11171:14:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_int24","typeString":"int24"},{"typeIdentifier":"t_int24","typeString":"int24"},{"typeIdentifier":"t_uint128","typeString":"uint128"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":4495,"name":"_emitLiquidityRemoveEvent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4324,"src":"10971:25:32","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_int24_$_t_int24_$_t_uint128_$_t_uint256_$_t_uint256_$_t_bool_$returns$__$","typeString":"function (uint256,int24,int24,uint128,uint256,uint256,bool)"}},"id":4503,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10971:225:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4504,"nodeType":"ExpressionStatement","src":"10971:225:32"}]},"id":4506,"implemented":true,"kind":"function","modifiers":[],"name":"_executeRemoval","nodeType":"FunctionDefinition","parameters":{"id":4385,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4378,"mutability":"mutable","name":"_tokenId","nodeType":"VariableDeclaration","scope":4506,"src":"9041:16:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4377,"name":"uint256","nodeType":"ElementaryTypeName","src":"9041:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4380,"mutability":"mutable","name":"_liquidity","nodeType":"VariableDeclaration","scope":4506,"src":"9068:18:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":4379,"name":"uint128","nodeType":"ElementaryTypeName","src":"9068:7:32","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"},{"constant":false,"id":4382,"mutability":"mutable","name":"_tickLower","nodeType":"VariableDeclaration","scope":4506,"src":"9097:16:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":4381,"name":"int24","nodeType":"ElementaryTypeName","src":"9097:5:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":4384,"mutability":"mutable","name":"_tickUpper","nodeType":"VariableDeclaration","scope":4506,"src":"9124:16:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":4383,"name":"int24","nodeType":"ElementaryTypeName","src":"9124:5:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"}],"src":"9030:117:32"},"returnParameters":{"id":4386,"nodeType":"ParameterList","parameters":[],"src":"9157:0:32"},"scope":5220,"src":"9006:2198:32","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4534,"nodeType":"Block","src":"11524:234:32","statements":[{"eventCall":{"arguments":[{"hexValue":"4d494e54","id":4524,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11573:6:32","typeDescriptions":{"typeIdentifier":"t_stringliteral_fdf81848136595c31bb5f76217767372bc4bf906663038eb38381131ea27ecba","typeString":"literal_string \"MINT\""},"value":"MINT"},{"id":4525,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4508,"src":"11594:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4526,"name":"tickLower","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4510,"src":"11616:9:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},{"id":4527,"name":"tickUpper","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4512,"src":"11640:9:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},{"id":4528,"name":"liquidity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4514,"src":"11664:9:32","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},{"id":4529,"name":"amount0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4516,"src":"11688:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4530,"name":"amount1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4518,"src":"11710:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4531,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4520,"src":"11732:7:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_fdf81848136595c31bb5f76217767372bc4bf906663038eb38381131ea27ecba","typeString":"literal_string \"MINT\""},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_int24","typeString":"int24"},{"typeIdentifier":"t_int24","typeString":"int24"},{"typeIdentifier":"t_uint128","typeString":"uint128"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":4523,"name":"LiquidityOperation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3914,"src":"11540:18:32","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_string_memory_ptr_$_t_uint256_$_t_int24_$_t_int24_$_t_uint128_$_t_uint256_$_t_uint256_$_t_bool_$returns$__$","typeString":"function (string memory,uint256,int24,int24,uint128,uint256,uint256,bool)"}},"id":4532,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11540:210:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4533,"nodeType":"EmitStatement","src":"11535:215:32"}]},"id":4535,"implemented":true,"kind":"function","modifiers":[],"name":"_emitLiquidityMintEvent","nodeType":"FunctionDefinition","parameters":{"id":4521,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4508,"mutability":"mutable","name":"tokenId","nodeType":"VariableDeclaration","scope":4535,"src":"11337:15:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4507,"name":"uint256","nodeType":"ElementaryTypeName","src":"11337:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4510,"mutability":"mutable","name":"tickLower","nodeType":"VariableDeclaration","scope":4535,"src":"11363:15:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":4509,"name":"int24","nodeType":"ElementaryTypeName","src":"11363:5:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":4512,"mutability":"mutable","name":"tickUpper","nodeType":"VariableDeclaration","scope":4535,"src":"11389:15:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":4511,"name":"int24","nodeType":"ElementaryTypeName","src":"11389:5:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":4514,"mutability":"mutable","name":"liquidity","nodeType":"VariableDeclaration","scope":4535,"src":"11415:17:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":4513,"name":"uint128","nodeType":"ElementaryTypeName","src":"11415:7:32","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"},{"constant":false,"id":4516,"mutability":"mutable","name":"amount0","nodeType":"VariableDeclaration","scope":4535,"src":"11443:15:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4515,"name":"uint256","nodeType":"ElementaryTypeName","src":"11443:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4518,"mutability":"mutable","name":"amount1","nodeType":"VariableDeclaration","scope":4535,"src":"11469:15:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4517,"name":"uint256","nodeType":"ElementaryTypeName","src":"11469:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4520,"mutability":"mutable","name":"success","nodeType":"VariableDeclaration","scope":4535,"src":"11495:12:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4519,"name":"bool","nodeType":"ElementaryTypeName","src":"11495:4:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"11326:188:32"},"returnParameters":{"id":4522,"nodeType":"ParameterList","parameters":[],"src":"11524:0:32"},"scope":5220,"src":"11294:464:32","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4582,"nodeType":"Block","src":"11924:766:32","statements":[{"expression":{"arguments":[{"id":4549,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"11943:23:32","subExpression":{"expression":{"id":4547,"name":"currentPosition","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3893,"src":"11944:15:32","typeDescriptions":{"typeIdentifier":"t_struct$_Position_$3891_storage","typeString":"struct PredictiveLiquidityManager.Position storage ref"}},"id":4548,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"active","nodeType":"MemberAccess","referencedDeclaration":3890,"src":"11944:22:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"506f736974696f6e20616c726561647920616374697665","id":4550,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11968:25:32","typeDescriptions":{"typeIdentifier":"t_stringliteral_44869874655bf0887220635de03422dfc5fe91eb11e0815cf64ede1a814a8cfa","typeString":"literal_string \"Position already active\""},"value":"Position already active"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_44869874655bf0887220635de03422dfc5fe91eb11e0815cf64ede1a814a8cfa","typeString":"literal_string \"Position already active\""}],"id":4546,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"11935:7:32","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4551,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11935:59:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4552,"nodeType":"ExpressionStatement","src":"11935:59:32"},{"assignments":[4556],"declarations":[{"constant":false,"id":4556,"mutability":"mutable","name":"params","nodeType":"VariableDeclaration","scope":4582,"src":"12007:65:32","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_MintParams_$2532_memory_ptr","typeString":"struct INonfungiblePositionManager.MintParams"},"typeName":{"id":4555,"name":"INonfungiblePositionManager.MintParams","nodeType":"UserDefinedTypeName","referencedDeclaration":2532,"src":"12007:38:32","typeDescriptions":{"typeIdentifier":"t_struct$_MintParams_$2532_storage_ptr","typeString":"struct INonfungiblePositionManager.MintParams"}},"visibility":"internal"}],"id":4575,"initialValue":{"arguments":[{"id":4559,"name":"token0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3868,"src":"12141:6:32","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4560,"name":"token1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3870,"src":"12174:6:32","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4561,"name":"fee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3876,"src":"12204:3:32","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},{"id":4562,"name":"tickLower","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4537,"src":"12237:9:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},{"id":4563,"name":"tickUpper","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4539,"src":"12276:9:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},{"id":4564,"name":"amount0Desired","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4541,"src":"12320:14:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4565,"name":"amount1Desired","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4543,"src":"12369:14:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"30","id":4566,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12414:1:32","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":4567,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12446:1:32","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"arguments":[{"id":4570,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"12485:4:32","typeDescriptions":{"typeIdentifier":"t_contract$_PredictiveLiquidityManager_$5220","typeString":"contract PredictiveLiquidityManager"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_PredictiveLiquidityManager_$5220","typeString":"contract PredictiveLiquidityManager"}],"id":4569,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12477:7:32","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4568,"name":"address","nodeType":"ElementaryTypeName","src":"12477:7:32","typeDescriptions":{}}},"id":4571,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12477:13:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":4572,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"12519:5:32","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":4573,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"timestamp","nodeType":"MemberAccess","src":"12519:15:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint24","typeString":"uint24"},{"typeIdentifier":"t_int24","typeString":"int24"},{"typeIdentifier":"t_int24","typeString":"int24"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4557,"name":"INonfungiblePositionManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2618,"src":"12075:27:32","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_INonfungiblePositionManager_$2618_$","typeString":"type(contract INonfungiblePositionManager)"}},"id":4558,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"MintParams","nodeType":"MemberAccess","referencedDeclaration":2532,"src":"12075:38:32","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_MintParams_$2532_storage_ptr_$","typeString":"type(struct INonfungiblePositionManager.MintParams storage pointer)"}},"id":4574,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"names":["token0","token1","fee","tickLower","tickUpper","amount0Desired","amount1Desired","amount0Min","amount1Min","recipient","deadline"],"nodeType":"FunctionCall","src":"12075:475:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_MintParams_$2532_memory_ptr","typeString":"struct INonfungiblePositionManager.MintParams memory"}},"nodeType":"VariableDeclarationStatement","src":"12007:543:32"},{"expression":{"arguments":[{"id":4577,"name":"params","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4556,"src":"12653:6:32","typeDescriptions":{"typeIdentifier":"t_struct$_MintParams_$2532_memory_ptr","typeString":"struct INonfungiblePositionManager.MintParams memory"}},{"id":4578,"name":"tickLower","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4537,"src":"12661:9:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},{"id":4579,"name":"tickUpper","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4539,"src":"12672:9:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_MintParams_$2532_memory_ptr","typeString":"struct INonfungiblePositionManager.MintParams memory"},{"typeIdentifier":"t_int24","typeString":"int24"},{"typeIdentifier":"t_int24","typeString":"int24"}],"id":4576,"name":"_executeMint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4704,"src":"12640:12:32","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_MintParams_$2532_memory_ptr_$_t_int24_$_t_int24_$returns$__$","typeString":"function (struct INonfungiblePositionManager.MintParams memory,int24,int24)"}},"id":4580,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12640:42:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4581,"nodeType":"ExpressionStatement","src":"12640:42:32"}]},"id":4583,"implemented":true,"kind":"function","modifiers":[],"name":"_mintLiquidity","nodeType":"FunctionDefinition","parameters":{"id":4544,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4537,"mutability":"mutable","name":"tickLower","nodeType":"VariableDeclaration","scope":4583,"src":"11800:15:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":4536,"name":"int24","nodeType":"ElementaryTypeName","src":"11800:5:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":4539,"mutability":"mutable","name":"tickUpper","nodeType":"VariableDeclaration","scope":4583,"src":"11826:15:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":4538,"name":"int24","nodeType":"ElementaryTypeName","src":"11826:5:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":4541,"mutability":"mutable","name":"amount0Desired","nodeType":"VariableDeclaration","scope":4583,"src":"11852:22:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4540,"name":"uint256","nodeType":"ElementaryTypeName","src":"11852:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4543,"mutability":"mutable","name":"amount1Desired","nodeType":"VariableDeclaration","scope":4583,"src":"11885:22:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4542,"name":"uint256","nodeType":"ElementaryTypeName","src":"11885:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11789:125:32"},"returnParameters":{"id":4545,"nodeType":"ParameterList","parameters":[],"src":"11924:0:32"},"scope":5220,"src":"11766:924:32","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4703,"nodeType":"Block","src":"12851:1410:32","statements":[{"assignments":[4593],"declarations":[{"constant":false,"id":4593,"mutability":"mutable","name":"tokenId","nodeType":"VariableDeclaration","scope":4703,"src":"12862:15:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4592,"name":"uint256","nodeType":"ElementaryTypeName","src":"12862:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4595,"initialValue":{"hexValue":"30","id":4594,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12880:1:32","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"12862:19:32"},{"assignments":[4597],"declarations":[{"constant":false,"id":4597,"mutability":"mutable","name":"liquidity","nodeType":"VariableDeclaration","scope":4703,"src":"12892:17:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":4596,"name":"uint128","nodeType":"ElementaryTypeName","src":"12892:7:32","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"}],"id":4599,"initialValue":{"hexValue":"30","id":4598,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12912:1:32","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"12892:21:32"},{"assignments":[4601],"declarations":[{"constant":false,"id":4601,"mutability":"mutable","name":"amount0Actual","nodeType":"VariableDeclaration","scope":4703,"src":"12924:21:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4600,"name":"uint256","nodeType":"ElementaryTypeName","src":"12924:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4603,"initialValue":{"hexValue":"30","id":4602,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12948:1:32","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"12924:25:32"},{"assignments":[4605],"declarations":[{"constant":false,"id":4605,"mutability":"mutable","name":"amount1Actual","nodeType":"VariableDeclaration","scope":4703,"src":"12960:21:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4604,"name":"uint256","nodeType":"ElementaryTypeName","src":"12960:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4607,"initialValue":{"hexValue":"30","id":4606,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12984:1:32","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"12960:25:32"},{"assignments":[4609],"declarations":[{"constant":false,"id":4609,"mutability":"mutable","name":"success","nodeType":"VariableDeclaration","scope":4703,"src":"12996:12:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4608,"name":"bool","nodeType":"ElementaryTypeName","src":"12996:4:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":4611,"initialValue":{"hexValue":"66616c7365","id":4610,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"13011:5:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"nodeType":"VariableDeclarationStatement","src":"12996:20:32"},{"clauses":[{"block":{"id":4674,"nodeType":"Block","src":"13208:564:32","statements":[{"expression":{"id":4627,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4625,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4593,"src":"13223:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4626,"name":"_tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4617,"src":"13233:8:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13223:18:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4628,"nodeType":"ExpressionStatement","src":"13223:18:32"},{"expression":{"id":4631,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4629,"name":"liquidity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4597,"src":"13256:9:32","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4630,"name":"_liquidity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4619,"src":"13268:10:32","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"src":"13256:22:32","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"id":4632,"nodeType":"ExpressionStatement","src":"13256:22:32"},{"expression":{"id":4635,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4633,"name":"amount0Actual","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4601,"src":"13293:13:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4634,"name":"_amount0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4621,"src":"13309:8:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13293:24:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4636,"nodeType":"ExpressionStatement","src":"13293:24:32"},{"expression":{"id":4639,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4637,"name":"amount1Actual","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4605,"src":"13332:13:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4638,"name":"_amount1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4623,"src":"13348:8:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13332:24:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4640,"nodeType":"ExpressionStatement","src":"13332:24:32"},{"condition":{"commonType":{"typeIdentifier":"t_uint128","typeString":"uint128"},"id":4643,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4641,"name":"liquidity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4597,"src":"13377:9:32","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4642,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13389:1:32","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"13377:13:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4661,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4659,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4593,"src":"13668:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":4660,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13679:1:32","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"13668:12:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4672,"nodeType":"IfStatement","src":"13664:97:32","trueBody":{"id":4671,"nodeType":"Block","src":"13682:79:32","statements":[{"clauses":[{"block":{"id":4666,"nodeType":"Block","src":"13735:2:32","statements":[]},"errorName":"","id":4667,"nodeType":"TryCatchClause","src":"13735:2:32"},{"block":{"id":4668,"nodeType":"Block","src":"13744:2:32","statements":[]},"errorName":"","id":4669,"nodeType":"TryCatchClause","src":"13738:8:32"}],"externalCall":{"arguments":[{"id":4664,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4593,"src":"13726:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4662,"name":"positionManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3866,"src":"13705:15:32","typeDescriptions":{"typeIdentifier":"t_contract$_INonfungiblePositionManager_$2618","typeString":"contract INonfungiblePositionManager"}},"id":4663,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"burn","nodeType":"MemberAccess","referencedDeclaration":2617,"src":"13705:20:32","typeDescriptions":{"typeIdentifier":"t_function_external_payable$_t_uint256_$returns$__$","typeString":"function (uint256) payable external"}},"id":4665,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"13705:29:32","tryCall":true,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4670,"nodeType":"TryStatement","src":"13701:45:32"}]}},"id":4673,"nodeType":"IfStatement","src":"13373:388:32","trueBody":{"id":4658,"nodeType":"Block","src":"13392:266:32","statements":[{"expression":{"id":4652,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4644,"name":"currentPosition","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3893,"src":"13411:15:32","typeDescriptions":{"typeIdentifier":"t_struct$_Position_$3891_storage","typeString":"struct PredictiveLiquidityManager.Position storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4646,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4593,"src":"13460:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4647,"name":"liquidity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4597,"src":"13490:9:32","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},{"id":4648,"name":"tickLower","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4587,"src":"13522:9:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},{"id":4649,"name":"tickUpper","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4589,"src":"13554:9:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},{"hexValue":"74727565","id":4650,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"13586:4:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint128","typeString":"uint128"},{"typeIdentifier":"t_int24","typeString":"int24"},{"typeIdentifier":"t_int24","typeString":"int24"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":4645,"name":"Position","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3891,"src":"13429:8:32","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Position_$3891_storage_ptr_$","typeString":"type(struct PredictiveLiquidityManager.Position storage pointer)"}},"id":4651,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"13429:180:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Position_$3891_memory_ptr","typeString":"struct PredictiveLiquidityManager.Position memory"}},"src":"13411:198:32","typeDescriptions":{"typeIdentifier":"t_struct$_Position_$3891_storage","typeString":"struct PredictiveLiquidityManager.Position storage ref"}},"id":4653,"nodeType":"ExpressionStatement","src":"13411:198:32"},{"expression":{"id":4656,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4654,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4609,"src":"13628:7:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":4655,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"13638:4:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"13628:14:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4657,"nodeType":"ExpressionStatement","src":"13628:14:32"}]}}]},"errorName":"","id":4675,"nodeType":"TryCatchClause","parameters":{"id":4624,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4617,"mutability":"mutable","name":"_tokenId","nodeType":"VariableDeclaration","scope":4675,"src":"13085:16:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4616,"name":"uint256","nodeType":"ElementaryTypeName","src":"13085:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4619,"mutability":"mutable","name":"_liquidity","nodeType":"VariableDeclaration","scope":4675,"src":"13116:18:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":4618,"name":"uint128","nodeType":"ElementaryTypeName","src":"13116:7:32","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"},{"constant":false,"id":4621,"mutability":"mutable","name":"_amount0","nodeType":"VariableDeclaration","scope":4675,"src":"13149:16:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4620,"name":"uint256","nodeType":"ElementaryTypeName","src":"13149:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4623,"mutability":"mutable","name":"_amount1","nodeType":"VariableDeclaration","scope":4675,"src":"13180:16:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4622,"name":"uint256","nodeType":"ElementaryTypeName","src":"13180:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13070:137:32"},"src":"13062:710:32"},{"block":{"id":4676,"nodeType":"Block","src":"13779:87:32","statements":[]},"errorName":"","id":4677,"nodeType":"TryCatchClause","src":"13773:93:32"}],"externalCall":{"arguments":[{"id":4614,"name":"params","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4585,"src":"13054:6:32","typeDescriptions":{"typeIdentifier":"t_struct$_MintParams_$2532_memory_ptr","typeString":"struct INonfungiblePositionManager.MintParams memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_MintParams_$2532_memory_ptr","typeString":"struct INonfungiblePositionManager.MintParams memory"}],"expression":{"id":4612,"name":"positionManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3866,"src":"13033:15:32","typeDescriptions":{"typeIdentifier":"t_contract$_INonfungiblePositionManager_$2618","typeString":"contract INonfungiblePositionManager"}},"id":4613,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"mint","nodeType":"MemberAccess","referencedDeclaration":2546,"src":"13033:20:32","typeDescriptions":{"typeIdentifier":"t_function_external_payable$_t_struct$_MintParams_$2532_memory_ptr_$returns$_t_uint256_$_t_uint128_$_t_uint256_$_t_uint256_$","typeString":"function (struct INonfungiblePositionManager.MintParams memory) payable external returns (uint256,uint128,uint256,uint256)"}},"id":4615,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"13033:28:32","tryCall":true,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint128_$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint128,uint256,uint256)"}},"id":4678,"nodeType":"TryStatement","src":"13029:837:32"},{"expression":{"arguments":[{"id":4680,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4593,"src":"13987:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4681,"name":"tickLower","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4587,"src":"14009:9:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},{"id":4682,"name":"tickUpper","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4589,"src":"14033:9:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},{"id":4683,"name":"liquidity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4597,"src":"14057:9:32","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},{"id":4684,"name":"amount0Actual","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4601,"src":"14081:13:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4685,"name":"amount1Actual","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4605,"src":"14109:13:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4686,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4609,"src":"14137:7:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_int24","typeString":"int24"},{"typeIdentifier":"t_int24","typeString":"int24"},{"typeIdentifier":"t_uint128","typeString":"uint128"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":4679,"name":"_emitLiquidityMintEvent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4535,"src":"13949:23:32","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_int24_$_t_int24_$_t_uint128_$_t_uint256_$_t_uint256_$_t_bool_$returns$__$","typeString":"function (uint256,int24,int24,uint128,uint256,uint256,bool)"}},"id":4687,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"13949:206:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4688,"nodeType":"ExpressionStatement","src":"13949:206:32"},{"condition":{"id":4690,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"14172:8:32","subExpression":{"id":4689,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4609,"src":"14173:7:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4702,"nodeType":"IfStatement","src":"14168:86:32","trueBody":{"id":4701,"nodeType":"Block","src":"14182:72:32","statements":[{"expression":{"id":4699,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4691,"name":"currentPosition","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3893,"src":"14197:15:32","typeDescriptions":{"typeIdentifier":"t_struct$_Position_$3891_storage","typeString":"struct PredictiveLiquidityManager.Position storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"hexValue":"30","id":4693,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14224:1:32","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":4694,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14227:1:32","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":4695,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14230:1:32","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":4696,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14233:1:32","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"66616c7365","id":4697,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"14236:5:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":4692,"name":"Position","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3891,"src":"14215:8:32","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Position_$3891_storage_ptr_$","typeString":"type(struct PredictiveLiquidityManager.Position storage pointer)"}},"id":4698,"isConstant":false,"isLValue":false,"isPure":true,"kind":"structConstructorCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"14215:27:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Position_$3891_memory_ptr","typeString":"struct PredictiveLiquidityManager.Position memory"}},"src":"14197:45:32","typeDescriptions":{"typeIdentifier":"t_struct$_Position_$3891_storage","typeString":"struct PredictiveLiquidityManager.Position storage ref"}},"id":4700,"nodeType":"ExpressionStatement","src":"14197:45:32"}]}}]},"id":4704,"implemented":true,"kind":"function","modifiers":[],"name":"_executeMint","nodeType":"FunctionDefinition","parameters":{"id":4590,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4585,"mutability":"mutable","name":"params","nodeType":"VariableDeclaration","scope":4704,"src":"12730:52:32","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_MintParams_$2532_memory_ptr","typeString":"struct INonfungiblePositionManager.MintParams"},"typeName":{"id":4584,"name":"INonfungiblePositionManager.MintParams","nodeType":"UserDefinedTypeName","referencedDeclaration":2532,"src":"12730:38:32","typeDescriptions":{"typeIdentifier":"t_struct$_MintParams_$2532_storage_ptr","typeString":"struct INonfungiblePositionManager.MintParams"}},"visibility":"internal"},{"constant":false,"id":4587,"mutability":"mutable","name":"tickLower","nodeType":"VariableDeclaration","scope":4704,"src":"12793:15:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":4586,"name":"int24","nodeType":"ElementaryTypeName","src":"12793:5:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":4589,"mutability":"mutable","name":"tickUpper","nodeType":"VariableDeclaration","scope":4704,"src":"12819:15:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":4588,"name":"int24","nodeType":"ElementaryTypeName","src":"12819:5:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"}],"src":"12719:122:32"},"returnParameters":{"id":4591,"nodeType":"ParameterList","parameters":[],"src":"12851:0:32"},"scope":5220,"src":"12698:1563:32","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4869,"nodeType":"Block","src":"14436:1949:32","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_int24","typeString":"int24"},"id":4716,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4714,"name":"tickSpacing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3878,"src":"14455:11:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4715,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14469:1:32","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"14455:15:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e76616c6964207469636b2073706163696e67","id":4717,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"14472:22:32","typeDescriptions":{"typeIdentifier":"t_stringliteral_a4238a4cbfb4a17a74cd968b5708041a9e895755502d165d8fe5123867deb340","typeString":"literal_string \"Invalid tick spacing\""},"value":"Invalid tick spacing"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_a4238a4cbfb4a17a74cd968b5708041a9e895755502d165d8fe5123867deb340","typeString":"literal_string \"Invalid tick spacing\""}],"id":4713,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"14447:7:32","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4718,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"14447:48:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4719,"nodeType":"ExpressionStatement","src":"14447:48:32"},{"assignments":[4721],"declarations":[{"constant":false,"id":4721,"mutability":"mutable","name":"halfWidth","nodeType":"VariableDeclaration","scope":4869,"src":"14562:15:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":4720,"name":"int24","nodeType":"ElementaryTypeName","src":"14562:5:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"}],"id":4731,"initialValue":{"commonType":{"typeIdentifier":"t_int24","typeString":"int24"},"id":4730,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int24","typeString":"int24"},"id":4727,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4722,"name":"tickSpacing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3878,"src":"14581:11:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"arguments":[{"id":4725,"name":"rangeWidthMultiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3896,"src":"14601:20:32","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint24","typeString":"uint24"}],"id":4724,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14595:5:32","typeDescriptions":{"typeIdentifier":"t_type$_t_int24_$","typeString":"type(int24)"},"typeName":{"id":4723,"name":"int24","nodeType":"ElementaryTypeName","src":"14595:5:32","typeDescriptions":{}}},"id":4726,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"14595:27:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"src":"14581:41:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}}],"id":4728,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"14580:43:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"32","id":4729,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14626:1:32","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"14580:47:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"VariableDeclarationStatement","src":"14562:65:32"},{"condition":{"commonType":{"typeIdentifier":"t_int24","typeString":"int24"},"id":4734,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4732,"name":"halfWidth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4721,"src":"14642:9:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"hexValue":"30","id":4733,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14655:1:32","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"14642:14:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4739,"nodeType":"IfStatement","src":"14638:43:32","trueBody":{"expression":{"id":4737,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4735,"name":"halfWidth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4721,"src":"14658:9:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4736,"name":"tickSpacing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3878,"src":"14670:11:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"src":"14658:23:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"id":4738,"nodeType":"ExpressionStatement","src":"14658:23:32"}},{"expression":{"id":4747,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4740,"name":"halfWidth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4721,"src":"14775:9:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_int24","typeString":"int24"},"id":4746,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int24","typeString":"int24"},"id":4743,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4741,"name":"halfWidth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4721,"src":"14788:9:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4742,"name":"tickSpacing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3878,"src":"14800:11:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"src":"14788:23:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}}],"id":4744,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"14787:25:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4745,"name":"tickSpacing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3878,"src":"14815:11:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"src":"14787:39:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"src":"14775:51:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"id":4748,"nodeType":"ExpressionStatement","src":"14775:51:32"},{"condition":{"commonType":{"typeIdentifier":"t_int24","typeString":"int24"},"id":4751,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4749,"name":"halfWidth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4721,"src":"14841:9:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":4750,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14854:1:32","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"14841:14:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4756,"nodeType":"IfStatement","src":"14837:43:32","trueBody":{"expression":{"id":4754,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4752,"name":"halfWidth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4721,"src":"14857:9:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4753,"name":"tickSpacing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3878,"src":"14869:11:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"src":"14857:23:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"id":4755,"nodeType":"ExpressionStatement","src":"14857:23:32"}},{"assignments":[4758],"declarations":[{"constant":false,"id":4758,"mutability":"mutable","name":"rawTickLower","nodeType":"VariableDeclaration","scope":4869,"src":"14957:18:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":4757,"name":"int24","nodeType":"ElementaryTypeName","src":"14957:5:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"}],"id":4762,"initialValue":{"commonType":{"typeIdentifier":"t_int24","typeString":"int24"},"id":4761,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4759,"name":"targetCenterTick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4706,"src":"14978:16:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":4760,"name":"halfWidth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4721,"src":"14997:9:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"src":"14978:28:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"VariableDeclarationStatement","src":"14957:49:32"},{"assignments":[4764],"declarations":[{"constant":false,"id":4764,"mutability":"mutable","name":"rawTickUpper","nodeType":"VariableDeclaration","scope":4869,"src":"15017:18:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":4763,"name":"int24","nodeType":"ElementaryTypeName","src":"15017:5:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"}],"id":4768,"initialValue":{"commonType":{"typeIdentifier":"t_int24","typeString":"int24"},"id":4767,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4765,"name":"targetCenterTick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4706,"src":"15038:16:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":4766,"name":"halfWidth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4721,"src":"15057:9:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"src":"15038:28:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"VariableDeclarationStatement","src":"15017:49:32"},{"expression":{"id":4774,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4769,"name":"tickLower","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4709,"src":"15115:9:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4771,"name":"rawTickLower","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4758,"src":"15146:12:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},{"id":4772,"name":"tickSpacing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3878,"src":"15160:11:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int24","typeString":"int24"},{"typeIdentifier":"t_int24","typeString":"int24"}],"id":4770,"name":"floorToTickSpacing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4912,"src":"15127:18:32","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_int24_$_t_int24_$returns$_t_int24_$","typeString":"function (int24,int24) pure returns (int24)"}},"id":4773,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"15127:45:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"src":"15115:57:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"id":4775,"nodeType":"ExpressionStatement","src":"15115:57:32"},{"expression":{"id":4781,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4776,"name":"tickUpper","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4711,"src":"15183:9:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4778,"name":"rawTickUpper","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4764,"src":"15214:12:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},{"id":4779,"name":"tickSpacing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3878,"src":"15228:11:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int24","typeString":"int24"},{"typeIdentifier":"t_int24","typeString":"int24"}],"id":4777,"name":"floorToTickSpacing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4912,"src":"15195:18:32","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_int24_$_t_int24_$returns$_t_int24_$","typeString":"function (int24,int24) pure returns (int24)"}},"id":4780,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"15195:45:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"src":"15183:57:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"id":4782,"nodeType":"ExpressionStatement","src":"15183:57:32"},{"condition":{"commonType":{"typeIdentifier":"t_int24","typeString":"int24"},"id":4788,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int24","typeString":"int24"},"id":4785,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4783,"name":"rawTickUpper","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4764,"src":"15348:12:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"id":4784,"name":"tickSpacing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3878,"src":"15363:11:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"src":"15348:26:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}}],"id":4786,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"15347:28:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":4787,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15379:1:32","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"15347:33:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4794,"nodeType":"IfStatement","src":"15343:90:32","trueBody":{"id":4793,"nodeType":"Block","src":"15382:51:32","statements":[{"expression":{"id":4791,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4789,"name":"tickUpper","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4711,"src":"15397:9:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":4790,"name":"tickSpacing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3878,"src":"15410:11:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"src":"15397:24:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"id":4792,"nodeType":"ExpressionStatement","src":"15397:24:32"}]}},{"condition":{"commonType":{"typeIdentifier":"t_int24","typeString":"int24"},"id":4797,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4795,"name":"tickLower","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4709,"src":"15497:9:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":4796,"name":"tickUpper","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4711,"src":"15510:9:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"src":"15497:22:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4805,"nodeType":"IfStatement","src":"15493:90:32","trueBody":{"id":4804,"nodeType":"Block","src":"15521:62:32","statements":[{"expression":{"id":4802,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4798,"name":"tickUpper","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4711,"src":"15536:9:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_int24","typeString":"int24"},"id":4801,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4799,"name":"tickLower","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4709,"src":"15548:9:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":4800,"name":"tickSpacing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3878,"src":"15560:11:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"src":"15548:23:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"src":"15536:35:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"id":4803,"nodeType":"ExpressionStatement","src":"15536:35:32"}]}},{"expression":{"id":4818,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4806,"name":"tickLower","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4709,"src":"15644:9:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"condition":{"commonType":{"typeIdentifier":"t_int24","typeString":"int24"},"id":4810,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4807,"name":"tickLower","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4709,"src":"15656:9:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":4808,"name":"TickMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2388,"src":"15668:8:32","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_TickMath_$2388_$","typeString":"type(library TickMath)"}},"id":4809,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"MIN_TICK","nodeType":"MemberAccess","referencedDeclaration":1861,"src":"15668:17:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"src":"15656:29:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":4816,"name":"tickLower","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4709,"src":"15767:9:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"id":4817,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"15656:120:32","trueExpression":{"arguments":[{"expression":{"id":4812,"name":"TickMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2388,"src":"15720:8:32","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_TickMath_$2388_$","typeString":"type(library TickMath)"}},"id":4813,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"MIN_TICK","nodeType":"MemberAccess","referencedDeclaration":1861,"src":"15720:17:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},{"id":4814,"name":"tickSpacing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3878,"src":"15739:11:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int24","typeString":"int24"},{"typeIdentifier":"t_int24","typeString":"int24"}],"id":4811,"name":"floorToTickSpacing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4912,"src":"15701:18:32","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_int24_$_t_int24_$returns$_t_int24_$","typeString":"function (int24,int24) pure returns (int24)"}},"id":4815,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"15701:50:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"src":"15644:132:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"id":4819,"nodeType":"ExpressionStatement","src":"15644:132:32"},{"expression":{"id":4832,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4820,"name":"tickUpper","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4711,"src":"15789:9:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"condition":{"commonType":{"typeIdentifier":"t_int24","typeString":"int24"},"id":4824,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4821,"name":"tickUpper","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4711,"src":"15801:9:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"id":4822,"name":"TickMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2388,"src":"15813:8:32","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_TickMath_$2388_$","typeString":"type(library TickMath)"}},"id":4823,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"MAX_TICK","nodeType":"MemberAccess","referencedDeclaration":1866,"src":"15813:17:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"src":"15801:29:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":4830,"name":"tickUpper","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4711,"src":"15912:9:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"id":4831,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"15801:120:32","trueExpression":{"arguments":[{"expression":{"id":4826,"name":"TickMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2388,"src":"15865:8:32","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_TickMath_$2388_$","typeString":"type(library TickMath)"}},"id":4827,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"MAX_TICK","nodeType":"MemberAccess","referencedDeclaration":1866,"src":"15865:17:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},{"id":4828,"name":"tickSpacing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3878,"src":"15884:11:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int24","typeString":"int24"},{"typeIdentifier":"t_int24","typeString":"int24"}],"id":4825,"name":"floorToTickSpacing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4912,"src":"15846:18:32","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_int24_$_t_int24_$returns$_t_int24_$","typeString":"function (int24,int24) pure returns (int24)"}},"id":4829,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"15846:50:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"src":"15789:132:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"id":4833,"nodeType":"ExpressionStatement","src":"15789:132:32"},{"condition":{"commonType":{"typeIdentifier":"t_int24","typeString":"int24"},"id":4836,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4834,"name":"tickLower","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4709,"src":"15988:9:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":4835,"name":"tickUpper","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4711,"src":"16001:9:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"src":"15988:22:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4864,"nodeType":"IfStatement","src":"15984:352:32","trueBody":{"id":4863,"nodeType":"Block","src":"16012:324:32","statements":[{"expression":{"id":4841,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4837,"name":"tickUpper","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4711,"src":"16027:9:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_int24","typeString":"int24"},"id":4840,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4838,"name":"tickLower","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4709,"src":"16039:9:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":4839,"name":"tickSpacing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3878,"src":"16051:11:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"src":"16039:23:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"src":"16027:35:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"id":4842,"nodeType":"ExpressionStatement","src":"16027:35:32"},{"condition":{"commonType":{"typeIdentifier":"t_int24","typeString":"int24"},"id":4846,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4843,"name":"tickUpper","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4711,"src":"16143:9:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"id":4844,"name":"TickMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2388,"src":"16155:8:32","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_TickMath_$2388_$","typeString":"type(library TickMath)"}},"id":4845,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"MAX_TICK","nodeType":"MemberAccess","referencedDeclaration":1866,"src":"16155:17:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"src":"16143:29:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4862,"nodeType":"IfStatement","src":"16139:186:32","trueBody":{"id":4861,"nodeType":"Block","src":"16174:151:32","statements":[{"expression":{"id":4853,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4847,"name":"tickUpper","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4711,"src":"16193:9:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"expression":{"id":4849,"name":"TickMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2388,"src":"16224:8:32","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_TickMath_$2388_$","typeString":"type(library TickMath)"}},"id":4850,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"MAX_TICK","nodeType":"MemberAccess","referencedDeclaration":1866,"src":"16224:17:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},{"id":4851,"name":"tickSpacing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3878,"src":"16243:11:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int24","typeString":"int24"},{"typeIdentifier":"t_int24","typeString":"int24"}],"id":4848,"name":"floorToTickSpacing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4912,"src":"16205:18:32","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_int24_$_t_int24_$returns$_t_int24_$","typeString":"function (int24,int24) pure returns (int24)"}},"id":4852,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"16205:50:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"src":"16193:62:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"id":4854,"nodeType":"ExpressionStatement","src":"16193:62:32"},{"expression":{"id":4859,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4855,"name":"tickLower","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4709,"src":"16274:9:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_int24","typeString":"int24"},"id":4858,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4856,"name":"tickUpper","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4711,"src":"16286:9:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":4857,"name":"tickSpacing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3878,"src":"16298:11:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"src":"16286:23:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"src":"16274:35:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"id":4860,"nodeType":"ExpressionStatement","src":"16274:35:32"}]}}]}},{"expression":{"components":[{"id":4865,"name":"tickLower","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4709,"src":"16356:9:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},{"id":4866,"name":"tickUpper","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4711,"src":"16367:9:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}}],"id":4867,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"16355:22:32","typeDescriptions":{"typeIdentifier":"t_tuple$_t_int24_$_t_int24_$","typeString":"tuple(int24,int24)"}},"functionReturnParameters":4712,"id":4868,"nodeType":"Return","src":"16348:29:32"}]},"id":4870,"implemented":true,"kind":"function","modifiers":[],"name":"_calculateTicks","nodeType":"FunctionDefinition","parameters":{"id":4707,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4706,"mutability":"mutable","name":"targetCenterTick","nodeType":"VariableDeclaration","scope":4870,"src":"14349:22:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":4705,"name":"int24","nodeType":"ElementaryTypeName","src":"14349:5:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"}],"src":"14338:40:32"},"returnParameters":{"id":4712,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4709,"mutability":"mutable","name":"tickLower","nodeType":"VariableDeclaration","scope":4870,"src":"14402:15:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":4708,"name":"int24","nodeType":"ElementaryTypeName","src":"14402:5:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":4711,"mutability":"mutable","name":"tickUpper","nodeType":"VariableDeclaration","scope":4870,"src":"14419:15:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":4710,"name":"int24","nodeType":"ElementaryTypeName","src":"14419:5:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"}],"src":"14401:34:32"},"scope":5220,"src":"14314:2071:32","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":4911,"nodeType":"Block","src":"16508:262:32","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_int24","typeString":"int24"},"id":4882,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4880,"name":"_tickSpacing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4874,"src":"16527:12:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4881,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16542:1:32","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"16527:16:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5469636b2073706163696e67206d75737420626520706f736974697665","id":4883,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"16545:31:32","typeDescriptions":{"typeIdentifier":"t_stringliteral_d6a17cf573c858616829ab16c721c89658f90f1967194b54c8dd267605fae45b","typeString":"literal_string \"Tick spacing must be positive\""},"value":"Tick spacing must be positive"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d6a17cf573c858616829ab16c721c89658f90f1967194b54c8dd267605fae45b","typeString":"literal_string \"Tick spacing must be positive\""}],"id":4879,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"16519:7:32","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4884,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"16519:58:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4885,"nodeType":"ExpressionStatement","src":"16519:58:32"},{"assignments":[4887],"declarations":[{"constant":false,"id":4887,"mutability":"mutable","name":"compressed","nodeType":"VariableDeclaration","scope":4911,"src":"16588:16:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":4886,"name":"int24","nodeType":"ElementaryTypeName","src":"16588:5:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"}],"id":4891,"initialValue":{"commonType":{"typeIdentifier":"t_int24","typeString":"int24"},"id":4890,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4888,"name":"tick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4872,"src":"16607:4:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4889,"name":"_tickSpacing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4874,"src":"16614:12:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"src":"16607:19:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"VariableDeclarationStatement","src":"16588:38:32"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4901,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_int24","typeString":"int24"},"id":4894,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4892,"name":"tick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4872,"src":"16641:4:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"30","id":4893,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16648:1:32","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"16641:8:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int24","typeString":"int24"},"id":4899,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_int24","typeString":"int24"},"id":4897,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4895,"name":"tick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4872,"src":"16654:4:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"id":4896,"name":"_tickSpacing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4874,"src":"16661:12:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"src":"16654:19:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":4898,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16677:1:32","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"16654:24:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":4900,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"16653:26:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"16641:38:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4906,"nodeType":"IfStatement","src":"16637:83:32","trueBody":{"id":4905,"nodeType":"Block","src":"16681:39:32","statements":[{"expression":{"id":4903,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":false,"src":"16696:12:32","subExpression":{"id":4902,"name":"compressed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4887,"src":"16696:10:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"id":4904,"nodeType":"ExpressionStatement","src":"16696:12:32"}]}},{"expression":{"commonType":{"typeIdentifier":"t_int24","typeString":"int24"},"id":4909,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4907,"name":"compressed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4887,"src":"16737:10:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4908,"name":"_tickSpacing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4874,"src":"16750:12:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"src":"16737:25:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"functionReturnParameters":4878,"id":4910,"nodeType":"Return","src":"16730:32:32"}]},"id":4912,"implemented":true,"kind":"function","modifiers":[],"name":"floorToTickSpacing","nodeType":"FunctionDefinition","parameters":{"id":4875,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4872,"mutability":"mutable","name":"tick","nodeType":"VariableDeclaration","scope":4912,"src":"16431:10:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":4871,"name":"int24","nodeType":"ElementaryTypeName","src":"16431:5:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":4874,"mutability":"mutable","name":"_tickSpacing","nodeType":"VariableDeclaration","scope":4912,"src":"16452:18:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":4873,"name":"int24","nodeType":"ElementaryTypeName","src":"16452:5:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"}],"src":"16420:57:32"},"returnParameters":{"id":4878,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4877,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":4912,"src":"16501:5:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":4876,"name":"int24","nodeType":"ElementaryTypeName","src":"16501:5:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"}],"src":"16500:7:32"},"scope":5220,"src":"16393:377:32","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4948,"nodeType":"Block","src":"16906:223:32","statements":[{"assignments":[4920],"declarations":[{"constant":false,"id":4920,"mutability":"mutable","name":"poolAddress","nodeType":"VariableDeclaration","scope":4948,"src":"16917:19:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4919,"name":"address","nodeType":"ElementaryTypeName","src":"16917:7:32","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":4927,"initialValue":{"arguments":[{"id":4923,"name":"token0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3868,"src":"16955:6:32","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4924,"name":"token1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3870,"src":"16963:6:32","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4925,"name":"fee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3876,"src":"16971:3:32","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint24","typeString":"uint24"}],"expression":{"id":4921,"name":"factory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3864,"src":"16939:7:32","typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3Factory_$1383","typeString":"contract IUniswapV3Factory"}},"id":4922,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"getPool","nodeType":"MemberAccess","referencedDeclaration":1356,"src":"16939:15:32","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$_t_uint24_$returns$_t_address_$","typeString":"function (address,address,uint24) view external returns (address)"}},"id":4926,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"16939:36:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"16917:58:32"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4934,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4929,"name":"poolAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4920,"src":"16994:11:32","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":4932,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17017:1:32","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4931,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"17009:7:32","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4930,"name":"address","nodeType":"ElementaryTypeName","src":"17009:7:32","typeDescriptions":{}}},"id":4933,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"17009:10:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"16994:25:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"506f6f6c20646f65736e2774206578697374","id":4935,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"17021:20:32","typeDescriptions":{"typeIdentifier":"t_stringliteral_87e7f60b8ff0f06b751ad82b250a560c5b632939464075923cf9b80024908ad5","typeString":"literal_string \"Pool doesn't exist\""},"value":"Pool doesn't exist"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_87e7f60b8ff0f06b751ad82b250a560c5b632939464075923cf9b80024908ad5","typeString":"literal_string \"Pool doesn't exist\""}],"id":4928,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"16986:7:32","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4936,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"16986:56:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4937,"nodeType":"ExpressionStatement","src":"16986:56:32"},{"expression":{"id":4946,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"components":[{"id":4938,"name":"sqrtPriceX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4915,"src":"17054:12:32","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},{"id":4939,"name":"tick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4917,"src":"17068:4:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},null,null,null,null,null],"id":4940,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"17053:30:32","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint160_$_t_int24_$__$__$__$__$__$","typeString":"tuple(uint160,int24,,,,,)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":4942,"name":"poolAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4920,"src":"17101:11:32","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4941,"name":"IUniswapV3Pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1405,"src":"17086:14:32","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IUniswapV3Pool_$1405_$","typeString":"type(contract IUniswapV3Pool)"}},"id":4943,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"17086:27:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3Pool_$1405","typeString":"contract IUniswapV3Pool"}},"id":4944,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"slot0","nodeType":"MemberAccess","referencedDeclaration":1766,"src":"17086:33:32","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_uint160_$_t_int24_$_t_uint16_$_t_uint16_$_t_uint16_$_t_uint8_$_t_bool_$","typeString":"function () view external returns (uint160,int24,uint16,uint16,uint16,uint8,bool)"}},"id":4945,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"17086:35:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint160_$_t_int24_$_t_uint16_$_t_uint16_$_t_uint16_$_t_uint8_$_t_bool_$","typeString":"tuple(uint160,int24,uint16,uint16,uint16,uint8,bool)"}},"src":"17053:68:32","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4947,"nodeType":"ExpressionStatement","src":"17053:68:32"}]},"id":4949,"implemented":true,"kind":"function","modifiers":[],"name":"_getCurrentSqrtPriceAndTick","nodeType":"FunctionDefinition","parameters":{"id":4913,"nodeType":"ParameterList","parameters":[],"src":"16814:2:32"},"returnParameters":{"id":4918,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4915,"mutability":"mutable","name":"sqrtPriceX96","nodeType":"VariableDeclaration","scope":4949,"src":"16867:20:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":4914,"name":"uint160","nodeType":"ElementaryTypeName","src":"16867:7:32","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"},{"constant":false,"id":4917,"mutability":"mutable","name":"tick","nodeType":"VariableDeclaration","scope":4949,"src":"16889:10:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":4916,"name":"int24","nodeType":"ElementaryTypeName","src":"16889:5:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"}],"src":"16866:34:32"},"scope":5220,"src":"16778:351:32","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":5010,"nodeType":"Block","src":"17302:597:32","statements":[{"assignments":[4957],"declarations":[{"constant":false,"id":4957,"mutability":"mutable","name":"price","nodeType":"VariableDeclaration","scope":5010,"src":"17313:13:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4956,"name":"uint256","nodeType":"ElementaryTypeName","src":"17313:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4967,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4966,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":4960,"name":"sqrtPriceX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4951,"src":"17337:12:32","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":4959,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"17329:7:32","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":4958,"name":"uint256","nodeType":"ElementaryTypeName","src":"17329:7:32","typeDescriptions":{}}},"id":4961,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"17329:21:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"arguments":[{"id":4964,"name":"sqrtPriceX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4951,"src":"17361:12:32","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":4963,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"17353:7:32","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":4962,"name":"uint256","nodeType":"ElementaryTypeName","src":"17353:7:32","typeDescriptions":{}}},"id":4965,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"17353:21:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"17329:45:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"17313:61:32"},{"assignments":[4969],"declarations":[{"constant":false,"id":4969,"mutability":"mutable","name":"adjustedPrice","nodeType":"VariableDeclaration","scope":5010,"src":"17385:21:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4968,"name":"uint256","nodeType":"ElementaryTypeName","src":"17385:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4973,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4972,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4970,"name":"price","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4957,"src":"17409:5:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313932","id":4971,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17418:3:32","typeDescriptions":{"typeIdentifier":"t_rational_192_by_1","typeString":"int_const 192"},"value":"192"},"src":"17409:12:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"17385:36:32"},{"condition":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":4976,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4974,"name":"token1Decimals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3874,"src":"17515:14:32","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":4975,"name":"token0Decimals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3872,"src":"17532:14:32","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"17515:31:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":4992,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4990,"name":"token0Decimals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3872,"src":"17692:14:32","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":4991,"name":"token1Decimals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3874,"src":"17709:14:32","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"17692:31:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5006,"nodeType":"IfStatement","src":"17688:171:32","trueBody":{"id":5005,"nodeType":"Block","src":"17725:134:32","statements":[{"expression":{"id":5003,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4993,"name":"adjustedPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4969,"src":"17740:13:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5002,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4994,"name":"adjustedPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4969,"src":"17773:13:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5000,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4995,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17807:2:32","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":4998,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4996,"name":"token0Decimals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3872,"src":"17814:14:32","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":4997,"name":"token1Decimals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3874,"src":"17831:14:32","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"17814:31:32","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":4999,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"17813:33:32","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"17807:39:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":5001,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"17806:41:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"17773:74:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"17740:107:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5004,"nodeType":"ExpressionStatement","src":"17740:107:32"}]}},"id":5007,"nodeType":"IfStatement","src":"17511:348:32","trueBody":{"id":4989,"nodeType":"Block","src":"17548:134:32","statements":[{"expression":{"id":4987,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4977,"name":"adjustedPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4969,"src":"17563:13:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4986,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4978,"name":"adjustedPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4969,"src":"17596:13:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4984,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4979,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17630:2:32","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":4982,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4980,"name":"token1Decimals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3874,"src":"17637:14:32","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":4981,"name":"token0Decimals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3872,"src":"17654:14:32","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"17637:31:32","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":4983,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"17636:33:32","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"17630:39:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4985,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"17629:41:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"17596:74:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"17563:107:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4988,"nodeType":"ExpressionStatement","src":"17563:107:32"}]}},{"expression":{"id":5008,"name":"adjustedPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4969,"src":"17878:13:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4955,"id":5009,"nodeType":"Return","src":"17871:20:32"}]},"id":5011,"implemented":true,"kind":"function","modifiers":[],"name":"_sqrtPriceX96ToPrice","nodeType":"FunctionDefinition","parameters":{"id":4952,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4951,"mutability":"mutable","name":"sqrtPriceX96","nodeType":"VariableDeclaration","scope":5011,"src":"17242:20:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":4950,"name":"uint160","nodeType":"ElementaryTypeName","src":"17242:7:32","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"}],"src":"17231:38:32"},"returnParameters":{"id":4955,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4954,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":5011,"src":"17293:7:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4953,"name":"uint256","nodeType":"ElementaryTypeName","src":"17293:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"17292:9:32"},"scope":5220,"src":"17202:697:32","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":5141,"nodeType":"Block","src":"17981:1694:32","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5021,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5019,"name":"priceDecimal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5013,"src":"18000:12:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":5020,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"18015:1:32","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"18000:16:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5072696365206d757374206265203e2030","id":5022,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"18018:19:32","typeDescriptions":{"typeIdentifier":"t_stringliteral_1b6b7ea1ca601eedacaf5021d2f04292cf19df119f1635d866f2b5c9b71440a1","typeString":"literal_string \"Price must be > 0\""},"value":"Price must be > 0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1b6b7ea1ca601eedacaf5021d2f04292cf19df119f1635d866f2b5c9b71440a1","typeString":"literal_string \"Price must be > 0\""}],"id":5018,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"17992:7:32","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5023,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"17992:46:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5024,"nodeType":"ExpressionStatement","src":"17992:46:32"},{"assignments":[5026],"declarations":[{"constant":false,"id":5026,"mutability":"mutable","name":"invertedPrice","nodeType":"VariableDeclaration","scope":5141,"src":"18286:21:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5025,"name":"uint256","nodeType":"ElementaryTypeName","src":"18286:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5027,"nodeType":"VariableDeclarationStatement","src":"18286:21:32"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5030,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5028,"name":"priceDecimal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5013,"src":"18322:12:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"31653132","id":5029,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"18337:4:32","typeDescriptions":{"typeIdentifier":"t_rational_1000000000000_by_1","typeString":"int_const 1000000000000"},"value":"1e12"},"src":"18322:19:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":5046,"nodeType":"Block","src":"18588:129:32","statements":[{"expression":{"id":5044,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5042,"name":"invertedPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5026,"src":"18677:13:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5043,"name":"priceDecimal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5013,"src":"18693:12:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"18677:28:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5045,"nodeType":"ExpressionStatement","src":"18677:28:32"}]},"id":5047,"nodeType":"IfStatement","src":"18318:399:32","trueBody":{"id":5041,"nodeType":"Block","src":"18343:239:32","statements":[{"expression":{"id":5039,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5031,"name":"invertedPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5026,"src":"18523:13:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5037,"name":"priceDecimal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5013,"src":"18557:12:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"hexValue":"31653336","id":5034,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"18547:4:32","typeDescriptions":{"typeIdentifier":"t_rational_1000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(29 digits omitted)...0000"},"value":"1e36"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(29 digits omitted)...0000"}],"id":5033,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"18539:7:32","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":5032,"name":"uint256","nodeType":"ElementaryTypeName","src":"18539:7:32","typeDescriptions":{}}},"id":5035,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"18539:13:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5036,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"div","nodeType":"MemberAccess","referencedDeclaration":381,"src":"18539:17:32","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":5038,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"18539:31:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"18523:47:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5040,"nodeType":"ExpressionStatement","src":"18523:47:32"}]}},{"assignments":[5049],"declarations":[{"constant":false,"id":5049,"mutability":"mutable","name":"numerator","nodeType":"VariableDeclaration","scope":5141,"src":"18772:17:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5048,"name":"uint256","nodeType":"ElementaryTypeName","src":"18772:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5051,"initialValue":{"id":5050,"name":"invertedPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5026,"src":"18792:13:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"18772:33:32"},{"assignments":[5053],"declarations":[{"constant":false,"id":5053,"mutability":"mutable","name":"denominator","nodeType":"VariableDeclaration","scope":5141,"src":"18816:19:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5052,"name":"uint256","nodeType":"ElementaryTypeName","src":"18816:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5055,"initialValue":{"hexValue":"31653138","id":5054,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"18838:4:32","typeDescriptions":{"typeIdentifier":"t_rational_1000000000000000000_by_1","typeString":"int_const 1000000000000000000"},"value":"1e18"},"nodeType":"VariableDeclarationStatement","src":"18816:26:32"},{"condition":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":5058,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5056,"name":"token1Decimals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3874,"src":"18859:14:32","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":5057,"name":"token0Decimals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3872,"src":"18876:14:32","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"18859:31:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":5078,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5076,"name":"token0Decimals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3872,"src":"19039:14:32","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":5077,"name":"token1Decimals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3874,"src":"19056:14:32","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"19039:31:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5096,"nodeType":"IfStatement","src":"19035:178:32","trueBody":{"id":5095,"nodeType":"Block","src":"19072:141:32","statements":[{"expression":{"id":5093,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5079,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5053,"src":"19087:11:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5091,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":5082,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19135:2:32","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"components":[{"arguments":[{"id":5088,"name":"token1Decimals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3874,"src":"19170:14:32","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"expression":{"arguments":[{"id":5085,"name":"token0Decimals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3872,"src":"19150:14:32","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":5084,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"19142:7:32","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":5083,"name":"uint256","nodeType":"ElementaryTypeName","src":"19142:7:32","typeDescriptions":{}}},"id":5086,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"19142:23:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5087,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sub","nodeType":"MemberAccess","referencedDeclaration":325,"src":"19142:27:32","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":5089,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"19142:43:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":5090,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"19141:45:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19135:51:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":5080,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5053,"src":"19101:11:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5081,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"mul","nodeType":"MemberAccess","referencedDeclaration":359,"src":"19101:15:32","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":5092,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"19101:100:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19087:114:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5094,"nodeType":"ExpressionStatement","src":"19087:114:32"}]}},"id":5097,"nodeType":"IfStatement","src":"18855:358:32","trueBody":{"id":5075,"nodeType":"Block","src":"18892:137:32","statements":[{"expression":{"id":5073,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5059,"name":"numerator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5049,"src":"18907:9:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5071,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":5062,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"18951:2:32","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"components":[{"arguments":[{"id":5068,"name":"token0Decimals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3872,"src":"18986:14:32","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"expression":{"arguments":[{"id":5065,"name":"token1Decimals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3874,"src":"18966:14:32","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":5064,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"18958:7:32","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":5063,"name":"uint256","nodeType":"ElementaryTypeName","src":"18958:7:32","typeDescriptions":{}}},"id":5066,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"18958:23:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5067,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sub","nodeType":"MemberAccess","referencedDeclaration":325,"src":"18958:27:32","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":5069,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"18958:43:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":5070,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"18957:45:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"18951:51:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":5060,"name":"numerator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5049,"src":"18919:9:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5061,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"mul","nodeType":"MemberAccess","referencedDeclaration":359,"src":"18919:13:32","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":5072,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"18919:98:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"18907:110:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5074,"nodeType":"ExpressionStatement","src":"18907:110:32"}]}},{"assignments":[5099],"declarations":[{"constant":false,"id":5099,"mutability":"mutable","name":"ratioX192","nodeType":"VariableDeclaration","scope":5141,"src":"19284:17:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5098,"name":"uint256","nodeType":"ElementaryTypeName","src":"19284:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5109,"initialValue":{"arguments":[{"id":5107,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5053,"src":"19332:11:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_rational_6277101735386680763835789423207666416102355444464034512896_by_1","typeString":"int_const 6277...(50 digits omitted)...2896"},"id":5104,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":5102,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19318:1:32","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"313932","id":5103,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19323:3:32","typeDescriptions":{"typeIdentifier":"t_rational_192_by_1","typeString":"int_const 192"},"value":"192"},"src":"19318:8:32","typeDescriptions":{"typeIdentifier":"t_rational_6277101735386680763835789423207666416102355444464034512896_by_1","typeString":"int_const 6277...(50 digits omitted)...2896"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_6277101735386680763835789423207666416102355444464034512896_by_1","typeString":"int_const 6277...(50 digits omitted)...2896"}],"expression":{"id":5100,"name":"numerator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5049,"src":"19304:9:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5101,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"mul","nodeType":"MemberAccess","referencedDeclaration":359,"src":"19304:13:32","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":5105,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"19304:23:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5106,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"div","nodeType":"MemberAccess","referencedDeclaration":381,"src":"19304:27:32","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":5108,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"19304:40:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"19284:60:32"},{"assignments":[5111],"declarations":[{"constant":false,"id":5111,"mutability":"mutable","name":"sqrtPriceX96","nodeType":"VariableDeclaration","scope":5141,"src":"19357:20:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":5110,"name":"uint160","nodeType":"ElementaryTypeName","src":"19357:7:32","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"}],"id":5119,"initialValue":{"arguments":[{"arguments":[{"id":5116,"name":"ratioX192","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5099,"src":"19402:9:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":5114,"name":"SqrtMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5955,"src":"19388:8:32","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SqrtMath_$5955_$","typeString":"type(library SqrtMath)"}},"id":5115,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sqrt","nodeType":"MemberAccess","referencedDeclaration":5902,"src":"19388:13:32","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":5117,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"19388:24:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5113,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"19380:7:32","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":5112,"name":"uint160","nodeType":"ElementaryTypeName","src":"19380:7:32","typeDescriptions":{}}},"id":5118,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"19380:33:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"nodeType":"VariableDeclarationStatement","src":"19357:56:32"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint160","typeString":"uint160"},"id":5124,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5121,"name":"sqrtPriceX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5111,"src":"19472:12:32","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"expression":{"id":5122,"name":"TickMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2388,"src":"19488:8:32","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_TickMath_$2388_$","typeString":"type(library TickMath)"}},"id":5123,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"MIN_SQRT_RATIO","nodeType":"MemberAccess","referencedDeclaration":1870,"src":"19488:23:32","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"src":"19472:39:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"507269636520746f6f206c6f77","id":5125,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"19513:15:32","typeDescriptions":{"typeIdentifier":"t_stringliteral_c84b7ff16e6331f7bad307bc338b44c939f313f04b9fabf2ea60e2f8791e8994","typeString":"literal_string \"Price too low\""},"value":"Price too low"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c84b7ff16e6331f7bad307bc338b44c939f313f04b9fabf2ea60e2f8791e8994","typeString":"literal_string \"Price too low\""}],"id":5120,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"19464:7:32","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5126,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"19464:65:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5127,"nodeType":"ExpressionStatement","src":"19464:65:32"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint160","typeString":"uint160"},"id":5132,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5129,"name":"sqrtPriceX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5111,"src":"19548:12:32","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"id":5130,"name":"TickMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2388,"src":"19564:8:32","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_TickMath_$2388_$","typeString":"type(library TickMath)"}},"id":5131,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"MAX_SQRT_RATIO","nodeType":"MemberAccess","referencedDeclaration":1874,"src":"19564:23:32","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"src":"19548:39:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"507269636520746f6f2068696768","id":5133,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"19589:16:32","typeDescriptions":{"typeIdentifier":"t_stringliteral_2bf82483a59b135c8b0ec563103e94de46ba0ad2b430936d2c2dc7c7a432bbfc","typeString":"literal_string \"Price too high\""},"value":"Price too high"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2bf82483a59b135c8b0ec563103e94de46ba0ad2b430936d2c2dc7c7a432bbfc","typeString":"literal_string \"Price too high\""}],"id":5128,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"19540:7:32","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5134,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"19540:66:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5135,"nodeType":"ExpressionStatement","src":"19540:66:32"},{"expression":{"arguments":[{"id":5138,"name":"sqrtPriceX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5111,"src":"19654:12:32","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"expression":{"id":5136,"name":"TickMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2388,"src":"19626:8:32","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_TickMath_$2388_$","typeString":"type(library TickMath)"}},"id":5137,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"getTickAtSqrtRatio","nodeType":"MemberAccess","referencedDeclaration":2387,"src":"19626:27:32","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint160_$returns$_t_int24_$","typeString":"function (uint160) pure returns (int24)"}},"id":5139,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"19626:41:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"functionReturnParameters":5017,"id":5140,"nodeType":"Return","src":"19619:48:32"}]},"id":5142,"implemented":true,"kind":"function","modifiers":[],"name":"_priceToTick","nodeType":"FunctionDefinition","parameters":{"id":5014,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5013,"mutability":"mutable","name":"priceDecimal","nodeType":"VariableDeclaration","scope":5142,"src":"17929:20:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5012,"name":"uint256","nodeType":"ElementaryTypeName","src":"17929:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"17928:22:32"},"returnParameters":{"id":5017,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5016,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":5142,"src":"17974:5:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":5015,"name":"int24","nodeType":"ElementaryTypeName","src":"17974:5:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"}],"src":"17973:7:32"},"scope":5220,"src":"17907:1768:32","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":5168,"nodeType":"Block","src":"19967:256:32","statements":[{"eventCall":{"arguments":[{"expression":{"id":5158,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"20025:5:32","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":5159,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"timestamp","nodeType":"MemberAccess","src":"20025:15:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5160,"name":"actualPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5144,"src":"20055:11:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5161,"name":"predictedPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5146,"src":"20081:14:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5162,"name":"predictedTick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5148,"src":"20110:13:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},{"id":5163,"name":"finalTickLower","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5150,"src":"20138:14:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},{"id":5164,"name":"finalTickUpper","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5152,"src":"20167:14:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},{"id":5165,"name":"adjusted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5154,"src":"20196:8:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_int24","typeString":"int24"},{"typeIdentifier":"t_int24","typeString":"int24"},{"typeIdentifier":"t_int24","typeString":"int24"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":5157,"name":"PredictionAdjustmentMetrics","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3930,"src":"19983:27:32","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_uint256_$_t_uint256_$_t_int24_$_t_int24_$_t_int24_$_t_bool_$returns$__$","typeString":"function (uint256,uint256,uint256,int24,int24,int24,bool)"}},"id":5166,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"19983:232:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5167,"nodeType":"EmitStatement","src":"19978:237:32"}]},"id":5169,"implemented":true,"kind":"function","modifiers":[],"name":"_emitPredictionMetrics","nodeType":"FunctionDefinition","parameters":{"id":5155,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5144,"mutability":"mutable","name":"actualPrice","nodeType":"VariableDeclaration","scope":5169,"src":"19782:19:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5143,"name":"uint256","nodeType":"ElementaryTypeName","src":"19782:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5146,"mutability":"mutable","name":"predictedPrice","nodeType":"VariableDeclaration","scope":5169,"src":"19812:22:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5145,"name":"uint256","nodeType":"ElementaryTypeName","src":"19812:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5148,"mutability":"mutable","name":"predictedTick","nodeType":"VariableDeclaration","scope":5169,"src":"19845:19:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":5147,"name":"int24","nodeType":"ElementaryTypeName","src":"19845:5:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":5150,"mutability":"mutable","name":"finalTickLower","nodeType":"VariableDeclaration","scope":5169,"src":"19875:20:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":5149,"name":"int24","nodeType":"ElementaryTypeName","src":"19875:5:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":5152,"mutability":"mutable","name":"finalTickUpper","nodeType":"VariableDeclaration","scope":5169,"src":"19906:20:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":5151,"name":"int24","nodeType":"ElementaryTypeName","src":"19906:5:32","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":5154,"mutability":"mutable","name":"adjusted","nodeType":"VariableDeclaration","scope":5169,"src":"19937:13:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5153,"name":"bool","nodeType":"ElementaryTypeName","src":"19937:4:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"19771:186:32"},"returnParameters":{"id":5156,"nodeType":"ParameterList","parameters":[],"src":"19967:0:32"},"scope":5220,"src":"19740:483:32","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[1418],"body":{"id":5218,"nodeType":"Block","src":"20428:452:32","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5186,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5180,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"20526:3:32","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5181,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"20526:10:32","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"id":5184,"name":"positionManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3866,"src":"20548:15:32","typeDescriptions":{"typeIdentifier":"t_contract$_INonfungiblePositionManager_$2618","typeString":"contract INonfungiblePositionManager"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_INonfungiblePositionManager_$2618","typeString":"contract INonfungiblePositionManager"}],"id":5183,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"20540:7:32","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5182,"name":"address","nodeType":"ElementaryTypeName","src":"20540:7:32","typeDescriptions":{}}},"id":5185,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"20540:24:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"20526:38:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"556e617574686f72697a65642063616c6c6261636b","id":5187,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"20579:23:32","typeDescriptions":{"typeIdentifier":"t_stringliteral_397aaaccf4e12d92be59946dfcacdf68dc2c5b82b4a37f6e4ef2cd79e09c3db4","typeString":"literal_string \"Unauthorized callback\""},"value":"Unauthorized callback"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_397aaaccf4e12d92be59946dfcacdf68dc2c5b82b4a37f6e4ef2cd79e09c3db4","typeString":"literal_string \"Unauthorized callback\""}],"id":5179,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"20504:7:32","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5188,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"20504:109:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5189,"nodeType":"ExpressionStatement","src":"20504:109:32"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5192,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5190,"name":"amount0Owed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5171,"src":"20667:11:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":5191,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"20681:1:32","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"20667:15:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5203,"nodeType":"IfStatement","src":"20663:100:32","trueBody":{"id":5202,"nodeType":"Block","src":"20684:79:32","statements":[{"expression":{"arguments":[{"expression":{"id":5197,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"20727:3:32","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5198,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"20727:10:32","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"id":5199,"name":"amount0Owed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5171,"src":"20739:11:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":5194,"name":"token0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3868,"src":"20706:6:32","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5193,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":554,"src":"20699:6:32","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$554_$","typeString":"type(contract IERC20)"}},"id":5195,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"20699:14:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$554","typeString":"contract IERC20"}},"id":5196,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"safeTransfer","nodeType":"MemberAccess","referencedDeclaration":588,"src":"20699:27:32","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$554_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20_$554_$","typeString":"function (contract IERC20,address,uint256)"}},"id":5200,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"20699:52:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5201,"nodeType":"ExpressionStatement","src":"20699:52:32"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5206,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5204,"name":"amount1Owed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5173,"src":"20777:11:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":5205,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"20791:1:32","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"20777:15:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5217,"nodeType":"IfStatement","src":"20773:100:32","trueBody":{"id":5216,"nodeType":"Block","src":"20794:79:32","statements":[{"expression":{"arguments":[{"expression":{"id":5211,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"20837:3:32","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5212,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"20837:10:32","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"id":5213,"name":"amount1Owed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5173,"src":"20849:11:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":5208,"name":"token1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3870,"src":"20816:6:32","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5207,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":554,"src":"20809:6:32","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$554_$","typeString":"type(contract IERC20)"}},"id":5209,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"20809:14:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$554","typeString":"contract IERC20"}},"id":5210,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"safeTransfer","nodeType":"MemberAccess","referencedDeclaration":588,"src":"20809:27:32","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$554_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20_$554_$","typeString":"function (contract IERC20,address,uint256)"}},"id":5214,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"20809:52:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5215,"nodeType":"ExpressionStatement","src":"20809:52:32"}]}}]},"functionSelector":"d3487997","id":5219,"implemented":true,"kind":"function","modifiers":[],"name":"uniswapV3MintCallback","nodeType":"FunctionDefinition","overrides":{"id":5177,"nodeType":"OverrideSpecifier","overrides":[],"src":"20419:8:32"},"parameters":{"id":5176,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5171,"mutability":"mutable","name":"amount0Owed","nodeType":"VariableDeclaration","scope":5219,"src":"20323:19:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5170,"name":"uint256","nodeType":"ElementaryTypeName","src":"20323:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5173,"mutability":"mutable","name":"amount1Owed","nodeType":"VariableDeclaration","scope":5219,"src":"20353:19:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5172,"name":"uint256","nodeType":"ElementaryTypeName","src":"20353:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5175,"mutability":"mutable","name":"data","nodeType":"VariableDeclaration","scope":5219,"src":"20383:19:32","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":5174,"name":"bytes","nodeType":"ElementaryTypeName","src":"20383:5:32","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"20312:97:32"},"returnParameters":{"id":5178,"nodeType":"ParameterList","parameters":[],"src":"20428:0:32"},"scope":5220,"src":"20282:598:32","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":5221,"src":"1260:19623:32"}],"src":"33:20852:32"},"id":32},"contracts/TokenOperationsManagerOptimized.sol":{"ast":{"absolutePath":"contracts/TokenOperationsManagerOptimized.sol","exportedSymbols":{"Address":[1237],"Context":[1260],"IERC20":[554],"ISwapRouter":[2775],"IUniswapV3SwapCallback":[1433],"IWETH9":[2792],"Ownable":[109],"SafeERC20":[767],"SafeMath":[476],"TokenOperationsManagerOptimized":[5764]},"id":5765,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":5222,"literals":["solidity","^","0.7",".6"],"nodeType":"PragmaDirective","src":"33:23:33"},{"id":5223,"literals":["abicoder","v2"],"nodeType":"PragmaDirective","src":"58:19:33"},{"absolutePath":"@openzeppelin/contracts/access/Ownable.sol","file":"@openzeppelin/contracts/access/Ownable.sol","id":5224,"nodeType":"ImportDirective","scope":5765,"sourceUnit":110,"src":"103:52:33","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"@openzeppelin/contracts/token/ERC20/IERC20.sol","id":5225,"nodeType":"ImportDirective","scope":5765,"sourceUnit":555,"src":"157:56:33","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/SafeERC20.sol","file":"@openzeppelin/contracts/token/ERC20/SafeERC20.sol","id":5226,"nodeType":"ImportDirective","scope":5765,"sourceUnit":768,"src":"215:59:33","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/math/SafeMath.sol","file":"@openzeppelin/contracts/math/SafeMath.sol","id":5227,"nodeType":"ImportDirective","scope":5765,"sourceUnit":477,"src":"276:51:33","symbolAliases":[],"unitAlias":""},{"absolutePath":"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol","file":"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol","id":5228,"nodeType":"ImportDirective","scope":5765,"sourceUnit":2776,"src":"329:68:33","symbolAliases":[],"unitAlias":""},{"absolutePath":"@uniswap/v3-periphery/contracts/interfaces/external/IWETH9.sol","file":"@uniswap/v3-periphery/contracts/interfaces/external/IWETH9.sol","id":5229,"nodeType":"ImportDirective","scope":5765,"sourceUnit":2793,"src":"399:72:33","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":5231,"name":"Ownable","nodeType":"UserDefinedTypeName","referencedDeclaration":109,"src":"659:7:33","typeDescriptions":{"typeIdentifier":"t_contract$_Ownable_$109","typeString":"contract Ownable"}},"id":5232,"nodeType":"InheritanceSpecifier","src":"659:7:33"}],"contractDependencies":[109,1260],"contractKind":"contract","documentation":{"id":5230,"nodeType":"StructuredDocumentation","src":"475:138:33","text":" @title TokenOperationsManagerOptimized\n @notice بهینه‌سازی شده برای کاهش اندازه قرارداد"},"fullyImplemented":true,"id":5764,"linearizedBaseContracts":[5764,109,1260],"name":"TokenOperationsManagerOptimized","nodeType":"ContractDefinition","nodes":[{"id":5235,"libraryName":{"id":5233,"name":"SafeERC20","nodeType":"UserDefinedTypeName","referencedDeclaration":767,"src":"680:9:33","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20_$767","typeString":"library SafeERC20"}},"nodeType":"UsingForDirective","src":"674:27:33","typeName":{"id":5234,"name":"IERC20","nodeType":"UserDefinedTypeName","referencedDeclaration":554,"src":"694:6:33","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$554","typeString":"contract IERC20"}}},{"id":5238,"libraryName":{"id":5236,"name":"SafeMath","nodeType":"UserDefinedTypeName","referencedDeclaration":476,"src":"713:8:33","typeDescriptions":{"typeIdentifier":"t_contract$_SafeMath_$476","typeString":"library SafeMath"}},"nodeType":"UsingForDirective","src":"707:27:33","typeName":{"id":5237,"name":"uint256","nodeType":"ElementaryTypeName","src":"726:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},{"constant":false,"functionSelector":"c31c9c07","id":5240,"mutability":"immutable","name":"swapRouter","nodeType":"VariableDeclaration","scope":5764,"src":"771:39:33","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_ISwapRouter_$2775","typeString":"contract ISwapRouter"},"typeName":{"id":5239,"name":"ISwapRouter","nodeType":"UserDefinedTypeName","referencedDeclaration":2775,"src":"771:11:33","typeDescriptions":{"typeIdentifier":"t_contract$_ISwapRouter_$2775","typeString":"contract ISwapRouter"}},"visibility":"public"},{"constant":false,"functionSelector":"4aa4a4fc","id":5242,"mutability":"immutable","name":"WETH9","nodeType":"VariableDeclaration","scope":5764,"src":"817:30:33","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5241,"name":"address","nodeType":"ElementaryTypeName","src":"817:7:33","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"public"},{"anonymous":false,"id":5252,"name":"Operation","nodeType":"EventDefinition","parameters":{"id":5251,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5244,"indexed":true,"mutability":"mutable","name":"opType","nodeType":"VariableDeclaration","scope":5252,"src":"931:22:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5243,"name":"bytes32","nodeType":"ElementaryTypeName","src":"931:7:33","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5246,"indexed":true,"mutability":"mutable","name":"tokenA","nodeType":"VariableDeclaration","scope":5252,"src":"964:22:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5245,"name":"address","nodeType":"ElementaryTypeName","src":"964:7:33","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5248,"indexed":true,"mutability":"mutable","name":"tokenB","nodeType":"VariableDeclaration","scope":5252,"src":"997:22:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5247,"name":"address","nodeType":"ElementaryTypeName","src":"997:7:33","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5250,"indexed":false,"mutability":"mutable","name":"amount","nodeType":"VariableDeclaration","scope":5252,"src":"1030:14:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5249,"name":"uint256","nodeType":"ElementaryTypeName","src":"1030:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"920:131:33"},"src":"905:147:33"},{"body":{"id":5269,"nodeType":"Block","src":"1109:81:33","statements":[{"expression":{"id":5263,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5259,"name":"swapRouter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5240,"src":"1120:10:33","typeDescriptions":{"typeIdentifier":"t_contract$_ISwapRouter_$2775","typeString":"contract ISwapRouter"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5261,"name":"_swapRouter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5254,"src":"1145:11:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5260,"name":"ISwapRouter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2775,"src":"1133:11:33","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ISwapRouter_$2775_$","typeString":"type(contract ISwapRouter)"}},"id":5262,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1133:24:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_ISwapRouter_$2775","typeString":"contract ISwapRouter"}},"src":"1120:37:33","typeDescriptions":{"typeIdentifier":"t_contract$_ISwapRouter_$2775","typeString":"contract ISwapRouter"}},"id":5264,"nodeType":"ExpressionStatement","src":"1120:37:33"},{"expression":{"id":5267,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5265,"name":"WETH9","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5242,"src":"1168:5:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5266,"name":"_weth9","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5256,"src":"1176:6:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1168:14:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":5268,"nodeType":"ExpressionStatement","src":"1168:14:33"}]},"id":5270,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nodeType":"FunctionDefinition","parameters":{"id":5257,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5254,"mutability":"mutable","name":"_swapRouter","nodeType":"VariableDeclaration","scope":5270,"src":"1072:19:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5253,"name":"address","nodeType":"ElementaryTypeName","src":"1072:7:33","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5256,"mutability":"mutable","name":"_weth9","nodeType":"VariableDeclaration","scope":5270,"src":"1093:14:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5255,"name":"address","nodeType":"ElementaryTypeName","src":"1093:7:33","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1071:37:33"},"returnParameters":{"id":5258,"nodeType":"ParameterList","parameters":[],"src":"1109:0:33"},"scope":5764,"src":"1060:130:33","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":5361,"nodeType":"Block","src":"1434:949:33","statements":[{"expression":{"arguments":[{"expression":{"id":5291,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1518:3:33","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5292,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"1518:10:33","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"arguments":[{"id":5295,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1538:4:33","typeDescriptions":{"typeIdentifier":"t_contract$_TokenOperationsManagerOptimized_$5764","typeString":"contract TokenOperationsManagerOptimized"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_TokenOperationsManagerOptimized_$5764","typeString":"contract TokenOperationsManagerOptimized"}],"id":5294,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1530:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5293,"name":"address","nodeType":"ElementaryTypeName","src":"1530:7:33","typeDescriptions":{}}},"id":5296,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1530:13:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"id":5297,"name":"amountIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5278,"src":"1545:8:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":5288,"name":"tokenIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5272,"src":"1492:7:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5287,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":554,"src":"1485:6:33","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$554_$","typeString":"type(contract IERC20)"}},"id":5289,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1485:15:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$554","typeString":"contract IERC20"}},"id":5290,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"safeTransferFrom","nodeType":"MemberAccess","referencedDeclaration":613,"src":"1485:32:33","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$554_$_t_address_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20_$554_$","typeString":"function (contract IERC20,address,address,uint256)"}},"id":5298,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1485:69:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5299,"nodeType":"ExpressionStatement","src":"1485:69:33"},{"expression":{"arguments":[{"arguments":[{"id":5306,"name":"swapRouter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5240,"src":"1630:10:33","typeDescriptions":{"typeIdentifier":"t_contract$_ISwapRouter_$2775","typeString":"contract ISwapRouter"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_ISwapRouter_$2775","typeString":"contract ISwapRouter"}],"id":5305,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1622:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5304,"name":"address","nodeType":"ElementaryTypeName","src":"1622:7:33","typeDescriptions":{}}},"id":5307,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1622:19:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5308,"name":"amountIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5278,"src":"1643:8:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":5301,"name":"tokenIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5272,"src":"1601:7:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5300,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":554,"src":"1594:6:33","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$554_$","typeString":"type(contract IERC20)"}},"id":5302,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1594:15:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$554","typeString":"contract IERC20"}},"id":5303,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"safeApprove","nodeType":"MemberAccess","referencedDeclaration":656,"src":"1594:27:33","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$554_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20_$554_$","typeString":"function (contract IERC20,address,uint256)"}},"id":5309,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1594:58:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5310,"nodeType":"ExpressionStatement","src":"1594:58:33"},{"assignments":[5314],"declarations":[{"constant":false,"id":5314,"mutability":"mutable","name":"params","nodeType":"VariableDeclaration","scope":5361,"src":"1690:48:33","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_ExactInputSingleParams_$2703_memory_ptr","typeString":"struct ISwapRouter.ExactInputSingleParams"},"typeName":{"id":5313,"name":"ISwapRouter.ExactInputSingleParams","nodeType":"UserDefinedTypeName","referencedDeclaration":2703,"src":"1690:34:33","typeDescriptions":{"typeIdentifier":"t_struct$_ExactInputSingleParams_$2703_storage_ptr","typeString":"struct ISwapRouter.ExactInputSingleParams"}},"visibility":"internal"}],"id":5330,"initialValue":{"arguments":[{"id":5317,"name":"tokenIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5272,"src":"1818:7:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5318,"name":"tokenOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5274,"src":"1854:8:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5319,"name":"poolFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5276,"src":"1886:7:33","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},{"arguments":[{"id":5322,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1931:4:33","typeDescriptions":{"typeIdentifier":"t_contract$_TokenOperationsManagerOptimized_$5764","typeString":"contract TokenOperationsManagerOptimized"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_TokenOperationsManagerOptimized_$5764","typeString":"contract TokenOperationsManagerOptimized"}],"id":5321,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1923:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5320,"name":"address","nodeType":"ElementaryTypeName","src":"1923:7:33","typeDescriptions":{}}},"id":5323,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1923:13:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"expression":{"id":5324,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"1965:5:33","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":5325,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"timestamp","nodeType":"MemberAccess","src":"1965:15:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5326,"name":"amountIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5278,"src":"2009:8:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5327,"name":"amountOutMin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5280,"src":"2054:12:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"30","id":5328,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2104:1:33","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint24","typeString":"uint24"},{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"expression":{"id":5315,"name":"ISwapRouter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2775,"src":"1741:11:33","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ISwapRouter_$2775_$","typeString":"type(contract ISwapRouter)"}},"id":5316,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"ExactInputSingleParams","nodeType":"MemberAccess","referencedDeclaration":2703,"src":"1741:48:33","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_ExactInputSingleParams_$2703_storage_ptr_$","typeString":"type(struct ISwapRouter.ExactInputSingleParams storage pointer)"}},"id":5329,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"names":["tokenIn","tokenOut","fee","recipient","deadline","amountIn","amountOutMinimum","sqrtPriceLimitX96"],"nodeType":"FunctionCall","src":"1741:380:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_ExactInputSingleParams_$2703_memory_ptr","typeString":"struct ISwapRouter.ExactInputSingleParams memory"}},"nodeType":"VariableDeclarationStatement","src":"1690:431:33"},{"expression":{"id":5336,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5331,"name":"amountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5285,"src":"2134:9:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5334,"name":"params","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5314,"src":"2174:6:33","typeDescriptions":{"typeIdentifier":"t_struct$_ExactInputSingleParams_$2703_memory_ptr","typeString":"struct ISwapRouter.ExactInputSingleParams memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_ExactInputSingleParams_$2703_memory_ptr","typeString":"struct ISwapRouter.ExactInputSingleParams memory"}],"expression":{"id":5332,"name":"swapRouter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5240,"src":"2146:10:33","typeDescriptions":{"typeIdentifier":"t_contract$_ISwapRouter_$2775","typeString":"contract ISwapRouter"}},"id":5333,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"exactInputSingle","nodeType":"MemberAccess","referencedDeclaration":2711,"src":"2146:27:33","typeDescriptions":{"typeIdentifier":"t_function_external_payable$_t_struct$_ExactInputSingleParams_$2703_memory_ptr_$returns$_t_uint256_$","typeString":"function (struct ISwapRouter.ExactInputSingleParams memory) payable external returns (uint256)"}},"id":5335,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2146:35:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2134:47:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5337,"nodeType":"ExpressionStatement","src":"2134:47:33"},{"expression":{"arguments":[{"arguments":[{"id":5344,"name":"swapRouter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5240,"src":"2257:10:33","typeDescriptions":{"typeIdentifier":"t_contract$_ISwapRouter_$2775","typeString":"contract ISwapRouter"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_ISwapRouter_$2775","typeString":"contract ISwapRouter"}],"id":5343,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2249:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5342,"name":"address","nodeType":"ElementaryTypeName","src":"2249:7:33","typeDescriptions":{}}},"id":5345,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2249:19:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"hexValue":"30","id":5346,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2270:1:33","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"expression":{"arguments":[{"id":5339,"name":"tokenIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5272,"src":"2228:7:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5338,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":554,"src":"2221:6:33","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$554_$","typeString":"type(contract IERC20)"}},"id":5340,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2221:15:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$554","typeString":"contract IERC20"}},"id":5341,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"safeApprove","nodeType":"MemberAccess","referencedDeclaration":656,"src":"2221:27:33","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$554_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20_$554_$","typeString":"function (contract IERC20,address,uint256)"}},"id":5347,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2221:51:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5348,"nodeType":"ExpressionStatement","src":"2221:51:33"},{"eventCall":{"arguments":[{"arguments":[{"hexValue":"53574150","id":5352,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2308:6:33","typeDescriptions":{"typeIdentifier":"t_stringliteral_497a7733c30c446bed91d579fce5ede8c3e0fbcdbe90a491d0a07e91d5b88b71","typeString":"literal_string \"SWAP\""},"value":"SWAP"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_497a7733c30c446bed91d579fce5ede8c3e0fbcdbe90a491d0a07e91d5b88b71","typeString":"literal_string \"SWAP\""}],"id":5351,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2300:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":5350,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2300:7:33","typeDescriptions":{}}},"id":5353,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2300:15:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":5354,"name":"tokenIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5272,"src":"2317:7:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5355,"name":"tokenOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5274,"src":"2326:8:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5356,"name":"amountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5285,"src":"2336:9:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5349,"name":"Operation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5252,"src":"2290:9:33","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (bytes32,address,address,uint256)"}},"id":5357,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2290:56:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5358,"nodeType":"EmitStatement","src":"2285:61:33"},{"expression":{"id":5359,"name":"amountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5285,"src":"2366:9:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5286,"id":5360,"nodeType":"Return","src":"2359:16:33"}]},"functionSelector":"3bf237d5","id":5362,"implemented":true,"kind":"function","modifiers":[{"id":5283,"modifierName":{"id":5282,"name":"onlyOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":58,"src":"1396:9:33","typeDescriptions":{"typeIdentifier":"t_modifier$__$","typeString":"modifier ()"}},"nodeType":"ModifierInvocation","src":"1396:9:33"}],"name":"swap","nodeType":"FunctionDefinition","parameters":{"id":5281,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5272,"mutability":"mutable","name":"tokenIn","nodeType":"VariableDeclaration","scope":5362,"src":"1254:15:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5271,"name":"address","nodeType":"ElementaryTypeName","src":"1254:7:33","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5274,"mutability":"mutable","name":"tokenOut","nodeType":"VariableDeclaration","scope":5362,"src":"1280:16:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5273,"name":"address","nodeType":"ElementaryTypeName","src":"1280:7:33","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5276,"mutability":"mutable","name":"poolFee","nodeType":"VariableDeclaration","scope":5362,"src":"1307:14:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"},"typeName":{"id":5275,"name":"uint24","nodeType":"ElementaryTypeName","src":"1307:6:33","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"visibility":"internal"},{"constant":false,"id":5278,"mutability":"mutable","name":"amountIn","nodeType":"VariableDeclaration","scope":5362,"src":"1332:16:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5277,"name":"uint256","nodeType":"ElementaryTypeName","src":"1332:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5280,"mutability":"mutable","name":"amountOutMin","nodeType":"VariableDeclaration","scope":5362,"src":"1359:20:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5279,"name":"uint256","nodeType":"ElementaryTypeName","src":"1359:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1243:143:33"},"returnParameters":{"id":5286,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5285,"mutability":"mutable","name":"amountOut","nodeType":"VariableDeclaration","scope":5362,"src":"1415:17:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5284,"name":"uint256","nodeType":"ElementaryTypeName","src":"1415:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1414:19:33"},"scope":5764,"src":"1230:1153:33","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":5427,"nodeType":"Block","src":"2514:397:33","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5373,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5371,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5364,"src":"2529:5:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":5372,"name":"WETH9","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5242,"src":"2538:5:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2529:14:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":5412,"nodeType":"Block","src":"2682:148:33","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5395,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5392,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2705:3:33","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5393,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"value","nodeType":"MemberAccess","src":"2705:9:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":5394,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2718:1:33","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2705:14:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455448206e6f74206e6565646564","id":5396,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2721:16:33","typeDescriptions":{"typeIdentifier":"t_stringliteral_25e7c0db2f301ef5ae08986719b3ba871467fa859b0b9ec77b02e0995dc6852e","typeString":"literal_string \"ETH not needed\""},"value":"ETH not needed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_25e7c0db2f301ef5ae08986719b3ba871467fa859b0b9ec77b02e0995dc6852e","typeString":"literal_string \"ETH not needed\""}],"id":5391,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2697:7:33","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5397,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2697:41:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5398,"nodeType":"ExpressionStatement","src":"2697:41:33"},{"expression":{"arguments":[{"expression":{"id":5403,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2784:3:33","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5404,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"2784:10:33","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"arguments":[{"id":5407,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2804:4:33","typeDescriptions":{"typeIdentifier":"t_contract$_TokenOperationsManagerOptimized_$5764","typeString":"contract TokenOperationsManagerOptimized"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_TokenOperationsManagerOptimized_$5764","typeString":"contract TokenOperationsManagerOptimized"}],"id":5406,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2796:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5405,"name":"address","nodeType":"ElementaryTypeName","src":"2796:7:33","typeDescriptions":{}}},"id":5408,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2796:13:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"id":5409,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5366,"src":"2811:6:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":5400,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5364,"src":"2760:5:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5399,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":554,"src":"2753:6:33","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$554_$","typeString":"type(contract IERC20)"}},"id":5401,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2753:13:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$554","typeString":"contract IERC20"}},"id":5402,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"safeTransferFrom","nodeType":"MemberAccess","referencedDeclaration":613,"src":"2753:30:33","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$554_$_t_address_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20_$554_$","typeString":"function (contract IERC20,address,address,uint256)"}},"id":5410,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2753:65:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5411,"nodeType":"ExpressionStatement","src":"2753:65:33"}]},"id":5413,"nodeType":"IfStatement","src":"2525:305:33","trueBody":{"id":5390,"nodeType":"Block","src":"2545:131:33","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5378,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5375,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2568:3:33","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5376,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"value","nodeType":"MemberAccess","src":"2568:9:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":5377,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5366,"src":"2581:6:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2568:19:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4554482076616c756520213d20616d6f756e74","id":5379,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2589:21:33","typeDescriptions":{"typeIdentifier":"t_stringliteral_155ca343b43eb004a62c5519c0936d33ba631fef89c8fc3f40e43e9970e87f0b","typeString":"literal_string \"ETH value != amount\""},"value":"ETH value != amount"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_155ca343b43eb004a62c5519c0936d33ba631fef89c8fc3f40e43e9970e87f0b","typeString":"literal_string \"ETH value != amount\""}],"id":5374,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2560:7:33","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5380,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2560:51:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5381,"nodeType":"ExpressionStatement","src":"2560:51:33"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":5383,"name":"WETH9","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5242,"src":"2633:5:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5382,"name":"IWETH9","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2792,"src":"2626:6:33","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IWETH9_$2792_$","typeString":"type(contract IWETH9)"}},"id":5384,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2626:13:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IWETH9_$2792","typeString":"contract IWETH9"}},"id":5385,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"deposit","nodeType":"MemberAccess","referencedDeclaration":2785,"src":"2626:21:33","typeDescriptions":{"typeIdentifier":"t_function_external_payable$__$returns$__$","typeString":"function () payable external"}},"id":5387,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":5386,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5366,"src":"2655:6:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"2626:36:33","typeDescriptions":{"typeIdentifier":"t_function_external_payable$__$returns$__$value","typeString":"function () payable external"}},"id":5388,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2626:38:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5389,"nodeType":"ExpressionStatement","src":"2626:38:33"}]}},{"eventCall":{"arguments":[{"arguments":[{"hexValue":"4445504f534954","id":5417,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2865:9:33","typeDescriptions":{"typeIdentifier":"t_stringliteral_87a7811f4bfedea3d341ad165680ae306b01aaeacc205d227629cf157dd9f821","typeString":"literal_string \"DEPOSIT\""},"value":"DEPOSIT"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_87a7811f4bfedea3d341ad165680ae306b01aaeacc205d227629cf157dd9f821","typeString":"literal_string \"DEPOSIT\""}],"id":5416,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2857:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":5415,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2857:7:33","typeDescriptions":{}}},"id":5418,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2857:18:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":5419,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5364,"src":"2877:5:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":5422,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2892:1:33","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":5421,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2884:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5420,"name":"address","nodeType":"ElementaryTypeName","src":"2884:7:33","typeDescriptions":{}}},"id":5423,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2884:10:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"id":5424,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5366,"src":"2896:6:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5414,"name":"Operation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5252,"src":"2847:9:33","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (bytes32,address,address,uint256)"}},"id":5425,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2847:56:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5426,"nodeType":"EmitStatement","src":"2842:61:33"}]},"functionSelector":"47e7ef24","id":5428,"implemented":true,"kind":"function","modifiers":[{"id":5369,"modifierName":{"id":5368,"name":"onlyOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":58,"src":"2504:9:33","typeDescriptions":{"typeIdentifier":"t_modifier$__$","typeString":"modifier ()"}},"nodeType":"ModifierInvocation","src":"2504:9:33"}],"name":"deposit","nodeType":"FunctionDefinition","parameters":{"id":5367,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5364,"mutability":"mutable","name":"token","nodeType":"VariableDeclaration","scope":5428,"src":"2456:13:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5363,"name":"address","nodeType":"ElementaryTypeName","src":"2456:7:33","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5366,"mutability":"mutable","name":"amount","nodeType":"VariableDeclaration","scope":5428,"src":"2471:14:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5365,"name":"uint256","nodeType":"ElementaryTypeName","src":"2471:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2455:31:33"},"returnParameters":{"id":5370,"nodeType":"ParameterList","parameters":[],"src":"2514:0:33"},"scope":5764,"src":"2439:472:33","stateMutability":"payable","virtual":false,"visibility":"external"},{"body":{"id":5519,"nodeType":"Block","src":"3036:569:33","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5439,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5437,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5430,"src":"3051:5:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":5438,"name":"WETH9","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5242,"src":"3060:5:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3051:14:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":5504,"nodeType":"Block","src":"3314:209:33","statements":[{"assignments":[5477],"declarations":[{"constant":false,"id":5477,"mutability":"mutable","name":"balance","nodeType":"VariableDeclaration","scope":5504,"src":"3329:15:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5476,"name":"uint256","nodeType":"ElementaryTypeName","src":"3329:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5487,"initialValue":{"arguments":[{"arguments":[{"id":5484,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3379:4:33","typeDescriptions":{"typeIdentifier":"t_contract$_TokenOperationsManagerOptimized_$5764","typeString":"contract TokenOperationsManagerOptimized"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_TokenOperationsManagerOptimized_$5764","typeString":"contract TokenOperationsManagerOptimized"}],"id":5483,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3371:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5482,"name":"address","nodeType":"ElementaryTypeName","src":"3371:7:33","typeDescriptions":{}}},"id":5485,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3371:13:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"}],"expression":{"arguments":[{"id":5479,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5430,"src":"3354:5:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5478,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":554,"src":"3347:6:33","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$554_$","typeString":"type(contract IERC20)"}},"id":5480,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3347:13:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$554","typeString":"contract IERC20"}},"id":5481,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balanceOf","nodeType":"MemberAccess","referencedDeclaration":493,"src":"3347:23:33","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":5486,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3347:38:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3329:56:33"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5491,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5489,"name":"balance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5477,"src":"3408:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":5490,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5432,"src":"3419:6:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3408:17:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e73756666696369656e742062616c616e6365","id":5492,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3427:22:33","typeDescriptions":{"typeIdentifier":"t_stringliteral_47533c3652efd02135ecc34b3fac8efc7b14bf0618b9392fd6e044a3d8a6eef5","typeString":"literal_string \"Insufficient balance\""},"value":"Insufficient balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_47533c3652efd02135ecc34b3fac8efc7b14bf0618b9392fd6e044a3d8a6eef5","typeString":"literal_string \"Insufficient balance\""}],"id":5488,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3400:7:33","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5493,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3400:50:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5494,"nodeType":"ExpressionStatement","src":"3400:50:33"},{"expression":{"arguments":[{"expression":{"id":5499,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3492:3:33","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5500,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"3492:10:33","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"id":5501,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5432,"src":"3504:6:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":5496,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5430,"src":"3472:5:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5495,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":554,"src":"3465:6:33","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$554_$","typeString":"type(contract IERC20)"}},"id":5497,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3465:13:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$554","typeString":"contract IERC20"}},"id":5498,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"safeTransfer","nodeType":"MemberAccess","referencedDeclaration":588,"src":"3465:26:33","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$554_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20_$554_$","typeString":"function (contract IERC20,address,uint256)"}},"id":5502,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3465:46:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5503,"nodeType":"ExpressionStatement","src":"3465:46:33"}]},"id":5505,"nodeType":"IfStatement","src":"3047:476:33","trueBody":{"id":5475,"nodeType":"Block","src":"3067:241:33","statements":[{"assignments":[5441],"declarations":[{"constant":false,"id":5441,"mutability":"mutable","name":"balance","nodeType":"VariableDeclaration","scope":5475,"src":"3082:15:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5440,"name":"uint256","nodeType":"ElementaryTypeName","src":"3082:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5451,"initialValue":{"arguments":[{"arguments":[{"id":5448,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3132:4:33","typeDescriptions":{"typeIdentifier":"t_contract$_TokenOperationsManagerOptimized_$5764","typeString":"contract TokenOperationsManagerOptimized"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_TokenOperationsManagerOptimized_$5764","typeString":"contract TokenOperationsManagerOptimized"}],"id":5447,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3124:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5446,"name":"address","nodeType":"ElementaryTypeName","src":"3124:7:33","typeDescriptions":{}}},"id":5449,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3124:13:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"}],"expression":{"arguments":[{"id":5443,"name":"WETH9","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5242,"src":"3107:5:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5442,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":554,"src":"3100:6:33","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$554_$","typeString":"type(contract IERC20)"}},"id":5444,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3100:13:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$554","typeString":"contract IERC20"}},"id":5445,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balanceOf","nodeType":"MemberAccess","referencedDeclaration":493,"src":"3100:23:33","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":5450,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3100:38:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3082:56:33"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5455,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5453,"name":"balance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5441,"src":"3161:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":5454,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5432,"src":"3172:6:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3161:17:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e73756666696369656e742057455448","id":5456,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3180:19:33","typeDescriptions":{"typeIdentifier":"t_stringliteral_60de758d3296c7eae9cdf7e88b7058fbf54b8138dae3844858ca011a2b517bef","typeString":"literal_string \"Insufficient WETH\""},"value":"Insufficient WETH"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_60de758d3296c7eae9cdf7e88b7058fbf54b8138dae3844858ca011a2b517bef","typeString":"literal_string \"Insufficient WETH\""}],"id":5452,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3153:7:33","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5457,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3153:47:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5458,"nodeType":"ExpressionStatement","src":"3153:47:33"},{"expression":{"arguments":[{"id":5463,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5432,"src":"3238:6:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":5460,"name":"WETH9","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5242,"src":"3222:5:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5459,"name":"IWETH9","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2792,"src":"3215:6:33","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IWETH9_$2792_$","typeString":"type(contract IWETH9)"}},"id":5461,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3215:13:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IWETH9_$2792","typeString":"contract IWETH9"}},"id":5462,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"withdraw","nodeType":"MemberAccess","referencedDeclaration":2791,"src":"3215:22:33","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256) external"}},"id":5464,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3215:30:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5465,"nodeType":"ExpressionStatement","src":"3215:30:33"},{"expression":{"arguments":[{"id":5472,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5432,"src":"3289:6:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"expression":{"id":5468,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3268:3:33","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5469,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"3268:10:33","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"}],"id":5467,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3260:8:33","typeDescriptions":{"typeIdentifier":"t_type$_t_address_payable_$","typeString":"type(address payable)"},"typeName":{"id":5466,"name":"address","nodeType":"ElementaryTypeName","src":"3260:8:33","stateMutability":"payable","typeDescriptions":{}}},"id":5470,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3260:19:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":5471,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"transfer","nodeType":"MemberAccess","src":"3260:28:33","typeDescriptions":{"typeIdentifier":"t_function_transfer_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":5473,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3260:36:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5474,"nodeType":"ExpressionStatement","src":"3260:36:33"}]}},{"eventCall":{"arguments":[{"arguments":[{"hexValue":"5749544844524157","id":5509,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3558:10:33","typeDescriptions":{"typeIdentifier":"t_stringliteral_7a8dc26796a1e50e6e190b70259f58f6a4edd5b22280ceecc82b687b8e982869","typeString":"literal_string \"WITHDRAW\""},"value":"WITHDRAW"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_7a8dc26796a1e50e6e190b70259f58f6a4edd5b22280ceecc82b687b8e982869","typeString":"literal_string \"WITHDRAW\""}],"id":5508,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3550:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":5507,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3550:7:33","typeDescriptions":{}}},"id":5510,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3550:19:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":5511,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5430,"src":"3571:5:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":5514,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3586:1:33","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":5513,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3578:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5512,"name":"address","nodeType":"ElementaryTypeName","src":"3578:7:33","typeDescriptions":{}}},"id":5515,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3578:10:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"id":5516,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5432,"src":"3590:6:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5506,"name":"Operation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5252,"src":"3540:9:33","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (bytes32,address,address,uint256)"}},"id":5517,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3540:57:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5518,"nodeType":"EmitStatement","src":"3535:62:33"}]},"functionSelector":"f3fef3a3","id":5520,"implemented":true,"kind":"function","modifiers":[{"id":5435,"modifierName":{"id":5434,"name":"onlyOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":58,"src":"3026:9:33","typeDescriptions":{"typeIdentifier":"t_modifier$__$","typeString":"modifier ()"}},"nodeType":"ModifierInvocation","src":"3026:9:33"}],"name":"withdraw","nodeType":"FunctionDefinition","parameters":{"id":5433,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5430,"mutability":"mutable","name":"token","nodeType":"VariableDeclaration","scope":5520,"src":"2986:13:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5429,"name":"address","nodeType":"ElementaryTypeName","src":"2986:7:33","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5432,"mutability":"mutable","name":"amount","nodeType":"VariableDeclaration","scope":5520,"src":"3001:14:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5431,"name":"uint256","nodeType":"ElementaryTypeName","src":"3001:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2985:31:33"},"returnParameters":{"id":5436,"nodeType":"ParameterList","parameters":[],"src":"3036:0:33"},"scope":5764,"src":"2968:637:33","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":5666,"nodeType":"Block","src":"3782:1116:33","statements":[{"assignments":[5532],"declarations":[{"constant":false,"id":5532,"mutability":"mutable","name":"to","nodeType":"VariableDeclaration","scope":5666,"src":"3793:18:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":5531,"name":"address","nodeType":"ElementaryTypeName","src":"3793:15:33","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"}],"id":5549,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5538,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5533,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5526,"src":"3814:9:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":5536,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3835:1:33","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":5535,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3827:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5534,"name":"address","nodeType":"ElementaryTypeName","src":"3827:7:33","typeDescriptions":{}}},"id":5537,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3827:10:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"3814:23:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"arguments":[{"id":5546,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5526,"src":"3896:9:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5545,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3888:8:33","typeDescriptions":{"typeIdentifier":"t_type$_t_address_payable_$","typeString":"type(address payable)"},"typeName":{"id":5544,"name":"address","nodeType":"ElementaryTypeName","src":"3888:8:33","stateMutability":"payable","typeDescriptions":{}}},"id":5547,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3888:18:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":5548,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"3814:92:33","trueExpression":{"arguments":[{"expression":{"id":5541,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3861:3:33","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5542,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"3861:10:33","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"}],"id":5540,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3853:8:33","typeDescriptions":{"typeIdentifier":"t_type$_t_address_payable_$","typeString":"type(address payable)"},"typeName":{"id":5539,"name":"address","nodeType":"ElementaryTypeName","src":"3853:8:33","stateMutability":"payable","typeDescriptions":{}}},"id":5543,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3853:19:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"nodeType":"VariableDeclarationStatement","src":"3793:113:33"},{"condition":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":5555,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5550,"name":"action","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5522,"src":"3923:6:33","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"524546554e445f455448","id":5553,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3941:12:33","typeDescriptions":{"typeIdentifier":"t_stringliteral_9b900a42ba9852cd5b84d92b98f645bb10450fc1f2eda661106db67d10946d93","typeString":"literal_string \"REFUND_ETH\""},"value":"REFUND_ETH"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_9b900a42ba9852cd5b84d92b98f645bb10450fc1f2eda661106db67d10946d93","typeString":"literal_string \"REFUND_ETH\""}],"id":5552,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3933:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":5551,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3933:7:33","typeDescriptions":{}}},"id":5554,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3933:21:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3923:31:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":5596,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5591,"name":"action","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5522,"src":"4201:6:33","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"554e575241505f57455448","id":5594,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4219:13:33","typeDescriptions":{"typeIdentifier":"t_stringliteral_1132a23a8b8e046a3f7bc0d95475d3c1e681926563b811784ba3d2eb75042a93","typeString":"literal_string \"UNWRAP_WETH\""},"value":"UNWRAP_WETH"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_1132a23a8b8e046a3f7bc0d95475d3c1e681926563b811784ba3d2eb75042a93","typeString":"literal_string \"UNWRAP_WETH\""}],"id":5593,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4211:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":5592,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4211:7:33","typeDescriptions":{}}},"id":5595,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4211:22:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"4201:32:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5652,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":5645,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5640,"name":"action","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5522,"src":"4553:6:33","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"53574545505f544f4b454e","id":5643,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4571:13:33","typeDescriptions":{"typeIdentifier":"t_stringliteral_fba095103968f002f8759c80fac47fba9efd8d136f953003605befee8d6c4d82","typeString":"literal_string \"SWEEP_TOKEN\""},"value":"SWEEP_TOKEN"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_fba095103968f002f8759c80fac47fba9efd8d136f953003605befee8d6c4d82","typeString":"literal_string \"SWEEP_TOKEN\""}],"id":5642,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4563:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":5641,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4563:7:33","typeDescriptions":{}}},"id":5644,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4563:22:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"4553:32:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5651,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5646,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5526,"src":"4589:9:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":5649,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4610:1:33","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":5648,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4602:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5647,"name":"address","nodeType":"ElementaryTypeName","src":"4602:7:33","typeDescriptions":{}}},"id":5650,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4602:10:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"4589:23:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4553:59:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":5662,"nodeType":"Block","src":"4840:51:33","statements":[{"expression":{"arguments":[{"hexValue":"496e76616c696420616374696f6e","id":5659,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4862:16:33","typeDescriptions":{"typeIdentifier":"t_stringliteral_6f2677d92d5145565e0e2d97bb91aa8fab6e90fdadc635557da200934c599b12","typeString":"literal_string \"Invalid action\""},"value":"Invalid action"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_6f2677d92d5145565e0e2d97bb91aa8fab6e90fdadc635557da200934c599b12","typeString":"literal_string \"Invalid action\""}],"id":5658,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"4855:6:33","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":5660,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4855:24:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5661,"nodeType":"ExpressionStatement","src":"4855:24:33"}]},"id":5663,"nodeType":"IfStatement","src":"4535:356:33","trueBody":{"id":5657,"nodeType":"Block","src":"4624:210:33","statements":[{"expression":{"arguments":[{"hexValue":"557365207377656570546f6b656e2066756e6374696f6e","id":5654,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4796:25:33","typeDescriptions":{"typeIdentifier":"t_stringliteral_eb4c32512a6e37ddf89117e5fa2bc93babf8929e6c149681ae9eef334ffbd0dc","typeString":"literal_string \"Use sweepToken function\""},"value":"Use sweepToken function"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_eb4c32512a6e37ddf89117e5fa2bc93babf8929e6c149681ae9eef334ffbd0dc","typeString":"literal_string \"Use sweepToken function\""}],"id":5653,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"4789:6:33","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":5655,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4789:33:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5656,"nodeType":"ExpressionStatement","src":"4789:33:33"}]}},"id":5664,"nodeType":"IfStatement","src":"4197:694:33","trueBody":{"id":5639,"nodeType":"Block","src":"4235:294:33","statements":[{"assignments":[5598],"declarations":[{"constant":false,"id":5598,"mutability":"mutable","name":"balance","nodeType":"VariableDeclaration","scope":5639,"src":"4250:15:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5597,"name":"uint256","nodeType":"ElementaryTypeName","src":"4250:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5608,"initialValue":{"arguments":[{"arguments":[{"id":5605,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"4300:4:33","typeDescriptions":{"typeIdentifier":"t_contract$_TokenOperationsManagerOptimized_$5764","typeString":"contract TokenOperationsManagerOptimized"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_TokenOperationsManagerOptimized_$5764","typeString":"contract TokenOperationsManagerOptimized"}],"id":5604,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4292:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5603,"name":"address","nodeType":"ElementaryTypeName","src":"4292:7:33","typeDescriptions":{}}},"id":5606,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4292:13:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"}],"expression":{"arguments":[{"id":5600,"name":"WETH9","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5242,"src":"4275:5:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5599,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":554,"src":"4268:6:33","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$554_$","typeString":"type(contract IERC20)"}},"id":5601,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4268:13:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$554","typeString":"contract IERC20"}},"id":5602,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balanceOf","nodeType":"MemberAccess","referencedDeclaration":493,"src":"4268:23:33","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":5607,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4268:38:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4250:56:33"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5612,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5610,"name":"balance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5598,"src":"4329:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":5611,"name":"minAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5524,"src":"4340:9:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4329:20:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e73756666696369656e742057455448","id":5613,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4351:19:33","typeDescriptions":{"typeIdentifier":"t_stringliteral_60de758d3296c7eae9cdf7e88b7058fbf54b8138dae3844858ca011a2b517bef","typeString":"literal_string \"Insufficient WETH\""},"value":"Insufficient WETH"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_60de758d3296c7eae9cdf7e88b7058fbf54b8138dae3844858ca011a2b517bef","typeString":"literal_string \"Insufficient WETH\""}],"id":5609,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4321:7:33","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5614,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4321:50:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5615,"nodeType":"ExpressionStatement","src":"4321:50:33"},{"expression":{"arguments":[{"id":5620,"name":"balance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5598,"src":"4409:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":5617,"name":"WETH9","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5242,"src":"4393:5:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5616,"name":"IWETH9","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2792,"src":"4386:6:33","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IWETH9_$2792_$","typeString":"type(contract IWETH9)"}},"id":5618,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4386:13:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IWETH9_$2792","typeString":"contract IWETH9"}},"id":5619,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"withdraw","nodeType":"MemberAccess","referencedDeclaration":2791,"src":"4386:22:33","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256) external"}},"id":5621,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4386:31:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5622,"nodeType":"ExpressionStatement","src":"4386:31:33"},{"expression":{"arguments":[{"id":5626,"name":"balance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5598,"src":"4444:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":5623,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5532,"src":"4432:2:33","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":5625,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"transfer","nodeType":"MemberAccess","src":"4432:11:33","typeDescriptions":{"typeIdentifier":"t_function_transfer_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":5627,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4432:20:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5628,"nodeType":"ExpressionStatement","src":"4432:20:33"},{"eventCall":{"arguments":[{"id":5630,"name":"action","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5522,"src":"4482:6:33","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":5631,"name":"WETH9","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5242,"src":"4490:5:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":5634,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4505:1:33","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":5633,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4497:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5632,"name":"address","nodeType":"ElementaryTypeName","src":"4497:7:33","typeDescriptions":{}}},"id":5635,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4497:10:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"id":5636,"name":"balance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5598,"src":"4509:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5629,"name":"Operation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5252,"src":"4472:9:33","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (bytes32,address,address,uint256)"}},"id":5637,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4472:45:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5638,"nodeType":"EmitStatement","src":"4467:50:33"}]}},"id":5665,"nodeType":"IfStatement","src":"3919:972:33","trueBody":{"id":5590,"nodeType":"Block","src":"3956:235:33","statements":[{"assignments":[5557],"declarations":[{"constant":false,"id":5557,"mutability":"mutable","name":"balance","nodeType":"VariableDeclaration","scope":5590,"src":"3971:15:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5556,"name":"uint256","nodeType":"ElementaryTypeName","src":"3971:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5563,"initialValue":{"expression":{"arguments":[{"id":5560,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3997:4:33","typeDescriptions":{"typeIdentifier":"t_contract$_TokenOperationsManagerOptimized_$5764","typeString":"contract TokenOperationsManagerOptimized"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_TokenOperationsManagerOptimized_$5764","typeString":"contract TokenOperationsManagerOptimized"}],"id":5559,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3989:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5558,"name":"address","nodeType":"ElementaryTypeName","src":"3989:7:33","typeDescriptions":{}}},"id":5561,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3989:13:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":5562,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balance","nodeType":"MemberAccess","src":"3989:21:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3971:39:33"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5567,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5565,"name":"balance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5557,"src":"4033:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":5566,"name":"minAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5524,"src":"4044:9:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4033:20:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e73756666696369656e7420455448","id":5568,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4055:18:33","typeDescriptions":{"typeIdentifier":"t_stringliteral_0bdfce708c38b38e49561819ad1e311f4e27ccdb7e08770846f15d78c1e72db1","typeString":"literal_string \"Insufficient ETH\""},"value":"Insufficient ETH"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_0bdfce708c38b38e49561819ad1e311f4e27ccdb7e08770846f15d78c1e72db1","typeString":"literal_string \"Insufficient ETH\""}],"id":5564,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4025:7:33","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5569,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4025:49:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5570,"nodeType":"ExpressionStatement","src":"4025:49:33"},{"expression":{"arguments":[{"id":5574,"name":"balance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5557,"src":"4101:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":5571,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5532,"src":"4089:2:33","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":5573,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"transfer","nodeType":"MemberAccess","src":"4089:11:33","typeDescriptions":{"typeIdentifier":"t_function_transfer_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":5575,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4089:20:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5576,"nodeType":"ExpressionStatement","src":"4089:20:33"},{"eventCall":{"arguments":[{"id":5578,"name":"action","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5522,"src":"4139:6:33","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[{"hexValue":"30","id":5581,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4155:1:33","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":5580,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4147:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5579,"name":"address","nodeType":"ElementaryTypeName","src":"4147:7:33","typeDescriptions":{}}},"id":5582,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4147:10:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"arguments":[{"hexValue":"30","id":5585,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4167:1:33","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":5584,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4159:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5583,"name":"address","nodeType":"ElementaryTypeName","src":"4159:7:33","typeDescriptions":{}}},"id":5586,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4159:10:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"id":5587,"name":"balance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5557,"src":"4171:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5577,"name":"Operation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5252,"src":"4129:9:33","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (bytes32,address,address,uint256)"}},"id":5588,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4129:50:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5589,"nodeType":"EmitStatement","src":"4124:55:33"}]}}]},"functionSelector":"2f8b3eed","id":5667,"implemented":true,"kind":"function","modifiers":[{"id":5529,"modifierName":{"id":5528,"name":"onlyOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":58,"src":"3772:9:33","typeDescriptions":{"typeIdentifier":"t_modifier$__$","typeString":"modifier ()"}},"nodeType":"ModifierInvocation","src":"3772:9:33"}],"name":"handleETH","nodeType":"FunctionDefinition","parameters":{"id":5527,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5522,"mutability":"mutable","name":"action","nodeType":"VariableDeclaration","scope":5667,"src":"3685:14:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5521,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3685:7:33","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5524,"mutability":"mutable","name":"minAmount","nodeType":"VariableDeclaration","scope":5667,"src":"3710:17:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5523,"name":"uint256","nodeType":"ElementaryTypeName","src":"3710:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5526,"mutability":"mutable","name":"recipient","nodeType":"VariableDeclaration","scope":5667,"src":"3738:17:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5525,"name":"address","nodeType":"ElementaryTypeName","src":"3738:7:33","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3674:88:33"},"returnParameters":{"id":5530,"nodeType":"ParameterList","parameters":[],"src":"3782:0:33"},"scope":5764,"src":"3656:1242:33","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":5728,"nodeType":"Block","src":"5101:337:33","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5684,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5679,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5673,"src":"5120:9:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":5682,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5141:1:33","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":5681,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5133:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5680,"name":"address","nodeType":"ElementaryTypeName","src":"5133:7:33","typeDescriptions":{}}},"id":5683,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5133:10:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"5120:23:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e76616c696420726563697069656e74","id":5685,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5145:19:33","typeDescriptions":{"typeIdentifier":"t_stringliteral_a6664b97aef19c137d44ec81dfc0c0cc28a2c3470357b125208345a2c048425d","typeString":"literal_string \"Invalid recipient\""},"value":"Invalid recipient"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_a6664b97aef19c137d44ec81dfc0c0cc28a2c3470357b125208345a2c048425d","typeString":"literal_string \"Invalid recipient\""}],"id":5678,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5112:7:33","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5686,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5112:53:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5687,"nodeType":"ExpressionStatement","src":"5112:53:33"},{"assignments":[5689],"declarations":[{"constant":false,"id":5689,"mutability":"mutable","name":"balance","nodeType":"VariableDeclaration","scope":5728,"src":"5176:15:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5688,"name":"uint256","nodeType":"ElementaryTypeName","src":"5176:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5699,"initialValue":{"arguments":[{"arguments":[{"id":5696,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5226:4:33","typeDescriptions":{"typeIdentifier":"t_contract$_TokenOperationsManagerOptimized_$5764","typeString":"contract TokenOperationsManagerOptimized"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_TokenOperationsManagerOptimized_$5764","typeString":"contract TokenOperationsManagerOptimized"}],"id":5695,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5218:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5694,"name":"address","nodeType":"ElementaryTypeName","src":"5218:7:33","typeDescriptions":{}}},"id":5697,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5218:13:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"}],"expression":{"arguments":[{"id":5691,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5669,"src":"5201:5:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5690,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":554,"src":"5194:6:33","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$554_$","typeString":"type(contract IERC20)"}},"id":5692,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5194:13:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$554","typeString":"contract IERC20"}},"id":5693,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balanceOf","nodeType":"MemberAccess","referencedDeclaration":493,"src":"5194:23:33","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":5698,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5194:38:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5176:56:33"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5703,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5701,"name":"balance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5689,"src":"5251:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":5702,"name":"minAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5671,"src":"5262:9:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5251:20:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e73756666696369656e742062616c616e6365","id":5704,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5273:22:33","typeDescriptions":{"typeIdentifier":"t_stringliteral_47533c3652efd02135ecc34b3fac8efc7b14bf0618b9392fd6e044a3d8a6eef5","typeString":"literal_string \"Insufficient balance\""},"value":"Insufficient balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_47533c3652efd02135ecc34b3fac8efc7b14bf0618b9392fd6e044a3d8a6eef5","typeString":"literal_string \"Insufficient balance\""}],"id":5700,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5243:7:33","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5705,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5243:53:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5706,"nodeType":"ExpressionStatement","src":"5243:53:33"},{"expression":{"arguments":[{"id":5711,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5673,"src":"5334:9:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5712,"name":"balance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5689,"src":"5345:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":5708,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5669,"src":"5314:5:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5707,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":554,"src":"5307:6:33","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$554_$","typeString":"type(contract IERC20)"}},"id":5709,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5307:13:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$554","typeString":"contract IERC20"}},"id":5710,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"safeTransfer","nodeType":"MemberAccess","referencedDeclaration":588,"src":"5307:26:33","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$554_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20_$554_$","typeString":"function (contract IERC20,address,uint256)"}},"id":5713,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5307:46:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5714,"nodeType":"ExpressionStatement","src":"5307:46:33"},{"eventCall":{"arguments":[{"arguments":[{"hexValue":"53574545505f544f4b454e","id":5718,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5387:13:33","typeDescriptions":{"typeIdentifier":"t_stringliteral_fba095103968f002f8759c80fac47fba9efd8d136f953003605befee8d6c4d82","typeString":"literal_string \"SWEEP_TOKEN\""},"value":"SWEEP_TOKEN"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_fba095103968f002f8759c80fac47fba9efd8d136f953003605befee8d6c4d82","typeString":"literal_string \"SWEEP_TOKEN\""}],"id":5717,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5379:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":5716,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5379:7:33","typeDescriptions":{}}},"id":5719,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5379:22:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":5720,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5669,"src":"5403:5:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":5723,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5418:1:33","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":5722,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5410:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5721,"name":"address","nodeType":"ElementaryTypeName","src":"5410:7:33","typeDescriptions":{}}},"id":5724,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5410:10:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"id":5725,"name":"balance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5689,"src":"5422:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5715,"name":"Operation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5252,"src":"5369:9:33","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (bytes32,address,address,uint256)"}},"id":5726,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5369:61:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5727,"nodeType":"EmitStatement","src":"5364:66:33"}]},"functionSelector":"df2ab5bb","id":5729,"implemented":true,"kind":"function","modifiers":[{"id":5676,"modifierName":{"id":5675,"name":"onlyOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":58,"src":"5091:9:33","typeDescriptions":{"typeIdentifier":"t_modifier$__$","typeString":"modifier ()"}},"nodeType":"ModifierInvocation","src":"5091:9:33"}],"name":"sweepToken","nodeType":"FunctionDefinition","parameters":{"id":5674,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5669,"mutability":"mutable","name":"token","nodeType":"VariableDeclaration","scope":5729,"src":"5005:13:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5668,"name":"address","nodeType":"ElementaryTypeName","src":"5005:7:33","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5671,"mutability":"mutable","name":"minAmount","nodeType":"VariableDeclaration","scope":5729,"src":"5029:17:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5670,"name":"uint256","nodeType":"ElementaryTypeName","src":"5029:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5673,"mutability":"mutable","name":"recipient","nodeType":"VariableDeclaration","scope":5729,"src":"5057:17:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5672,"name":"address","nodeType":"ElementaryTypeName","src":"5057:7:33","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4994:87:33"},"returnParameters":{"id":5677,"nodeType":"ParameterList","parameters":[],"src":"5101:0:33"},"scope":5764,"src":"4975:463:33","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":5758,"nodeType":"Block","src":"5547:157:33","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5741,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5736,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5731,"src":"5578:5:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":5739,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5595:1:33","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":5738,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5587:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5737,"name":"address","nodeType":"ElementaryTypeName","src":"5587:7:33","typeDescriptions":{}}},"id":5740,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5587:10:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"5578:19:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"arguments":[{"arguments":[{"id":5753,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5690:4:33","typeDescriptions":{"typeIdentifier":"t_contract$_TokenOperationsManagerOptimized_$5764","typeString":"contract TokenOperationsManagerOptimized"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_TokenOperationsManagerOptimized_$5764","typeString":"contract TokenOperationsManagerOptimized"}],"id":5752,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5682:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5751,"name":"address","nodeType":"ElementaryTypeName","src":"5682:7:33","typeDescriptions":{}}},"id":5754,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5682:13:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"}],"expression":{"arguments":[{"id":5748,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5731,"src":"5665:5:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5747,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":554,"src":"5658:6:33","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$554_$","typeString":"type(contract IERC20)"}},"id":5749,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5658:13:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$554","typeString":"contract IERC20"}},"id":5750,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balanceOf","nodeType":"MemberAccess","referencedDeclaration":493,"src":"5658:23:33","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":5755,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5658:38:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5756,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"5578:118:33","trueExpression":{"expression":{"arguments":[{"id":5744,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5625:4:33","typeDescriptions":{"typeIdentifier":"t_contract$_TokenOperationsManagerOptimized_$5764","typeString":"contract TokenOperationsManagerOptimized"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_TokenOperationsManagerOptimized_$5764","typeString":"contract TokenOperationsManagerOptimized"}],"id":5743,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5617:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5742,"name":"address","nodeType":"ElementaryTypeName","src":"5617:7:33","typeDescriptions":{}}},"id":5745,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5617:13:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":5746,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balance","nodeType":"MemberAccess","src":"5617:21:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5735,"id":5757,"nodeType":"Return","src":"5558:138:33"}]},"functionSelector":"f8b2cb4f","id":5759,"implemented":true,"kind":"function","modifiers":[],"name":"getBalance","nodeType":"FunctionDefinition","parameters":{"id":5732,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5731,"mutability":"mutable","name":"token","nodeType":"VariableDeclaration","scope":5759,"src":"5500:13:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5730,"name":"address","nodeType":"ElementaryTypeName","src":"5500:7:33","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5499:15:33"},"returnParameters":{"id":5735,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5734,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":5759,"src":"5538:7:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5733,"name":"uint256","nodeType":"ElementaryTypeName","src":"5538:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5537:9:33"},"scope":5764,"src":"5480:224:33","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":5762,"nodeType":"Block","src":"5771:2:33","statements":[]},"id":5763,"implemented":true,"kind":"receive","modifiers":[],"name":"","nodeType":"FunctionDefinition","parameters":{"id":5760,"nodeType":"ParameterList","parameters":[],"src":"5751:2:33"},"returnParameters":{"id":5761,"nodeType":"ParameterList","parameters":[],"src":"5771:0:33"},"scope":5764,"src":"5744:29:33","stateMutability":"payable","virtual":false,"visibility":"external"}],"scope":5765,"src":"615:5161:33"}],"src":"33:5745:33"},"id":33},"contracts/libraries/SqrtMath.sol":{"ast":{"absolutePath":"contracts/libraries/SqrtMath.sol","exportedSymbols":{"SafeMath":[476],"SqrtMath":[5955]},"id":5956,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":5766,"literals":["solidity","^","0.7",".6"],"nodeType":"PragmaDirective","src":"33:23:34"},{"absolutePath":"@openzeppelin/contracts/math/SafeMath.sol","file":"@openzeppelin/contracts/math/SafeMath.sol","id":5767,"nodeType":"ImportDirective","scope":5956,"sourceUnit":477,"src":"60:51:34","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"library","documentation":{"id":5768,"nodeType":"StructuredDocumentation","src":"141:207:34","text":" @title Safe Square Root Math Library for Solidity 0.7.x\n @author Adapted from OpenZeppelin Contracts & other sources\n @notice Provides square root functionality using SafeMath for uint256."},"fullyImplemented":true,"id":5955,"linearizedBaseContracts":[5955],"name":"SqrtMath","nodeType":"ContractDefinition","nodes":[{"id":5771,"libraryName":{"id":5769,"name":"SafeMath","nodeType":"UserDefinedTypeName","referencedDeclaration":476,"src":"380:8:34","typeDescriptions":{"typeIdentifier":"t_contract$_SafeMath_$476","typeString":"library SafeMath"}},"nodeType":"UsingForDirective","src":"374:27:34","typeName":{"id":5770,"name":"uint256","nodeType":"ElementaryTypeName","src":"393:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},{"canonicalName":"SqrtMath.Rounding","id":5774,"members":[{"id":5772,"name":"Floor","nodeType":"EnumValue","src":"523:5:34"},{"id":5773,"name":"Ceil","nodeType":"EnumValue","src":"539:4:34"}],"name":"Rounding","nodeType":"EnumDefinition","src":"498:52:34"},{"body":{"id":5901,"nodeType":"Block","src":"799:1352:34","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5784,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5782,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5777,"src":"814:1:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":5783,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"819:1:34","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"814:6:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5787,"nodeType":"IfStatement","src":"810:20:34","trueBody":{"expression":{"hexValue":"30","id":5785,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"829:1:34","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":5781,"id":5786,"nodeType":"Return","src":"822:8:34"}},{"assignments":[5789],"declarations":[{"constant":false,"id":5789,"mutability":"mutable","name":"estimate","nodeType":"VariableDeclaration","scope":5901,"src":"1011:16:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5788,"name":"uint256","nodeType":"ElementaryTypeName","src":"1011:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5798,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5797,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":5790,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1030:1:34","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5795,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":5792,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5777,"src":"1041:1:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5791,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5954,"src":"1036:4:34","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":5793,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1036:7:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":5794,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1047:1:34","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1036:12:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":5796,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1035:14:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1030:19:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1011:38:34"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5801,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5799,"name":"estimate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5789,"src":"1064:8:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":5800,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1076:1:34","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1064:13:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5806,"nodeType":"IfStatement","src":"1060:31:34","trueBody":{"expression":{"id":5804,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5802,"name":"estimate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5789,"src":"1079:8:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"31","id":5803,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1090:1:34","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1079:12:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5805,"nodeType":"ExpressionStatement","src":"1079:12:34"}},{"assignments":[5808],"declarations":[{"constant":false,"id":5808,"mutability":"mutable","name":"result","nodeType":"VariableDeclaration","scope":5901,"src":"1252:14:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5807,"name":"uint256","nodeType":"ElementaryTypeName","src":"1252:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5819,"initialValue":{"arguments":[{"hexValue":"32","id":5817,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1303:1:34","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"}],"expression":{"arguments":[{"arguments":[{"id":5813,"name":"estimate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5789,"src":"1288:8:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":5811,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5777,"src":"1282:1:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5812,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"div","nodeType":"MemberAccess","referencedDeclaration":381,"src":"1282:5:34","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":5814,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1282:15:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":5809,"name":"estimate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5789,"src":"1269:8:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5810,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"add","nodeType":"MemberAccess","referencedDeclaration":303,"src":"1269:12:34","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":5815,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1269:29:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5816,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"div","nodeType":"MemberAccess","referencedDeclaration":381,"src":"1269:33:34","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":5818,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1269:36:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1252:53:34"},{"expression":{"id":5831,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5820,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5808,"src":"1316:6:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"hexValue":"32","id":5829,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1355:1:34","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"}],"expression":{"arguments":[{"arguments":[{"id":5825,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5808,"src":"1342:6:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":5823,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5777,"src":"1336:1:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5824,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"div","nodeType":"MemberAccess","referencedDeclaration":381,"src":"1336:5:34","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":5826,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1336:13:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":5821,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5808,"src":"1325:6:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5822,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"add","nodeType":"MemberAccess","referencedDeclaration":303,"src":"1325:10:34","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":5827,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1325:25:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5828,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"div","nodeType":"MemberAccess","referencedDeclaration":381,"src":"1325:29:34","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":5830,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1325:32:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1316:41:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5832,"nodeType":"ExpressionStatement","src":"1316:41:34"},{"expression":{"id":5844,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5833,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5808,"src":"1368:6:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"hexValue":"32","id":5842,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1407:1:34","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"}],"expression":{"arguments":[{"arguments":[{"id":5838,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5808,"src":"1394:6:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":5836,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5777,"src":"1388:1:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5837,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"div","nodeType":"MemberAccess","referencedDeclaration":381,"src":"1388:5:34","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":5839,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1388:13:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":5834,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5808,"src":"1377:6:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5835,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"add","nodeType":"MemberAccess","referencedDeclaration":303,"src":"1377:10:34","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":5840,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1377:25:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5841,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"div","nodeType":"MemberAccess","referencedDeclaration":381,"src":"1377:29:34","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":5843,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1377:32:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1368:41:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5845,"nodeType":"ExpressionStatement","src":"1368:41:34"},{"expression":{"id":5857,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5846,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5808,"src":"1420:6:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"hexValue":"32","id":5855,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1459:1:34","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"}],"expression":{"arguments":[{"arguments":[{"id":5851,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5808,"src":"1446:6:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":5849,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5777,"src":"1440:1:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5850,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"div","nodeType":"MemberAccess","referencedDeclaration":381,"src":"1440:5:34","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":5852,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1440:13:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":5847,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5808,"src":"1429:6:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5848,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"add","nodeType":"MemberAccess","referencedDeclaration":303,"src":"1429:10:34","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":5853,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1429:25:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5854,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"div","nodeType":"MemberAccess","referencedDeclaration":381,"src":"1429:29:34","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":5856,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1429:32:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1420:41:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5858,"nodeType":"ExpressionStatement","src":"1420:41:34"},{"expression":{"id":5870,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5859,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5808,"src":"1472:6:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"hexValue":"32","id":5868,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1511:1:34","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"}],"expression":{"arguments":[{"arguments":[{"id":5864,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5808,"src":"1498:6:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":5862,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5777,"src":"1492:1:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5863,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"div","nodeType":"MemberAccess","referencedDeclaration":381,"src":"1492:5:34","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":5865,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1492:13:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":5860,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5808,"src":"1481:6:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5861,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"add","nodeType":"MemberAccess","referencedDeclaration":303,"src":"1481:10:34","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":5866,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1481:25:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5867,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"div","nodeType":"MemberAccess","referencedDeclaration":381,"src":"1481:29:34","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":5869,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1481:32:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1472:41:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5871,"nodeType":"ExpressionStatement","src":"1472:41:34"},{"expression":{"id":5883,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5872,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5808,"src":"1524:6:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"hexValue":"32","id":5881,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1563:1:34","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"}],"expression":{"arguments":[{"arguments":[{"id":5877,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5808,"src":"1550:6:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":5875,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5777,"src":"1544:1:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5876,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"div","nodeType":"MemberAccess","referencedDeclaration":381,"src":"1544:5:34","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":5878,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1544:13:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":5873,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5808,"src":"1533:6:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5874,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"add","nodeType":"MemberAccess","referencedDeclaration":303,"src":"1533:10:34","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":5879,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1533:25:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5880,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"div","nodeType":"MemberAccess","referencedDeclaration":381,"src":"1533:29:34","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":5882,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1533:32:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1524:41:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5884,"nodeType":"ExpressionStatement","src":"1524:41:34"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5890,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5885,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5808,"src":"1807:6:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"arguments":[{"id":5888,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5808,"src":"1822:6:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":5886,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5777,"src":"1816:1:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5887,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"div","nodeType":"MemberAccess","referencedDeclaration":381,"src":"1816:5:34","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":5889,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1816:13:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1807:22:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":5899,"nodeType":"Block","src":"2028:116:34","statements":[{"expression":{"id":5897,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5808,"src":"2126:6:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5781,"id":5898,"nodeType":"Return","src":"2119:13:34"}]},"id":5900,"nodeType":"IfStatement","src":"1803:341:34","trueBody":{"id":5896,"nodeType":"Block","src":"1831:191:34","statements":[{"expression":{"arguments":[{"hexValue":"31","id":5893,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2008:1:34","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"expression":{"id":5891,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5808,"src":"1997:6:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5892,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sub","nodeType":"MemberAccess","referencedDeclaration":325,"src":"1997:10:34","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":5894,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1997:13:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5781,"id":5895,"nodeType":"Return","src":"1990:20:34"}]}}]},"documentation":{"id":5775,"nodeType":"StructuredDocumentation","src":"558:178:34","text":" @dev Returns the integer square root of a number rounded down (floor).\n Uses Babylonian method with SafeMath. 6 iterations are sufficient for uint256."},"id":5902,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nodeType":"FunctionDefinition","parameters":{"id":5778,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5777,"mutability":"mutable","name":"a","nodeType":"VariableDeclaration","scope":5902,"src":"756:9:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5776,"name":"uint256","nodeType":"ElementaryTypeName","src":"756:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"755:11:34"},"returnParameters":{"id":5781,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5780,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":5902,"src":"790:7:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5779,"name":"uint256","nodeType":"ElementaryTypeName","src":"790:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"789:9:34"},"scope":5955,"src":"742:1409:34","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5943,"nodeType":"Block","src":"2354:637:34","statements":[{"assignments":[5913],"declarations":[{"constant":false,"id":5913,"mutability":"mutable","name":"resultFloor","nodeType":"VariableDeclaration","scope":5943,"src":"2365:19:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5912,"name":"uint256","nodeType":"ElementaryTypeName","src":"2365:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5917,"initialValue":{"arguments":[{"id":5915,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5905,"src":"2392:1:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5914,"name":"sqrt","nodeType":"Identifier","overloadedDeclarations":[5902,5944],"referencedDeclaration":5902,"src":"2387:4:34","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":5916,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2387:7:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2365:29:34"},{"condition":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$5774","typeString":"enum SqrtMath.Rounding"},"id":5921,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5918,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5907,"src":"2440:8:34","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$5774","typeString":"enum SqrtMath.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":5919,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5774,"src":"2452:8:34","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$5774_$","typeString":"type(enum SqrtMath.Rounding)"}},"id":5920,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"Floor","nodeType":"MemberAccess","src":"2452:14:34","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$5774","typeString":"enum SqrtMath.Rounding"}},"src":"2440:26:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":5941,"nodeType":"Block","src":"2519:465:34","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5930,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":5927,"name":"resultFloor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5913,"src":"2748:11:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":5925,"name":"resultFloor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5913,"src":"2732:11:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5926,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"mul","nodeType":"MemberAccess","referencedDeclaration":359,"src":"2732:15:34","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":5928,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2732:28:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":5929,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5905,"src":"2763:1:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2732:32:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":5939,"nodeType":"Block","src":"2879:94:34","statements":[{"expression":{"id":5937,"name":"resultFloor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5913,"src":"2905:11:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5911,"id":5938,"nodeType":"Return","src":"2898:18:34"}]},"id":5940,"nodeType":"IfStatement","src":"2728:245:34","trueBody":{"id":5936,"nodeType":"Block","src":"2766:107:34","statements":[{"expression":{"arguments":[{"hexValue":"31","id":5933,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2855:1:34","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"expression":{"id":5931,"name":"resultFloor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5913,"src":"2839:11:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5932,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"add","nodeType":"MemberAccess","referencedDeclaration":303,"src":"2839:15:34","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":5934,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2839:18:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5911,"id":5935,"nodeType":"Return","src":"2832:25:34"}]}}]},"id":5942,"nodeType":"IfStatement","src":"2436:548:34","trueBody":{"id":5924,"nodeType":"Block","src":"2468:45:34","statements":[{"expression":{"id":5922,"name":"resultFloor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5913,"src":"2490:11:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5911,"id":5923,"nodeType":"Return","src":"2483:18:34"}]}}]},"documentation":{"id":5903,"nodeType":"StructuredDocumentation","src":"2159:88:34","text":" @dev Calculates sqrt(a), following the selected rounding direction."},"id":5944,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nodeType":"FunctionDefinition","parameters":{"id":5908,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5905,"mutability":"mutable","name":"a","nodeType":"VariableDeclaration","scope":5944,"src":"2277:9:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5904,"name":"uint256","nodeType":"ElementaryTypeName","src":"2277:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5907,"mutability":"mutable","name":"rounding","nodeType":"VariableDeclaration","scope":5944,"src":"2297:17:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$5774","typeString":"enum SqrtMath.Rounding"},"typeName":{"id":5906,"name":"Rounding","nodeType":"UserDefinedTypeName","referencedDeclaration":5774,"src":"2297:8:34","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$5774","typeString":"enum SqrtMath.Rounding"}},"visibility":"internal"}],"src":"2266:55:34"},"returnParameters":{"id":5911,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5910,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":5944,"src":"2345:7:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5909,"name":"uint256","nodeType":"ElementaryTypeName","src":"2345:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2344:9:34"},"scope":5955,"src":"2253:738:34","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5953,"nodeType":"Block","src":"3312:1029:34","statements":[{"AST":{"nodeType":"YulBlock","src":"3332:1002:34","statements":[{"nodeType":"YulVariableDeclaration","src":"3347:10:34","value":{"name":"x","nodeType":"YulIdentifier","src":"3356:1:34"},"variables":[{"name":"v","nodeType":"YulTypedName","src":"3351:1:34","type":""}]},{"body":{"nodeType":"YulBlock","src":"3384:40:34","statements":[{"nodeType":"YulAssignment","src":"3403:6:34","value":{"kind":"number","nodeType":"YulLiteral","src":"3408:1:34","type":"","value":"0"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"3403:1:34"}]}]},"condition":{"arguments":[{"name":"v","nodeType":"YulIdentifier","src":"3381:1:34"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3374:6:34"},"nodeType":"YulFunctionCall","src":"3374:9:34"},"nodeType":"YulIf","src":"3371:2:34"},{"body":{"nodeType":"YulBlock","src":"3483:84:34","statements":[{"nodeType":"YulAssignment","src":"3502:16:34","value":{"arguments":[{"name":"r","nodeType":"YulIdentifier","src":"3511:1:34"},{"kind":"number","nodeType":"YulLiteral","src":"3514:3:34","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3507:3:34"},"nodeType":"YulFunctionCall","src":"3507:11:34"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"3502:1:34"}]},{"nodeType":"YulAssignment","src":"3536:16:34","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3545:3:34","type":"","value":"128"},{"name":"v","nodeType":"YulIdentifier","src":"3550:1:34"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"3541:3:34"},"nodeType":"YulFunctionCall","src":"3541:11:34"},"variableNames":[{"name":"v","nodeType":"YulIdentifier","src":"3536:1:34"}]}]},"condition":{"arguments":[{"name":"v","nodeType":"YulIdentifier","src":"3444:1:34"},{"kind":"number","nodeType":"YulLiteral","src":"3447:34:34","type":"","value":"0xffffffffffffffffffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3441:2:34"},"nodeType":"YulFunctionCall","src":"3441:41:34"},"nodeType":"YulIf","src":"3438:2:34"},{"body":{"nodeType":"YulBlock","src":"3610:82:34","statements":[{"nodeType":"YulAssignment","src":"3629:15:34","value":{"arguments":[{"name":"r","nodeType":"YulIdentifier","src":"3638:1:34"},{"kind":"number","nodeType":"YulLiteral","src":"3641:2:34","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3634:3:34"},"nodeType":"YulFunctionCall","src":"3634:10:34"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"3629:1:34"}]},{"nodeType":"YulAssignment","src":"3662:15:34","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3671:2:34","type":"","value":"64"},{"name":"v","nodeType":"YulIdentifier","src":"3675:1:34"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"3667:3:34"},"nodeType":"YulFunctionCall","src":"3667:10:34"},"variableNames":[{"name":"v","nodeType":"YulIdentifier","src":"3662:1:34"}]}]},"condition":{"arguments":[{"name":"v","nodeType":"YulIdentifier","src":"3587:1:34"},{"kind":"number","nodeType":"YulLiteral","src":"3590:18:34","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3584:2:34"},"nodeType":"YulFunctionCall","src":"3584:25:34"},"nodeType":"YulIf","src":"3581:2:34"},{"body":{"nodeType":"YulBlock","src":"3727:82:34","statements":[{"nodeType":"YulAssignment","src":"3746:15:34","value":{"arguments":[{"name":"r","nodeType":"YulIdentifier","src":"3755:1:34"},{"kind":"number","nodeType":"YulLiteral","src":"3758:2:34","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3751:3:34"},"nodeType":"YulFunctionCall","src":"3751:10:34"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"3746:1:34"}]},{"nodeType":"YulAssignment","src":"3779:15:34","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3788:2:34","type":"","value":"32"},{"name":"v","nodeType":"YulIdentifier","src":"3792:1:34"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"3784:3:34"},"nodeType":"YulFunctionCall","src":"3784:10:34"},"variableNames":[{"name":"v","nodeType":"YulIdentifier","src":"3779:1:34"}]}]},"condition":{"arguments":[{"name":"v","nodeType":"YulIdentifier","src":"3712:1:34"},{"kind":"number","nodeType":"YulLiteral","src":"3715:10:34","type":"","value":"0xffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3709:2:34"},"nodeType":"YulFunctionCall","src":"3709:17:34"},"nodeType":"YulIf","src":"3706:2:34"},{"body":{"nodeType":"YulBlock","src":"3840:82:34","statements":[{"nodeType":"YulAssignment","src":"3859:15:34","value":{"arguments":[{"name":"r","nodeType":"YulIdentifier","src":"3868:1:34"},{"kind":"number","nodeType":"YulLiteral","src":"3871:2:34","type":"","value":"16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3864:3:34"},"nodeType":"YulFunctionCall","src":"3864:10:34"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"3859:1:34"}]},{"nodeType":"YulAssignment","src":"3892:15:34","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3901:2:34","type":"","value":"16"},{"name":"v","nodeType":"YulIdentifier","src":"3905:1:34"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"3897:3:34"},"nodeType":"YulFunctionCall","src":"3897:10:34"},"variableNames":[{"name":"v","nodeType":"YulIdentifier","src":"3892:1:34"}]}]},"condition":{"arguments":[{"name":"v","nodeType":"YulIdentifier","src":"3829:1:34"},{"kind":"number","nodeType":"YulLiteral","src":"3832:6:34","type":"","value":"0xffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3826:2:34"},"nodeType":"YulFunctionCall","src":"3826:13:34"},"nodeType":"YulIf","src":"3823:2:34"},{"body":{"nodeType":"YulBlock","src":"3951:80:34","statements":[{"nodeType":"YulAssignment","src":"3970:14:34","value":{"arguments":[{"name":"r","nodeType":"YulIdentifier","src":"3979:1:34"},{"kind":"number","nodeType":"YulLiteral","src":"3982:1:34","type":"","value":"8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3975:3:34"},"nodeType":"YulFunctionCall","src":"3975:9:34"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"3970:1:34"}]},{"nodeType":"YulAssignment","src":"4002:14:34","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4011:1:34","type":"","value":"8"},{"name":"v","nodeType":"YulIdentifier","src":"4014:1:34"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"4007:3:34"},"nodeType":"YulFunctionCall","src":"4007:9:34"},"variableNames":[{"name":"v","nodeType":"YulIdentifier","src":"4002:1:34"}]}]},"condition":{"arguments":[{"name":"v","nodeType":"YulIdentifier","src":"3942:1:34"},{"kind":"number","nodeType":"YulLiteral","src":"3945:4:34","type":"","value":"0xff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3939:2:34"},"nodeType":"YulFunctionCall","src":"3939:11:34"},"nodeType":"YulIf","src":"3936:2:34"},{"body":{"nodeType":"YulBlock","src":"4059:80:34","statements":[{"nodeType":"YulAssignment","src":"4078:14:34","value":{"arguments":[{"name":"r","nodeType":"YulIdentifier","src":"4087:1:34"},{"kind":"number","nodeType":"YulLiteral","src":"4090:1:34","type":"","value":"4"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4083:3:34"},"nodeType":"YulFunctionCall","src":"4083:9:34"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"4078:1:34"}]},{"nodeType":"YulAssignment","src":"4110:14:34","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4119:1:34","type":"","value":"4"},{"name":"v","nodeType":"YulIdentifier","src":"4122:1:34"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"4115:3:34"},"nodeType":"YulFunctionCall","src":"4115:9:34"},"variableNames":[{"name":"v","nodeType":"YulIdentifier","src":"4110:1:34"}]}]},"condition":{"arguments":[{"name":"v","nodeType":"YulIdentifier","src":"4051:1:34"},{"kind":"number","nodeType":"YulLiteral","src":"4054:3:34","type":"","value":"0xf"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4048:2:34"},"nodeType":"YulFunctionCall","src":"4048:10:34"},"nodeType":"YulIf","src":"4045:2:34"},{"body":{"nodeType":"YulBlock","src":"4167:80:34","statements":[{"nodeType":"YulAssignment","src":"4186:14:34","value":{"arguments":[{"name":"r","nodeType":"YulIdentifier","src":"4195:1:34"},{"kind":"number","nodeType":"YulLiteral","src":"4198:1:34","type":"","value":"2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4191:3:34"},"nodeType":"YulFunctionCall","src":"4191:9:34"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"4186:1:34"}]},{"nodeType":"YulAssignment","src":"4218:14:34","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4227:1:34","type":"","value":"2"},{"name":"v","nodeType":"YulIdentifier","src":"4230:1:34"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"4223:3:34"},"nodeType":"YulFunctionCall","src":"4223:9:34"},"variableNames":[{"name":"v","nodeType":"YulIdentifier","src":"4218:1:34"}]}]},"condition":{"arguments":[{"name":"v","nodeType":"YulIdentifier","src":"4159:1:34"},{"kind":"number","nodeType":"YulLiteral","src":"4162:3:34","type":"","value":"0x3"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4156:2:34"},"nodeType":"YulFunctionCall","src":"4156:10:34"},"nodeType":"YulIf","src":"4153:2:34"},{"body":{"nodeType":"YulBlock","src":"4275:48:34","statements":[{"nodeType":"YulAssignment","src":"4294:14:34","value":{"arguments":[{"name":"r","nodeType":"YulIdentifier","src":"4303:1:34"},{"kind":"number","nodeType":"YulLiteral","src":"4306:1:34","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4299:3:34"},"nodeType":"YulFunctionCall","src":"4299:9:34"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"4294:1:34"}]}]},"condition":{"arguments":[{"name":"v","nodeType":"YulIdentifier","src":"4267:1:34"},{"kind":"number","nodeType":"YulLiteral","src":"4270:3:34","type":"","value":"0x1"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4264:2:34"},"nodeType":"YulFunctionCall","src":"4264:10:34"},"nodeType":"YulIf","src":"4261:2:34"}]},"evmVersion":"istanbul","externalReferences":[{"declaration":5950,"isOffset":false,"isSlot":false,"src":"3403:1:34","valueSize":1},{"declaration":5950,"isOffset":false,"isSlot":false,"src":"3502:1:34","valueSize":1},{"declaration":5950,"isOffset":false,"isSlot":false,"src":"3511:1:34","valueSize":1},{"declaration":5950,"isOffset":false,"isSlot":false,"src":"3629:1:34","valueSize":1},{"declaration":5950,"isOffset":false,"isSlot":false,"src":"3638:1:34","valueSize":1},{"declaration":5950,"isOffset":false,"isSlot":false,"src":"3746:1:34","valueSize":1},{"declaration":5950,"isOffset":false,"isSlot":false,"src":"3755:1:34","valueSize":1},{"declaration":5950,"isOffset":false,"isSlot":false,"src":"3859:1:34","valueSize":1},{"declaration":5950,"isOffset":false,"isSlot":false,"src":"3868:1:34","valueSize":1},{"declaration":5950,"isOffset":false,"isSlot":false,"src":"3970:1:34","valueSize":1},{"declaration":5950,"isOffset":false,"isSlot":false,"src":"3979:1:34","valueSize":1},{"declaration":5950,"isOffset":false,"isSlot":false,"src":"4078:1:34","valueSize":1},{"declaration":5950,"isOffset":false,"isSlot":false,"src":"4087:1:34","valueSize":1},{"declaration":5950,"isOffset":false,"isSlot":false,"src":"4186:1:34","valueSize":1},{"declaration":5950,"isOffset":false,"isSlot":false,"src":"4195:1:34","valueSize":1},{"declaration":5950,"isOffset":false,"isSlot":false,"src":"4294:1:34","valueSize":1},{"declaration":5950,"isOffset":false,"isSlot":false,"src":"4303:1:34","valueSize":1},{"declaration":5947,"isOffset":false,"isSlot":false,"src":"3356:1:34","valueSize":1}],"id":5952,"nodeType":"InlineAssembly","src":"3323:1011:34"}]},"documentation":{"id":5945,"nodeType":"StructuredDocumentation","src":"3065:182:34","text":" @dev Return the log in base 2 of a positive value rounded towards zero.\n Returns 0 if given 0. Adapted from OZ 4.x for 0.7.6 compatibility using assembly."},"id":5954,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nodeType":"FunctionDefinition","parameters":{"id":5948,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5947,"mutability":"mutable","name":"x","nodeType":"VariableDeclaration","scope":5954,"src":"3267:9:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5946,"name":"uint256","nodeType":"ElementaryTypeName","src":"3267:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3266:11:34"},"returnParameters":{"id":5951,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5950,"mutability":"mutable","name":"r","nodeType":"VariableDeclaration","scope":5954,"src":"3301:9:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5949,"name":"uint256","nodeType":"ElementaryTypeName","src":"3301:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3300:11:34"},"scope":5955,"src":"3253:1088:34","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":5956,"src":"350:3994:34"}],"src":"33:4313:34"},"id":34}},"contracts":{"@openzeppelin/contracts/access/Ownable.sol":{"Ownable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.","kind":"dev","methods":{"constructor":{"details":"Initializes the contract setting the deployer as the initial owner."},"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","renounceOwnership()":"715018a6","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":7,"contract":"@openzeppelin/contracts/access/Ownable.sol:Ownable","label":"_owner","offset":0,"slot":"0","type":"t_address"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/introspection/IERC165.sol":{"IERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/introspection/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xf70bc25d981e4ec9673a995ad2995d5d493ea188d3d8f388bba9c227ce09fb82\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/math/SafeMath.sol":{"SafeMath":{"abi":[],"devdoc":{"details":"Wrappers over Solidity's arithmetic operations with added overflow checks. Arithmetic operations in Solidity wrap on overflow. This can easily result in bugs, because programmers usually assume that an overflow raises an error, which is the standard behavior in high level programming languages. `SafeMath` restores this intuition by reverting the transaction when an operation overflows. Using this library instead of the unchecked operations eliminates an entire class of bugs, so it's recommended to use it always.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220bc2406160662be805811c54d8cfe42ab8db8e41052833986db5c0098d97f0e6564736f6c63430007060033","opcodes":"PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBC 0x24 MOD AND MOD PUSH3 0xBE8058 GT 0xC5 0x4D DUP13 INVALID TIMESTAMP 0xAB DUP14 0xB8 0xE4 LT MSTORE DUP4 CODECOPY DUP7 0xDB 0x5C STOP SWAP9 0xD9 PUSH32 0xE6564736F6C6343000706003300000000000000000000000000000000000000 ","sourceMap":"630:6594:2:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220bc2406160662be805811c54d8cfe42ab8db8e41052833986db5c0098d97f0e6564736f6c63430007060033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBC 0x24 MOD AND MOD PUSH3 0xBE8058 GT 0xC5 0x4D DUP13 INVALID TIMESTAMP 0xAB DUP14 0xB8 0xE4 LT MSTORE DUP4 CODECOPY DUP7 0xDB 0x5C STOP SWAP9 0xD9 PUSH32 0xE6564736F6C6343000706003300000000000000000000000000000000000000 ","sourceMap":"630:6594:2:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"add(uint256,uint256)":"infinite","div(uint256,uint256)":"infinite","div(uint256,uint256,string memory)":"infinite","mod(uint256,uint256)":"infinite","mod(uint256,uint256,string memory)":"infinite","mul(uint256,uint256)":"infinite","sub(uint256,uint256)":"infinite","sub(uint256,uint256,string memory)":"infinite","tryAdd(uint256,uint256)":"infinite","tryDiv(uint256,uint256)":"infinite","tryMod(uint256,uint256)":"infinite","tryMul(uint256,uint256)":"infinite","trySub(uint256,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers over Solidity's arithmetic operations with added overflow checks. Arithmetic operations in Solidity wrap on overflow. This can easily result in bugs, because programmers usually assume that an overflow raises an error, which is the standard behavior in high level programming languages. `SafeMath` restores this intuition by reverting the transaction when an operation overflows. Using this library instead of the unchecked operations eliminates an entire class of bugs, so it's recommended to use it always.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/math/SafeMath.sol\":\"SafeMath\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"IERC20":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface of the ERC20 standard as defined in the EIP.","events":{"Approval(address,address,uint256)":{"details":"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."},"Transfer(address,address,uint256)":{"details":"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."}},"kind":"dev","methods":{"allowance(address,address)":{"details":"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{"details":"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the amount of tokens owned by `account`."},"totalSupply()":{"details":"Returns the amount of tokens in existence."},"transfer(address,uint256)":{"details":"Moves `amount` tokens from the caller's account to `recipient`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFrom(address,address,uint256)":{"details":"Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `recipient`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC20/SafeERC20.sol":{"SafeERC20":{"abi":[],"devdoc":{"details":"Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.","kind":"dev","methods":{},"title":"SafeERC20","version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220e02cf6ce8be804e958f4817ae7a6154040ff1dbd19c49d4ebfab5a7c5a57570f64736f6c63430007060033","opcodes":"PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE0 0x2C 0xF6 0xCE DUP12 0xE8 DIV 0xE9 PC DELEGATECALL DUP2 PUSH27 0xE7A6154040FF1DBD19C49D4EBFAB5A7C5A57570F64736F6C634300 SMOD MOD STOP CALLER ","sourceMap":"616:3104:4:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220e02cf6ce8be804e958f4817ae7a6154040ff1dbd19c49d4ebfab5a7c5a57570f64736f6c63430007060033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE0 0x2C 0xF6 0xCE DUP12 0xE8 DIV 0xE9 PC DELEGATECALL DUP2 PUSH27 0xE7A6154040FF1DBD19C49D4EBFAB5A7C5A57570F64736F6C634300 SMOD MOD STOP CALLER ","sourceMap":"616:3104:4:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"_callOptionalReturn(contract IERC20,bytes memory)":"infinite","safeApprove(contract IERC20,address,uint256)":"infinite","safeDecreaseAllowance(contract IERC20,address,uint256)":"infinite","safeIncreaseAllowance(contract IERC20,address,uint256)":"infinite","safeTransfer(contract IERC20,address,uint256)":"infinite","safeTransferFrom(contract IERC20,address,address,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"SafeERC20\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":\"SafeERC20\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/IERC721.sol":{"IERC721":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"operator","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"owner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"_approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Required interface of an ERC721 compliant contract.","events":{"Approval(address,address,uint256)":{"details":"Emitted when `owner` enables `approved` to manage the `tokenId` token."},"ApprovalForAll(address,address,bool)":{"details":"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"Transfer(address,address,uint256)":{"details":"Emitted when `tokenId` token is transferred from `from` to `to`."}},"kind":"dev","methods":{"approve(address,uint256)":{"details":"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the number of tokens in ``owner``'s account."},"getApproved(uint256)":{"details":"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."},"isApprovedForAll(address,address)":{"details":"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"},"ownerOf(uint256)":{"details":"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."},"safeTransferFrom(address,address,uint256)":{"details":"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"setApprovalForAll(address,bool)":{"details":"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."},"transferFrom(address,address,uint256)":{"details":"Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Required interface of an ERC721 compliant contract.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":\"IERC721\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xf70bc25d981e4ec9673a995ad2995d5d493ea188d3d8f388bba9c227ce09fb82\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x2d99a0deb6648c34fbc66d6ac4a2d64798d7a5321b45624f6736fadc63da1962\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol":{"IERC721Enumerable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"operator","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"owner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"_approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"index","type":"uint256"}],"name":"tokenByIndex","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"uint256","name":"index","type":"uint256"}],"name":"tokenOfOwnerByIndex","outputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-721","kind":"dev","methods":{"approve(address,uint256)":{"details":"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the number of tokens in ``owner``'s account."},"getApproved(uint256)":{"details":"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."},"isApprovedForAll(address,address)":{"details":"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"},"ownerOf(uint256)":{"details":"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."},"safeTransferFrom(address,address,uint256)":{"details":"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"setApprovalForAll(address,bool)":{"details":"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."},"tokenByIndex(uint256)":{"details":"Returns a token ID at a given `index` of all the tokens stored by the contract. Use along with {totalSupply} to enumerate all tokens."},"tokenOfOwnerByIndex(address,uint256)":{"details":"Returns a token ID owned by `owner` at a given `index` of its token list. Use along with {balanceOf} to enumerate all of ``owner``'s tokens."},"totalSupply()":{"details":"Returns the total amount of tokens stored by the contract."},"transferFrom(address,address,uint256)":{"details":"Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."}},"title":"ERC-721 Non-Fungible Token Standard, optional enumeration extension","version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","tokenByIndex(uint256)":"4f6ccce7","tokenOfOwnerByIndex(address,uint256)":"2f745c59","totalSupply()":"18160ddd","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-721\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"tokenByIndex(uint256)\":{\"details\":\"Returns a token ID at a given `index` of all the tokens stored by the contract. Use along with {totalSupply} to enumerate all tokens.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"Returns a token ID owned by `owner` at a given `index` of its token list. Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\"},\"totalSupply()\":{\"details\":\"Returns the total amount of tokens stored by the contract.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"title\":\"ERC-721 Non-Fungible Token Standard, optional enumeration extension\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol\":\"IERC721Enumerable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xf70bc25d981e4ec9673a995ad2995d5d493ea188d3d8f388bba9c227ce09fb82\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x2d99a0deb6648c34fbc66d6ac4a2d64798d7a5321b45624f6736fadc63da1962\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xe6bd1b1218338b6f9fe17776f48623b4ac3d8a40405f74a44bc23c00abe2ca13\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol":{"IERC721Metadata":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"operator","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"owner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"_approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-721","kind":"dev","methods":{"approve(address,uint256)":{"details":"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the number of tokens in ``owner``'s account."},"getApproved(uint256)":{"details":"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."},"isApprovedForAll(address,address)":{"details":"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"},"name()":{"details":"Returns the token collection name."},"ownerOf(uint256)":{"details":"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."},"safeTransferFrom(address,address,uint256)":{"details":"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"setApprovalForAll(address,bool)":{"details":"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."},"symbol()":{"details":"Returns the token collection symbol."},"tokenURI(uint256)":{"details":"Returns the Uniform Resource Identifier (URI) for `tokenId` token."},"transferFrom(address,address,uint256)":{"details":"Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."}},"title":"ERC-721 Non-Fungible Token Standard, optional metadata extension","version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","name()":"06fdde03","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","tokenURI(uint256)":"c87b56dd","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-721\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"name()\":{\"details\":\"Returns the token collection name.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenURI(uint256)\":{\"details\":\"Returns the Uniform Resource Identifier (URI) for `tokenId` token.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"title\":\"ERC-721 Non-Fungible Token Standard, optional metadata extension\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol\":\"IERC721Metadata\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xf70bc25d981e4ec9673a995ad2995d5d493ea188d3d8f388bba9c227ce09fb82\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x2d99a0deb6648c34fbc66d6ac4a2d64798d7a5321b45624f6736fadc63da1962\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xccb917776f826ac6b68bd5a15a5f711e3967848a52ba11e6104d9a4f593314a7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Address.sol":{"Address":{"abi":[],"devdoc":{"details":"Collection of functions related to the address type","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212206e07463a8daede35bf991699d673badcc366d6963c7b29d5103ec99548e46dc164736f6c63430007060033","opcodes":"PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH15 0x7463A8DAEDE35BF991699D673BADC 0xC3 PUSH7 0xD6963C7B29D510 RETURNDATACOPY 0xC9 SWAP6 0x48 0xE4 PUSH14 0xC164736F6C634300070600330000 ","sourceMap":"134:7684:8:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212206e07463a8daede35bf991699d673badcc366d6963c7b29d5103ec99548e46dc164736f6c63430007060033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH15 0x7463A8DAEDE35BF991699D673BADC 0xC3 PUSH7 0xD6963C7B29D510 RETURNDATACOPY 0xC9 SWAP6 0x48 0xE4 PUSH14 0xC164736F6C634300070600330000 ","sourceMap":"134:7684:8:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"_verifyCallResult(bool,bytes memory,string memory)":"infinite","functionCall(address,bytes memory)":"infinite","functionCall(address,bytes memory,string memory)":"infinite","functionCallWithValue(address,bytes memory,uint256)":"infinite","functionCallWithValue(address,bytes memory,uint256,string memory)":"infinite","functionDelegateCall(address,bytes memory)":"infinite","functionDelegateCall(address,bytes memory,string memory)":"infinite","functionStaticCall(address,bytes memory)":"infinite","functionStaticCall(address,bytes memory,string memory)":"infinite","isContract(address)":"infinite","sendValue(address payable,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Address.sol\":\"Address\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Context.sol":{"Context":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/ReentrancyGuard.sol":{"ReentrancyGuard":{"abi":[],"devdoc":{"details":"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":\"ReentrancyGuard\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x8bbbc2f5c10065ee272592ae0a7a6ceb23de2fbd81564ee0bb015ecf404d5f61\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":1271,"contract":"@openzeppelin/contracts/utils/ReentrancyGuard.sol:ReentrancyGuard","label":"_status","offset":0,"slot":"0","type":"t_uint256"}],"types":{"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol":{"IUniswapV3Factory":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint24","name":"fee","type":"uint24"},{"indexed":true,"internalType":"int24","name":"tickSpacing","type":"int24"}],"name":"FeeAmountEnabled","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"oldOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnerChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"token0","type":"address"},{"indexed":true,"internalType":"address","name":"token1","type":"address"},{"indexed":true,"internalType":"uint24","name":"fee","type":"uint24"},{"indexed":false,"internalType":"int24","name":"tickSpacing","type":"int24"},{"indexed":false,"internalType":"address","name":"pool","type":"address"}],"name":"PoolCreated","type":"event"},{"inputs":[{"internalType":"address","name":"tokenA","type":"address"},{"internalType":"address","name":"tokenB","type":"address"},{"internalType":"uint24","name":"fee","type":"uint24"}],"name":"createPool","outputs":[{"internalType":"address","name":"pool","type":"address"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint24","name":"fee","type":"uint24"},{"internalType":"int24","name":"tickSpacing","type":"int24"}],"name":"enableFeeAmount","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint24","name":"fee","type":"uint24"}],"name":"feeAmountTickSpacing","outputs":[{"internalType":"int24","name":"","type":"int24"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"tokenA","type":"address"},{"internalType":"address","name":"tokenB","type":"address"},{"internalType":"uint24","name":"fee","type":"uint24"}],"name":"getPool","outputs":[{"internalType":"address","name":"pool","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_owner","type":"address"}],"name":"setOwner","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"events":{"FeeAmountEnabled(uint24,int24)":{"params":{"fee":"The enabled fee, denominated in hundredths of a bip","tickSpacing":"The minimum number of ticks between initialized ticks for pools created with the given fee"}},"OwnerChanged(address,address)":{"params":{"newOwner":"The owner after the owner was changed","oldOwner":"The owner before the owner was changed"}},"PoolCreated(address,address,uint24,int24,address)":{"params":{"fee":"The fee collected upon every swap in the pool, denominated in hundredths of a bip","pool":"The address of the created pool","tickSpacing":"The minimum number of ticks between initialized ticks","token0":"The first token of the pool by address sort order","token1":"The second token of the pool by address sort order"}}},"kind":"dev","methods":{"createPool(address,address,uint24)":{"details":"tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments are invalid.","params":{"fee":"The desired fee for the pool","tokenA":"One of the two tokens in the desired pool","tokenB":"The other of the two tokens in the desired pool"},"returns":{"pool":"The address of the newly created pool"}},"enableFeeAmount(uint24,int24)":{"details":"Fee amounts may never be removed once enabled","params":{"fee":"The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)","tickSpacing":"The spacing between ticks to be enforced for all pools created with the given fee amount"}},"feeAmountTickSpacing(uint24)":{"details":"A fee amount can never be removed, so this value should be hard coded or cached in the calling context","params":{"fee":"The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee"},"returns":{"_0":"The tick spacing"}},"getPool(address,address,uint24)":{"details":"tokenA and tokenB may be passed in either token0/token1 or token1/token0 order","params":{"fee":"The fee collected upon every swap in the pool, denominated in hundredths of a bip","tokenA":"The contract address of either token0 or token1","tokenB":"The contract address of the other token"},"returns":{"pool":"The pool address"}},"owner()":{"details":"Can be changed by the current owner via setOwner","returns":{"_0":"The address of the factory owner"}},"setOwner(address)":{"details":"Must be called by the current owner","params":{"_owner":"The new owner of the factory"}}},"title":"The interface for the Uniswap V3 Factory","version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"createPool(address,address,uint24)":"a1671295","enableFeeAmount(uint24,int24)":"8a7c195f","feeAmountTickSpacing(uint24)":"22afcccb","getPool(address,address,uint24)":"1698ee82","owner()":"8da5cb5b","setOwner(address)":"13af4035"}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickSpacing\",\"type\":\"int24\"}],\"name\":\"FeeAmountEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"tickSpacing\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"}],\"name\":\"createPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"int24\",\"name\":\"tickSpacing\",\"type\":\"int24\"}],\"name\":\"enableFeeAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"}],\"name\":\"feeAmountTickSpacing\",\"outputs\":[{\"internalType\":\"int24\",\"name\":\"\",\"type\":\"int24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"}],\"name\":\"getPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"FeeAmountEnabled(uint24,int24)\":{\"params\":{\"fee\":\"The enabled fee, denominated in hundredths of a bip\",\"tickSpacing\":\"The minimum number of ticks between initialized ticks for pools created with the given fee\"}},\"OwnerChanged(address,address)\":{\"params\":{\"newOwner\":\"The owner after the owner was changed\",\"oldOwner\":\"The owner before the owner was changed\"}},\"PoolCreated(address,address,uint24,int24,address)\":{\"params\":{\"fee\":\"The fee collected upon every swap in the pool, denominated in hundredths of a bip\",\"pool\":\"The address of the created pool\",\"tickSpacing\":\"The minimum number of ticks between initialized ticks\",\"token0\":\"The first token of the pool by address sort order\",\"token1\":\"The second token of the pool by address sort order\"}}},\"kind\":\"dev\",\"methods\":{\"createPool(address,address,uint24)\":{\"details\":\"tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments are invalid.\",\"params\":{\"fee\":\"The desired fee for the pool\",\"tokenA\":\"One of the two tokens in the desired pool\",\"tokenB\":\"The other of the two tokens in the desired pool\"},\"returns\":{\"pool\":\"The address of the newly created pool\"}},\"enableFeeAmount(uint24,int24)\":{\"details\":\"Fee amounts may never be removed once enabled\",\"params\":{\"fee\":\"The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)\",\"tickSpacing\":\"The spacing between ticks to be enforced for all pools created with the given fee amount\"}},\"feeAmountTickSpacing(uint24)\":{\"details\":\"A fee amount can never be removed, so this value should be hard coded or cached in the calling context\",\"params\":{\"fee\":\"The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\"},\"returns\":{\"_0\":\"The tick spacing\"}},\"getPool(address,address,uint24)\":{\"details\":\"tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\",\"params\":{\"fee\":\"The fee collected upon every swap in the pool, denominated in hundredths of a bip\",\"tokenA\":\"The contract address of either token0 or token1\",\"tokenB\":\"The contract address of the other token\"},\"returns\":{\"pool\":\"The pool address\"}},\"owner()\":{\"details\":\"Can be changed by the current owner via setOwner\",\"returns\":{\"_0\":\"The address of the factory owner\"}},\"setOwner(address)\":{\"details\":\"Must be called by the current owner\",\"params\":{\"_owner\":\"The new owner of the factory\"}}},\"title\":\"The interface for the Uniswap V3 Factory\",\"version\":1},\"userdoc\":{\"events\":{\"FeeAmountEnabled(uint24,int24)\":{\"notice\":\"Emitted when a new fee amount is enabled for pool creation via the factory\"},\"OwnerChanged(address,address)\":{\"notice\":\"Emitted when the owner of the factory is changed\"},\"PoolCreated(address,address,uint24,int24,address)\":{\"notice\":\"Emitted when a pool is created\"}},\"kind\":\"user\",\"methods\":{\"createPool(address,address,uint24)\":{\"notice\":\"Creates a pool for the given two tokens and fee\"},\"enableFeeAmount(uint24,int24)\":{\"notice\":\"Enables a fee amount with the given tickSpacing\"},\"feeAmountTickSpacing(uint24)\":{\"notice\":\"Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled\"},\"getPool(address,address,uint24)\":{\"notice\":\"Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\"},\"owner()\":{\"notice\":\"Returns the current owner of the factory\"},\"setOwner(address)\":{\"notice\":\"Updates the owner of the factory\"}},\"notice\":\"The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol\":\"IUniswapV3Factory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title The interface for the Uniswap V3 Factory\\n/// @notice The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees\\ninterface IUniswapV3Factory {\\n    /// @notice Emitted when the owner of the factory is changed\\n    /// @param oldOwner The owner before the owner was changed\\n    /// @param newOwner The owner after the owner was changed\\n    event OwnerChanged(address indexed oldOwner, address indexed newOwner);\\n\\n    /// @notice Emitted when a pool is created\\n    /// @param token0 The first token of the pool by address sort order\\n    /// @param token1 The second token of the pool by address sort order\\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n    /// @param tickSpacing The minimum number of ticks between initialized ticks\\n    /// @param pool The address of the created pool\\n    event PoolCreated(\\n        address indexed token0,\\n        address indexed token1,\\n        uint24 indexed fee,\\n        int24 tickSpacing,\\n        address pool\\n    );\\n\\n    /// @notice Emitted when a new fee amount is enabled for pool creation via the factory\\n    /// @param fee The enabled fee, denominated in hundredths of a bip\\n    /// @param tickSpacing The minimum number of ticks between initialized ticks for pools created with the given fee\\n    event FeeAmountEnabled(uint24 indexed fee, int24 indexed tickSpacing);\\n\\n    /// @notice Returns the current owner of the factory\\n    /// @dev Can be changed by the current owner via setOwner\\n    /// @return The address of the factory owner\\n    function owner() external view returns (address);\\n\\n    /// @notice Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled\\n    /// @dev A fee amount can never be removed, so this value should be hard coded or cached in the calling context\\n    /// @param fee The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\\n    /// @return The tick spacing\\n    function feeAmountTickSpacing(uint24 fee) external view returns (int24);\\n\\n    /// @notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\\n    /// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\\n    /// @param tokenA The contract address of either token0 or token1\\n    /// @param tokenB The contract address of the other token\\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n    /// @return pool The pool address\\n    function getPool(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) external view returns (address pool);\\n\\n    /// @notice Creates a pool for the given two tokens and fee\\n    /// @param tokenA One of the two tokens in the desired pool\\n    /// @param tokenB The other of the two tokens in the desired pool\\n    /// @param fee The desired fee for the pool\\n    /// @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved\\n    /// from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments\\n    /// are invalid.\\n    /// @return pool The address of the newly created pool\\n    function createPool(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) external returns (address pool);\\n\\n    /// @notice Updates the owner of the factory\\n    /// @dev Must be called by the current owner\\n    /// @param _owner The new owner of the factory\\n    function setOwner(address _owner) external;\\n\\n    /// @notice Enables a fee amount with the given tickSpacing\\n    /// @dev Fee amounts may never be removed once enabled\\n    /// @param fee The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)\\n    /// @param tickSpacing The spacing between ticks to be enforced for all pools created with the given fee amount\\n    function enableFeeAmount(uint24 fee, int24 tickSpacing) external;\\n}\\n\",\"keccak256\":\"0xcc3d0c93fc9ac0febbe09f941b465b57f750bcf3b48432da0b97dc289cfdc489\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"events":{"FeeAmountEnabled(uint24,int24)":{"notice":"Emitted when a new fee amount is enabled for pool creation via the factory"},"OwnerChanged(address,address)":{"notice":"Emitted when the owner of the factory is changed"},"PoolCreated(address,address,uint24,int24,address)":{"notice":"Emitted when a pool is created"}},"kind":"user","methods":{"createPool(address,address,uint24)":{"notice":"Creates a pool for the given two tokens and fee"},"enableFeeAmount(uint24,int24)":{"notice":"Enables a fee amount with the given tickSpacing"},"feeAmountTickSpacing(uint24)":{"notice":"Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled"},"getPool(address,address,uint24)":{"notice":"Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist"},"owner()":{"notice":"Returns the current owner of the factory"},"setOwner(address)":{"notice":"Updates the owner of the factory"}},"notice":"The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees","version":1}}},"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol":{"IUniswapV3Pool":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"int24","name":"tickLower","type":"int24"},{"indexed":true,"internalType":"int24","name":"tickUpper","type":"int24"},{"indexed":false,"internalType":"uint128","name":"amount","type":"uint128"},{"indexed":false,"internalType":"uint256","name":"amount0","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount1","type":"uint256"}],"name":"Burn","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":false,"internalType":"address","name":"recipient","type":"address"},{"indexed":true,"internalType":"int24","name":"tickLower","type":"int24"},{"indexed":true,"internalType":"int24","name":"tickUpper","type":"int24"},{"indexed":false,"internalType":"uint128","name":"amount0","type":"uint128"},{"indexed":false,"internalType":"uint128","name":"amount1","type":"uint128"}],"name":"Collect","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":true,"internalType":"address","name":"recipient","type":"address"},{"indexed":false,"internalType":"uint128","name":"amount0","type":"uint128"},{"indexed":false,"internalType":"uint128","name":"amount1","type":"uint128"}],"name":"CollectProtocol","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":true,"internalType":"address","name":"recipient","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount0","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount1","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"paid0","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"paid1","type":"uint256"}],"name":"Flash","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint16","name":"observationCardinalityNextOld","type":"uint16"},{"indexed":false,"internalType":"uint16","name":"observationCardinalityNextNew","type":"uint16"}],"name":"IncreaseObservationCardinalityNext","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint160","name":"sqrtPriceX96","type":"uint160"},{"indexed":false,"internalType":"int24","name":"tick","type":"int24"}],"name":"Initialize","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"sender","type":"address"},{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"int24","name":"tickLower","type":"int24"},{"indexed":true,"internalType":"int24","name":"tickUpper","type":"int24"},{"indexed":false,"internalType":"uint128","name":"amount","type":"uint128"},{"indexed":false,"internalType":"uint256","name":"amount0","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount1","type":"uint256"}],"name":"Mint","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"feeProtocol0Old","type":"uint8"},{"indexed":false,"internalType":"uint8","name":"feeProtocol1Old","type":"uint8"},{"indexed":false,"internalType":"uint8","name":"feeProtocol0New","type":"uint8"},{"indexed":false,"internalType":"uint8","name":"feeProtocol1New","type":"uint8"}],"name":"SetFeeProtocol","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":true,"internalType":"address","name":"recipient","type":"address"},{"indexed":false,"internalType":"int256","name":"amount0","type":"int256"},{"indexed":false,"internalType":"int256","name":"amount1","type":"int256"},{"indexed":false,"internalType":"uint160","name":"sqrtPriceX96","type":"uint160"},{"indexed":false,"internalType":"uint128","name":"liquidity","type":"uint128"},{"indexed":false,"internalType":"int24","name":"tick","type":"int24"}],"name":"Swap","type":"event"},{"inputs":[{"internalType":"int24","name":"tickLower","type":"int24"},{"internalType":"int24","name":"tickUpper","type":"int24"},{"internalType":"uint128","name":"amount","type":"uint128"}],"name":"burn","outputs":[{"internalType":"uint256","name":"amount0","type":"uint256"},{"internalType":"uint256","name":"amount1","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"int24","name":"tickLower","type":"int24"},{"internalType":"int24","name":"tickUpper","type":"int24"},{"internalType":"uint128","name":"amount0Requested","type":"uint128"},{"internalType":"uint128","name":"amount1Requested","type":"uint128"}],"name":"collect","outputs":[{"internalType":"uint128","name":"amount0","type":"uint128"},{"internalType":"uint128","name":"amount1","type":"uint128"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint128","name":"amount0Requested","type":"uint128"},{"internalType":"uint128","name":"amount1Requested","type":"uint128"}],"name":"collectProtocol","outputs":[{"internalType":"uint128","name":"amount0","type":"uint128"},{"internalType":"uint128","name":"amount1","type":"uint128"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"factory","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"fee","outputs":[{"internalType":"uint24","name":"","type":"uint24"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"feeGrowthGlobal0X128","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"feeGrowthGlobal1X128","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount0","type":"uint256"},{"internalType":"uint256","name":"amount1","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"flash","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint16","name":"observationCardinalityNext","type":"uint16"}],"name":"increaseObservationCardinalityNext","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint160","name":"sqrtPriceX96","type":"uint160"}],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"liquidity","outputs":[{"internalType":"uint128","name":"","type":"uint128"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"maxLiquidityPerTick","outputs":[{"internalType":"uint128","name":"","type":"uint128"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"int24","name":"tickLower","type":"int24"},{"internalType":"int24","name":"tickUpper","type":"int24"},{"internalType":"uint128","name":"amount","type":"uint128"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"mint","outputs":[{"internalType":"uint256","name":"amount0","type":"uint256"},{"internalType":"uint256","name":"amount1","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"index","type":"uint256"}],"name":"observations","outputs":[{"internalType":"uint32","name":"blockTimestamp","type":"uint32"},{"internalType":"int56","name":"tickCumulative","type":"int56"},{"internalType":"uint160","name":"secondsPerLiquidityCumulativeX128","type":"uint160"},{"internalType":"bool","name":"initialized","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint32[]","name":"secondsAgos","type":"uint32[]"}],"name":"observe","outputs":[{"internalType":"int56[]","name":"tickCumulatives","type":"int56[]"},{"internalType":"uint160[]","name":"secondsPerLiquidityCumulativeX128s","type":"uint160[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"key","type":"bytes32"}],"name":"positions","outputs":[{"internalType":"uint128","name":"_liquidity","type":"uint128"},{"internalType":"uint256","name":"feeGrowthInside0LastX128","type":"uint256"},{"internalType":"uint256","name":"feeGrowthInside1LastX128","type":"uint256"},{"internalType":"uint128","name":"tokensOwed0","type":"uint128"},{"internalType":"uint128","name":"tokensOwed1","type":"uint128"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"protocolFees","outputs":[{"internalType":"uint128","name":"token0","type":"uint128"},{"internalType":"uint128","name":"token1","type":"uint128"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint8","name":"feeProtocol0","type":"uint8"},{"internalType":"uint8","name":"feeProtocol1","type":"uint8"}],"name":"setFeeProtocol","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"slot0","outputs":[{"internalType":"uint160","name":"sqrtPriceX96","type":"uint160"},{"internalType":"int24","name":"tick","type":"int24"},{"internalType":"uint16","name":"observationIndex","type":"uint16"},{"internalType":"uint16","name":"observationCardinality","type":"uint16"},{"internalType":"uint16","name":"observationCardinalityNext","type":"uint16"},{"internalType":"uint8","name":"feeProtocol","type":"uint8"},{"internalType":"bool","name":"unlocked","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"int24","name":"tickLower","type":"int24"},{"internalType":"int24","name":"tickUpper","type":"int24"}],"name":"snapshotCumulativesInside","outputs":[{"internalType":"int56","name":"tickCumulativeInside","type":"int56"},{"internalType":"uint160","name":"secondsPerLiquidityInsideX128","type":"uint160"},{"internalType":"uint32","name":"secondsInside","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"bool","name":"zeroForOne","type":"bool"},{"internalType":"int256","name":"amountSpecified","type":"int256"},{"internalType":"uint160","name":"sqrtPriceLimitX96","type":"uint160"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"swap","outputs":[{"internalType":"int256","name":"amount0","type":"int256"},{"internalType":"int256","name":"amount1","type":"int256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"int16","name":"wordPosition","type":"int16"}],"name":"tickBitmap","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"tickSpacing","outputs":[{"internalType":"int24","name":"","type":"int24"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"int24","name":"tick","type":"int24"}],"name":"ticks","outputs":[{"internalType":"uint128","name":"liquidityGross","type":"uint128"},{"internalType":"int128","name":"liquidityNet","type":"int128"},{"internalType":"uint256","name":"feeGrowthOutside0X128","type":"uint256"},{"internalType":"uint256","name":"feeGrowthOutside1X128","type":"uint256"},{"internalType":"int56","name":"tickCumulativeOutside","type":"int56"},{"internalType":"uint160","name":"secondsPerLiquidityOutsideX128","type":"uint160"},{"internalType":"uint32","name":"secondsOutside","type":"uint32"},{"internalType":"bool","name":"initialized","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"token0","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"token1","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"The pool interface is broken up into many smaller pieces","kind":"dev","methods":{"burn(int24,int24,uint128)":{"details":"Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0Fees must be collected separately via a call to #collect","params":{"amount":"How much liquidity to burn","tickLower":"The lower tick of the position for which to burn liquidity","tickUpper":"The upper tick of the position for which to burn liquidity"},"returns":{"amount0":"The amount of token0 sent to the recipient","amount1":"The amount of token1 sent to the recipient"}},"collect(address,int24,int24,uint128,uint128)":{"details":"Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity. Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.","params":{"amount0Requested":"How much token0 should be withdrawn from the fees owed","amount1Requested":"How much token1 should be withdrawn from the fees owed","recipient":"The address which should receive the fees collected","tickLower":"The lower tick of the position for which to collect fees","tickUpper":"The upper tick of the position for which to collect fees"},"returns":{"amount0":"The amount of fees collected in token0","amount1":"The amount of fees collected in token1"}},"collectProtocol(address,uint128,uint128)":{"params":{"amount0Requested":"The maximum amount of token0 to send, can be 0 to collect fees in only token1","amount1Requested":"The maximum amount of token1 to send, can be 0 to collect fees in only token0","recipient":"The address to which collected protocol fees should be sent"},"returns":{"amount0":"The protocol fee collected in token0","amount1":"The protocol fee collected in token1"}},"factory()":{"returns":{"_0":"The contract address"}},"fee()":{"returns":{"_0":"The fee"}},"feeGrowthGlobal0X128()":{"details":"This value can overflow the uint256"},"feeGrowthGlobal1X128()":{"details":"This value can overflow the uint256"},"flash(address,uint256,uint256,bytes)":{"details":"The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallbackCan be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling with 0 amount{0,1} and sending the donation amount(s) from the callback","params":{"amount0":"The amount of token0 to send","amount1":"The amount of token1 to send","data":"Any data to be passed through to the callback","recipient":"The address which will receive the token0 and token1 amounts"}},"increaseObservationCardinalityNext(uint16)":{"details":"This method is no-op if the pool already has an observationCardinalityNext greater than or equal to the input observationCardinalityNext.","params":{"observationCardinalityNext":"The desired minimum number of observations for the pool to store"}},"initialize(uint160)":{"details":"Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value","params":{"sqrtPriceX96":"the initial sqrt price of the pool as a Q64.96"}},"liquidity()":{"details":"This value has no relationship to the total liquidity across all ticks"},"maxLiquidityPerTick()":{"details":"This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool","returns":{"_0":"The max amount of liquidity per tick"}},"mint(address,int24,int24,uint128,bytes)":{"details":"The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends on tickLower, tickUpper, the amount of liquidity, and the current price.","params":{"amount":"The amount of liquidity to mint","data":"Any data that should be passed through to the callback","recipient":"The address for which the liquidity will be created","tickLower":"The lower tick of the position in which to add liquidity","tickUpper":"The upper tick of the position in which to add liquidity"},"returns":{"amount0":"The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback","amount1":"The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback"}},"observations(uint256)":{"details":"You most likely want to use #observe() instead of this method to get an observation as of some amount of time ago, rather than at a specific index in the array.","params":{"index":"The element of the observations array to fetch"},"returns":{"blockTimestamp":"The timestamp of the observation, Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp, Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp, Returns initialized whether the observation has been initialized and the values are safe to use"}},"observe(uint32[])":{"details":"To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick, you must call it with secondsAgos = [3600, 0].The time weighted average tick represents the geometric time weighted average price of the pool, in log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.","params":{"secondsAgos":"From how long ago each cumulative tick and liquidity value should be returned"},"returns":{"secondsPerLiquidityCumulativeX128s":"Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block timestamp","tickCumulatives":"Cumulative tick values as of each `secondsAgos` from the current block timestamp"}},"positions(bytes32)":{"params":{"key":"The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper"},"returns":{"_liquidity":"The amount of liquidity in the position, Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke, Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke, Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke, Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke"}},"protocolFees()":{"details":"Protocol fees will never exceed uint128 max in either token"},"setFeeProtocol(uint8,uint8)":{"params":{"feeProtocol0":"new protocol fee for token0 of the pool","feeProtocol1":"new protocol fee for token1 of the pool"}},"slot0()":{"returns":{"sqrtPriceX96":"The current price of the pool as a sqrt(token1/token0) Q64.96 value tick The current tick of the pool, i.e. according to the last tick transition that was run. This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick boundary. observationIndex The index of the last oracle observation that was written, observationCardinality The current maximum number of observations stored in the pool, observationCardinalityNext The next maximum number of observations, to be updated when the observation. feeProtocol The protocol fee for both tokens of the pool. Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0 is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee. unlocked Whether the pool is currently locked to reentrancy"}},"snapshotCumulativesInside(int24,int24)":{"details":"Snapshots must only be compared to other snapshots, taken over a period for which a position existed. I.e., snapshots cannot be compared if a position is not held for the entire period between when the first snapshot is taken and the second snapshot is taken.","params":{"tickLower":"The lower tick of the range","tickUpper":"The upper tick of the range"},"returns":{"secondsInside":"The snapshot of seconds per liquidity for the range","secondsPerLiquidityInsideX128":"The snapshot of seconds per liquidity for the range","tickCumulativeInside":"The snapshot of the tick accumulator for the range"}},"swap(address,bool,int256,uint160,bytes)":{"details":"The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback","params":{"amountSpecified":"The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)","data":"Any data to be passed through to the callback","recipient":"The address to receive the output of the swap","sqrtPriceLimitX96":"The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this value after the swap. If one for zero, the price cannot be greater than this value after the swap","zeroForOne":"The direction of the swap, true for token0 to token1, false for token1 to token0"},"returns":{"amount0":"The delta of the balance of token0 of the pool, exact when negative, minimum when positive","amount1":"The delta of the balance of token1 of the pool, exact when negative, minimum when positive"}},"tickSpacing()":{"details":"Ticks can only be used at multiples of this value, minimum of 1 and always positive e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ... This value is an int24 to avoid casting even though it is always positive.","returns":{"_0":"The tick spacing"}},"ticks(int24)":{"params":{"tick":"The tick to look up"},"returns":{"liquidityGross":"the total amount of position liquidity that uses the pool either as tick lower or tick upper, liquidityNet how much liquidity changes when the pool price crosses the tick, feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0, feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1, tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick, secondsOutside the seconds spent on the other side of the tick from the current tick, initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false. Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0. In addition, these values are only relative and must be used only in comparison to previous snapshots for a specific position."}},"token0()":{"returns":{"_0":"The token contract address"}},"token1()":{"returns":{"_0":"The token contract address"}}},"title":"The interface for a Uniswap V3 Pool","version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"burn(int24,int24,uint128)":"a34123a7","collect(address,int24,int24,uint128,uint128)":"4f1eb3d8","collectProtocol(address,uint128,uint128)":"85b66729","factory()":"c45a0155","fee()":"ddca3f43","feeGrowthGlobal0X128()":"f3058399","feeGrowthGlobal1X128()":"46141319","flash(address,uint256,uint256,bytes)":"490e6cbc","increaseObservationCardinalityNext(uint16)":"32148f67","initialize(uint160)":"f637731d","liquidity()":"1a686502","maxLiquidityPerTick()":"70cf754a","mint(address,int24,int24,uint128,bytes)":"3c8a7d8d","observations(uint256)":"252c09d7","observe(uint32[])":"883bdbfd","positions(bytes32)":"514ea4bf","protocolFees()":"1ad8b03b","setFeeProtocol(uint8,uint8)":"8206a4d1","slot0()":"3850c7bd","snapshotCumulativesInside(int24,int24)":"a38807f2","swap(address,bool,int256,uint160,bytes)":"128acb08","tickBitmap(int16)":"5339c296","tickSpacing()":"d0c93a7c","ticks(int24)":"f30dba93","token0()":"0dfe1681","token1()":"d21220a7"}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"name\":\"Collect\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"name\":\"CollectProtocol\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paid0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paid1\",\"type\":\"uint256\"}],\"name\":\"Flash\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"observationCardinalityNextOld\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"observationCardinalityNextNew\",\"type\":\"uint16\"}],\"name\":\"IncreaseObservationCardinalityNext\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"Initialize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol0Old\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol1Old\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol0New\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol1New\",\"type\":\"uint8\"}],\"name\":\"SetFeeProtocol\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount0Requested\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1Requested\",\"type\":\"uint128\"}],\"name\":\"collect\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"amount0Requested\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1Requested\",\"type\":\"uint128\"}],\"name\":\"collectProtocol\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeGrowthGlobal0X128\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeGrowthGlobal1X128\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"flash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"observationCardinalityNext\",\"type\":\"uint16\"}],\"name\":\"increaseObservationCardinalityNext\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidity\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLiquidityPerTick\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"observations\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"blockTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"int56\",\"name\":\"tickCumulative\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityCumulativeX128\",\"type\":\"uint160\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"secondsAgos\",\"type\":\"uint32[]\"}],\"name\":\"observe\",\"outputs\":[{\"internalType\":\"int56[]\",\"name\":\"tickCumulatives\",\"type\":\"int56[]\"},{\"internalType\":\"uint160[]\",\"name\":\"secondsPerLiquidityCumulativeX128s\",\"type\":\"uint160[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"positions\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"_liquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthInside0LastX128\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthInside1LastX128\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"tokensOwed0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"tokensOwed1\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFees\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"token0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"token1\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"feeProtocol0\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"feeProtocol1\",\"type\":\"uint8\"}],\"name\":\"setFeeProtocol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slot0\",\"outputs\":[{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"},{\"internalType\":\"uint16\",\"name\":\"observationIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"observationCardinality\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"observationCardinalityNext\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"feeProtocol\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"unlocked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"}],\"name\":\"snapshotCumulativesInside\",\"outputs\":[{\"internalType\":\"int56\",\"name\":\"tickCumulativeInside\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityInsideX128\",\"type\":\"uint160\"},{\"internalType\":\"uint32\",\"name\":\"secondsInside\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"zeroForOne\",\"type\":\"bool\"},{\"internalType\":\"int256\",\"name\":\"amountSpecified\",\"type\":\"int256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int16\",\"name\":\"wordPosition\",\"type\":\"int16\"}],\"name\":\"tickBitmap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tickSpacing\",\"outputs\":[{\"internalType\":\"int24\",\"name\":\"\",\"type\":\"int24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"ticks\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"liquidityGross\",\"type\":\"uint128\"},{\"internalType\":\"int128\",\"name\":\"liquidityNet\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthOutside0X128\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthOutside1X128\",\"type\":\"uint256\"},{\"internalType\":\"int56\",\"name\":\"tickCumulativeOutside\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityOutsideX128\",\"type\":\"uint160\"},{\"internalType\":\"uint32\",\"name\":\"secondsOutside\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"The pool interface is broken up into many smaller pieces\",\"kind\":\"dev\",\"methods\":{\"burn(int24,int24,uint128)\":{\"details\":\"Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0Fees must be collected separately via a call to #collect\",\"params\":{\"amount\":\"How much liquidity to burn\",\"tickLower\":\"The lower tick of the position for which to burn liquidity\",\"tickUpper\":\"The upper tick of the position for which to burn liquidity\"},\"returns\":{\"amount0\":\"The amount of token0 sent to the recipient\",\"amount1\":\"The amount of token1 sent to the recipient\"}},\"collect(address,int24,int24,uint128,uint128)\":{\"details\":\"Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity. Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\",\"params\":{\"amount0Requested\":\"How much token0 should be withdrawn from the fees owed\",\"amount1Requested\":\"How much token1 should be withdrawn from the fees owed\",\"recipient\":\"The address which should receive the fees collected\",\"tickLower\":\"The lower tick of the position for which to collect fees\",\"tickUpper\":\"The upper tick of the position for which to collect fees\"},\"returns\":{\"amount0\":\"The amount of fees collected in token0\",\"amount1\":\"The amount of fees collected in token1\"}},\"collectProtocol(address,uint128,uint128)\":{\"params\":{\"amount0Requested\":\"The maximum amount of token0 to send, can be 0 to collect fees in only token1\",\"amount1Requested\":\"The maximum amount of token1 to send, can be 0 to collect fees in only token0\",\"recipient\":\"The address to which collected protocol fees should be sent\"},\"returns\":{\"amount0\":\"The protocol fee collected in token0\",\"amount1\":\"The protocol fee collected in token1\"}},\"factory()\":{\"returns\":{\"_0\":\"The contract address\"}},\"fee()\":{\"returns\":{\"_0\":\"The fee\"}},\"feeGrowthGlobal0X128()\":{\"details\":\"This value can overflow the uint256\"},\"feeGrowthGlobal1X128()\":{\"details\":\"This value can overflow the uint256\"},\"flash(address,uint256,uint256,bytes)\":{\"details\":\"The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallbackCan be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling with 0 amount{0,1} and sending the donation amount(s) from the callback\",\"params\":{\"amount0\":\"The amount of token0 to send\",\"amount1\":\"The amount of token1 to send\",\"data\":\"Any data to be passed through to the callback\",\"recipient\":\"The address which will receive the token0 and token1 amounts\"}},\"increaseObservationCardinalityNext(uint16)\":{\"details\":\"This method is no-op if the pool already has an observationCardinalityNext greater than or equal to the input observationCardinalityNext.\",\"params\":{\"observationCardinalityNext\":\"The desired minimum number of observations for the pool to store\"}},\"initialize(uint160)\":{\"details\":\"Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\",\"params\":{\"sqrtPriceX96\":\"the initial sqrt price of the pool as a Q64.96\"}},\"liquidity()\":{\"details\":\"This value has no relationship to the total liquidity across all ticks\"},\"maxLiquidityPerTick()\":{\"details\":\"This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\",\"returns\":{\"_0\":\"The max amount of liquidity per tick\"}},\"mint(address,int24,int24,uint128,bytes)\":{\"details\":\"The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends on tickLower, tickUpper, the amount of liquidity, and the current price.\",\"params\":{\"amount\":\"The amount of liquidity to mint\",\"data\":\"Any data that should be passed through to the callback\",\"recipient\":\"The address for which the liquidity will be created\",\"tickLower\":\"The lower tick of the position in which to add liquidity\",\"tickUpper\":\"The upper tick of the position in which to add liquidity\"},\"returns\":{\"amount0\":\"The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\",\"amount1\":\"The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\"}},\"observations(uint256)\":{\"details\":\"You most likely want to use #observe() instead of this method to get an observation as of some amount of time ago, rather than at a specific index in the array.\",\"params\":{\"index\":\"The element of the observations array to fetch\"},\"returns\":{\"blockTimestamp\":\"The timestamp of the observation, Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp, Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp, Returns initialized whether the observation has been initialized and the values are safe to use\"}},\"observe(uint32[])\":{\"details\":\"To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick, you must call it with secondsAgos = [3600, 0].The time weighted average tick represents the geometric time weighted average price of the pool, in log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\",\"params\":{\"secondsAgos\":\"From how long ago each cumulative tick and liquidity value should be returned\"},\"returns\":{\"secondsPerLiquidityCumulativeX128s\":\"Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block timestamp\",\"tickCumulatives\":\"Cumulative tick values as of each `secondsAgos` from the current block timestamp\"}},\"positions(bytes32)\":{\"params\":{\"key\":\"The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\"},\"returns\":{\"_liquidity\":\"The amount of liquidity in the position, Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke, Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke, Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke, Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\"}},\"protocolFees()\":{\"details\":\"Protocol fees will never exceed uint128 max in either token\"},\"setFeeProtocol(uint8,uint8)\":{\"params\":{\"feeProtocol0\":\"new protocol fee for token0 of the pool\",\"feeProtocol1\":\"new protocol fee for token1 of the pool\"}},\"slot0()\":{\"returns\":{\"sqrtPriceX96\":\"The current price of the pool as a sqrt(token1/token0) Q64.96 value tick The current tick of the pool, i.e. according to the last tick transition that was run. This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick boundary. observationIndex The index of the last oracle observation that was written, observationCardinality The current maximum number of observations stored in the pool, observationCardinalityNext The next maximum number of observations, to be updated when the observation. feeProtocol The protocol fee for both tokens of the pool. Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0 is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee. unlocked Whether the pool is currently locked to reentrancy\"}},\"snapshotCumulativesInside(int24,int24)\":{\"details\":\"Snapshots must only be compared to other snapshots, taken over a period for which a position existed. I.e., snapshots cannot be compared if a position is not held for the entire period between when the first snapshot is taken and the second snapshot is taken.\",\"params\":{\"tickLower\":\"The lower tick of the range\",\"tickUpper\":\"The upper tick of the range\"},\"returns\":{\"secondsInside\":\"The snapshot of seconds per liquidity for the range\",\"secondsPerLiquidityInsideX128\":\"The snapshot of seconds per liquidity for the range\",\"tickCumulativeInside\":\"The snapshot of the tick accumulator for the range\"}},\"swap(address,bool,int256,uint160,bytes)\":{\"details\":\"The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\",\"params\":{\"amountSpecified\":\"The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\",\"data\":\"Any data to be passed through to the callback\",\"recipient\":\"The address to receive the output of the swap\",\"sqrtPriceLimitX96\":\"The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this value after the swap. If one for zero, the price cannot be greater than this value after the swap\",\"zeroForOne\":\"The direction of the swap, true for token0 to token1, false for token1 to token0\"},\"returns\":{\"amount0\":\"The delta of the balance of token0 of the pool, exact when negative, minimum when positive\",\"amount1\":\"The delta of the balance of token1 of the pool, exact when negative, minimum when positive\"}},\"tickSpacing()\":{\"details\":\"Ticks can only be used at multiples of this value, minimum of 1 and always positive e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ... This value is an int24 to avoid casting even though it is always positive.\",\"returns\":{\"_0\":\"The tick spacing\"}},\"ticks(int24)\":{\"params\":{\"tick\":\"The tick to look up\"},\"returns\":{\"liquidityGross\":\"the total amount of position liquidity that uses the pool either as tick lower or tick upper, liquidityNet how much liquidity changes when the pool price crosses the tick, feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0, feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1, tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick, secondsOutside the seconds spent on the other side of the tick from the current tick, initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false. Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0. In addition, these values are only relative and must be used only in comparison to previous snapshots for a specific position.\"}},\"token0()\":{\"returns\":{\"_0\":\"The token contract address\"}},\"token1()\":{\"returns\":{\"_0\":\"The token contract address\"}}},\"title\":\"The interface for a Uniswap V3 Pool\",\"version\":1},\"userdoc\":{\"events\":{\"Burn(address,int24,int24,uint128,uint256,uint256)\":{\"notice\":\"Emitted when a position's liquidity is removed\"},\"Collect(address,address,int24,int24,uint128,uint128)\":{\"notice\":\"Emitted when fees are collected by the owner of a position\"},\"CollectProtocol(address,address,uint128,uint128)\":{\"notice\":\"Emitted when the collected protocol fees are withdrawn by the factory owner\"},\"Flash(address,address,uint256,uint256,uint256,uint256)\":{\"notice\":\"Emitted by the pool for any flashes of token0/token1\"},\"IncreaseObservationCardinalityNext(uint16,uint16)\":{\"notice\":\"Emitted by the pool for increases to the number of observations that can be stored\"},\"Initialize(uint160,int24)\":{\"notice\":\"Emitted exactly once by a pool when #initialize is first called on the pool\"},\"Mint(address,address,int24,int24,uint128,uint256,uint256)\":{\"notice\":\"Emitted when liquidity is minted for a given position\"},\"SetFeeProtocol(uint8,uint8,uint8,uint8)\":{\"notice\":\"Emitted when the protocol fee is changed by the pool\"},\"Swap(address,address,int256,int256,uint160,uint128,int24)\":{\"notice\":\"Emitted by the pool for any swaps between token0 and token1\"}},\"kind\":\"user\",\"methods\":{\"burn(int24,int24,uint128)\":{\"notice\":\"Burn liquidity from the sender and account tokens owed for the liquidity to the position\"},\"collect(address,int24,int24,uint128,uint128)\":{\"notice\":\"Collects tokens owed to a position\"},\"collectProtocol(address,uint128,uint128)\":{\"notice\":\"Collect the protocol fee accrued to the pool\"},\"factory()\":{\"notice\":\"The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\"},\"fee()\":{\"notice\":\"The pool's fee in hundredths of a bip, i.e. 1e-6\"},\"feeGrowthGlobal0X128()\":{\"notice\":\"The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\"},\"feeGrowthGlobal1X128()\":{\"notice\":\"The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\"},\"flash(address,uint256,uint256,bytes)\":{\"notice\":\"Receive token0 and/or token1 and pay it back, plus a fee, in the callback\"},\"increaseObservationCardinalityNext(uint16)\":{\"notice\":\"Increase the maximum number of price and liquidity observations that this pool will store\"},\"initialize(uint160)\":{\"notice\":\"Sets the initial price for the pool\"},\"liquidity()\":{\"notice\":\"The currently in range liquidity available to the pool\"},\"maxLiquidityPerTick()\":{\"notice\":\"The maximum amount of position liquidity that can use any tick in the range\"},\"mint(address,int24,int24,uint128,bytes)\":{\"notice\":\"Adds liquidity for the given recipient/tickLower/tickUpper position\"},\"observations(uint256)\":{\"notice\":\"Returns data about a specific observation index\"},\"observe(uint32[])\":{\"notice\":\"Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\"},\"positions(bytes32)\":{\"notice\":\"Returns the information about a position by the position's key\"},\"protocolFees()\":{\"notice\":\"The amounts of token0 and token1 that are owed to the protocol\"},\"setFeeProtocol(uint8,uint8)\":{\"notice\":\"Set the denominator of the protocol's % share of the fees\"},\"slot0()\":{\"notice\":\"The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas when accessed externally.\"},\"snapshotCumulativesInside(int24,int24)\":{\"notice\":\"Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\"},\"swap(address,bool,int256,uint160,bytes)\":{\"notice\":\"Swap token0 for token1, or token1 for token0\"},\"tickBitmap(int16)\":{\"notice\":\"Returns 256 packed tick initialized boolean values. See TickBitmap for more information\"},\"tickSpacing()\":{\"notice\":\"The pool tick spacing\"},\"ticks(int24)\":{\"notice\":\"Look up information about a specific tick in the pool\"},\"token0()\":{\"notice\":\"The first of the two tokens of the pool, sorted by address\"},\"token1()\":{\"notice\":\"The second of the two tokens of the pool, sorted by address\"}},\"notice\":\"A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform to the ERC20 specification\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\":\"IUniswapV3Pool\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\nimport './pool/IUniswapV3PoolImmutables.sol';\\nimport './pool/IUniswapV3PoolState.sol';\\nimport './pool/IUniswapV3PoolDerivedState.sol';\\nimport './pool/IUniswapV3PoolActions.sol';\\nimport './pool/IUniswapV3PoolOwnerActions.sol';\\nimport './pool/IUniswapV3PoolEvents.sol';\\n\\n/// @title The interface for a Uniswap V3 Pool\\n/// @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\\n/// to the ERC20 specification\\n/// @dev The pool interface is broken up into many smaller pieces\\ninterface IUniswapV3Pool is\\n    IUniswapV3PoolImmutables,\\n    IUniswapV3PoolState,\\n    IUniswapV3PoolDerivedState,\\n    IUniswapV3PoolActions,\\n    IUniswapV3PoolOwnerActions,\\n    IUniswapV3PoolEvents\\n{\\n\\n}\\n\",\"keccak256\":\"0xfe6113d518466cd6652c85b111e01f33eb62157f49ae5ed7d5a3947a2044adb1\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissionless pool actions\\n/// @notice Contains pool methods that can be called by anyone\\ninterface IUniswapV3PoolActions {\\n    /// @notice Sets the initial price for the pool\\n    /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\\n    /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96\\n    function initialize(uint160 sqrtPriceX96) external;\\n\\n    /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\\n    /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\\n    /// on tickLower, tickUpper, the amount of liquidity, and the current price.\\n    /// @param recipient The address for which the liquidity will be created\\n    /// @param tickLower The lower tick of the position in which to add liquidity\\n    /// @param tickUpper The upper tick of the position in which to add liquidity\\n    /// @param amount The amount of liquidity to mint\\n    /// @param data Any data that should be passed through to the callback\\n    /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    function mint(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount,\\n        bytes calldata data\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Collects tokens owed to a position\\n    /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\\n    /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\\n    /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\\n    /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\\n    /// @param recipient The address which should receive the fees collected\\n    /// @param tickLower The lower tick of the position for which to collect fees\\n    /// @param tickUpper The upper tick of the position for which to collect fees\\n    /// @param amount0Requested How much token0 should be withdrawn from the fees owed\\n    /// @param amount1Requested How much token1 should be withdrawn from the fees owed\\n    /// @return amount0 The amount of fees collected in token0\\n    /// @return amount1 The amount of fees collected in token1\\n    function collect(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n\\n    /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\\n    /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\\n    /// @dev Fees must be collected separately via a call to #collect\\n    /// @param tickLower The lower tick of the position for which to burn liquidity\\n    /// @param tickUpper The upper tick of the position for which to burn liquidity\\n    /// @param amount How much liquidity to burn\\n    /// @return amount0 The amount of token0 sent to the recipient\\n    /// @return amount1 The amount of token1 sent to the recipient\\n    function burn(\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Swap token0 for token1, or token1 for token0\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\\n    /// @param recipient The address to receive the output of the swap\\n    /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\\n    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\\n    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\\n    /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\\n    /// @param data Any data to be passed through to the callback\\n    /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\\n    /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\\n    function swap(\\n        address recipient,\\n        bool zeroForOne,\\n        int256 amountSpecified,\\n        uint160 sqrtPriceLimitX96,\\n        bytes calldata data\\n    ) external returns (int256 amount0, int256 amount1);\\n\\n    /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\\n    /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\\n    /// with 0 amount{0,1} and sending the donation amount(s) from the callback\\n    /// @param recipient The address which will receive the token0 and token1 amounts\\n    /// @param amount0 The amount of token0 to send\\n    /// @param amount1 The amount of token1 to send\\n    /// @param data Any data to be passed through to the callback\\n    function flash(\\n        address recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bytes calldata data\\n    ) external;\\n\\n    /// @notice Increase the maximum number of price and liquidity observations that this pool will store\\n    /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\\n    /// the input observationCardinalityNext.\\n    /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\\n}\\n\",\"keccak256\":\"0x9453dd0e7442188667d01d9b65de3f1e14e9511ff3e303179a15f6fc267f7634\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that is not stored\\n/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the\\n/// blockchain. The functions here may have variable gas costs.\\ninterface IUniswapV3PoolDerivedState {\\n    /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\\n    /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\\n    /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\\n    /// you must call it with secondsAgos = [3600, 0].\\n    /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\\n    /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\\n    /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\\n    /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\\n    /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\\n    /// timestamp\\n    function observe(uint32[] calldata secondsAgos)\\n        external\\n        view\\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\\n\\n    /// @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\\n    /// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\\n    /// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\\n    /// snapshot is taken and the second snapshot is taken.\\n    /// @param tickLower The lower tick of the range\\n    /// @param tickUpper The upper tick of the range\\n    /// @return tickCumulativeInside The snapshot of the tick accumulator for the range\\n    /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\\n    /// @return secondsInside The snapshot of seconds per liquidity for the range\\n    function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\\n        external\\n        view\\n        returns (\\n            int56 tickCumulativeInside,\\n            uint160 secondsPerLiquidityInsideX128,\\n            uint32 secondsInside\\n        );\\n}\\n\",\"keccak256\":\"0xe603ac5b17ecdee73ba2b27efdf386c257a19c14206e87eee77e2017b742d9e5\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Events emitted by a pool\\n/// @notice Contains all events emitted by the pool\\ninterface IUniswapV3PoolEvents {\\n    /// @notice Emitted exactly once by a pool when #initialize is first called on the pool\\n    /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\\n    /// @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\\n    /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\\n    event Initialize(uint160 sqrtPriceX96, int24 tick);\\n\\n    /// @notice Emitted when liquidity is minted for a given position\\n    /// @param sender The address that minted the liquidity\\n    /// @param owner The owner of the position and recipient of any minted liquidity\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount The amount of liquidity minted to the position range\\n    /// @param amount0 How much token0 was required for the minted liquidity\\n    /// @param amount1 How much token1 was required for the minted liquidity\\n    event Mint(\\n        address sender,\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted when fees are collected by the owner of a position\\n    /// @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\\n    /// @param owner The owner of the position for which fees are collected\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount0 The amount of token0 fees collected\\n    /// @param amount1 The amount of token1 fees collected\\n    event Collect(\\n        address indexed owner,\\n        address recipient,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount0,\\n        uint128 amount1\\n    );\\n\\n    /// @notice Emitted when a position's liquidity is removed\\n    /// @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\\n    /// @param owner The owner of the position for which liquidity is removed\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount The amount of liquidity to remove\\n    /// @param amount0 The amount of token0 withdrawn\\n    /// @param amount1 The amount of token1 withdrawn\\n    event Burn(\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted by the pool for any swaps between token0 and token1\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param recipient The address that received the output of the swap\\n    /// @param amount0 The delta of the token0 balance of the pool\\n    /// @param amount1 The delta of the token1 balance of the pool\\n    /// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\\n    /// @param liquidity The liquidity of the pool after the swap\\n    /// @param tick The log base 1.0001 of price of the pool after the swap\\n    event Swap(\\n        address indexed sender,\\n        address indexed recipient,\\n        int256 amount0,\\n        int256 amount1,\\n        uint160 sqrtPriceX96,\\n        uint128 liquidity,\\n        int24 tick\\n    );\\n\\n    /// @notice Emitted by the pool for any flashes of token0/token1\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param recipient The address that received the tokens from flash\\n    /// @param amount0 The amount of token0 that was flashed\\n    /// @param amount1 The amount of token1 that was flashed\\n    /// @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\\n    /// @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\\n    event Flash(\\n        address indexed sender,\\n        address indexed recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        uint256 paid0,\\n        uint256 paid1\\n    );\\n\\n    /// @notice Emitted by the pool for increases to the number of observations that can be stored\\n    /// @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\\n    /// just before a mint/swap/burn.\\n    /// @param observationCardinalityNextOld The previous value of the next observation cardinality\\n    /// @param observationCardinalityNextNew The updated value of the next observation cardinality\\n    event IncreaseObservationCardinalityNext(\\n        uint16 observationCardinalityNextOld,\\n        uint16 observationCardinalityNextNew\\n    );\\n\\n    /// @notice Emitted when the protocol fee is changed by the pool\\n    /// @param feeProtocol0Old The previous value of the token0 protocol fee\\n    /// @param feeProtocol1Old The previous value of the token1 protocol fee\\n    /// @param feeProtocol0New The updated value of the token0 protocol fee\\n    /// @param feeProtocol1New The updated value of the token1 protocol fee\\n    event SetFeeProtocol(uint8 feeProtocol0Old, uint8 feeProtocol1Old, uint8 feeProtocol0New, uint8 feeProtocol1New);\\n\\n    /// @notice Emitted when the collected protocol fees are withdrawn by the factory owner\\n    /// @param sender The address that collects the protocol fees\\n    /// @param recipient The address that receives the collected protocol fees\\n    /// @param amount0 The amount of token0 protocol fees that is withdrawn\\n    /// @param amount0 The amount of token1 protocol fees that is withdrawn\\n    event CollectProtocol(address indexed sender, address indexed recipient, uint128 amount0, uint128 amount1);\\n}\\n\",\"keccak256\":\"0x8071514d0fe5d17d6fbd31c191cdfb703031c24e0ece3621d88ab10e871375cd\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that never changes\\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\\ninterface IUniswapV3PoolImmutables {\\n    /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\\n    /// @return The contract address\\n    function factory() external view returns (address);\\n\\n    /// @notice The first of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token0() external view returns (address);\\n\\n    /// @notice The second of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token1() external view returns (address);\\n\\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\\n    /// @return The fee\\n    function fee() external view returns (uint24);\\n\\n    /// @notice The pool tick spacing\\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\\n    /// This value is an int24 to avoid casting even though it is always positive.\\n    /// @return The tick spacing\\n    function tickSpacing() external view returns (int24);\\n\\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\\n    /// @return The max amount of liquidity per tick\\n    function maxLiquidityPerTick() external view returns (uint128);\\n}\\n\",\"keccak256\":\"0xf6e5d2cd1139c4c276bdbc8e1d2b256e456c866a91f1b868da265c6d2685c3f7\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissioned pool actions\\n/// @notice Contains pool methods that may only be called by the factory owner\\ninterface IUniswapV3PoolOwnerActions {\\n    /// @notice Set the denominator of the protocol's % share of the fees\\n    /// @param feeProtocol0 new protocol fee for token0 of the pool\\n    /// @param feeProtocol1 new protocol fee for token1 of the pool\\n    function setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external;\\n\\n    /// @notice Collect the protocol fee accrued to the pool\\n    /// @param recipient The address to which collected protocol fees should be sent\\n    /// @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\\n    /// @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\\n    /// @return amount0 The protocol fee collected in token0\\n    /// @return amount1 The protocol fee collected in token1\\n    function collectProtocol(\\n        address recipient,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n}\\n\",\"keccak256\":\"0x759b78a2918af9e99e246dc3af084f654e48ef32bb4e4cb8a966aa3dcaece235\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that can change\\n/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\\n/// per transaction\\ninterface IUniswapV3PoolState {\\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\\n    /// when accessed externally.\\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\\n    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\\n    /// boundary.\\n    /// observationIndex The index of the last oracle observation that was written,\\n    /// observationCardinality The current maximum number of observations stored in the pool,\\n    /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\\n    /// feeProtocol The protocol fee for both tokens of the pool.\\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\\n    /// unlocked Whether the pool is currently locked to reentrancy\\n    function slot0()\\n        external\\n        view\\n        returns (\\n            uint160 sqrtPriceX96,\\n            int24 tick,\\n            uint16 observationIndex,\\n            uint16 observationCardinality,\\n            uint16 observationCardinalityNext,\\n            uint8 feeProtocol,\\n            bool unlocked\\n        );\\n\\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal0X128() external view returns (uint256);\\n\\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal1X128() external view returns (uint256);\\n\\n    /// @notice The amounts of token0 and token1 that are owed to the protocol\\n    /// @dev Protocol fees will never exceed uint128 max in either token\\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\\n\\n    /// @notice The currently in range liquidity available to the pool\\n    /// @dev This value has no relationship to the total liquidity across all ticks\\n    function liquidity() external view returns (uint128);\\n\\n    /// @notice Look up information about a specific tick in the pool\\n    /// @param tick The tick to look up\\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\\n    /// tick upper,\\n    /// liquidityNet how much liquidity changes when the pool price crosses the tick,\\n    /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\\n    /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\\n    /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\\n    /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\\n    /// secondsOutside the seconds spent on the other side of the tick from the current tick,\\n    /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\\n    /// a specific position.\\n    function ticks(int24 tick)\\n        external\\n        view\\n        returns (\\n            uint128 liquidityGross,\\n            int128 liquidityNet,\\n            uint256 feeGrowthOutside0X128,\\n            uint256 feeGrowthOutside1X128,\\n            int56 tickCumulativeOutside,\\n            uint160 secondsPerLiquidityOutsideX128,\\n            uint32 secondsOutside,\\n            bool initialized\\n        );\\n\\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\\n\\n    /// @notice Returns the information about a position by the position's key\\n    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\\n    /// @return _liquidity The amount of liquidity in the position,\\n    /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\\n    /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\\n    /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\\n    /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\\n    function positions(bytes32 key)\\n        external\\n        view\\n        returns (\\n            uint128 _liquidity,\\n            uint256 feeGrowthInside0LastX128,\\n            uint256 feeGrowthInside1LastX128,\\n            uint128 tokensOwed0,\\n            uint128 tokensOwed1\\n        );\\n\\n    /// @notice Returns data about a specific observation index\\n    /// @param index The element of the observations array to fetch\\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\\n    /// ago, rather than at a specific index in the array.\\n    /// @return blockTimestamp The timestamp of the observation,\\n    /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\\n    /// Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\\n    /// Returns initialized whether the observation has been initialized and the values are safe to use\\n    function observations(uint256 index)\\n        external\\n        view\\n        returns (\\n            uint32 blockTimestamp,\\n            int56 tickCumulative,\\n            uint160 secondsPerLiquidityCumulativeX128,\\n            bool initialized\\n        );\\n}\\n\",\"keccak256\":\"0x852dc1f5df7dcf7f11e7bb3eed79f0cea72ad4b25f6a9d2c35aafb48925fd49f\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"events":{"Burn(address,int24,int24,uint128,uint256,uint256)":{"notice":"Emitted when a position's liquidity is removed"},"Collect(address,address,int24,int24,uint128,uint128)":{"notice":"Emitted when fees are collected by the owner of a position"},"CollectProtocol(address,address,uint128,uint128)":{"notice":"Emitted when the collected protocol fees are withdrawn by the factory owner"},"Flash(address,address,uint256,uint256,uint256,uint256)":{"notice":"Emitted by the pool for any flashes of token0/token1"},"IncreaseObservationCardinalityNext(uint16,uint16)":{"notice":"Emitted by the pool for increases to the number of observations that can be stored"},"Initialize(uint160,int24)":{"notice":"Emitted exactly once by a pool when #initialize is first called on the pool"},"Mint(address,address,int24,int24,uint128,uint256,uint256)":{"notice":"Emitted when liquidity is minted for a given position"},"SetFeeProtocol(uint8,uint8,uint8,uint8)":{"notice":"Emitted when the protocol fee is changed by the pool"},"Swap(address,address,int256,int256,uint160,uint128,int24)":{"notice":"Emitted by the pool for any swaps between token0 and token1"}},"kind":"user","methods":{"burn(int24,int24,uint128)":{"notice":"Burn liquidity from the sender and account tokens owed for the liquidity to the position"},"collect(address,int24,int24,uint128,uint128)":{"notice":"Collects tokens owed to a position"},"collectProtocol(address,uint128,uint128)":{"notice":"Collect the protocol fee accrued to the pool"},"factory()":{"notice":"The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface"},"fee()":{"notice":"The pool's fee in hundredths of a bip, i.e. 1e-6"},"feeGrowthGlobal0X128()":{"notice":"The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool"},"feeGrowthGlobal1X128()":{"notice":"The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool"},"flash(address,uint256,uint256,bytes)":{"notice":"Receive token0 and/or token1 and pay it back, plus a fee, in the callback"},"increaseObservationCardinalityNext(uint16)":{"notice":"Increase the maximum number of price and liquidity observations that this pool will store"},"initialize(uint160)":{"notice":"Sets the initial price for the pool"},"liquidity()":{"notice":"The currently in range liquidity available to the pool"},"maxLiquidityPerTick()":{"notice":"The maximum amount of position liquidity that can use any tick in the range"},"mint(address,int24,int24,uint128,bytes)":{"notice":"Adds liquidity for the given recipient/tickLower/tickUpper position"},"observations(uint256)":{"notice":"Returns data about a specific observation index"},"observe(uint32[])":{"notice":"Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp"},"positions(bytes32)":{"notice":"Returns the information about a position by the position's key"},"protocolFees()":{"notice":"The amounts of token0 and token1 that are owed to the protocol"},"setFeeProtocol(uint8,uint8)":{"notice":"Set the denominator of the protocol's % share of the fees"},"slot0()":{"notice":"The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas when accessed externally."},"snapshotCumulativesInside(int24,int24)":{"notice":"Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range"},"swap(address,bool,int256,uint160,bytes)":{"notice":"Swap token0 for token1, or token1 for token0"},"tickBitmap(int16)":{"notice":"Returns 256 packed tick initialized boolean values. See TickBitmap for more information"},"tickSpacing()":{"notice":"The pool tick spacing"},"ticks(int24)":{"notice":"Look up information about a specific tick in the pool"},"token0()":{"notice":"The first of the two tokens of the pool, sorted by address"},"token1()":{"notice":"The second of the two tokens of the pool, sorted by address"}},"notice":"A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform to the ERC20 specification","version":1}}},"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3MintCallback.sol":{"IUniswapV3MintCallback":{"abi":[{"inputs":[{"internalType":"uint256","name":"amount0Owed","type":"uint256"},{"internalType":"uint256","name":"amount1Owed","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"uniswapV3MintCallback","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"uniswapV3MintCallback(uint256,uint256,bytes)":{"details":"In the implementation you must pay the pool tokens owed for the minted liquidity. The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.","params":{"amount0Owed":"The amount of token0 due to the pool for the minted liquidity","amount1Owed":"The amount of token1 due to the pool for the minted liquidity","data":"Any data passed through by the caller via the IUniswapV3PoolActions#mint call"}}},"title":"Callback for IUniswapV3PoolActions#mint","version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"uniswapV3MintCallback(uint256,uint256,bytes)":"d3487997"}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0Owed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Owed\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"uniswapV3MintCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"uniswapV3MintCallback(uint256,uint256,bytes)\":{\"details\":\"In the implementation you must pay the pool tokens owed for the minted liquidity. The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\",\"params\":{\"amount0Owed\":\"The amount of token0 due to the pool for the minted liquidity\",\"amount1Owed\":\"The amount of token1 due to the pool for the minted liquidity\",\"data\":\"Any data passed through by the caller via the IUniswapV3PoolActions#mint call\"}}},\"title\":\"Callback for IUniswapV3PoolActions#mint\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"uniswapV3MintCallback(uint256,uint256,bytes)\":{\"notice\":\"Called to `msg.sender` after minting liquidity to a position from IUniswapV3Pool#mint.\"}},\"notice\":\"Any contract that calls IUniswapV3PoolActions#mint must implement this interface\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3MintCallback.sol\":\"IUniswapV3MintCallback\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3MintCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#mint\\n/// @notice Any contract that calls IUniswapV3PoolActions#mint must implement this interface\\ninterface IUniswapV3MintCallback {\\n    /// @notice Called to `msg.sender` after minting liquidity to a position from IUniswapV3Pool#mint.\\n    /// @dev In the implementation you must pay the pool tokens owed for the minted liquidity.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// @param amount0Owed The amount of token0 due to the pool for the minted liquidity\\n    /// @param amount1Owed The amount of token1 due to the pool for the minted liquidity\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#mint call\\n    function uniswapV3MintCallback(\\n        uint256 amount0Owed,\\n        uint256 amount1Owed,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x27a9725b8f831a92d16380860c3d348a0b926a7f01b34a54ea6eea78cbdbcd6a\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"uniswapV3MintCallback(uint256,uint256,bytes)":{"notice":"Called to `msg.sender` after minting liquidity to a position from IUniswapV3Pool#mint."}},"notice":"Any contract that calls IUniswapV3PoolActions#mint must implement this interface","version":1}}},"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol":{"IUniswapV3SwapCallback":{"abi":[{"inputs":[{"internalType":"int256","name":"amount0Delta","type":"int256"},{"internalType":"int256","name":"amount1Delta","type":"int256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"uniswapV3SwapCallback","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"uniswapV3SwapCallback(int256,int256,bytes)":{"details":"In the implementation you must pay the pool tokens owed for the swap. The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory. amount0Delta and amount1Delta can both be 0 if no tokens were swapped.","params":{"amount0Delta":"The amount of token0 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token0 to the pool.","amount1Delta":"The amount of token1 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token1 to the pool.","data":"Any data passed through by the caller via the IUniswapV3PoolActions#swap call"}}},"title":"Callback for IUniswapV3PoolActions#swap","version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"uniswapV3SwapCallback(int256,int256,bytes)":"fa461e33"}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"amount0Delta\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1Delta\",\"type\":\"int256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"uniswapV3SwapCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"uniswapV3SwapCallback(int256,int256,bytes)\":{\"details\":\"In the implementation you must pay the pool tokens owed for the swap. The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory. amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\",\"params\":{\"amount0Delta\":\"The amount of token0 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token0 to the pool.\",\"amount1Delta\":\"The amount of token1 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token1 to the pool.\",\"data\":\"Any data passed through by the caller via the IUniswapV3PoolActions#swap call\"}}},\"title\":\"Callback for IUniswapV3PoolActions#swap\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"uniswapV3SwapCallback(int256,int256,bytes)\":{\"notice\":\"Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\"}},\"notice\":\"Any contract that calls IUniswapV3PoolActions#swap must implement this interface\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":\"IUniswapV3SwapCallback\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"uniswapV3SwapCallback(int256,int256,bytes)":{"notice":"Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap."}},"notice":"Any contract that calls IUniswapV3PoolActions#swap must implement this interface","version":1}}},"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol":{"IUniswapV3PoolActions":{"abi":[{"inputs":[{"internalType":"int24","name":"tickLower","type":"int24"},{"internalType":"int24","name":"tickUpper","type":"int24"},{"internalType":"uint128","name":"amount","type":"uint128"}],"name":"burn","outputs":[{"internalType":"uint256","name":"amount0","type":"uint256"},{"internalType":"uint256","name":"amount1","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"int24","name":"tickLower","type":"int24"},{"internalType":"int24","name":"tickUpper","type":"int24"},{"internalType":"uint128","name":"amount0Requested","type":"uint128"},{"internalType":"uint128","name":"amount1Requested","type":"uint128"}],"name":"collect","outputs":[{"internalType":"uint128","name":"amount0","type":"uint128"},{"internalType":"uint128","name":"amount1","type":"uint128"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount0","type":"uint256"},{"internalType":"uint256","name":"amount1","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"flash","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint16","name":"observationCardinalityNext","type":"uint16"}],"name":"increaseObservationCardinalityNext","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint160","name":"sqrtPriceX96","type":"uint160"}],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"int24","name":"tickLower","type":"int24"},{"internalType":"int24","name":"tickUpper","type":"int24"},{"internalType":"uint128","name":"amount","type":"uint128"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"mint","outputs":[{"internalType":"uint256","name":"amount0","type":"uint256"},{"internalType":"uint256","name":"amount1","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"bool","name":"zeroForOne","type":"bool"},{"internalType":"int256","name":"amountSpecified","type":"int256"},{"internalType":"uint160","name":"sqrtPriceLimitX96","type":"uint160"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"swap","outputs":[{"internalType":"int256","name":"amount0","type":"int256"},{"internalType":"int256","name":"amount1","type":"int256"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"burn(int24,int24,uint128)":{"details":"Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0Fees must be collected separately via a call to #collect","params":{"amount":"How much liquidity to burn","tickLower":"The lower tick of the position for which to burn liquidity","tickUpper":"The upper tick of the position for which to burn liquidity"},"returns":{"amount0":"The amount of token0 sent to the recipient","amount1":"The amount of token1 sent to the recipient"}},"collect(address,int24,int24,uint128,uint128)":{"details":"Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity. Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.","params":{"amount0Requested":"How much token0 should be withdrawn from the fees owed","amount1Requested":"How much token1 should be withdrawn from the fees owed","recipient":"The address which should receive the fees collected","tickLower":"The lower tick of the position for which to collect fees","tickUpper":"The upper tick of the position for which to collect fees"},"returns":{"amount0":"The amount of fees collected in token0","amount1":"The amount of fees collected in token1"}},"flash(address,uint256,uint256,bytes)":{"details":"The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallbackCan be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling with 0 amount{0,1} and sending the donation amount(s) from the callback","params":{"amount0":"The amount of token0 to send","amount1":"The amount of token1 to send","data":"Any data to be passed through to the callback","recipient":"The address which will receive the token0 and token1 amounts"}},"increaseObservationCardinalityNext(uint16)":{"details":"This method is no-op if the pool already has an observationCardinalityNext greater than or equal to the input observationCardinalityNext.","params":{"observationCardinalityNext":"The desired minimum number of observations for the pool to store"}},"initialize(uint160)":{"details":"Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value","params":{"sqrtPriceX96":"the initial sqrt price of the pool as a Q64.96"}},"mint(address,int24,int24,uint128,bytes)":{"details":"The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends on tickLower, tickUpper, the amount of liquidity, and the current price.","params":{"amount":"The amount of liquidity to mint","data":"Any data that should be passed through to the callback","recipient":"The address for which the liquidity will be created","tickLower":"The lower tick of the position in which to add liquidity","tickUpper":"The upper tick of the position in which to add liquidity"},"returns":{"amount0":"The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback","amount1":"The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback"}},"swap(address,bool,int256,uint160,bytes)":{"details":"The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback","params":{"amountSpecified":"The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)","data":"Any data to be passed through to the callback","recipient":"The address to receive the output of the swap","sqrtPriceLimitX96":"The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this value after the swap. If one for zero, the price cannot be greater than this value after the swap","zeroForOne":"The direction of the swap, true for token0 to token1, false for token1 to token0"},"returns":{"amount0":"The delta of the balance of token0 of the pool, exact when negative, minimum when positive","amount1":"The delta of the balance of token1 of the pool, exact when negative, minimum when positive"}}},"title":"Permissionless pool actions","version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"burn(int24,int24,uint128)":"a34123a7","collect(address,int24,int24,uint128,uint128)":"4f1eb3d8","flash(address,uint256,uint256,bytes)":"490e6cbc","increaseObservationCardinalityNext(uint16)":"32148f67","initialize(uint160)":"f637731d","mint(address,int24,int24,uint128,bytes)":"3c8a7d8d","swap(address,bool,int256,uint160,bytes)":"128acb08"}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount0Requested\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1Requested\",\"type\":\"uint128\"}],\"name\":\"collect\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"flash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"observationCardinalityNext\",\"type\":\"uint16\"}],\"name\":\"increaseObservationCardinalityNext\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"zeroForOne\",\"type\":\"bool\"},{\"internalType\":\"int256\",\"name\":\"amountSpecified\",\"type\":\"int256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"burn(int24,int24,uint128)\":{\"details\":\"Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0Fees must be collected separately via a call to #collect\",\"params\":{\"amount\":\"How much liquidity to burn\",\"tickLower\":\"The lower tick of the position for which to burn liquidity\",\"tickUpper\":\"The upper tick of the position for which to burn liquidity\"},\"returns\":{\"amount0\":\"The amount of token0 sent to the recipient\",\"amount1\":\"The amount of token1 sent to the recipient\"}},\"collect(address,int24,int24,uint128,uint128)\":{\"details\":\"Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity. Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\",\"params\":{\"amount0Requested\":\"How much token0 should be withdrawn from the fees owed\",\"amount1Requested\":\"How much token1 should be withdrawn from the fees owed\",\"recipient\":\"The address which should receive the fees collected\",\"tickLower\":\"The lower tick of the position for which to collect fees\",\"tickUpper\":\"The upper tick of the position for which to collect fees\"},\"returns\":{\"amount0\":\"The amount of fees collected in token0\",\"amount1\":\"The amount of fees collected in token1\"}},\"flash(address,uint256,uint256,bytes)\":{\"details\":\"The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallbackCan be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling with 0 amount{0,1} and sending the donation amount(s) from the callback\",\"params\":{\"amount0\":\"The amount of token0 to send\",\"amount1\":\"The amount of token1 to send\",\"data\":\"Any data to be passed through to the callback\",\"recipient\":\"The address which will receive the token0 and token1 amounts\"}},\"increaseObservationCardinalityNext(uint16)\":{\"details\":\"This method is no-op if the pool already has an observationCardinalityNext greater than or equal to the input observationCardinalityNext.\",\"params\":{\"observationCardinalityNext\":\"The desired minimum number of observations for the pool to store\"}},\"initialize(uint160)\":{\"details\":\"Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\",\"params\":{\"sqrtPriceX96\":\"the initial sqrt price of the pool as a Q64.96\"}},\"mint(address,int24,int24,uint128,bytes)\":{\"details\":\"The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends on tickLower, tickUpper, the amount of liquidity, and the current price.\",\"params\":{\"amount\":\"The amount of liquidity to mint\",\"data\":\"Any data that should be passed through to the callback\",\"recipient\":\"The address for which the liquidity will be created\",\"tickLower\":\"The lower tick of the position in which to add liquidity\",\"tickUpper\":\"The upper tick of the position in which to add liquidity\"},\"returns\":{\"amount0\":\"The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\",\"amount1\":\"The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\"}},\"swap(address,bool,int256,uint160,bytes)\":{\"details\":\"The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\",\"params\":{\"amountSpecified\":\"The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\",\"data\":\"Any data to be passed through to the callback\",\"recipient\":\"The address to receive the output of the swap\",\"sqrtPriceLimitX96\":\"The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this value after the swap. If one for zero, the price cannot be greater than this value after the swap\",\"zeroForOne\":\"The direction of the swap, true for token0 to token1, false for token1 to token0\"},\"returns\":{\"amount0\":\"The delta of the balance of token0 of the pool, exact when negative, minimum when positive\",\"amount1\":\"The delta of the balance of token1 of the pool, exact when negative, minimum when positive\"}}},\"title\":\"Permissionless pool actions\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"burn(int24,int24,uint128)\":{\"notice\":\"Burn liquidity from the sender and account tokens owed for the liquidity to the position\"},\"collect(address,int24,int24,uint128,uint128)\":{\"notice\":\"Collects tokens owed to a position\"},\"flash(address,uint256,uint256,bytes)\":{\"notice\":\"Receive token0 and/or token1 and pay it back, plus a fee, in the callback\"},\"increaseObservationCardinalityNext(uint16)\":{\"notice\":\"Increase the maximum number of price and liquidity observations that this pool will store\"},\"initialize(uint160)\":{\"notice\":\"Sets the initial price for the pool\"},\"mint(address,int24,int24,uint128,bytes)\":{\"notice\":\"Adds liquidity for the given recipient/tickLower/tickUpper position\"},\"swap(address,bool,int256,uint160,bytes)\":{\"notice\":\"Swap token0 for token1, or token1 for token0\"}},\"notice\":\"Contains pool methods that can be called by anyone\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol\":\"IUniswapV3PoolActions\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissionless pool actions\\n/// @notice Contains pool methods that can be called by anyone\\ninterface IUniswapV3PoolActions {\\n    /// @notice Sets the initial price for the pool\\n    /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\\n    /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96\\n    function initialize(uint160 sqrtPriceX96) external;\\n\\n    /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\\n    /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\\n    /// on tickLower, tickUpper, the amount of liquidity, and the current price.\\n    /// @param recipient The address for which the liquidity will be created\\n    /// @param tickLower The lower tick of the position in which to add liquidity\\n    /// @param tickUpper The upper tick of the position in which to add liquidity\\n    /// @param amount The amount of liquidity to mint\\n    /// @param data Any data that should be passed through to the callback\\n    /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    function mint(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount,\\n        bytes calldata data\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Collects tokens owed to a position\\n    /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\\n    /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\\n    /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\\n    /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\\n    /// @param recipient The address which should receive the fees collected\\n    /// @param tickLower The lower tick of the position for which to collect fees\\n    /// @param tickUpper The upper tick of the position for which to collect fees\\n    /// @param amount0Requested How much token0 should be withdrawn from the fees owed\\n    /// @param amount1Requested How much token1 should be withdrawn from the fees owed\\n    /// @return amount0 The amount of fees collected in token0\\n    /// @return amount1 The amount of fees collected in token1\\n    function collect(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n\\n    /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\\n    /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\\n    /// @dev Fees must be collected separately via a call to #collect\\n    /// @param tickLower The lower tick of the position for which to burn liquidity\\n    /// @param tickUpper The upper tick of the position for which to burn liquidity\\n    /// @param amount How much liquidity to burn\\n    /// @return amount0 The amount of token0 sent to the recipient\\n    /// @return amount1 The amount of token1 sent to the recipient\\n    function burn(\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Swap token0 for token1, or token1 for token0\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\\n    /// @param recipient The address to receive the output of the swap\\n    /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\\n    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\\n    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\\n    /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\\n    /// @param data Any data to be passed through to the callback\\n    /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\\n    /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\\n    function swap(\\n        address recipient,\\n        bool zeroForOne,\\n        int256 amountSpecified,\\n        uint160 sqrtPriceLimitX96,\\n        bytes calldata data\\n    ) external returns (int256 amount0, int256 amount1);\\n\\n    /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\\n    /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\\n    /// with 0 amount{0,1} and sending the donation amount(s) from the callback\\n    /// @param recipient The address which will receive the token0 and token1 amounts\\n    /// @param amount0 The amount of token0 to send\\n    /// @param amount1 The amount of token1 to send\\n    /// @param data Any data to be passed through to the callback\\n    function flash(\\n        address recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bytes calldata data\\n    ) external;\\n\\n    /// @notice Increase the maximum number of price and liquidity observations that this pool will store\\n    /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\\n    /// the input observationCardinalityNext.\\n    /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\\n}\\n\",\"keccak256\":\"0x9453dd0e7442188667d01d9b65de3f1e14e9511ff3e303179a15f6fc267f7634\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"burn(int24,int24,uint128)":{"notice":"Burn liquidity from the sender and account tokens owed for the liquidity to the position"},"collect(address,int24,int24,uint128,uint128)":{"notice":"Collects tokens owed to a position"},"flash(address,uint256,uint256,bytes)":{"notice":"Receive token0 and/or token1 and pay it back, plus a fee, in the callback"},"increaseObservationCardinalityNext(uint16)":{"notice":"Increase the maximum number of price and liquidity observations that this pool will store"},"initialize(uint160)":{"notice":"Sets the initial price for the pool"},"mint(address,int24,int24,uint128,bytes)":{"notice":"Adds liquidity for the given recipient/tickLower/tickUpper position"},"swap(address,bool,int256,uint160,bytes)":{"notice":"Swap token0 for token1, or token1 for token0"}},"notice":"Contains pool methods that can be called by anyone","version":1}}},"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol":{"IUniswapV3PoolDerivedState":{"abi":[{"inputs":[{"internalType":"uint32[]","name":"secondsAgos","type":"uint32[]"}],"name":"observe","outputs":[{"internalType":"int56[]","name":"tickCumulatives","type":"int56[]"},{"internalType":"uint160[]","name":"secondsPerLiquidityCumulativeX128s","type":"uint160[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"int24","name":"tickLower","type":"int24"},{"internalType":"int24","name":"tickUpper","type":"int24"}],"name":"snapshotCumulativesInside","outputs":[{"internalType":"int56","name":"tickCumulativeInside","type":"int56"},{"internalType":"uint160","name":"secondsPerLiquidityInsideX128","type":"uint160"},{"internalType":"uint32","name":"secondsInside","type":"uint32"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"observe(uint32[])":{"details":"To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick, you must call it with secondsAgos = [3600, 0].The time weighted average tick represents the geometric time weighted average price of the pool, in log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.","params":{"secondsAgos":"From how long ago each cumulative tick and liquidity value should be returned"},"returns":{"secondsPerLiquidityCumulativeX128s":"Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block timestamp","tickCumulatives":"Cumulative tick values as of each `secondsAgos` from the current block timestamp"}},"snapshotCumulativesInside(int24,int24)":{"details":"Snapshots must only be compared to other snapshots, taken over a period for which a position existed. I.e., snapshots cannot be compared if a position is not held for the entire period between when the first snapshot is taken and the second snapshot is taken.","params":{"tickLower":"The lower tick of the range","tickUpper":"The upper tick of the range"},"returns":{"secondsInside":"The snapshot of seconds per liquidity for the range","secondsPerLiquidityInsideX128":"The snapshot of seconds per liquidity for the range","tickCumulativeInside":"The snapshot of the tick accumulator for the range"}}},"title":"Pool state that is not stored","version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"observe(uint32[])":"883bdbfd","snapshotCumulativesInside(int24,int24)":"a38807f2"}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"secondsAgos\",\"type\":\"uint32[]\"}],\"name\":\"observe\",\"outputs\":[{\"internalType\":\"int56[]\",\"name\":\"tickCumulatives\",\"type\":\"int56[]\"},{\"internalType\":\"uint160[]\",\"name\":\"secondsPerLiquidityCumulativeX128s\",\"type\":\"uint160[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"}],\"name\":\"snapshotCumulativesInside\",\"outputs\":[{\"internalType\":\"int56\",\"name\":\"tickCumulativeInside\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityInsideX128\",\"type\":\"uint160\"},{\"internalType\":\"uint32\",\"name\":\"secondsInside\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"observe(uint32[])\":{\"details\":\"To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick, you must call it with secondsAgos = [3600, 0].The time weighted average tick represents the geometric time weighted average price of the pool, in log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\",\"params\":{\"secondsAgos\":\"From how long ago each cumulative tick and liquidity value should be returned\"},\"returns\":{\"secondsPerLiquidityCumulativeX128s\":\"Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block timestamp\",\"tickCumulatives\":\"Cumulative tick values as of each `secondsAgos` from the current block timestamp\"}},\"snapshotCumulativesInside(int24,int24)\":{\"details\":\"Snapshots must only be compared to other snapshots, taken over a period for which a position existed. I.e., snapshots cannot be compared if a position is not held for the entire period between when the first snapshot is taken and the second snapshot is taken.\",\"params\":{\"tickLower\":\"The lower tick of the range\",\"tickUpper\":\"The upper tick of the range\"},\"returns\":{\"secondsInside\":\"The snapshot of seconds per liquidity for the range\",\"secondsPerLiquidityInsideX128\":\"The snapshot of seconds per liquidity for the range\",\"tickCumulativeInside\":\"The snapshot of the tick accumulator for the range\"}}},\"title\":\"Pool state that is not stored\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"observe(uint32[])\":{\"notice\":\"Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\"},\"snapshotCumulativesInside(int24,int24)\":{\"notice\":\"Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\"}},\"notice\":\"Contains view functions to provide information about the pool that is computed rather than stored on the blockchain. The functions here may have variable gas costs.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol\":\"IUniswapV3PoolDerivedState\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that is not stored\\n/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the\\n/// blockchain. The functions here may have variable gas costs.\\ninterface IUniswapV3PoolDerivedState {\\n    /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\\n    /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\\n    /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\\n    /// you must call it with secondsAgos = [3600, 0].\\n    /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\\n    /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\\n    /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\\n    /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\\n    /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\\n    /// timestamp\\n    function observe(uint32[] calldata secondsAgos)\\n        external\\n        view\\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\\n\\n    /// @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\\n    /// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\\n    /// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\\n    /// snapshot is taken and the second snapshot is taken.\\n    /// @param tickLower The lower tick of the range\\n    /// @param tickUpper The upper tick of the range\\n    /// @return tickCumulativeInside The snapshot of the tick accumulator for the range\\n    /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\\n    /// @return secondsInside The snapshot of seconds per liquidity for the range\\n    function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\\n        external\\n        view\\n        returns (\\n            int56 tickCumulativeInside,\\n            uint160 secondsPerLiquidityInsideX128,\\n            uint32 secondsInside\\n        );\\n}\\n\",\"keccak256\":\"0xe603ac5b17ecdee73ba2b27efdf386c257a19c14206e87eee77e2017b742d9e5\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"observe(uint32[])":{"notice":"Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp"},"snapshotCumulativesInside(int24,int24)":{"notice":"Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range"}},"notice":"Contains view functions to provide information about the pool that is computed rather than stored on the blockchain. The functions here may have variable gas costs.","version":1}}},"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol":{"IUniswapV3PoolEvents":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"int24","name":"tickLower","type":"int24"},{"indexed":true,"internalType":"int24","name":"tickUpper","type":"int24"},{"indexed":false,"internalType":"uint128","name":"amount","type":"uint128"},{"indexed":false,"internalType":"uint256","name":"amount0","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount1","type":"uint256"}],"name":"Burn","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":false,"internalType":"address","name":"recipient","type":"address"},{"indexed":true,"internalType":"int24","name":"tickLower","type":"int24"},{"indexed":true,"internalType":"int24","name":"tickUpper","type":"int24"},{"indexed":false,"internalType":"uint128","name":"amount0","type":"uint128"},{"indexed":false,"internalType":"uint128","name":"amount1","type":"uint128"}],"name":"Collect","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":true,"internalType":"address","name":"recipient","type":"address"},{"indexed":false,"internalType":"uint128","name":"amount0","type":"uint128"},{"indexed":false,"internalType":"uint128","name":"amount1","type":"uint128"}],"name":"CollectProtocol","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":true,"internalType":"address","name":"recipient","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount0","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount1","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"paid0","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"paid1","type":"uint256"}],"name":"Flash","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint16","name":"observationCardinalityNextOld","type":"uint16"},{"indexed":false,"internalType":"uint16","name":"observationCardinalityNextNew","type":"uint16"}],"name":"IncreaseObservationCardinalityNext","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint160","name":"sqrtPriceX96","type":"uint160"},{"indexed":false,"internalType":"int24","name":"tick","type":"int24"}],"name":"Initialize","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"sender","type":"address"},{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"int24","name":"tickLower","type":"int24"},{"indexed":true,"internalType":"int24","name":"tickUpper","type":"int24"},{"indexed":false,"internalType":"uint128","name":"amount","type":"uint128"},{"indexed":false,"internalType":"uint256","name":"amount0","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount1","type":"uint256"}],"name":"Mint","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"feeProtocol0Old","type":"uint8"},{"indexed":false,"internalType":"uint8","name":"feeProtocol1Old","type":"uint8"},{"indexed":false,"internalType":"uint8","name":"feeProtocol0New","type":"uint8"},{"indexed":false,"internalType":"uint8","name":"feeProtocol1New","type":"uint8"}],"name":"SetFeeProtocol","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":true,"internalType":"address","name":"recipient","type":"address"},{"indexed":false,"internalType":"int256","name":"amount0","type":"int256"},{"indexed":false,"internalType":"int256","name":"amount1","type":"int256"},{"indexed":false,"internalType":"uint160","name":"sqrtPriceX96","type":"uint160"},{"indexed":false,"internalType":"uint128","name":"liquidity","type":"uint128"},{"indexed":false,"internalType":"int24","name":"tick","type":"int24"}],"name":"Swap","type":"event"}],"devdoc":{"events":{"Burn(address,int24,int24,uint128,uint256,uint256)":{"details":"Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect","params":{"amount":"The amount of liquidity to remove","amount0":"The amount of token0 withdrawn","amount1":"The amount of token1 withdrawn","owner":"The owner of the position for which liquidity is removed","tickLower":"The lower tick of the position","tickUpper":"The upper tick of the position"}},"Collect(address,address,int24,int24,uint128,uint128)":{"details":"Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees","params":{"amount0":"The amount of token0 fees collected","amount1":"The amount of token1 fees collected","owner":"The owner of the position for which fees are collected","tickLower":"The lower tick of the position","tickUpper":"The upper tick of the position"}},"CollectProtocol(address,address,uint128,uint128)":{"params":{"amount0":"The amount of token1 protocol fees that is withdrawn","recipient":"The address that receives the collected protocol fees","sender":"The address that collects the protocol fees"}},"Flash(address,address,uint256,uint256,uint256,uint256)":{"params":{"amount0":"The amount of token0 that was flashed","amount1":"The amount of token1 that was flashed","paid0":"The amount of token0 paid for the flash, which can exceed the amount0 plus the fee","paid1":"The amount of token1 paid for the flash, which can exceed the amount1 plus the fee","recipient":"The address that received the tokens from flash","sender":"The address that initiated the swap call, and that received the callback"}},"IncreaseObservationCardinalityNext(uint16,uint16)":{"details":"observationCardinalityNext is not the observation cardinality until an observation is written at the index just before a mint/swap/burn.","params":{"observationCardinalityNextNew":"The updated value of the next observation cardinality","observationCardinalityNextOld":"The previous value of the next observation cardinality"}},"Initialize(uint160,int24)":{"details":"Mint/Burn/Swap cannot be emitted by the pool before Initialize","params":{"sqrtPriceX96":"The initial sqrt price of the pool, as a Q64.96","tick":"The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool"}},"Mint(address,address,int24,int24,uint128,uint256,uint256)":{"params":{"amount":"The amount of liquidity minted to the position range","amount0":"How much token0 was required for the minted liquidity","amount1":"How much token1 was required for the minted liquidity","owner":"The owner of the position and recipient of any minted liquidity","sender":"The address that minted the liquidity","tickLower":"The lower tick of the position","tickUpper":"The upper tick of the position"}},"SetFeeProtocol(uint8,uint8,uint8,uint8)":{"params":{"feeProtocol0New":"The updated value of the token0 protocol fee","feeProtocol0Old":"The previous value of the token0 protocol fee","feeProtocol1New":"The updated value of the token1 protocol fee","feeProtocol1Old":"The previous value of the token1 protocol fee"}},"Swap(address,address,int256,int256,uint160,uint128,int24)":{"params":{"amount0":"The delta of the token0 balance of the pool","amount1":"The delta of the token1 balance of the pool","liquidity":"The liquidity of the pool after the swap","recipient":"The address that received the output of the swap","sender":"The address that initiated the swap call, and that received the callback","sqrtPriceX96":"The sqrt(price) of the pool after the swap, as a Q64.96","tick":"The log base 1.0001 of price of the pool after the swap"}}},"kind":"dev","methods":{},"title":"Events emitted by a pool","version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"name\":\"Collect\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"name\":\"CollectProtocol\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paid0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paid1\",\"type\":\"uint256\"}],\"name\":\"Flash\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"observationCardinalityNextOld\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"observationCardinalityNextNew\",\"type\":\"uint16\"}],\"name\":\"IncreaseObservationCardinalityNext\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"Initialize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol0Old\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol1Old\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol0New\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol1New\",\"type\":\"uint8\"}],\"name\":\"SetFeeProtocol\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"Swap\",\"type\":\"event\"}],\"devdoc\":{\"events\":{\"Burn(address,int24,int24,uint128,uint256,uint256)\":{\"details\":\"Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\",\"params\":{\"amount\":\"The amount of liquidity to remove\",\"amount0\":\"The amount of token0 withdrawn\",\"amount1\":\"The amount of token1 withdrawn\",\"owner\":\"The owner of the position for which liquidity is removed\",\"tickLower\":\"The lower tick of the position\",\"tickUpper\":\"The upper tick of the position\"}},\"Collect(address,address,int24,int24,uint128,uint128)\":{\"details\":\"Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\",\"params\":{\"amount0\":\"The amount of token0 fees collected\",\"amount1\":\"The amount of token1 fees collected\",\"owner\":\"The owner of the position for which fees are collected\",\"tickLower\":\"The lower tick of the position\",\"tickUpper\":\"The upper tick of the position\"}},\"CollectProtocol(address,address,uint128,uint128)\":{\"params\":{\"amount0\":\"The amount of token1 protocol fees that is withdrawn\",\"recipient\":\"The address that receives the collected protocol fees\",\"sender\":\"The address that collects the protocol fees\"}},\"Flash(address,address,uint256,uint256,uint256,uint256)\":{\"params\":{\"amount0\":\"The amount of token0 that was flashed\",\"amount1\":\"The amount of token1 that was flashed\",\"paid0\":\"The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\",\"paid1\":\"The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\",\"recipient\":\"The address that received the tokens from flash\",\"sender\":\"The address that initiated the swap call, and that received the callback\"}},\"IncreaseObservationCardinalityNext(uint16,uint16)\":{\"details\":\"observationCardinalityNext is not the observation cardinality until an observation is written at the index just before a mint/swap/burn.\",\"params\":{\"observationCardinalityNextNew\":\"The updated value of the next observation cardinality\",\"observationCardinalityNextOld\":\"The previous value of the next observation cardinality\"}},\"Initialize(uint160,int24)\":{\"details\":\"Mint/Burn/Swap cannot be emitted by the pool before Initialize\",\"params\":{\"sqrtPriceX96\":\"The initial sqrt price of the pool, as a Q64.96\",\"tick\":\"The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\"}},\"Mint(address,address,int24,int24,uint128,uint256,uint256)\":{\"params\":{\"amount\":\"The amount of liquidity minted to the position range\",\"amount0\":\"How much token0 was required for the minted liquidity\",\"amount1\":\"How much token1 was required for the minted liquidity\",\"owner\":\"The owner of the position and recipient of any minted liquidity\",\"sender\":\"The address that minted the liquidity\",\"tickLower\":\"The lower tick of the position\",\"tickUpper\":\"The upper tick of the position\"}},\"SetFeeProtocol(uint8,uint8,uint8,uint8)\":{\"params\":{\"feeProtocol0New\":\"The updated value of the token0 protocol fee\",\"feeProtocol0Old\":\"The previous value of the token0 protocol fee\",\"feeProtocol1New\":\"The updated value of the token1 protocol fee\",\"feeProtocol1Old\":\"The previous value of the token1 protocol fee\"}},\"Swap(address,address,int256,int256,uint160,uint128,int24)\":{\"params\":{\"amount0\":\"The delta of the token0 balance of the pool\",\"amount1\":\"The delta of the token1 balance of the pool\",\"liquidity\":\"The liquidity of the pool after the swap\",\"recipient\":\"The address that received the output of the swap\",\"sender\":\"The address that initiated the swap call, and that received the callback\",\"sqrtPriceX96\":\"The sqrt(price) of the pool after the swap, as a Q64.96\",\"tick\":\"The log base 1.0001 of price of the pool after the swap\"}}},\"kind\":\"dev\",\"methods\":{},\"title\":\"Events emitted by a pool\",\"version\":1},\"userdoc\":{\"events\":{\"Burn(address,int24,int24,uint128,uint256,uint256)\":{\"notice\":\"Emitted when a position's liquidity is removed\"},\"Collect(address,address,int24,int24,uint128,uint128)\":{\"notice\":\"Emitted when fees are collected by the owner of a position\"},\"CollectProtocol(address,address,uint128,uint128)\":{\"notice\":\"Emitted when the collected protocol fees are withdrawn by the factory owner\"},\"Flash(address,address,uint256,uint256,uint256,uint256)\":{\"notice\":\"Emitted by the pool for any flashes of token0/token1\"},\"IncreaseObservationCardinalityNext(uint16,uint16)\":{\"notice\":\"Emitted by the pool for increases to the number of observations that can be stored\"},\"Initialize(uint160,int24)\":{\"notice\":\"Emitted exactly once by a pool when #initialize is first called on the pool\"},\"Mint(address,address,int24,int24,uint128,uint256,uint256)\":{\"notice\":\"Emitted when liquidity is minted for a given position\"},\"SetFeeProtocol(uint8,uint8,uint8,uint8)\":{\"notice\":\"Emitted when the protocol fee is changed by the pool\"},\"Swap(address,address,int256,int256,uint160,uint128,int24)\":{\"notice\":\"Emitted by the pool for any swaps between token0 and token1\"}},\"kind\":\"user\",\"methods\":{},\"notice\":\"Contains all events emitted by the pool\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol\":\"IUniswapV3PoolEvents\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Events emitted by a pool\\n/// @notice Contains all events emitted by the pool\\ninterface IUniswapV3PoolEvents {\\n    /// @notice Emitted exactly once by a pool when #initialize is first called on the pool\\n    /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\\n    /// @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\\n    /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\\n    event Initialize(uint160 sqrtPriceX96, int24 tick);\\n\\n    /// @notice Emitted when liquidity is minted for a given position\\n    /// @param sender The address that minted the liquidity\\n    /// @param owner The owner of the position and recipient of any minted liquidity\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount The amount of liquidity minted to the position range\\n    /// @param amount0 How much token0 was required for the minted liquidity\\n    /// @param amount1 How much token1 was required for the minted liquidity\\n    event Mint(\\n        address sender,\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted when fees are collected by the owner of a position\\n    /// @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\\n    /// @param owner The owner of the position for which fees are collected\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount0 The amount of token0 fees collected\\n    /// @param amount1 The amount of token1 fees collected\\n    event Collect(\\n        address indexed owner,\\n        address recipient,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount0,\\n        uint128 amount1\\n    );\\n\\n    /// @notice Emitted when a position's liquidity is removed\\n    /// @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\\n    /// @param owner The owner of the position for which liquidity is removed\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount The amount of liquidity to remove\\n    /// @param amount0 The amount of token0 withdrawn\\n    /// @param amount1 The amount of token1 withdrawn\\n    event Burn(\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted by the pool for any swaps between token0 and token1\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param recipient The address that received the output of the swap\\n    /// @param amount0 The delta of the token0 balance of the pool\\n    /// @param amount1 The delta of the token1 balance of the pool\\n    /// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\\n    /// @param liquidity The liquidity of the pool after the swap\\n    /// @param tick The log base 1.0001 of price of the pool after the swap\\n    event Swap(\\n        address indexed sender,\\n        address indexed recipient,\\n        int256 amount0,\\n        int256 amount1,\\n        uint160 sqrtPriceX96,\\n        uint128 liquidity,\\n        int24 tick\\n    );\\n\\n    /// @notice Emitted by the pool for any flashes of token0/token1\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param recipient The address that received the tokens from flash\\n    /// @param amount0 The amount of token0 that was flashed\\n    /// @param amount1 The amount of token1 that was flashed\\n    /// @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\\n    /// @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\\n    event Flash(\\n        address indexed sender,\\n        address indexed recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        uint256 paid0,\\n        uint256 paid1\\n    );\\n\\n    /// @notice Emitted by the pool for increases to the number of observations that can be stored\\n    /// @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\\n    /// just before a mint/swap/burn.\\n    /// @param observationCardinalityNextOld The previous value of the next observation cardinality\\n    /// @param observationCardinalityNextNew The updated value of the next observation cardinality\\n    event IncreaseObservationCardinalityNext(\\n        uint16 observationCardinalityNextOld,\\n        uint16 observationCardinalityNextNew\\n    );\\n\\n    /// @notice Emitted when the protocol fee is changed by the pool\\n    /// @param feeProtocol0Old The previous value of the token0 protocol fee\\n    /// @param feeProtocol1Old The previous value of the token1 protocol fee\\n    /// @param feeProtocol0New The updated value of the token0 protocol fee\\n    /// @param feeProtocol1New The updated value of the token1 protocol fee\\n    event SetFeeProtocol(uint8 feeProtocol0Old, uint8 feeProtocol1Old, uint8 feeProtocol0New, uint8 feeProtocol1New);\\n\\n    /// @notice Emitted when the collected protocol fees are withdrawn by the factory owner\\n    /// @param sender The address that collects the protocol fees\\n    /// @param recipient The address that receives the collected protocol fees\\n    /// @param amount0 The amount of token0 protocol fees that is withdrawn\\n    /// @param amount0 The amount of token1 protocol fees that is withdrawn\\n    event CollectProtocol(address indexed sender, address indexed recipient, uint128 amount0, uint128 amount1);\\n}\\n\",\"keccak256\":\"0x8071514d0fe5d17d6fbd31c191cdfb703031c24e0ece3621d88ab10e871375cd\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"events":{"Burn(address,int24,int24,uint128,uint256,uint256)":{"notice":"Emitted when a position's liquidity is removed"},"Collect(address,address,int24,int24,uint128,uint128)":{"notice":"Emitted when fees are collected by the owner of a position"},"CollectProtocol(address,address,uint128,uint128)":{"notice":"Emitted when the collected protocol fees are withdrawn by the factory owner"},"Flash(address,address,uint256,uint256,uint256,uint256)":{"notice":"Emitted by the pool for any flashes of token0/token1"},"IncreaseObservationCardinalityNext(uint16,uint16)":{"notice":"Emitted by the pool for increases to the number of observations that can be stored"},"Initialize(uint160,int24)":{"notice":"Emitted exactly once by a pool when #initialize is first called on the pool"},"Mint(address,address,int24,int24,uint128,uint256,uint256)":{"notice":"Emitted when liquidity is minted for a given position"},"SetFeeProtocol(uint8,uint8,uint8,uint8)":{"notice":"Emitted when the protocol fee is changed by the pool"},"Swap(address,address,int256,int256,uint160,uint128,int24)":{"notice":"Emitted by the pool for any swaps between token0 and token1"}},"kind":"user","methods":{},"notice":"Contains all events emitted by the pool","version":1}}},"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol":{"IUniswapV3PoolImmutables":{"abi":[{"inputs":[],"name":"factory","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"fee","outputs":[{"internalType":"uint24","name":"","type":"uint24"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"maxLiquidityPerTick","outputs":[{"internalType":"uint128","name":"","type":"uint128"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"tickSpacing","outputs":[{"internalType":"int24","name":"","type":"int24"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"token0","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"token1","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"factory()":{"returns":{"_0":"The contract address"}},"fee()":{"returns":{"_0":"The fee"}},"maxLiquidityPerTick()":{"details":"This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool","returns":{"_0":"The max amount of liquidity per tick"}},"tickSpacing()":{"details":"Ticks can only be used at multiples of this value, minimum of 1 and always positive e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ... This value is an int24 to avoid casting even though it is always positive.","returns":{"_0":"The tick spacing"}},"token0()":{"returns":{"_0":"The token contract address"}},"token1()":{"returns":{"_0":"The token contract address"}}},"title":"Pool state that never changes","version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"factory()":"c45a0155","fee()":"ddca3f43","maxLiquidityPerTick()":"70cf754a","tickSpacing()":"d0c93a7c","token0()":"0dfe1681","token1()":"d21220a7"}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLiquidityPerTick\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tickSpacing\",\"outputs\":[{\"internalType\":\"int24\",\"name\":\"\",\"type\":\"int24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"factory()\":{\"returns\":{\"_0\":\"The contract address\"}},\"fee()\":{\"returns\":{\"_0\":\"The fee\"}},\"maxLiquidityPerTick()\":{\"details\":\"This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\",\"returns\":{\"_0\":\"The max amount of liquidity per tick\"}},\"tickSpacing()\":{\"details\":\"Ticks can only be used at multiples of this value, minimum of 1 and always positive e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ... This value is an int24 to avoid casting even though it is always positive.\",\"returns\":{\"_0\":\"The tick spacing\"}},\"token0()\":{\"returns\":{\"_0\":\"The token contract address\"}},\"token1()\":{\"returns\":{\"_0\":\"The token contract address\"}}},\"title\":\"Pool state that never changes\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"factory()\":{\"notice\":\"The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\"},\"fee()\":{\"notice\":\"The pool's fee in hundredths of a bip, i.e. 1e-6\"},\"maxLiquidityPerTick()\":{\"notice\":\"The maximum amount of position liquidity that can use any tick in the range\"},\"tickSpacing()\":{\"notice\":\"The pool tick spacing\"},\"token0()\":{\"notice\":\"The first of the two tokens of the pool, sorted by address\"},\"token1()\":{\"notice\":\"The second of the two tokens of the pool, sorted by address\"}},\"notice\":\"These parameters are fixed for a pool forever, i.e., the methods will always return the same values\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol\":\"IUniswapV3PoolImmutables\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that never changes\\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\\ninterface IUniswapV3PoolImmutables {\\n    /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\\n    /// @return The contract address\\n    function factory() external view returns (address);\\n\\n    /// @notice The first of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token0() external view returns (address);\\n\\n    /// @notice The second of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token1() external view returns (address);\\n\\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\\n    /// @return The fee\\n    function fee() external view returns (uint24);\\n\\n    /// @notice The pool tick spacing\\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\\n    /// This value is an int24 to avoid casting even though it is always positive.\\n    /// @return The tick spacing\\n    function tickSpacing() external view returns (int24);\\n\\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\\n    /// @return The max amount of liquidity per tick\\n    function maxLiquidityPerTick() external view returns (uint128);\\n}\\n\",\"keccak256\":\"0xf6e5d2cd1139c4c276bdbc8e1d2b256e456c866a91f1b868da265c6d2685c3f7\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"factory()":{"notice":"The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface"},"fee()":{"notice":"The pool's fee in hundredths of a bip, i.e. 1e-6"},"maxLiquidityPerTick()":{"notice":"The maximum amount of position liquidity that can use any tick in the range"},"tickSpacing()":{"notice":"The pool tick spacing"},"token0()":{"notice":"The first of the two tokens of the pool, sorted by address"},"token1()":{"notice":"The second of the two tokens of the pool, sorted by address"}},"notice":"These parameters are fixed for a pool forever, i.e., the methods will always return the same values","version":1}}},"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol":{"IUniswapV3PoolOwnerActions":{"abi":[{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint128","name":"amount0Requested","type":"uint128"},{"internalType":"uint128","name":"amount1Requested","type":"uint128"}],"name":"collectProtocol","outputs":[{"internalType":"uint128","name":"amount0","type":"uint128"},{"internalType":"uint128","name":"amount1","type":"uint128"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint8","name":"feeProtocol0","type":"uint8"},{"internalType":"uint8","name":"feeProtocol1","type":"uint8"}],"name":"setFeeProtocol","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"collectProtocol(address,uint128,uint128)":{"params":{"amount0Requested":"The maximum amount of token0 to send, can be 0 to collect fees in only token1","amount1Requested":"The maximum amount of token1 to send, can be 0 to collect fees in only token0","recipient":"The address to which collected protocol fees should be sent"},"returns":{"amount0":"The protocol fee collected in token0","amount1":"The protocol fee collected in token1"}},"setFeeProtocol(uint8,uint8)":{"params":{"feeProtocol0":"new protocol fee for token0 of the pool","feeProtocol1":"new protocol fee for token1 of the pool"}}},"title":"Permissioned pool actions","version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"collectProtocol(address,uint128,uint128)":"85b66729","setFeeProtocol(uint8,uint8)":"8206a4d1"}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"amount0Requested\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1Requested\",\"type\":\"uint128\"}],\"name\":\"collectProtocol\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"feeProtocol0\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"feeProtocol1\",\"type\":\"uint8\"}],\"name\":\"setFeeProtocol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"collectProtocol(address,uint128,uint128)\":{\"params\":{\"amount0Requested\":\"The maximum amount of token0 to send, can be 0 to collect fees in only token1\",\"amount1Requested\":\"The maximum amount of token1 to send, can be 0 to collect fees in only token0\",\"recipient\":\"The address to which collected protocol fees should be sent\"},\"returns\":{\"amount0\":\"The protocol fee collected in token0\",\"amount1\":\"The protocol fee collected in token1\"}},\"setFeeProtocol(uint8,uint8)\":{\"params\":{\"feeProtocol0\":\"new protocol fee for token0 of the pool\",\"feeProtocol1\":\"new protocol fee for token1 of the pool\"}}},\"title\":\"Permissioned pool actions\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"collectProtocol(address,uint128,uint128)\":{\"notice\":\"Collect the protocol fee accrued to the pool\"},\"setFeeProtocol(uint8,uint8)\":{\"notice\":\"Set the denominator of the protocol's % share of the fees\"}},\"notice\":\"Contains pool methods that may only be called by the factory owner\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol\":\"IUniswapV3PoolOwnerActions\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissioned pool actions\\n/// @notice Contains pool methods that may only be called by the factory owner\\ninterface IUniswapV3PoolOwnerActions {\\n    /// @notice Set the denominator of the protocol's % share of the fees\\n    /// @param feeProtocol0 new protocol fee for token0 of the pool\\n    /// @param feeProtocol1 new protocol fee for token1 of the pool\\n    function setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external;\\n\\n    /// @notice Collect the protocol fee accrued to the pool\\n    /// @param recipient The address to which collected protocol fees should be sent\\n    /// @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\\n    /// @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\\n    /// @return amount0 The protocol fee collected in token0\\n    /// @return amount1 The protocol fee collected in token1\\n    function collectProtocol(\\n        address recipient,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n}\\n\",\"keccak256\":\"0x759b78a2918af9e99e246dc3af084f654e48ef32bb4e4cb8a966aa3dcaece235\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"collectProtocol(address,uint128,uint128)":{"notice":"Collect the protocol fee accrued to the pool"},"setFeeProtocol(uint8,uint8)":{"notice":"Set the denominator of the protocol's % share of the fees"}},"notice":"Contains pool methods that may only be called by the factory owner","version":1}}},"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol":{"IUniswapV3PoolState":{"abi":[{"inputs":[],"name":"feeGrowthGlobal0X128","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"feeGrowthGlobal1X128","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"liquidity","outputs":[{"internalType":"uint128","name":"","type":"uint128"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"index","type":"uint256"}],"name":"observations","outputs":[{"internalType":"uint32","name":"blockTimestamp","type":"uint32"},{"internalType":"int56","name":"tickCumulative","type":"int56"},{"internalType":"uint160","name":"secondsPerLiquidityCumulativeX128","type":"uint160"},{"internalType":"bool","name":"initialized","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"key","type":"bytes32"}],"name":"positions","outputs":[{"internalType":"uint128","name":"_liquidity","type":"uint128"},{"internalType":"uint256","name":"feeGrowthInside0LastX128","type":"uint256"},{"internalType":"uint256","name":"feeGrowthInside1LastX128","type":"uint256"},{"internalType":"uint128","name":"tokensOwed0","type":"uint128"},{"internalType":"uint128","name":"tokensOwed1","type":"uint128"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"protocolFees","outputs":[{"internalType":"uint128","name":"token0","type":"uint128"},{"internalType":"uint128","name":"token1","type":"uint128"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"slot0","outputs":[{"internalType":"uint160","name":"sqrtPriceX96","type":"uint160"},{"internalType":"int24","name":"tick","type":"int24"},{"internalType":"uint16","name":"observationIndex","type":"uint16"},{"internalType":"uint16","name":"observationCardinality","type":"uint16"},{"internalType":"uint16","name":"observationCardinalityNext","type":"uint16"},{"internalType":"uint8","name":"feeProtocol","type":"uint8"},{"internalType":"bool","name":"unlocked","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"int16","name":"wordPosition","type":"int16"}],"name":"tickBitmap","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"int24","name":"tick","type":"int24"}],"name":"ticks","outputs":[{"internalType":"uint128","name":"liquidityGross","type":"uint128"},{"internalType":"int128","name":"liquidityNet","type":"int128"},{"internalType":"uint256","name":"feeGrowthOutside0X128","type":"uint256"},{"internalType":"uint256","name":"feeGrowthOutside1X128","type":"uint256"},{"internalType":"int56","name":"tickCumulativeOutside","type":"int56"},{"internalType":"uint160","name":"secondsPerLiquidityOutsideX128","type":"uint160"},{"internalType":"uint32","name":"secondsOutside","type":"uint32"},{"internalType":"bool","name":"initialized","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"feeGrowthGlobal0X128()":{"details":"This value can overflow the uint256"},"feeGrowthGlobal1X128()":{"details":"This value can overflow the uint256"},"liquidity()":{"details":"This value has no relationship to the total liquidity across all ticks"},"observations(uint256)":{"details":"You most likely want to use #observe() instead of this method to get an observation as of some amount of time ago, rather than at a specific index in the array.","params":{"index":"The element of the observations array to fetch"},"returns":{"blockTimestamp":"The timestamp of the observation, Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp, Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp, Returns initialized whether the observation has been initialized and the values are safe to use"}},"positions(bytes32)":{"params":{"key":"The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper"},"returns":{"_liquidity":"The amount of liquidity in the position, Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke, Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke, Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke, Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke"}},"protocolFees()":{"details":"Protocol fees will never exceed uint128 max in either token"},"slot0()":{"returns":{"sqrtPriceX96":"The current price of the pool as a sqrt(token1/token0) Q64.96 value tick The current tick of the pool, i.e. according to the last tick transition that was run. This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick boundary. observationIndex The index of the last oracle observation that was written, observationCardinality The current maximum number of observations stored in the pool, observationCardinalityNext The next maximum number of observations, to be updated when the observation. feeProtocol The protocol fee for both tokens of the pool. Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0 is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee. unlocked Whether the pool is currently locked to reentrancy"}},"ticks(int24)":{"params":{"tick":"The tick to look up"},"returns":{"liquidityGross":"the total amount of position liquidity that uses the pool either as tick lower or tick upper, liquidityNet how much liquidity changes when the pool price crosses the tick, feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0, feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1, tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick, secondsOutside the seconds spent on the other side of the tick from the current tick, initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false. Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0. In addition, these values are only relative and must be used only in comparison to previous snapshots for a specific position."}}},"title":"Pool state that can change","version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"feeGrowthGlobal0X128()":"f3058399","feeGrowthGlobal1X128()":"46141319","liquidity()":"1a686502","observations(uint256)":"252c09d7","positions(bytes32)":"514ea4bf","protocolFees()":"1ad8b03b","slot0()":"3850c7bd","tickBitmap(int16)":"5339c296","ticks(int24)":"f30dba93"}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"feeGrowthGlobal0X128\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeGrowthGlobal1X128\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidity\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"observations\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"blockTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"int56\",\"name\":\"tickCumulative\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityCumulativeX128\",\"type\":\"uint160\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"positions\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"_liquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthInside0LastX128\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthInside1LastX128\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"tokensOwed0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"tokensOwed1\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFees\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"token0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"token1\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slot0\",\"outputs\":[{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"},{\"internalType\":\"uint16\",\"name\":\"observationIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"observationCardinality\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"observationCardinalityNext\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"feeProtocol\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"unlocked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int16\",\"name\":\"wordPosition\",\"type\":\"int16\"}],\"name\":\"tickBitmap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"ticks\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"liquidityGross\",\"type\":\"uint128\"},{\"internalType\":\"int128\",\"name\":\"liquidityNet\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthOutside0X128\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthOutside1X128\",\"type\":\"uint256\"},{\"internalType\":\"int56\",\"name\":\"tickCumulativeOutside\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityOutsideX128\",\"type\":\"uint160\"},{\"internalType\":\"uint32\",\"name\":\"secondsOutside\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"feeGrowthGlobal0X128()\":{\"details\":\"This value can overflow the uint256\"},\"feeGrowthGlobal1X128()\":{\"details\":\"This value can overflow the uint256\"},\"liquidity()\":{\"details\":\"This value has no relationship to the total liquidity across all ticks\"},\"observations(uint256)\":{\"details\":\"You most likely want to use #observe() instead of this method to get an observation as of some amount of time ago, rather than at a specific index in the array.\",\"params\":{\"index\":\"The element of the observations array to fetch\"},\"returns\":{\"blockTimestamp\":\"The timestamp of the observation, Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp, Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp, Returns initialized whether the observation has been initialized and the values are safe to use\"}},\"positions(bytes32)\":{\"params\":{\"key\":\"The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\"},\"returns\":{\"_liquidity\":\"The amount of liquidity in the position, Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke, Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke, Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke, Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\"}},\"protocolFees()\":{\"details\":\"Protocol fees will never exceed uint128 max in either token\"},\"slot0()\":{\"returns\":{\"sqrtPriceX96\":\"The current price of the pool as a sqrt(token1/token0) Q64.96 value tick The current tick of the pool, i.e. according to the last tick transition that was run. This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick boundary. observationIndex The index of the last oracle observation that was written, observationCardinality The current maximum number of observations stored in the pool, observationCardinalityNext The next maximum number of observations, to be updated when the observation. feeProtocol The protocol fee for both tokens of the pool. Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0 is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee. unlocked Whether the pool is currently locked to reentrancy\"}},\"ticks(int24)\":{\"params\":{\"tick\":\"The tick to look up\"},\"returns\":{\"liquidityGross\":\"the total amount of position liquidity that uses the pool either as tick lower or tick upper, liquidityNet how much liquidity changes when the pool price crosses the tick, feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0, feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1, tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick, secondsOutside the seconds spent on the other side of the tick from the current tick, initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false. Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0. In addition, these values are only relative and must be used only in comparison to previous snapshots for a specific position.\"}}},\"title\":\"Pool state that can change\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"feeGrowthGlobal0X128()\":{\"notice\":\"The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\"},\"feeGrowthGlobal1X128()\":{\"notice\":\"The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\"},\"liquidity()\":{\"notice\":\"The currently in range liquidity available to the pool\"},\"observations(uint256)\":{\"notice\":\"Returns data about a specific observation index\"},\"positions(bytes32)\":{\"notice\":\"Returns the information about a position by the position's key\"},\"protocolFees()\":{\"notice\":\"The amounts of token0 and token1 that are owed to the protocol\"},\"slot0()\":{\"notice\":\"The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas when accessed externally.\"},\"tickBitmap(int16)\":{\"notice\":\"Returns 256 packed tick initialized boolean values. See TickBitmap for more information\"},\"ticks(int24)\":{\"notice\":\"Look up information about a specific tick in the pool\"}},\"notice\":\"These methods compose the pool's state, and can change with any frequency including multiple times per transaction\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol\":\"IUniswapV3PoolState\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that can change\\n/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\\n/// per transaction\\ninterface IUniswapV3PoolState {\\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\\n    /// when accessed externally.\\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\\n    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\\n    /// boundary.\\n    /// observationIndex The index of the last oracle observation that was written,\\n    /// observationCardinality The current maximum number of observations stored in the pool,\\n    /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\\n    /// feeProtocol The protocol fee for both tokens of the pool.\\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\\n    /// unlocked Whether the pool is currently locked to reentrancy\\n    function slot0()\\n        external\\n        view\\n        returns (\\n            uint160 sqrtPriceX96,\\n            int24 tick,\\n            uint16 observationIndex,\\n            uint16 observationCardinality,\\n            uint16 observationCardinalityNext,\\n            uint8 feeProtocol,\\n            bool unlocked\\n        );\\n\\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal0X128() external view returns (uint256);\\n\\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal1X128() external view returns (uint256);\\n\\n    /// @notice The amounts of token0 and token1 that are owed to the protocol\\n    /// @dev Protocol fees will never exceed uint128 max in either token\\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\\n\\n    /// @notice The currently in range liquidity available to the pool\\n    /// @dev This value has no relationship to the total liquidity across all ticks\\n    function liquidity() external view returns (uint128);\\n\\n    /// @notice Look up information about a specific tick in the pool\\n    /// @param tick The tick to look up\\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\\n    /// tick upper,\\n    /// liquidityNet how much liquidity changes when the pool price crosses the tick,\\n    /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\\n    /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\\n    /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\\n    /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\\n    /// secondsOutside the seconds spent on the other side of the tick from the current tick,\\n    /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\\n    /// a specific position.\\n    function ticks(int24 tick)\\n        external\\n        view\\n        returns (\\n            uint128 liquidityGross,\\n            int128 liquidityNet,\\n            uint256 feeGrowthOutside0X128,\\n            uint256 feeGrowthOutside1X128,\\n            int56 tickCumulativeOutside,\\n            uint160 secondsPerLiquidityOutsideX128,\\n            uint32 secondsOutside,\\n            bool initialized\\n        );\\n\\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\\n\\n    /// @notice Returns the information about a position by the position's key\\n    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\\n    /// @return _liquidity The amount of liquidity in the position,\\n    /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\\n    /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\\n    /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\\n    /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\\n    function positions(bytes32 key)\\n        external\\n        view\\n        returns (\\n            uint128 _liquidity,\\n            uint256 feeGrowthInside0LastX128,\\n            uint256 feeGrowthInside1LastX128,\\n            uint128 tokensOwed0,\\n            uint128 tokensOwed1\\n        );\\n\\n    /// @notice Returns data about a specific observation index\\n    /// @param index The element of the observations array to fetch\\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\\n    /// ago, rather than at a specific index in the array.\\n    /// @return blockTimestamp The timestamp of the observation,\\n    /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\\n    /// Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\\n    /// Returns initialized whether the observation has been initialized and the values are safe to use\\n    function observations(uint256 index)\\n        external\\n        view\\n        returns (\\n            uint32 blockTimestamp,\\n            int56 tickCumulative,\\n            uint160 secondsPerLiquidityCumulativeX128,\\n            bool initialized\\n        );\\n}\\n\",\"keccak256\":\"0x852dc1f5df7dcf7f11e7bb3eed79f0cea72ad4b25f6a9d2c35aafb48925fd49f\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"feeGrowthGlobal0X128()":{"notice":"The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool"},"feeGrowthGlobal1X128()":{"notice":"The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool"},"liquidity()":{"notice":"The currently in range liquidity available to the pool"},"observations(uint256)":{"notice":"Returns data about a specific observation index"},"positions(bytes32)":{"notice":"Returns the information about a position by the position's key"},"protocolFees()":{"notice":"The amounts of token0 and token1 that are owed to the protocol"},"slot0()":{"notice":"The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas when accessed externally."},"tickBitmap(int16)":{"notice":"Returns 256 packed tick initialized boolean values. See TickBitmap for more information"},"ticks(int24)":{"notice":"Look up information about a specific tick in the pool"}},"notice":"These methods compose the pool's state, and can change with any frequency including multiple times per transaction","version":1}}},"@uniswap/v3-core/contracts/libraries/TickMath.sol":{"TickMath":{"abi":[],"devdoc":{"kind":"dev","methods":{},"stateVariables":{"MAX_SQRT_RATIO":{"details":"The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)"},"MAX_TICK":{"details":"The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128"},"MIN_SQRT_RATIO":{"details":"The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)"},"MIN_TICK":{"details":"The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128"}},"title":"Math library for computing sqrt prices from ticks and vice versa","version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220d9134836b885f0a9fd4b249b400faa10e84305e8ad0ccad36352dc5b2b23307764736f6c63430007060033","opcodes":"PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD9 SGT 0x48 CALLDATASIZE 0xB8 DUP6 CREATE 0xA9 REVERT 0x4B 0x24 SWAP12 BLOCKHASH 0xF 0xAA LT 0xE8 NUMBER SDIV 0xE8 0xAD 0xC 0xCA 0xD3 PUSH4 0x52DC5B2B 0x23 ADDRESS PUSH24 0x64736F6C6343000706003300000000000000000000000000 ","sourceMap":"306:8331:21:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220d9134836b885f0a9fd4b249b400faa10e84305e8ad0ccad36352dc5b2b23307764736f6c63430007060033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD9 SGT 0x48 CALLDATASIZE 0xB8 DUP6 CREATE 0xA9 REVERT 0x4B 0x24 SWAP12 BLOCKHASH 0xF 0xAA LT 0xE8 NUMBER SDIV 0xE8 0xAD 0xC 0xCA 0xD3 PUSH4 0x52DC5B2B 0x23 ADDRESS PUSH24 0x64736F6C6343000706003300000000000000000000000000 ","sourceMap":"306:8331:21:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"getSqrtRatioAtTick(int24)":"infinite","getTickAtSqrtRatio(uint160)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"MAX_SQRT_RATIO\":{\"details\":\"The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\"},\"MAX_TICK\":{\"details\":\"The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\"},\"MIN_SQRT_RATIO\":{\"details\":\"The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\"},\"MIN_TICK\":{\"details\":\"The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\"}},\"title\":\"Math library for computing sqrt prices from ticks and vice versa\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports prices between 2**-128 and 2**128\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-core/contracts/libraries/TickMath.sol\":\"TickMath\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-core/contracts/libraries/TickMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Math library for computing sqrt prices from ticks and vice versa\\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\\n/// prices between 2**-128 and 2**128\\nlibrary TickMath {\\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\\n    int24 internal constant MIN_TICK = -887272;\\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\\n    int24 internal constant MAX_TICK = -MIN_TICK;\\n\\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\\n\\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\\n    /// @dev Throws if |tick| > max tick\\n    /// @param tick The input tick for the above formula\\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\\n    /// at the given tick\\n    function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\\n        uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\\n        require(absTick <= uint256(MAX_TICK), 'T');\\n\\n        uint256 ratio = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\\n        if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\\n        if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\\n        if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\\n        if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\\n        if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\\n        if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\\n        if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\\n        if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\\n        if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\\n        if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\\n        if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\\n        if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\\n        if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\\n        if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\\n        if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\\n        if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\\n        if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\\n        if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\\n        if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\\n\\n        if (tick > 0) ratio = type(uint256).max / ratio;\\n\\n        // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\\n        // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\\n        // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\\n        sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\\n    }\\n\\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\\n    /// ever return.\\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\\n        // second inequality must be < because the price can never reach the price at the max tick\\n        require(sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO, 'R');\\n        uint256 ratio = uint256(sqrtPriceX96) << 32;\\n\\n        uint256 r = ratio;\\n        uint256 msb = 0;\\n\\n        assembly {\\n            let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(5, gt(r, 0xFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(4, gt(r, 0xFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(3, gt(r, 0xFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(2, gt(r, 0xF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(1, gt(r, 0x3))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := gt(r, 0x1)\\n            msb := or(msb, f)\\n        }\\n\\n        if (msb >= 128) r = ratio >> (msb - 127);\\n        else r = ratio << (127 - msb);\\n\\n        int256 log_2 = (int256(msb) - 128) << 64;\\n\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(63, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(62, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(61, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(60, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(59, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(58, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(57, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(56, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(55, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(54, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(53, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(52, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(51, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(50, f))\\n        }\\n\\n        int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\\n\\n        int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\\n        int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\\n\\n        tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\\n    }\\n}\\n\",\"keccak256\":\"0x1f864a2bf61ba05f3173eaf2e3f94c5e1da4bec0554757527b6d1ef1fe439e4e\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports prices between 2**-128 and 2**128","version":1}}},"@uniswap/v3-periphery/contracts/interfaces/IERC721Permit.sol":{"IERC721Permit":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[],"name":"DOMAIN_SEPARATOR","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"PERMIT_TYPEHASH","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"operator","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"owner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"permit","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"_approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"DOMAIN_SEPARATOR()":{"returns":{"_0":"The domain seperator used in encoding of permit signature"}},"PERMIT_TYPEHASH()":{"returns":{"_0":"The typehash for the permit"}},"approve(address,uint256)":{"details":"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the number of tokens in ``owner``'s account."},"getApproved(uint256)":{"details":"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."},"isApprovedForAll(address,address)":{"details":"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"},"ownerOf(uint256)":{"details":"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."},"permit(address,uint256,uint256,uint8,bytes32,bytes32)":{"params":{"deadline":"The deadline timestamp by which the call must be mined for the approve to work","r":"Must produce valid secp256k1 signature from the holder along with `v` and `s`","s":"Must produce valid secp256k1 signature from the holder along with `r` and `v`","spender":"The account that is being approved","tokenId":"The ID of the token that is being approved for spending","v":"Must produce valid secp256k1 signature from the holder along with `r` and `s`"}},"safeTransferFrom(address,address,uint256)":{"details":"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"setApprovalForAll(address,bool)":{"details":"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."},"transferFrom(address,address,uint256)":{"details":"Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."}},"title":"ERC721 with permit","version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"DOMAIN_SEPARATOR()":"3644e515","PERMIT_TYPEHASH()":"30adf81f","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","ownerOf(uint256)":"6352211e","permit(address,uint256,uint256,uint8,bytes32,bytes32)":"7ac2ff7b","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"returns\":{\"_0\":\"The domain seperator used in encoding of permit signature\"}},\"PERMIT_TYPEHASH()\":{\"returns\":{\"_0\":\"The typehash for the permit\"}},\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"permit(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"deadline\":\"The deadline timestamp by which the call must be mined for the approve to work\",\"r\":\"Must produce valid secp256k1 signature from the holder along with `v` and `s`\",\"s\":\"Must produce valid secp256k1 signature from the holder along with `r` and `v`\",\"spender\":\"The account that is being approved\",\"tokenId\":\"The ID of the token that is being approved for spending\",\"v\":\"Must produce valid secp256k1 signature from the holder along with `r` and `s`\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"title\":\"ERC721 with permit\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"notice\":\"The domain separator used in the permit signature\"},\"PERMIT_TYPEHASH()\":{\"notice\":\"The permit typehash used in the permit signature\"},\"permit(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Approve of a specific token ID for spending by spender via signature\"}},\"notice\":\"Extension to ERC721 that includes a permit function for signature based approvals\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-periphery/contracts/interfaces/IERC721Permit.sol\":\"IERC721Permit\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xf70bc25d981e4ec9673a995ad2995d5d493ea188d3d8f388bba9c227ce09fb82\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x2d99a0deb6648c34fbc66d6ac4a2d64798d7a5321b45624f6736fadc63da1962\",\"license\":\"MIT\"},\"@uniswap/v3-periphery/contracts/interfaces/IERC721Permit.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\n\\n/// @title ERC721 with permit\\n/// @notice Extension to ERC721 that includes a permit function for signature based approvals\\ninterface IERC721Permit is IERC721 {\\n    /// @notice The permit typehash used in the permit signature\\n    /// @return The typehash for the permit\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    /// @notice The domain separator used in the permit signature\\n    /// @return The domain seperator used in encoding of permit signature\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    /// @notice Approve of a specific token ID for spending by spender via signature\\n    /// @param spender The account that is being approved\\n    /// @param tokenId The ID of the token that is being approved for spending\\n    /// @param deadline The deadline timestamp by which the call must be mined for the approve to work\\n    /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\\n    /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\\n    /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\\n    function permit(\\n        address spender,\\n        uint256 tokenId,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x9e3c2a4ee65ddf95b2dfcb0815784eea3a295707e6f8b83e4c4f0f8fe2e3a1d4\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"DOMAIN_SEPARATOR()":{"notice":"The domain separator used in the permit signature"},"PERMIT_TYPEHASH()":{"notice":"The permit typehash used in the permit signature"},"permit(address,uint256,uint256,uint8,bytes32,bytes32)":{"notice":"Approve of a specific token ID for spending by spender via signature"}},"notice":"Extension to ERC721 that includes a permit function for signature based approvals","version":1}}},"@uniswap/v3-periphery/contracts/interfaces/INonfungiblePositionManager.sol":{"INonfungiblePositionManager":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"},{"indexed":false,"internalType":"address","name":"recipient","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount0","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount1","type":"uint256"}],"name":"Collect","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"},{"indexed":false,"internalType":"uint128","name":"liquidity","type":"uint128"},{"indexed":false,"internalType":"uint256","name":"amount0","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount1","type":"uint256"}],"name":"DecreaseLiquidity","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"},{"indexed":false,"internalType":"uint128","name":"liquidity","type":"uint128"},{"indexed":false,"internalType":"uint256","name":"amount0","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount1","type":"uint256"}],"name":"IncreaseLiquidity","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[],"name":"DOMAIN_SEPARATOR","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"PERMIT_TYPEHASH","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"pure","type":"function"},{"inputs":[],"name":"WETH9","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"burn","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint128","name":"amount0Max","type":"uint128"},{"internalType":"uint128","name":"amount1Max","type":"uint128"}],"internalType":"struct INonfungiblePositionManager.CollectParams","name":"params","type":"tuple"}],"name":"collect","outputs":[{"internalType":"uint256","name":"amount0","type":"uint256"},{"internalType":"uint256","name":"amount1","type":"uint256"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"token0","type":"address"},{"internalType":"address","name":"token1","type":"address"},{"internalType":"uint24","name":"fee","type":"uint24"},{"internalType":"uint160","name":"sqrtPriceX96","type":"uint160"}],"name":"createAndInitializePoolIfNecessary","outputs":[{"internalType":"address","name":"pool","type":"address"}],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"uint128","name":"liquidity","type":"uint128"},{"internalType":"uint256","name":"amount0Min","type":"uint256"},{"internalType":"uint256","name":"amount1Min","type":"uint256"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"internalType":"struct INonfungiblePositionManager.DecreaseLiquidityParams","name":"params","type":"tuple"}],"name":"decreaseLiquidity","outputs":[{"internalType":"uint256","name":"amount0","type":"uint256"},{"internalType":"uint256","name":"amount1","type":"uint256"}],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"factory","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"operator","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"uint256","name":"amount0Desired","type":"uint256"},{"internalType":"uint256","name":"amount1Desired","type":"uint256"},{"internalType":"uint256","name":"amount0Min","type":"uint256"},{"internalType":"uint256","name":"amount1Min","type":"uint256"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"internalType":"struct INonfungiblePositionManager.IncreaseLiquidityParams","name":"params","type":"tuple"}],"name":"increaseLiquidity","outputs":[{"internalType":"uint128","name":"liquidity","type":"uint128"},{"internalType":"uint256","name":"amount0","type":"uint256"},{"internalType":"uint256","name":"amount1","type":"uint256"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"token0","type":"address"},{"internalType":"address","name":"token1","type":"address"},{"internalType":"uint24","name":"fee","type":"uint24"},{"internalType":"int24","name":"tickLower","type":"int24"},{"internalType":"int24","name":"tickUpper","type":"int24"},{"internalType":"uint256","name":"amount0Desired","type":"uint256"},{"internalType":"uint256","name":"amount1Desired","type":"uint256"},{"internalType":"uint256","name":"amount0Min","type":"uint256"},{"internalType":"uint256","name":"amount1Min","type":"uint256"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"internalType":"struct INonfungiblePositionManager.MintParams","name":"params","type":"tuple"}],"name":"mint","outputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"uint128","name":"liquidity","type":"uint128"},{"internalType":"uint256","name":"amount0","type":"uint256"},{"internalType":"uint256","name":"amount1","type":"uint256"}],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"owner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"permit","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"positions","outputs":[{"internalType":"uint96","name":"nonce","type":"uint96"},{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"token0","type":"address"},{"internalType":"address","name":"token1","type":"address"},{"internalType":"uint24","name":"fee","type":"uint24"},{"internalType":"int24","name":"tickLower","type":"int24"},{"internalType":"int24","name":"tickUpper","type":"int24"},{"internalType":"uint128","name":"liquidity","type":"uint128"},{"internalType":"uint256","name":"feeGrowthInside0LastX128","type":"uint256"},{"internalType":"uint256","name":"feeGrowthInside1LastX128","type":"uint256"},{"internalType":"uint128","name":"tokensOwed0","type":"uint128"},{"internalType":"uint128","name":"tokensOwed1","type":"uint128"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"refundETH","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"_approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"amountMinimum","type":"uint256"},{"internalType":"address","name":"recipient","type":"address"}],"name":"sweepToken","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"index","type":"uint256"}],"name":"tokenByIndex","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"uint256","name":"index","type":"uint256"}],"name":"tokenOfOwnerByIndex","outputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amountMinimum","type":"uint256"},{"internalType":"address","name":"recipient","type":"address"}],"name":"unwrapWETH9","outputs":[],"stateMutability":"payable","type":"function"}],"devdoc":{"events":{"Collect(uint256,address,uint256,uint256)":{"details":"The amounts reported may not be exactly equivalent to the amounts transferred, due to rounding behavior","params":{"amount0":"The amount of token0 owed to the position that was collected","amount1":"The amount of token1 owed to the position that was collected","recipient":"The address of the account that received the collected tokens","tokenId":"The ID of the token for which underlying tokens were collected"}},"DecreaseLiquidity(uint256,uint128,uint256,uint256)":{"params":{"amount0":"The amount of token0 that was accounted for the decrease in liquidity","amount1":"The amount of token1 that was accounted for the decrease in liquidity","liquidity":"The amount by which liquidity for the NFT position was decreased","tokenId":"The ID of the token for which liquidity was decreased"}},"IncreaseLiquidity(uint256,uint128,uint256,uint256)":{"details":"Also emitted when a token is minted","params":{"amount0":"The amount of token0 that was paid for the increase in liquidity","amount1":"The amount of token1 that was paid for the increase in liquidity","liquidity":"The amount by which liquidity for the NFT position was increased","tokenId":"The ID of the token for which liquidity was increased"}}},"kind":"dev","methods":{"DOMAIN_SEPARATOR()":{"returns":{"_0":"The domain seperator used in encoding of permit signature"}},"PERMIT_TYPEHASH()":{"returns":{"_0":"The typehash for the permit"}},"WETH9()":{"returns":{"_0":"Returns the address of WETH9"}},"approve(address,uint256)":{"details":"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the number of tokens in ``owner``'s account."},"burn(uint256)":{"params":{"tokenId":"The ID of the token that is being burned"}},"collect((uint256,address,uint128,uint128))":{"params":{"params":"tokenId The ID of the NFT for which tokens are being collected, recipient The account that should receive the tokens, amount0Max The maximum amount of token0 to collect, amount1Max The maximum amount of token1 to collect"},"returns":{"amount0":"The amount of fees collected in token0","amount1":"The amount of fees collected in token1"}},"createAndInitializePoolIfNecessary(address,address,uint24,uint160)":{"details":"This method can be bundled with others via IMulticall for the first action (e.g. mint) performed against a pool","params":{"fee":"The fee amount of the v3 pool for the specified token pair","sqrtPriceX96":"The initial square root price of the pool as a Q64.96 value","token0":"The contract address of token0 of the pool","token1":"The contract address of token1 of the pool"},"returns":{"pool":"Returns the pool address based on the pair of tokens and fee, will return the newly created pool address if necessary"}},"decreaseLiquidity((uint256,uint128,uint256,uint256,uint256))":{"params":{"params":"tokenId The ID of the token for which liquidity is being decreased, amount The amount by which liquidity will be decreased, amount0Min The minimum amount of token0 that should be accounted for the burned liquidity, amount1Min The minimum amount of token1 that should be accounted for the burned liquidity, deadline The time by which the transaction must be included to effect the change"},"returns":{"amount0":"The amount of token0 accounted to the position's tokens owed","amount1":"The amount of token1 accounted to the position's tokens owed"}},"factory()":{"returns":{"_0":"Returns the address of the Uniswap V3 factory"}},"getApproved(uint256)":{"details":"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."},"increaseLiquidity((uint256,uint256,uint256,uint256,uint256,uint256))":{"params":{"params":"tokenId The ID of the token for which liquidity is being increased, amount0Desired The desired amount of token0 to be spent, amount1Desired The desired amount of token1 to be spent, amount0Min The minimum amount of token0 to spend, which serves as a slippage check, amount1Min The minimum amount of token1 to spend, which serves as a slippage check, deadline The time by which the transaction must be included to effect the change"},"returns":{"amount0":"The amount of token0 to acheive resulting liquidity","amount1":"The amount of token1 to acheive resulting liquidity","liquidity":"The new liquidity amount as a result of the increase"}},"isApprovedForAll(address,address)":{"details":"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"},"mint((address,address,uint24,int24,int24,uint256,uint256,uint256,uint256,address,uint256))":{"details":"Call this when the pool does exist and is initialized. Note that if the pool is created but not initialized a method does not exist, i.e. the pool is assumed to be initialized.","params":{"params":"The params necessary to mint a position, encoded as `MintParams` in calldata"},"returns":{"amount0":"The amount of token0","amount1":"The amount of token1","liquidity":"The amount of liquidity for this position","tokenId":"The ID of the token that represents the minted position"}},"name()":{"details":"Returns the token collection name."},"ownerOf(uint256)":{"details":"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."},"permit(address,uint256,uint256,uint8,bytes32,bytes32)":{"params":{"deadline":"The deadline timestamp by which the call must be mined for the approve to work","r":"Must produce valid secp256k1 signature from the holder along with `v` and `s`","s":"Must produce valid secp256k1 signature from the holder along with `r` and `v`","spender":"The account that is being approved","tokenId":"The ID of the token that is being approved for spending","v":"Must produce valid secp256k1 signature from the holder along with `r` and `s`"}},"positions(uint256)":{"details":"Throws if the token ID is not valid.","params":{"tokenId":"The ID of the token that represents the position"},"returns":{"fee":"The fee associated with the pool","feeGrowthInside0LastX128":"The fee growth of token0 as of the last action on the individual position","feeGrowthInside1LastX128":"The fee growth of token1 as of the last action on the individual position","liquidity":"The liquidity of the position","nonce":"The nonce for permits","operator":"The address that is approved for spending","tickLower":"The lower end of the tick range for the position","tickUpper":"The higher end of the tick range for the position","token0":"The address of the token0 for a specific pool","token1":"The address of the token1 for a specific pool","tokensOwed0":"The uncollected amount of token0 owed to the position as of the last computation","tokensOwed1":"The uncollected amount of token1 owed to the position as of the last computation"}},"refundETH()":{"details":"Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps that use ether for the input amount"},"safeTransferFrom(address,address,uint256)":{"details":"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"setApprovalForAll(address,bool)":{"details":"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."},"sweepToken(address,uint256,address)":{"details":"The amountMinimum parameter prevents malicious contracts from stealing the token from users","params":{"amountMinimum":"The minimum amount of token required for a transfer","recipient":"The destination address of the token","token":"The contract address of the token which will be transferred to `recipient`"}},"symbol()":{"details":"Returns the token collection symbol."},"tokenByIndex(uint256)":{"details":"Returns a token ID at a given `index` of all the tokens stored by the contract. Use along with {totalSupply} to enumerate all tokens."},"tokenOfOwnerByIndex(address,uint256)":{"details":"Returns a token ID owned by `owner` at a given `index` of its token list. Use along with {balanceOf} to enumerate all of ``owner``'s tokens."},"tokenURI(uint256)":{"details":"Returns the Uniform Resource Identifier (URI) for `tokenId` token."},"totalSupply()":{"details":"Returns the total amount of tokens stored by the contract."},"transferFrom(address,address,uint256)":{"details":"Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."},"unwrapWETH9(uint256,address)":{"details":"The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.","params":{"amountMinimum":"The minimum amount of WETH9 to unwrap","recipient":"The address receiving ETH"}}},"title":"Non-fungible token for positions","version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"DOMAIN_SEPARATOR()":"3644e515","PERMIT_TYPEHASH()":"30adf81f","WETH9()":"4aa4a4fc","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","burn(uint256)":"42966c68","collect((uint256,address,uint128,uint128))":"fc6f7865","createAndInitializePoolIfNecessary(address,address,uint24,uint160)":"13ead562","decreaseLiquidity((uint256,uint128,uint256,uint256,uint256))":"0c49ccbe","factory()":"c45a0155","getApproved(uint256)":"081812fc","increaseLiquidity((uint256,uint256,uint256,uint256,uint256,uint256))":"219f5d17","isApprovedForAll(address,address)":"e985e9c5","mint((address,address,uint24,int24,int24,uint256,uint256,uint256,uint256,address,uint256))":"88316456","name()":"06fdde03","ownerOf(uint256)":"6352211e","permit(address,uint256,uint256,uint8,bytes32,bytes32)":"7ac2ff7b","positions(uint256)":"99fbab88","refundETH()":"12210e8a","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","sweepToken(address,uint256,address)":"df2ab5bb","symbol()":"95d89b41","tokenByIndex(uint256)":"4f6ccce7","tokenOfOwnerByIndex(address,uint256)":"2f745c59","tokenURI(uint256)":"c87b56dd","totalSupply()":"18160ddd","transferFrom(address,address,uint256)":"23b872dd","unwrapWETH9(uint256,address)":"49404b7c"}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Collect\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"DecreaseLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"IncreaseLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH9\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"amount0Max\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1Max\",\"type\":\"uint128\"}],\"internalType\":\"struct INonfungiblePositionManager.CollectParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"collect\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"}],\"name\":\"createAndInitializePoolIfNecessary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"amount0Min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct INonfungiblePositionManager.DecreaseLiquidityParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"decreaseLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount0Desired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Desired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount0Min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct INonfungiblePositionManager.IncreaseLiquidityParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"increaseLiquidity\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint256\",\"name\":\"amount0Desired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Desired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount0Min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Min\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct INonfungiblePositionManager.MintParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"positions\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"nonce\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthInside0LastX128\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthInside1LastX128\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"tokensOwed0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"tokensOwed1\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refundETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountMinimum\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"sweepToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountMinimum\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"unwrapWETH9\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Collect(uint256,address,uint256,uint256)\":{\"details\":\"The amounts reported may not be exactly equivalent to the amounts transferred, due to rounding behavior\",\"params\":{\"amount0\":\"The amount of token0 owed to the position that was collected\",\"amount1\":\"The amount of token1 owed to the position that was collected\",\"recipient\":\"The address of the account that received the collected tokens\",\"tokenId\":\"The ID of the token for which underlying tokens were collected\"}},\"DecreaseLiquidity(uint256,uint128,uint256,uint256)\":{\"params\":{\"amount0\":\"The amount of token0 that was accounted for the decrease in liquidity\",\"amount1\":\"The amount of token1 that was accounted for the decrease in liquidity\",\"liquidity\":\"The amount by which liquidity for the NFT position was decreased\",\"tokenId\":\"The ID of the token for which liquidity was decreased\"}},\"IncreaseLiquidity(uint256,uint128,uint256,uint256)\":{\"details\":\"Also emitted when a token is minted\",\"params\":{\"amount0\":\"The amount of token0 that was paid for the increase in liquidity\",\"amount1\":\"The amount of token1 that was paid for the increase in liquidity\",\"liquidity\":\"The amount by which liquidity for the NFT position was increased\",\"tokenId\":\"The ID of the token for which liquidity was increased\"}}},\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"returns\":{\"_0\":\"The domain seperator used in encoding of permit signature\"}},\"PERMIT_TYPEHASH()\":{\"returns\":{\"_0\":\"The typehash for the permit\"}},\"WETH9()\":{\"returns\":{\"_0\":\"Returns the address of WETH9\"}},\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"burn(uint256)\":{\"params\":{\"tokenId\":\"The ID of the token that is being burned\"}},\"collect((uint256,address,uint128,uint128))\":{\"params\":{\"params\":\"tokenId The ID of the NFT for which tokens are being collected, recipient The account that should receive the tokens, amount0Max The maximum amount of token0 to collect, amount1Max The maximum amount of token1 to collect\"},\"returns\":{\"amount0\":\"The amount of fees collected in token0\",\"amount1\":\"The amount of fees collected in token1\"}},\"createAndInitializePoolIfNecessary(address,address,uint24,uint160)\":{\"details\":\"This method can be bundled with others via IMulticall for the first action (e.g. mint) performed against a pool\",\"params\":{\"fee\":\"The fee amount of the v3 pool for the specified token pair\",\"sqrtPriceX96\":\"The initial square root price of the pool as a Q64.96 value\",\"token0\":\"The contract address of token0 of the pool\",\"token1\":\"The contract address of token1 of the pool\"},\"returns\":{\"pool\":\"Returns the pool address based on the pair of tokens and fee, will return the newly created pool address if necessary\"}},\"decreaseLiquidity((uint256,uint128,uint256,uint256,uint256))\":{\"params\":{\"params\":\"tokenId The ID of the token for which liquidity is being decreased, amount The amount by which liquidity will be decreased, amount0Min The minimum amount of token0 that should be accounted for the burned liquidity, amount1Min The minimum amount of token1 that should be accounted for the burned liquidity, deadline The time by which the transaction must be included to effect the change\"},\"returns\":{\"amount0\":\"The amount of token0 accounted to the position's tokens owed\",\"amount1\":\"The amount of token1 accounted to the position's tokens owed\"}},\"factory()\":{\"returns\":{\"_0\":\"Returns the address of the Uniswap V3 factory\"}},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"increaseLiquidity((uint256,uint256,uint256,uint256,uint256,uint256))\":{\"params\":{\"params\":\"tokenId The ID of the token for which liquidity is being increased, amount0Desired The desired amount of token0 to be spent, amount1Desired The desired amount of token1 to be spent, amount0Min The minimum amount of token0 to spend, which serves as a slippage check, amount1Min The minimum amount of token1 to spend, which serves as a slippage check, deadline The time by which the transaction must be included to effect the change\"},\"returns\":{\"amount0\":\"The amount of token0 to acheive resulting liquidity\",\"amount1\":\"The amount of token1 to acheive resulting liquidity\",\"liquidity\":\"The new liquidity amount as a result of the increase\"}},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"mint((address,address,uint24,int24,int24,uint256,uint256,uint256,uint256,address,uint256))\":{\"details\":\"Call this when the pool does exist and is initialized. Note that if the pool is created but not initialized a method does not exist, i.e. the pool is assumed to be initialized.\",\"params\":{\"params\":\"The params necessary to mint a position, encoded as `MintParams` in calldata\"},\"returns\":{\"amount0\":\"The amount of token0\",\"amount1\":\"The amount of token1\",\"liquidity\":\"The amount of liquidity for this position\",\"tokenId\":\"The ID of the token that represents the minted position\"}},\"name()\":{\"details\":\"Returns the token collection name.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"permit(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"deadline\":\"The deadline timestamp by which the call must be mined for the approve to work\",\"r\":\"Must produce valid secp256k1 signature from the holder along with `v` and `s`\",\"s\":\"Must produce valid secp256k1 signature from the holder along with `r` and `v`\",\"spender\":\"The account that is being approved\",\"tokenId\":\"The ID of the token that is being approved for spending\",\"v\":\"Must produce valid secp256k1 signature from the holder along with `r` and `s`\"}},\"positions(uint256)\":{\"details\":\"Throws if the token ID is not valid.\",\"params\":{\"tokenId\":\"The ID of the token that represents the position\"},\"returns\":{\"fee\":\"The fee associated with the pool\",\"feeGrowthInside0LastX128\":\"The fee growth of token0 as of the last action on the individual position\",\"feeGrowthInside1LastX128\":\"The fee growth of token1 as of the last action on the individual position\",\"liquidity\":\"The liquidity of the position\",\"nonce\":\"The nonce for permits\",\"operator\":\"The address that is approved for spending\",\"tickLower\":\"The lower end of the tick range for the position\",\"tickUpper\":\"The higher end of the tick range for the position\",\"token0\":\"The address of the token0 for a specific pool\",\"token1\":\"The address of the token1 for a specific pool\",\"tokensOwed0\":\"The uncollected amount of token0 owed to the position as of the last computation\",\"tokensOwed1\":\"The uncollected amount of token1 owed to the position as of the last computation\"}},\"refundETH()\":{\"details\":\"Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps that use ether for the input amount\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"sweepToken(address,uint256,address)\":{\"details\":\"The amountMinimum parameter prevents malicious contracts from stealing the token from users\",\"params\":{\"amountMinimum\":\"The minimum amount of token required for a transfer\",\"recipient\":\"The destination address of the token\",\"token\":\"The contract address of the token which will be transferred to `recipient`\"}},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenByIndex(uint256)\":{\"details\":\"Returns a token ID at a given `index` of all the tokens stored by the contract. Use along with {totalSupply} to enumerate all tokens.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"Returns a token ID owned by `owner` at a given `index` of its token list. Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\"},\"tokenURI(uint256)\":{\"details\":\"Returns the Uniform Resource Identifier (URI) for `tokenId` token.\"},\"totalSupply()\":{\"details\":\"Returns the total amount of tokens stored by the contract.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"},\"unwrapWETH9(uint256,address)\":{\"details\":\"The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.\",\"params\":{\"amountMinimum\":\"The minimum amount of WETH9 to unwrap\",\"recipient\":\"The address receiving ETH\"}}},\"title\":\"Non-fungible token for positions\",\"version\":1},\"userdoc\":{\"events\":{\"Collect(uint256,address,uint256,uint256)\":{\"notice\":\"Emitted when tokens are collected for a position NFT\"},\"DecreaseLiquidity(uint256,uint128,uint256,uint256)\":{\"notice\":\"Emitted when liquidity is decreased for a position NFT\"},\"IncreaseLiquidity(uint256,uint128,uint256,uint256)\":{\"notice\":\"Emitted when liquidity is increased for a position NFT\"}},\"kind\":\"user\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"notice\":\"The domain separator used in the permit signature\"},\"PERMIT_TYPEHASH()\":{\"notice\":\"The permit typehash used in the permit signature\"},\"burn(uint256)\":{\"notice\":\"Burns a token ID, which deletes it from the NFT contract. The token must have 0 liquidity and all tokens must be collected first.\"},\"collect((uint256,address,uint128,uint128))\":{\"notice\":\"Collects up to a maximum amount of fees owed to a specific position to the recipient\"},\"createAndInitializePoolIfNecessary(address,address,uint24,uint160)\":{\"notice\":\"Creates a new pool if it does not exist, then initializes if not initialized\"},\"decreaseLiquidity((uint256,uint128,uint256,uint256,uint256))\":{\"notice\":\"Decreases the amount of liquidity in a position and accounts it to the position\"},\"increaseLiquidity((uint256,uint256,uint256,uint256,uint256,uint256))\":{\"notice\":\"Increases the amount of liquidity in a position, with tokens paid by the `msg.sender`\"},\"mint((address,address,uint24,int24,int24,uint256,uint256,uint256,uint256,address,uint256))\":{\"notice\":\"Creates a new position wrapped in a NFT\"},\"permit(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Approve of a specific token ID for spending by spender via signature\"},\"positions(uint256)\":{\"notice\":\"Returns the position information associated with a given token ID.\"},\"refundETH()\":{\"notice\":\"Refunds any ETH balance held by this contract to the `msg.sender`\"},\"sweepToken(address,uint256,address)\":{\"notice\":\"Transfers the full amount of a token held by this contract to recipient\"},\"unwrapWETH9(uint256,address)\":{\"notice\":\"Unwraps the contract's WETH9 balance and sends it to recipient as ETH.\"}},\"notice\":\"Wraps Uniswap V3 positions in a non-fungible token interface which allows for them to be transferred and authorized.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-periphery/contracts/interfaces/INonfungiblePositionManager.sol\":\"INonfungiblePositionManager\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xf70bc25d981e4ec9673a995ad2995d5d493ea188d3d8f388bba9c227ce09fb82\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x2d99a0deb6648c34fbc66d6ac4a2d64798d7a5321b45624f6736fadc63da1962\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xe6bd1b1218338b6f9fe17776f48623b4ac3d8a40405f74a44bc23c00abe2ca13\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xccb917776f826ac6b68bd5a15a5f711e3967848a52ba11e6104d9a4f593314a7\",\"license\":\"MIT\"},\"@uniswap/v3-periphery/contracts/interfaces/IERC721Permit.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\n\\n/// @title ERC721 with permit\\n/// @notice Extension to ERC721 that includes a permit function for signature based approvals\\ninterface IERC721Permit is IERC721 {\\n    /// @notice The permit typehash used in the permit signature\\n    /// @return The typehash for the permit\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    /// @notice The domain separator used in the permit signature\\n    /// @return The domain seperator used in encoding of permit signature\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    /// @notice Approve of a specific token ID for spending by spender via signature\\n    /// @param spender The account that is being approved\\n    /// @param tokenId The ID of the token that is being approved for spending\\n    /// @param deadline The deadline timestamp by which the call must be mined for the approve to work\\n    /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\\n    /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\\n    /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\\n    function permit(\\n        address spender,\\n        uint256 tokenId,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x9e3c2a4ee65ddf95b2dfcb0815784eea3a295707e6f8b83e4c4f0f8fe2e3a1d4\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/INonfungiblePositionManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol';\\nimport '@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol';\\n\\nimport './IPoolInitializer.sol';\\nimport './IERC721Permit.sol';\\nimport './IPeripheryPayments.sol';\\nimport './IPeripheryImmutableState.sol';\\nimport '../libraries/PoolAddress.sol';\\n\\n/// @title Non-fungible token for positions\\n/// @notice Wraps Uniswap V3 positions in a non-fungible token interface which allows for them to be transferred\\n/// and authorized.\\ninterface INonfungiblePositionManager is\\n    IPoolInitializer,\\n    IPeripheryPayments,\\n    IPeripheryImmutableState,\\n    IERC721Metadata,\\n    IERC721Enumerable,\\n    IERC721Permit\\n{\\n    /// @notice Emitted when liquidity is increased for a position NFT\\n    /// @dev Also emitted when a token is minted\\n    /// @param tokenId The ID of the token for which liquidity was increased\\n    /// @param liquidity The amount by which liquidity for the NFT position was increased\\n    /// @param amount0 The amount of token0 that was paid for the increase in liquidity\\n    /// @param amount1 The amount of token1 that was paid for the increase in liquidity\\n    event IncreaseLiquidity(uint256 indexed tokenId, uint128 liquidity, uint256 amount0, uint256 amount1);\\n    /// @notice Emitted when liquidity is decreased for a position NFT\\n    /// @param tokenId The ID of the token for which liquidity was decreased\\n    /// @param liquidity The amount by which liquidity for the NFT position was decreased\\n    /// @param amount0 The amount of token0 that was accounted for the decrease in liquidity\\n    /// @param amount1 The amount of token1 that was accounted for the decrease in liquidity\\n    event DecreaseLiquidity(uint256 indexed tokenId, uint128 liquidity, uint256 amount0, uint256 amount1);\\n    /// @notice Emitted when tokens are collected for a position NFT\\n    /// @dev The amounts reported may not be exactly equivalent to the amounts transferred, due to rounding behavior\\n    /// @param tokenId The ID of the token for which underlying tokens were collected\\n    /// @param recipient The address of the account that received the collected tokens\\n    /// @param amount0 The amount of token0 owed to the position that was collected\\n    /// @param amount1 The amount of token1 owed to the position that was collected\\n    event Collect(uint256 indexed tokenId, address recipient, uint256 amount0, uint256 amount1);\\n\\n    /// @notice Returns the position information associated with a given token ID.\\n    /// @dev Throws if the token ID is not valid.\\n    /// @param tokenId The ID of the token that represents the position\\n    /// @return nonce The nonce for permits\\n    /// @return operator The address that is approved for spending\\n    /// @return token0 The address of the token0 for a specific pool\\n    /// @return token1 The address of the token1 for a specific pool\\n    /// @return fee The fee associated with the pool\\n    /// @return tickLower The lower end of the tick range for the position\\n    /// @return tickUpper The higher end of the tick range for the position\\n    /// @return liquidity The liquidity of the position\\n    /// @return feeGrowthInside0LastX128 The fee growth of token0 as of the last action on the individual position\\n    /// @return feeGrowthInside1LastX128 The fee growth of token1 as of the last action on the individual position\\n    /// @return tokensOwed0 The uncollected amount of token0 owed to the position as of the last computation\\n    /// @return tokensOwed1 The uncollected amount of token1 owed to the position as of the last computation\\n    function positions(uint256 tokenId)\\n        external\\n        view\\n        returns (\\n            uint96 nonce,\\n            address operator,\\n            address token0,\\n            address token1,\\n            uint24 fee,\\n            int24 tickLower,\\n            int24 tickUpper,\\n            uint128 liquidity,\\n            uint256 feeGrowthInside0LastX128,\\n            uint256 feeGrowthInside1LastX128,\\n            uint128 tokensOwed0,\\n            uint128 tokensOwed1\\n        );\\n\\n    struct MintParams {\\n        address token0;\\n        address token1;\\n        uint24 fee;\\n        int24 tickLower;\\n        int24 tickUpper;\\n        uint256 amount0Desired;\\n        uint256 amount1Desired;\\n        uint256 amount0Min;\\n        uint256 amount1Min;\\n        address recipient;\\n        uint256 deadline;\\n    }\\n\\n    /// @notice Creates a new position wrapped in a NFT\\n    /// @dev Call this when the pool does exist and is initialized. Note that if the pool is created but not initialized\\n    /// a method does not exist, i.e. the pool is assumed to be initialized.\\n    /// @param params The params necessary to mint a position, encoded as `MintParams` in calldata\\n    /// @return tokenId The ID of the token that represents the minted position\\n    /// @return liquidity The amount of liquidity for this position\\n    /// @return amount0 The amount of token0\\n    /// @return amount1 The amount of token1\\n    function mint(MintParams calldata params)\\n        external\\n        payable\\n        returns (\\n            uint256 tokenId,\\n            uint128 liquidity,\\n            uint256 amount0,\\n            uint256 amount1\\n        );\\n\\n    struct IncreaseLiquidityParams {\\n        uint256 tokenId;\\n        uint256 amount0Desired;\\n        uint256 amount1Desired;\\n        uint256 amount0Min;\\n        uint256 amount1Min;\\n        uint256 deadline;\\n    }\\n\\n    /// @notice Increases the amount of liquidity in a position, with tokens paid by the `msg.sender`\\n    /// @param params tokenId The ID of the token for which liquidity is being increased,\\n    /// amount0Desired The desired amount of token0 to be spent,\\n    /// amount1Desired The desired amount of token1 to be spent,\\n    /// amount0Min The minimum amount of token0 to spend, which serves as a slippage check,\\n    /// amount1Min The minimum amount of token1 to spend, which serves as a slippage check,\\n    /// deadline The time by which the transaction must be included to effect the change\\n    /// @return liquidity The new liquidity amount as a result of the increase\\n    /// @return amount0 The amount of token0 to acheive resulting liquidity\\n    /// @return amount1 The amount of token1 to acheive resulting liquidity\\n    function increaseLiquidity(IncreaseLiquidityParams calldata params)\\n        external\\n        payable\\n        returns (\\n            uint128 liquidity,\\n            uint256 amount0,\\n            uint256 amount1\\n        );\\n\\n    struct DecreaseLiquidityParams {\\n        uint256 tokenId;\\n        uint128 liquidity;\\n        uint256 amount0Min;\\n        uint256 amount1Min;\\n        uint256 deadline;\\n    }\\n\\n    /// @notice Decreases the amount of liquidity in a position and accounts it to the position\\n    /// @param params tokenId The ID of the token for which liquidity is being decreased,\\n    /// amount The amount by which liquidity will be decreased,\\n    /// amount0Min The minimum amount of token0 that should be accounted for the burned liquidity,\\n    /// amount1Min The minimum amount of token1 that should be accounted for the burned liquidity,\\n    /// deadline The time by which the transaction must be included to effect the change\\n    /// @return amount0 The amount of token0 accounted to the position's tokens owed\\n    /// @return amount1 The amount of token1 accounted to the position's tokens owed\\n    function decreaseLiquidity(DecreaseLiquidityParams calldata params)\\n        external\\n        payable\\n        returns (uint256 amount0, uint256 amount1);\\n\\n    struct CollectParams {\\n        uint256 tokenId;\\n        address recipient;\\n        uint128 amount0Max;\\n        uint128 amount1Max;\\n    }\\n\\n    /// @notice Collects up to a maximum amount of fees owed to a specific position to the recipient\\n    /// @param params tokenId The ID of the NFT for which tokens are being collected,\\n    /// recipient The account that should receive the tokens,\\n    /// amount0Max The maximum amount of token0 to collect,\\n    /// amount1Max The maximum amount of token1 to collect\\n    /// @return amount0 The amount of fees collected in token0\\n    /// @return amount1 The amount of fees collected in token1\\n    function collect(CollectParams calldata params) external payable returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Burns a token ID, which deletes it from the NFT contract. The token must have 0 liquidity and all tokens\\n    /// must be collected first.\\n    /// @param tokenId The ID of the token that is being burned\\n    function burn(uint256 tokenId) external payable;\\n}\\n\",\"keccak256\":\"0xe1dadc73e60bf05d0b4e0f05bd2847c5783e833cc10352c14763360b13495ee1\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/IPeripheryImmutableState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Immutable state\\n/// @notice Functions that return immutable state of the router\\ninterface IPeripheryImmutableState {\\n    /// @return Returns the address of the Uniswap V3 factory\\n    function factory() external view returns (address);\\n\\n    /// @return Returns the address of WETH9\\n    function WETH9() external view returns (address);\\n}\\n\",\"keccak256\":\"0x7affcfeb5127c0925a71d6a65345e117c33537523aeca7bc98085ead8452519d\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/IPeripheryPayments.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\n\\n/// @title Periphery Payments\\n/// @notice Functions to ease deposits and withdrawals of ETH\\ninterface IPeripheryPayments {\\n    /// @notice Unwraps the contract's WETH9 balance and sends it to recipient as ETH.\\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.\\n    /// @param amountMinimum The minimum amount of WETH9 to unwrap\\n    /// @param recipient The address receiving ETH\\n    function unwrapWETH9(uint256 amountMinimum, address recipient) external payable;\\n\\n    /// @notice Refunds any ETH balance held by this contract to the `msg.sender`\\n    /// @dev Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps\\n    /// that use ether for the input amount\\n    function refundETH() external payable;\\n\\n    /// @notice Transfers the full amount of a token held by this contract to recipient\\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing the token from users\\n    /// @param token The contract address of the token which will be transferred to `recipient`\\n    /// @param amountMinimum The minimum amount of token required for a transfer\\n    /// @param recipient The destination address of the token\\n    function sweepToken(\\n        address token,\\n        uint256 amountMinimum,\\n        address recipient\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0xb547e10f1e69bed03621a62b73a503e260643066c6b4054867a4d1fef47eb274\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/IPoolInitializer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\n/// @title Creates and initializes V3 Pools\\n/// @notice Provides a method for creating and initializing a pool, if necessary, for bundling with other methods that\\n/// require the pool to exist.\\ninterface IPoolInitializer {\\n    /// @notice Creates a new pool if it does not exist, then initializes if not initialized\\n    /// @dev This method can be bundled with others via IMulticall for the first action (e.g. mint) performed against a pool\\n    /// @param token0 The contract address of token0 of the pool\\n    /// @param token1 The contract address of token1 of the pool\\n    /// @param fee The fee amount of the v3 pool for the specified token pair\\n    /// @param sqrtPriceX96 The initial square root price of the pool as a Q64.96 value\\n    /// @return pool Returns the pool address based on the pair of tokens and fee, will return the newly created pool address if necessary\\n    function createAndInitializePoolIfNecessary(\\n        address token0,\\n        address token1,\\n        uint24 fee,\\n        uint160 sqrtPriceX96\\n    ) external payable returns (address pool);\\n}\\n\",\"keccak256\":\"0x9d7695e8d94c22cc5fcced602017aabb988de89981ea7bee29ea629d5328a862\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/libraries/PoolAddress.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Provides functions for deriving a pool address from the factory, tokens, and the fee\\nlibrary PoolAddress {\\n    bytes32 internal constant POOL_INIT_CODE_HASH = 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54;\\n\\n    /// @notice The identifying key of the pool\\n    struct PoolKey {\\n        address token0;\\n        address token1;\\n        uint24 fee;\\n    }\\n\\n    /// @notice Returns PoolKey: the ordered tokens with the matched fee levels\\n    /// @param tokenA The first token of a pool, unsorted\\n    /// @param tokenB The second token of a pool, unsorted\\n    /// @param fee The fee level of the pool\\n    /// @return Poolkey The pool details with ordered token0 and token1 assignments\\n    function getPoolKey(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) internal pure returns (PoolKey memory) {\\n        if (tokenA > tokenB) (tokenA, tokenB) = (tokenB, tokenA);\\n        return PoolKey({token0: tokenA, token1: tokenB, fee: fee});\\n    }\\n\\n    /// @notice Deterministically computes the pool address given the factory and PoolKey\\n    /// @param factory The Uniswap V3 factory contract address\\n    /// @param key The PoolKey\\n    /// @return pool The contract address of the V3 pool\\n    function computeAddress(address factory, PoolKey memory key) internal pure returns (address pool) {\\n        require(key.token0 < key.token1);\\n        pool = address(\\n            uint256(\\n                keccak256(\\n                    abi.encodePacked(\\n                        hex'ff',\\n                        factory,\\n                        keccak256(abi.encode(key.token0, key.token1, key.fee)),\\n                        POOL_INIT_CODE_HASH\\n                    )\\n                )\\n            )\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x5edd84eb8ba7c12fd8cb6cffe52e1e9f3f6464514ee5f539c2283826209035a2\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"events":{"Collect(uint256,address,uint256,uint256)":{"notice":"Emitted when tokens are collected for a position NFT"},"DecreaseLiquidity(uint256,uint128,uint256,uint256)":{"notice":"Emitted when liquidity is decreased for a position NFT"},"IncreaseLiquidity(uint256,uint128,uint256,uint256)":{"notice":"Emitted when liquidity is increased for a position NFT"}},"kind":"user","methods":{"DOMAIN_SEPARATOR()":{"notice":"The domain separator used in the permit signature"},"PERMIT_TYPEHASH()":{"notice":"The permit typehash used in the permit signature"},"burn(uint256)":{"notice":"Burns a token ID, which deletes it from the NFT contract. The token must have 0 liquidity and all tokens must be collected first."},"collect((uint256,address,uint128,uint128))":{"notice":"Collects up to a maximum amount of fees owed to a specific position to the recipient"},"createAndInitializePoolIfNecessary(address,address,uint24,uint160)":{"notice":"Creates a new pool if it does not exist, then initializes if not initialized"},"decreaseLiquidity((uint256,uint128,uint256,uint256,uint256))":{"notice":"Decreases the amount of liquidity in a position and accounts it to the position"},"increaseLiquidity((uint256,uint256,uint256,uint256,uint256,uint256))":{"notice":"Increases the amount of liquidity in a position, with tokens paid by the `msg.sender`"},"mint((address,address,uint24,int24,int24,uint256,uint256,uint256,uint256,address,uint256))":{"notice":"Creates a new position wrapped in a NFT"},"permit(address,uint256,uint256,uint8,bytes32,bytes32)":{"notice":"Approve of a specific token ID for spending by spender via signature"},"positions(uint256)":{"notice":"Returns the position information associated with a given token ID."},"refundETH()":{"notice":"Refunds any ETH balance held by this contract to the `msg.sender`"},"sweepToken(address,uint256,address)":{"notice":"Transfers the full amount of a token held by this contract to recipient"},"unwrapWETH9(uint256,address)":{"notice":"Unwraps the contract's WETH9 balance and sends it to recipient as ETH."}},"notice":"Wraps Uniswap V3 positions in a non-fungible token interface which allows for them to be transferred and authorized.","version":1}}},"@uniswap/v3-periphery/contracts/interfaces/IPeripheryImmutableState.sol":{"IPeripheryImmutableState":{"abi":[{"inputs":[],"name":"WETH9","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"factory","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"WETH9()":{"returns":{"_0":"Returns the address of WETH9"}},"factory()":{"returns":{"_0":"Returns the address of the Uniswap V3 factory"}}},"title":"Immutable state","version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"WETH9()":"4aa4a4fc","factory()":"c45a0155"}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"WETH9\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"WETH9()\":{\"returns\":{\"_0\":\"Returns the address of WETH9\"}},\"factory()\":{\"returns\":{\"_0\":\"Returns the address of the Uniswap V3 factory\"}}},\"title\":\"Immutable state\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Functions that return immutable state of the router\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-periphery/contracts/interfaces/IPeripheryImmutableState.sol\":\"IPeripheryImmutableState\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-periphery/contracts/interfaces/IPeripheryImmutableState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Immutable state\\n/// @notice Functions that return immutable state of the router\\ninterface IPeripheryImmutableState {\\n    /// @return Returns the address of the Uniswap V3 factory\\n    function factory() external view returns (address);\\n\\n    /// @return Returns the address of WETH9\\n    function WETH9() external view returns (address);\\n}\\n\",\"keccak256\":\"0x7affcfeb5127c0925a71d6a65345e117c33537523aeca7bc98085ead8452519d\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"Functions that return immutable state of the router","version":1}}},"@uniswap/v3-periphery/contracts/interfaces/IPeripheryPayments.sol":{"IPeripheryPayments":{"abi":[{"inputs":[],"name":"refundETH","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"amountMinimum","type":"uint256"},{"internalType":"address","name":"recipient","type":"address"}],"name":"sweepToken","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amountMinimum","type":"uint256"},{"internalType":"address","name":"recipient","type":"address"}],"name":"unwrapWETH9","outputs":[],"stateMutability":"payable","type":"function"}],"devdoc":{"kind":"dev","methods":{"refundETH()":{"details":"Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps that use ether for the input amount"},"sweepToken(address,uint256,address)":{"details":"The amountMinimum parameter prevents malicious contracts from stealing the token from users","params":{"amountMinimum":"The minimum amount of token required for a transfer","recipient":"The destination address of the token","token":"The contract address of the token which will be transferred to `recipient`"}},"unwrapWETH9(uint256,address)":{"details":"The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.","params":{"amountMinimum":"The minimum amount of WETH9 to unwrap","recipient":"The address receiving ETH"}}},"title":"Periphery Payments","version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"refundETH()":"12210e8a","sweepToken(address,uint256,address)":"df2ab5bb","unwrapWETH9(uint256,address)":"49404b7c"}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"refundETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountMinimum\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"sweepToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountMinimum\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"unwrapWETH9\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"refundETH()\":{\"details\":\"Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps that use ether for the input amount\"},\"sweepToken(address,uint256,address)\":{\"details\":\"The amountMinimum parameter prevents malicious contracts from stealing the token from users\",\"params\":{\"amountMinimum\":\"The minimum amount of token required for a transfer\",\"recipient\":\"The destination address of the token\",\"token\":\"The contract address of the token which will be transferred to `recipient`\"}},\"unwrapWETH9(uint256,address)\":{\"details\":\"The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.\",\"params\":{\"amountMinimum\":\"The minimum amount of WETH9 to unwrap\",\"recipient\":\"The address receiving ETH\"}}},\"title\":\"Periphery Payments\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"refundETH()\":{\"notice\":\"Refunds any ETH balance held by this contract to the `msg.sender`\"},\"sweepToken(address,uint256,address)\":{\"notice\":\"Transfers the full amount of a token held by this contract to recipient\"},\"unwrapWETH9(uint256,address)\":{\"notice\":\"Unwraps the contract's WETH9 balance and sends it to recipient as ETH.\"}},\"notice\":\"Functions to ease deposits and withdrawals of ETH\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-periphery/contracts/interfaces/IPeripheryPayments.sol\":\"IPeripheryPayments\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-periphery/contracts/interfaces/IPeripheryPayments.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\n\\n/// @title Periphery Payments\\n/// @notice Functions to ease deposits and withdrawals of ETH\\ninterface IPeripheryPayments {\\n    /// @notice Unwraps the contract's WETH9 balance and sends it to recipient as ETH.\\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.\\n    /// @param amountMinimum The minimum amount of WETH9 to unwrap\\n    /// @param recipient The address receiving ETH\\n    function unwrapWETH9(uint256 amountMinimum, address recipient) external payable;\\n\\n    /// @notice Refunds any ETH balance held by this contract to the `msg.sender`\\n    /// @dev Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps\\n    /// that use ether for the input amount\\n    function refundETH() external payable;\\n\\n    /// @notice Transfers the full amount of a token held by this contract to recipient\\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing the token from users\\n    /// @param token The contract address of the token which will be transferred to `recipient`\\n    /// @param amountMinimum The minimum amount of token required for a transfer\\n    /// @param recipient The destination address of the token\\n    function sweepToken(\\n        address token,\\n        uint256 amountMinimum,\\n        address recipient\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0xb547e10f1e69bed03621a62b73a503e260643066c6b4054867a4d1fef47eb274\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"refundETH()":{"notice":"Refunds any ETH balance held by this contract to the `msg.sender`"},"sweepToken(address,uint256,address)":{"notice":"Transfers the full amount of a token held by this contract to recipient"},"unwrapWETH9(uint256,address)":{"notice":"Unwraps the contract's WETH9 balance and sends it to recipient as ETH."}},"notice":"Functions to ease deposits and withdrawals of ETH","version":1}}},"@uniswap/v3-periphery/contracts/interfaces/IPoolInitializer.sol":{"IPoolInitializer":{"abi":[{"inputs":[{"internalType":"address","name":"token0","type":"address"},{"internalType":"address","name":"token1","type":"address"},{"internalType":"uint24","name":"fee","type":"uint24"},{"internalType":"uint160","name":"sqrtPriceX96","type":"uint160"}],"name":"createAndInitializePoolIfNecessary","outputs":[{"internalType":"address","name":"pool","type":"address"}],"stateMutability":"payable","type":"function"}],"devdoc":{"kind":"dev","methods":{"createAndInitializePoolIfNecessary(address,address,uint24,uint160)":{"details":"This method can be bundled with others via IMulticall for the first action (e.g. mint) performed against a pool","params":{"fee":"The fee amount of the v3 pool for the specified token pair","sqrtPriceX96":"The initial square root price of the pool as a Q64.96 value","token0":"The contract address of token0 of the pool","token1":"The contract address of token1 of the pool"},"returns":{"pool":"Returns the pool address based on the pair of tokens and fee, will return the newly created pool address if necessary"}}},"title":"Creates and initializes V3 Pools","version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"createAndInitializePoolIfNecessary(address,address,uint24,uint160)":"13ead562"}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"}],\"name\":\"createAndInitializePoolIfNecessary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"createAndInitializePoolIfNecessary(address,address,uint24,uint160)\":{\"details\":\"This method can be bundled with others via IMulticall for the first action (e.g. mint) performed against a pool\",\"params\":{\"fee\":\"The fee amount of the v3 pool for the specified token pair\",\"sqrtPriceX96\":\"The initial square root price of the pool as a Q64.96 value\",\"token0\":\"The contract address of token0 of the pool\",\"token1\":\"The contract address of token1 of the pool\"},\"returns\":{\"pool\":\"Returns the pool address based on the pair of tokens and fee, will return the newly created pool address if necessary\"}}},\"title\":\"Creates and initializes V3 Pools\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"createAndInitializePoolIfNecessary(address,address,uint24,uint160)\":{\"notice\":\"Creates a new pool if it does not exist, then initializes if not initialized\"}},\"notice\":\"Provides a method for creating and initializing a pool, if necessary, for bundling with other methods that require the pool to exist.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-periphery/contracts/interfaces/IPoolInitializer.sol\":\"IPoolInitializer\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-periphery/contracts/interfaces/IPoolInitializer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\n/// @title Creates and initializes V3 Pools\\n/// @notice Provides a method for creating and initializing a pool, if necessary, for bundling with other methods that\\n/// require the pool to exist.\\ninterface IPoolInitializer {\\n    /// @notice Creates a new pool if it does not exist, then initializes if not initialized\\n    /// @dev This method can be bundled with others via IMulticall for the first action (e.g. mint) performed against a pool\\n    /// @param token0 The contract address of token0 of the pool\\n    /// @param token1 The contract address of token1 of the pool\\n    /// @param fee The fee amount of the v3 pool for the specified token pair\\n    /// @param sqrtPriceX96 The initial square root price of the pool as a Q64.96 value\\n    /// @return pool Returns the pool address based on the pair of tokens and fee, will return the newly created pool address if necessary\\n    function createAndInitializePoolIfNecessary(\\n        address token0,\\n        address token1,\\n        uint24 fee,\\n        uint160 sqrtPriceX96\\n    ) external payable returns (address pool);\\n}\\n\",\"keccak256\":\"0x9d7695e8d94c22cc5fcced602017aabb988de89981ea7bee29ea629d5328a862\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"createAndInitializePoolIfNecessary(address,address,uint24,uint160)":{"notice":"Creates a new pool if it does not exist, then initializes if not initialized"}},"notice":"Provides a method for creating and initializing a pool, if necessary, for bundling with other methods that require the pool to exist.","version":1}}},"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol":{"ISwapRouter":{"abi":[{"inputs":[{"components":[{"internalType":"bytes","name":"path","type":"bytes"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint256","name":"amountIn","type":"uint256"},{"internalType":"uint256","name":"amountOutMinimum","type":"uint256"}],"internalType":"struct ISwapRouter.ExactInputParams","name":"params","type":"tuple"}],"name":"exactInput","outputs":[{"internalType":"uint256","name":"amountOut","type":"uint256"}],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"tokenIn","type":"address"},{"internalType":"address","name":"tokenOut","type":"address"},{"internalType":"uint24","name":"fee","type":"uint24"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint256","name":"amountIn","type":"uint256"},{"internalType":"uint256","name":"amountOutMinimum","type":"uint256"},{"internalType":"uint160","name":"sqrtPriceLimitX96","type":"uint160"}],"internalType":"struct ISwapRouter.ExactInputSingleParams","name":"params","type":"tuple"}],"name":"exactInputSingle","outputs":[{"internalType":"uint256","name":"amountOut","type":"uint256"}],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes","name":"path","type":"bytes"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint256","name":"amountOut","type":"uint256"},{"internalType":"uint256","name":"amountInMaximum","type":"uint256"}],"internalType":"struct ISwapRouter.ExactOutputParams","name":"params","type":"tuple"}],"name":"exactOutput","outputs":[{"internalType":"uint256","name":"amountIn","type":"uint256"}],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"tokenIn","type":"address"},{"internalType":"address","name":"tokenOut","type":"address"},{"internalType":"uint24","name":"fee","type":"uint24"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint256","name":"amountOut","type":"uint256"},{"internalType":"uint256","name":"amountInMaximum","type":"uint256"},{"internalType":"uint160","name":"sqrtPriceLimitX96","type":"uint160"}],"internalType":"struct ISwapRouter.ExactOutputSingleParams","name":"params","type":"tuple"}],"name":"exactOutputSingle","outputs":[{"internalType":"uint256","name":"amountIn","type":"uint256"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"int256","name":"amount0Delta","type":"int256"},{"internalType":"int256","name":"amount1Delta","type":"int256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"uniswapV3SwapCallback","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"exactInput((bytes,address,uint256,uint256,uint256))":{"params":{"params":"The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata"},"returns":{"amountOut":"The amount of the received token"}},"exactInputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))":{"params":{"params":"The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata"},"returns":{"amountOut":"The amount of the received token"}},"exactOutput((bytes,address,uint256,uint256,uint256))":{"params":{"params":"The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata"},"returns":{"amountIn":"The amount of the input token"}},"exactOutputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))":{"params":{"params":"The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata"},"returns":{"amountIn":"The amount of the input token"}},"uniswapV3SwapCallback(int256,int256,bytes)":{"details":"In the implementation you must pay the pool tokens owed for the swap. The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory. amount0Delta and amount1Delta can both be 0 if no tokens were swapped.","params":{"amount0Delta":"The amount of token0 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token0 to the pool.","amount1Delta":"The amount of token1 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token1 to the pool.","data":"Any data passed through by the caller via the IUniswapV3PoolActions#swap call"}}},"title":"Router token swapping functionality","version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"exactInput((bytes,address,uint256,uint256,uint256))":"c04b8d59","exactInputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))":"414bf389","exactOutput((bytes,address,uint256,uint256,uint256))":"f28c0498","exactOutputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))":"db3e2198","uniswapV3SwapCallback(int256,int256,bytes)":"fa461e33"}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMinimum\",\"type\":\"uint256\"}],\"internalType\":\"struct ISwapRouter.ExactInputParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"exactInput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMinimum\",\"type\":\"uint256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"}],\"internalType\":\"struct ISwapRouter.ExactInputSingleParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"exactInputSingle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMaximum\",\"type\":\"uint256\"}],\"internalType\":\"struct ISwapRouter.ExactOutputParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"exactOutput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMaximum\",\"type\":\"uint256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"}],\"internalType\":\"struct ISwapRouter.ExactOutputSingleParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"exactOutputSingle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"amount0Delta\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1Delta\",\"type\":\"int256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"uniswapV3SwapCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"exactInput((bytes,address,uint256,uint256,uint256))\":{\"params\":{\"params\":\"The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\"},\"returns\":{\"amountOut\":\"The amount of the received token\"}},\"exactInputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))\":{\"params\":{\"params\":\"The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\"},\"returns\":{\"amountOut\":\"The amount of the received token\"}},\"exactOutput((bytes,address,uint256,uint256,uint256))\":{\"params\":{\"params\":\"The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\"},\"returns\":{\"amountIn\":\"The amount of the input token\"}},\"exactOutputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))\":{\"params\":{\"params\":\"The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\"},\"returns\":{\"amountIn\":\"The amount of the input token\"}},\"uniswapV3SwapCallback(int256,int256,bytes)\":{\"details\":\"In the implementation you must pay the pool tokens owed for the swap. The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory. amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\",\"params\":{\"amount0Delta\":\"The amount of token0 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token0 to the pool.\",\"amount1Delta\":\"The amount of token1 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token1 to the pool.\",\"data\":\"Any data passed through by the caller via the IUniswapV3PoolActions#swap call\"}}},\"title\":\"Router token swapping functionality\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"exactInput((bytes,address,uint256,uint256,uint256))\":{\"notice\":\"Swaps `amountIn` of one token for as much as possible of another along the specified path\"},\"exactInputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))\":{\"notice\":\"Swaps `amountIn` of one token for as much as possible of another token\"},\"exactOutput((bytes,address,uint256,uint256,uint256))\":{\"notice\":\"Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\"},\"exactOutputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))\":{\"notice\":\"Swaps as little as possible of one token for `amountOut` of another token\"},\"uniswapV3SwapCallback(int256,int256,bytes)\":{\"notice\":\"Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\"}},\"notice\":\"Functions for swapping tokens via Uniswap V3\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\":\"ISwapRouter\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x9bfaf1feb32814623e627ab70f2409760b15d95f1f9b058e2b3399a8bb732975\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"exactInput((bytes,address,uint256,uint256,uint256))":{"notice":"Swaps `amountIn` of one token for as much as possible of another along the specified path"},"exactInputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))":{"notice":"Swaps `amountIn` of one token for as much as possible of another token"},"exactOutput((bytes,address,uint256,uint256,uint256))":{"notice":"Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)"},"exactOutputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))":{"notice":"Swaps as little as possible of one token for `amountOut` of another token"},"uniswapV3SwapCallback(int256,int256,bytes)":{"notice":"Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap."}},"notice":"Functions for swapping tokens via Uniswap V3","version":1}}},"@uniswap/v3-periphery/contracts/interfaces/external/IWETH9.sol":{"IWETH9":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"deposit","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"withdraw","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"allowance(address,address)":{"details":"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{"details":"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the amount of tokens owned by `account`."},"totalSupply()":{"details":"Returns the amount of tokens in existence."},"transfer(address,uint256)":{"details":"Moves `amount` tokens from the caller's account to `recipient`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFrom(address,address,uint256)":{"details":"Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}},"title":"Interface for WETH9","version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","deposit()":"d0e30db0","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd","withdraw(uint256)":"2e1a7d4d"}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `recipient`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"title\":\"Interface for WETH9\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"deposit()\":{\"notice\":\"Deposit ether to get wrapped ether\"},\"withdraw(uint256)\":{\"notice\":\"Withdraw wrapped ether to get ether\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-periphery/contracts/interfaces/external/IWETH9.sol\":\"IWETH9\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@uniswap/v3-periphery/contracts/interfaces/external/IWETH9.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity =0.7.6;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\n/// @title Interface for WETH9\\ninterface IWETH9 is IERC20 {\\n    /// @notice Deposit ether to get wrapped ether\\n    function deposit() external payable;\\n\\n    /// @notice Withdraw wrapped ether to get ether\\n    function withdraw(uint256) external;\\n}\\n\",\"keccak256\":\"0x6d7a8eb484e84bceb1d84c7be431c5b8120d519b0c2a7b4c7064c814635dea4c\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"deposit()":{"notice":"Deposit ether to get wrapped ether"},"withdraw(uint256)":{"notice":"Withdraw wrapped ether to get ether"}},"version":1}}},"@uniswap/v3-periphery/contracts/libraries/PoolAddress.sol":{"PoolAddress":{"abi":[],"devdoc":{"kind":"dev","methods":{},"title":"Provides functions for deriving a pool address from the factory, tokens, and the fee","version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212209f3c9b0e4dfb6acd94147bbd6646870d1cf107d8c88dec926626299bd20d033164736f6c63430007060033","opcodes":"PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP16 EXTCODECOPY SWAP12 0xE 0x4D 0xFB PUSH11 0xCD94147BBD6646870D1CF1 SMOD 0xD8 0xC8 DUP14 0xEC SWAP3 PUSH7 0x26299BD20D0331 PUSH5 0x736F6C6343 STOP SMOD MOD STOP CALLER ","sourceMap":"167:1652:29:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212209f3c9b0e4dfb6acd94147bbd6646870d1cf107d8c88dec926626299bd20d033164736f6c63430007060033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP16 EXTCODECOPY SWAP12 0xE 0x4D 0xFB PUSH11 0xCD94147BBD6646870D1CF1 SMOD 0xD8 0xC8 DUP14 0xEC SWAP3 PUSH7 0x26299BD20D0331 PUSH5 0x736F6C6343 STOP SMOD MOD STOP CALLER ","sourceMap":"167:1652:29:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"computeAddress(address,struct PoolAddress.PoolKey memory)":"infinite","getPoolKey(address,address,uint24)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"Provides functions for deriving a pool address from the factory, tokens, and the fee\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-periphery/contracts/libraries/PoolAddress.sol\":\"PoolAddress\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-periphery/contracts/libraries/PoolAddress.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Provides functions for deriving a pool address from the factory, tokens, and the fee\\nlibrary PoolAddress {\\n    bytes32 internal constant POOL_INIT_CODE_HASH = 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54;\\n\\n    /// @notice The identifying key of the pool\\n    struct PoolKey {\\n        address token0;\\n        address token1;\\n        uint24 fee;\\n    }\\n\\n    /// @notice Returns PoolKey: the ordered tokens with the matched fee levels\\n    /// @param tokenA The first token of a pool, unsorted\\n    /// @param tokenB The second token of a pool, unsorted\\n    /// @param fee The fee level of the pool\\n    /// @return Poolkey The pool details with ordered token0 and token1 assignments\\n    function getPoolKey(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) internal pure returns (PoolKey memory) {\\n        if (tokenA > tokenB) (tokenA, tokenB) = (tokenB, tokenA);\\n        return PoolKey({token0: tokenA, token1: tokenB, fee: fee});\\n    }\\n\\n    /// @notice Deterministically computes the pool address given the factory and PoolKey\\n    /// @param factory The Uniswap V3 factory contract address\\n    /// @param key The PoolKey\\n    /// @return pool The contract address of the V3 pool\\n    function computeAddress(address factory, PoolKey memory key) internal pure returns (address pool) {\\n        require(key.token0 < key.token1);\\n        pool = address(\\n            uint256(\\n                keccak256(\\n                    abi.encodePacked(\\n                        hex'ff',\\n                        factory,\\n                        keccak256(abi.encode(key.token0, key.token1, key.fee)),\\n                        POOL_INIT_CODE_HASH\\n                    )\\n                )\\n            )\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x5edd84eb8ba7c12fd8cb6cffe52e1e9f3f6464514ee5f539c2283826209035a2\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol":{"TransferHelper":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220d65f647353794a5ff41561f595ee33040b1d61907a5c665db97f08e8f5262d0764736f6c63430007060033","opcodes":"PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD6 0x5F PUSH5 0x7353794A5F DELEGATECALL ISZERO PUSH2 0xF595 0xEE CALLER DIV SIGNEXTEND SAR PUSH2 0x907A 0x5C PUSH7 0x5DB97F08E8F526 0x2D SMOD PUSH5 0x736F6C6343 STOP SMOD MOD STOP CALLER ","sourceMap":"129:2408:30:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220d65f647353794a5ff41561f595ee33040b1d61907a5c665db97f08e8f5262d0764736f6c63430007060033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD6 0x5F PUSH5 0x7353794A5F DELEGATECALL ISZERO PUSH2 0xF595 0xEE CALLER DIV SIGNEXTEND SAR PUSH2 0x907A 0x5C PUSH7 0x5DB97F08E8F526 0x2D SMOD PUSH5 0x736F6C6343 STOP SMOD MOD STOP CALLER ","sourceMap":"129:2408:30:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"safeApprove(address,address,uint256)":"infinite","safeTransfer(address,address,uint256)":"infinite","safeTransferETH(address,uint256)":"infinite","safeTransferFrom(address,address,address,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":\"TransferHelper\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.6.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nlibrary TransferHelper {\\n    /// @notice Transfers tokens from the targeted address to the given destination\\n    /// @notice Errors with 'STF' if transfer fails\\n    /// @param token The contract address of the token to be transferred\\n    /// @param from The originating address from which the tokens will be transferred\\n    /// @param to The destination address of the transfer\\n    /// @param value The amount to be transferred\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) =\\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\\n    }\\n\\n    /// @notice Transfers tokens from msg.sender to a recipient\\n    /// @dev Errors with ST if transfer fails\\n    /// @param token The contract address of the token which will be transferred\\n    /// @param to The recipient of the transfer\\n    /// @param value The value of the transfer\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');\\n    }\\n\\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\\n    /// @dev Errors with 'SA' if transfer fails\\n    /// @param token The contract address of the token to be approved\\n    /// @param to The target of the approval\\n    /// @param value The amount of the given token the target will be allowed to spend\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');\\n    }\\n\\n    /// @notice Transfers ETH to the recipient address\\n    /// @dev Fails with `STE`\\n    /// @param to The destination of the transfer\\n    /// @param value The value to be transferred\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'STE');\\n    }\\n}\\n\",\"keccak256\":\"0x9af98b0908c96320ca6d08b22f0efca864742f6adbe5794cafe2d1d2e808b0cd\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/BaselineMinimal.sol":{"BaselineMinimal":{"abi":[{"inputs":[{"internalType":"address","name":"_factory","type":"address"},{"internalType":"address","name":"_positionManager","type":"address"},{"internalType":"address","name":"_swapRouter","type":"address"},{"internalType":"address","name":"_token0","type":"address"},{"internalType":"address","name":"_token1","type":"address"},{"internalType":"uint24","name":"_fee","type":"uint24"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"timestamp","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"currentPrice","type":"uint256"},{"indexed":false,"internalType":"int24","name":"currentTick","type":"int24"},{"indexed":false,"internalType":"int24","name":"finalTickLower","type":"int24"},{"indexed":false,"internalType":"int24","name":"finalTickUpper","type":"int24"},{"indexed":false,"internalType":"bool","name":"adjusted","type":"bool"}],"name":"BaselineAdjustmentMetrics","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bool","name":"hasPosition","type":"bool"},{"indexed":false,"internalType":"int24","name":"lowerTick","type":"int24"},{"indexed":false,"internalType":"int24","name":"upperTick","type":"int24"}],"name":"PositionChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"amountIn","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amountOut","type":"uint256"}],"name":"TokensSwapped","type":"event"},{"inputs":[],"name":"adjustLiquidityWithCurrentPrice","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"currentTokenId","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"factory","outputs":[{"internalType":"contract IUniswapV3Factory","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"fee","outputs":[{"internalType":"uint24","name":"","type":"uint24"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"hasPosition","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"lowerTick","outputs":[{"internalType":"int24","name":"","type":"int24"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"positionManager","outputs":[{"internalType":"contract INonfungiblePositionManager","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"rescueETH","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"to","type":"address"}],"name":"rescueTokens","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"rescueWETH","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"swapRouter","outputs":[{"internalType":"contract ISwapRouter","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"tickSpacing","outputs":[{"internalType":"int24","name":"","type":"int24"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"token0","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"token1","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"upperTick","outputs":[{"internalType":"int24","name":"","type":"int24"}],"stateMutability":"view","type":"function"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"kind":"dev","methods":{"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"title":"BaselineMinimal","version":1},"evm":{"bytecode":{"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:4864:35","statements":[{"nodeType":"YulBlock","src":"6:3:35","statements":[]},{"body":{"nodeType":"YulBlock","src":"76:117:35","statements":[{"nodeType":"YulAssignment","src":"86:22:35","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"101:6:35"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"95:5:35"},"nodeType":"YulFunctionCall","src":"95:13:35"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"86:5:35"}]},{"body":{"nodeType":"YulBlock","src":"171:16:35","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"180:1:35","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"183:1:35","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"173:6:35"},"nodeType":"YulFunctionCall","src":"173:12:35"},"nodeType":"YulExpressionStatement","src":"173:12:35"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"130:5:35"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"141:5:35"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"156:3:35","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"161:1:35","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"152:3:35"},"nodeType":"YulFunctionCall","src":"152:11:35"},{"kind":"number","nodeType":"YulLiteral","src":"165:1:35","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"148:3:35"},"nodeType":"YulFunctionCall","src":"148:19:35"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"137:3:35"},"nodeType":"YulFunctionCall","src":"137:31:35"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"127:2:35"},"nodeType":"YulFunctionCall","src":"127:42:35"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"120:6:35"},"nodeType":"YulFunctionCall","src":"120:50:35"},"nodeType":"YulIf","src":"117:2:35"}]},"name":"abi_decode_t_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"55:6:35","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"66:5:35","type":""}],"src":"14:179:35"},{"body":{"nodeType":"YulBlock","src":"279:139:35","statements":[{"body":{"nodeType":"YulBlock","src":"325:26:35","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"334:6:35"},{"name":"value0","nodeType":"YulIdentifier","src":"342:6:35"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"327:6:35"},"nodeType":"YulFunctionCall","src":"327:22:35"},"nodeType":"YulExpressionStatement","src":"327:22:35"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"300:7:35"},{"name":"headStart","nodeType":"YulIdentifier","src":"309:9:35"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"296:3:35"},"nodeType":"YulFunctionCall","src":"296:23:35"},{"kind":"number","nodeType":"YulLiteral","src":"321:2:35","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"292:3:35"},"nodeType":"YulFunctionCall","src":"292:32:35"},"nodeType":"YulIf","src":"289:2:35"},{"nodeType":"YulAssignment","src":"360:52:35","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"402:9:35"}],"functionName":{"name":"abi_decode_t_address_fromMemory","nodeType":"YulIdentifier","src":"370:31:35"},"nodeType":"YulFunctionCall","src":"370:42:35"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"360:6:35"}]}]},"name":"abi_decode_tuple_t_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"245:9:35","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"256:7:35","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"268:6:35","type":""}],"src":"198:220:35"},{"body":{"nodeType":"YulBlock","src":"588:571:35","statements":[{"body":{"nodeType":"YulBlock","src":"635:26:35","statements":[{"expression":{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"644:6:35"},{"name":"value4","nodeType":"YulIdentifier","src":"652:6:35"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"637:6:35"},"nodeType":"YulFunctionCall","src":"637:22:35"},"nodeType":"YulExpressionStatement","src":"637:22:35"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"609:7:35"},{"name":"headStart","nodeType":"YulIdentifier","src":"618:9:35"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"605:3:35"},"nodeType":"YulFunctionCall","src":"605:23:35"},{"kind":"number","nodeType":"YulLiteral","src":"630:3:35","type":"","value":"192"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"601:3:35"},"nodeType":"YulFunctionCall","src":"601:33:35"},"nodeType":"YulIf","src":"598:2:35"},{"nodeType":"YulAssignment","src":"670:52:35","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"712:9:35"}],"functionName":{"name":"abi_decode_t_address_fromMemory","nodeType":"YulIdentifier","src":"680:31:35"},"nodeType":"YulFunctionCall","src":"680:42:35"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"670:6:35"}]},{"nodeType":"YulAssignment","src":"731:61:35","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"777:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"788:2:35","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"773:3:35"},"nodeType":"YulFunctionCall","src":"773:18:35"}],"functionName":{"name":"abi_decode_t_address_fromMemory","nodeType":"YulIdentifier","src":"741:31:35"},"nodeType":"YulFunctionCall","src":"741:51:35"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"731:6:35"}]},{"nodeType":"YulAssignment","src":"801:61:35","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"847:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"858:2:35","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"843:3:35"},"nodeType":"YulFunctionCall","src":"843:18:35"}],"functionName":{"name":"abi_decode_t_address_fromMemory","nodeType":"YulIdentifier","src":"811:31:35"},"nodeType":"YulFunctionCall","src":"811:51:35"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"801:6:35"}]},{"nodeType":"YulAssignment","src":"871:61:35","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"917:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"928:2:35","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"913:3:35"},"nodeType":"YulFunctionCall","src":"913:18:35"}],"functionName":{"name":"abi_decode_t_address_fromMemory","nodeType":"YulIdentifier","src":"881:31:35"},"nodeType":"YulFunctionCall","src":"881:51:35"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"871:6:35"}]},{"nodeType":"YulAssignment","src":"941:62:35","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"987:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"998:3:35","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"983:3:35"},"nodeType":"YulFunctionCall","src":"983:19:35"}],"functionName":{"name":"abi_decode_t_address_fromMemory","nodeType":"YulIdentifier","src":"951:31:35"},"nodeType":"YulFunctionCall","src":"951:52:35"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"941:6:35"}]},{"nodeType":"YulVariableDeclaration","src":"1012:39:35","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1035:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"1046:3:35","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1031:3:35"},"nodeType":"YulFunctionCall","src":"1031:19:35"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1025:5:35"},"nodeType":"YulFunctionCall","src":"1025:26:35"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"1016:5:35","type":""}]},{"body":{"nodeType":"YulBlock","src":"1103:26:35","statements":[{"expression":{"arguments":[{"name":"value5","nodeType":"YulIdentifier","src":"1112:6:35"},{"name":"value5","nodeType":"YulIdentifier","src":"1120:6:35"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1105:6:35"},"nodeType":"YulFunctionCall","src":"1105:22:35"},"nodeType":"YulExpressionStatement","src":"1105:22:35"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1073:5:35"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1084:5:35"},{"kind":"number","nodeType":"YulLiteral","src":"1091:8:35","type":"","value":"0xffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1080:3:35"},"nodeType":"YulFunctionCall","src":"1080:20:35"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1070:2:35"},"nodeType":"YulFunctionCall","src":"1070:31:35"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1063:6:35"},"nodeType":"YulFunctionCall","src":"1063:39:35"},"nodeType":"YulIf","src":"1060:2:35"},{"nodeType":"YulAssignment","src":"1138:15:35","value":{"name":"value","nodeType":"YulIdentifier","src":"1148:5:35"},"variableNames":[{"name":"value5","nodeType":"YulIdentifier","src":"1138:6:35"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_addresst_addresst_addresst_uint24_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"514:9:35","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"525:7:35","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"537:6:35","type":""},{"name":"value1","nodeType":"YulTypedName","src":"545:6:35","type":""},{"name":"value2","nodeType":"YulTypedName","src":"553:6:35","type":""},{"name":"value3","nodeType":"YulTypedName","src":"561:6:35","type":""},{"name":"value4","nodeType":"YulTypedName","src":"569:6:35","type":""},{"name":"value5","nodeType":"YulTypedName","src":"577:6:35","type":""}],"src":"423:736:35"},{"body":{"nodeType":"YulBlock","src":"1242:219:35","statements":[{"body":{"nodeType":"YulBlock","src":"1288:26:35","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1297:6:35"},{"name":"value0","nodeType":"YulIdentifier","src":"1305:6:35"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1290:6:35"},"nodeType":"YulFunctionCall","src":"1290:22:35"},"nodeType":"YulExpressionStatement","src":"1290:22:35"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1263:7:35"},{"name":"headStart","nodeType":"YulIdentifier","src":"1272:9:35"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1259:3:35"},"nodeType":"YulFunctionCall","src":"1259:23:35"},{"kind":"number","nodeType":"YulLiteral","src":"1284:2:35","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1255:3:35"},"nodeType":"YulFunctionCall","src":"1255:32:35"},"nodeType":"YulIf","src":"1252:2:35"},{"nodeType":"YulVariableDeclaration","src":"1323:29:35","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1342:9:35"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1336:5:35"},"nodeType":"YulFunctionCall","src":"1336:16:35"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"1327:5:35","type":""}]},{"body":{"nodeType":"YulBlock","src":"1405:26:35","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1414:6:35"},{"name":"value0","nodeType":"YulIdentifier","src":"1422:6:35"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1407:6:35"},"nodeType":"YulFunctionCall","src":"1407:22:35"},"nodeType":"YulExpressionStatement","src":"1407:22:35"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1374:5:35"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1395:5:35"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1388:6:35"},"nodeType":"YulFunctionCall","src":"1388:13:35"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1381:6:35"},"nodeType":"YulFunctionCall","src":"1381:21:35"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1371:2:35"},"nodeType":"YulFunctionCall","src":"1371:32:35"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1364:6:35"},"nodeType":"YulFunctionCall","src":"1364:40:35"},"nodeType":"YulIf","src":"1361:2:35"},{"nodeType":"YulAssignment","src":"1440:15:35","value":{"name":"value","nodeType":"YulIdentifier","src":"1450:5:35"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1440:6:35"}]}]},"name":"abi_decode_tuple_t_bool_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1208:9:35","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1219:7:35","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1231:6:35","type":""}],"src":"1164:297:35"},{"body":{"nodeType":"YulBlock","src":"1545:218:35","statements":[{"body":{"nodeType":"YulBlock","src":"1591:26:35","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1600:6:35"},{"name":"value0","nodeType":"YulIdentifier","src":"1608:6:35"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1593:6:35"},"nodeType":"YulFunctionCall","src":"1593:22:35"},"nodeType":"YulExpressionStatement","src":"1593:22:35"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1566:7:35"},{"name":"headStart","nodeType":"YulIdentifier","src":"1575:9:35"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1562:3:35"},"nodeType":"YulFunctionCall","src":"1562:23:35"},{"kind":"number","nodeType":"YulLiteral","src":"1587:2:35","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1558:3:35"},"nodeType":"YulFunctionCall","src":"1558:32:35"},"nodeType":"YulIf","src":"1555:2:35"},{"nodeType":"YulVariableDeclaration","src":"1626:29:35","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1645:9:35"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1639:5:35"},"nodeType":"YulFunctionCall","src":"1639:16:35"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"1630:5:35","type":""}]},{"body":{"nodeType":"YulBlock","src":"1707:26:35","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1716:6:35"},{"name":"value0","nodeType":"YulIdentifier","src":"1724:6:35"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1709:6:35"},"nodeType":"YulFunctionCall","src":"1709:22:35"},"nodeType":"YulExpressionStatement","src":"1709:22:35"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1677:5:35"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1695:1:35","type":"","value":"2"},{"name":"value","nodeType":"YulIdentifier","src":"1698:5:35"}],"functionName":{"name":"signextend","nodeType":"YulIdentifier","src":"1684:10:35"},"nodeType":"YulFunctionCall","src":"1684:20:35"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1674:2:35"},"nodeType":"YulFunctionCall","src":"1674:31:35"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1667:6:35"},"nodeType":"YulFunctionCall","src":"1667:39:35"},"nodeType":"YulIf","src":"1664:2:35"},{"nodeType":"YulAssignment","src":"1742:15:35","value":{"name":"value","nodeType":"YulIdentifier","src":"1752:5:35"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1742:6:35"}]}]},"name":"abi_decode_tuple_t_int24_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1511:9:35","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1522:7:35","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1534:6:35","type":""}],"src":"1466:297:35"},{"body":{"nodeType":"YulBlock","src":"1923:233:35","statements":[{"nodeType":"YulAssignment","src":"1933:26:35","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1945:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"1956:2:35","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1941:3:35"},"nodeType":"YulFunctionCall","src":"1941:18:35"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1933:4:35"}]},{"nodeType":"YulVariableDeclaration","src":"1968:29:35","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1986:3:35","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"1991:1:35","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1982:3:35"},"nodeType":"YulFunctionCall","src":"1982:11:35"},{"kind":"number","nodeType":"YulLiteral","src":"1995:1:35","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1978:3:35"},"nodeType":"YulFunctionCall","src":"1978:19:35"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"1972:2:35","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2013:9:35"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2028:6:35"},{"name":"_1","nodeType":"YulIdentifier","src":"2036:2:35"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2024:3:35"},"nodeType":"YulFunctionCall","src":"2024:15:35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2006:6:35"},"nodeType":"YulFunctionCall","src":"2006:34:35"},"nodeType":"YulExpressionStatement","src":"2006:34:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2060:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"2071:2:35","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2056:3:35"},"nodeType":"YulFunctionCall","src":"2056:18:35"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"2080:6:35"},{"name":"_1","nodeType":"YulIdentifier","src":"2088:2:35"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2076:3:35"},"nodeType":"YulFunctionCall","src":"2076:15:35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2049:6:35"},"nodeType":"YulFunctionCall","src":"2049:43:35"},"nodeType":"YulExpressionStatement","src":"2049:43:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2112:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"2123:2:35","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2108:3:35"},"nodeType":"YulFunctionCall","src":"2108:18:35"},{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"2132:6:35"},{"kind":"number","nodeType":"YulLiteral","src":"2140:8:35","type":"","value":"0xffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2128:3:35"},"nodeType":"YulFunctionCall","src":"2128:21:35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2101:6:35"},"nodeType":"YulFunctionCall","src":"2101:49:35"},"nodeType":"YulExpressionStatement","src":"2101:49:35"}]},"name":"abi_encode_tuple_t_address_t_address_t_uint24__to_t_address_t_address_t_uint24__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1876:9:35","type":""},{"name":"value2","nodeType":"YulTypedName","src":"1887:6:35","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1895:6:35","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1903:6:35","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1914:4:35","type":""}],"src":"1768:388:35"},{"body":{"nodeType":"YulBlock","src":"2290:145:35","statements":[{"nodeType":"YulAssignment","src":"2300:26:35","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2312:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"2323:2:35","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2308:3:35"},"nodeType":"YulFunctionCall","src":"2308:18:35"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2300:4:35"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2342:9:35"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2357:6:35"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2373:3:35","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"2378:1:35","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2369:3:35"},"nodeType":"YulFunctionCall","src":"2369:11:35"},{"kind":"number","nodeType":"YulLiteral","src":"2382:1:35","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2365:3:35"},"nodeType":"YulFunctionCall","src":"2365:19:35"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2353:3:35"},"nodeType":"YulFunctionCall","src":"2353:32:35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2335:6:35"},"nodeType":"YulFunctionCall","src":"2335:51:35"},"nodeType":"YulExpressionStatement","src":"2335:51:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2406:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"2417:2:35","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2402:3:35"},"nodeType":"YulFunctionCall","src":"2402:18:35"},{"name":"value1","nodeType":"YulIdentifier","src":"2422:6:35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2395:6:35"},"nodeType":"YulFunctionCall","src":"2395:34:35"},"nodeType":"YulExpressionStatement","src":"2395:34:35"}]},"name":"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2251:9:35","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2262:6:35","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2270:6:35","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2281:4:35","type":""}],"src":"2161:274:35"},{"body":{"nodeType":"YulBlock","src":"2614:173:35","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2631:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"2642:2:35","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2624:6:35"},"nodeType":"YulFunctionCall","src":"2624:21:35"},"nodeType":"YulExpressionStatement","src":"2624:21:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2665:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"2676:2:35","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2661:3:35"},"nodeType":"YulFunctionCall","src":"2661:18:35"},{"kind":"number","nodeType":"YulLiteral","src":"2681:2:35","type":"","value":"23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2654:6:35"},"nodeType":"YulFunctionCall","src":"2654:30:35"},"nodeType":"YulExpressionStatement","src":"2654:30:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2704:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"2715:2:35","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2700:3:35"},"nodeType":"YulFunctionCall","src":"2700:18:35"},{"kind":"string","nodeType":"YulLiteral","src":"2720:25:35","type":"","value":"Invalid factory address"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2693:6:35"},"nodeType":"YulFunctionCall","src":"2693:53:35"},"nodeType":"YulExpressionStatement","src":"2693:53:35"},{"nodeType":"YulAssignment","src":"2755:26:35","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2767:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"2778:2:35","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2763:3:35"},"nodeType":"YulFunctionCall","src":"2763:18:35"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2755:4:35"}]}]},"name":"abi_encode_tuple_t_stringliteral_16cfceb364b99915d337c26d8ba3bdcbce06c3595a535f586d679980d6a44d7d__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2591:9:35","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2605:4:35","type":""}],"src":"2440:347:35"},{"body":{"nodeType":"YulBlock","src":"2966:169:35","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2983:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"2994:2:35","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2976:6:35"},"nodeType":"YulFunctionCall","src":"2976:21:35"},"nodeType":"YulExpressionStatement","src":"2976:21:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3017:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"3028:2:35","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3013:3:35"},"nodeType":"YulFunctionCall","src":"3013:18:35"},{"kind":"number","nodeType":"YulLiteral","src":"3033:2:35","type":"","value":"19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3006:6:35"},"nodeType":"YulFunctionCall","src":"3006:30:35"},"nodeType":"YulExpressionStatement","src":"3006:30:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3056:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"3067:2:35","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3052:3:35"},"nodeType":"YulFunctionCall","src":"3052:18:35"},{"kind":"string","nodeType":"YulLiteral","src":"3072:21:35","type":"","value":"Pool does not exist"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3045:6:35"},"nodeType":"YulFunctionCall","src":"3045:49:35"},"nodeType":"YulExpressionStatement","src":"3045:49:35"},{"nodeType":"YulAssignment","src":"3103:26:35","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3115:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"3126:2:35","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3111:3:35"},"nodeType":"YulFunctionCall","src":"3111:18:35"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3103:4:35"}]}]},"name":"abi_encode_tuple_t_stringliteral_5431fb1d188dcb2accc598cd1f0bfc0c6d8ac1fdd8f589953b20179c9a903b37__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2943:9:35","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2957:4:35","type":""}],"src":"2792:343:35"},{"body":{"nodeType":"YulBlock","src":"3314:161:35","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3331:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"3342:2:35","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3324:6:35"},"nodeType":"YulFunctionCall","src":"3324:21:35"},"nodeType":"YulExpressionStatement","src":"3324:21:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3365:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"3376:2:35","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3361:3:35"},"nodeType":"YulFunctionCall","src":"3361:18:35"},{"kind":"number","nodeType":"YulLiteral","src":"3381:2:35","type":"","value":"11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3354:6:35"},"nodeType":"YulFunctionCall","src":"3354:30:35"},"nodeType":"YulExpressionStatement","src":"3354:30:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3404:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"3415:2:35","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3400:3:35"},"nodeType":"YulFunctionCall","src":"3400:18:35"},{"kind":"string","nodeType":"YulLiteral","src":"3420:13:35","type":"","value":"Invalid fee"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3393:6:35"},"nodeType":"YulFunctionCall","src":"3393:41:35"},"nodeType":"YulExpressionStatement","src":"3393:41:35"},{"nodeType":"YulAssignment","src":"3443:26:35","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3455:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"3466:2:35","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3451:3:35"},"nodeType":"YulFunctionCall","src":"3451:18:35"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3443:4:35"}]}]},"name":"abi_encode_tuple_t_stringliteral_7ff6289abbb0687399ebc1aafeab18832fc5a110fcdbd805e18f72d422711e7a__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3291:9:35","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3305:4:35","type":""}],"src":"3140:335:35"},{"body":{"nodeType":"YulBlock","src":"3654:169:35","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3671:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"3682:2:35","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3664:6:35"},"nodeType":"YulFunctionCall","src":"3664:21:35"},"nodeType":"YulExpressionStatement","src":"3664:21:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3705:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"3716:2:35","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3701:3:35"},"nodeType":"YulFunctionCall","src":"3701:18:35"},{"kind":"number","nodeType":"YulLiteral","src":"3721:2:35","type":"","value":"19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3694:6:35"},"nodeType":"YulFunctionCall","src":"3694:30:35"},"nodeType":"YulExpressionStatement","src":"3694:30:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3744:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"3755:2:35","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3740:3:35"},"nodeType":"YulFunctionCall","src":"3740:18:35"},{"kind":"string","nodeType":"YulLiteral","src":"3760:21:35","type":"","value":"Invalid swap router"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3733:6:35"},"nodeType":"YulFunctionCall","src":"3733:49:35"},"nodeType":"YulExpressionStatement","src":"3733:49:35"},{"nodeType":"YulAssignment","src":"3791:26:35","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3803:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"3814:2:35","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3799:3:35"},"nodeType":"YulFunctionCall","src":"3799:18:35"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3791:4:35"}]}]},"name":"abi_encode_tuple_t_stringliteral_a80ff0b859aa4f4f9d71f3bd675f38ba96b010e98f529811ec38e8b4da949a9c__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3631:9:35","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3645:4:35","type":""}],"src":"3480:343:35"},{"body":{"nodeType":"YulBlock","src":"4002:164:35","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4019:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"4030:2:35","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4012:6:35"},"nodeType":"YulFunctionCall","src":"4012:21:35"},"nodeType":"YulExpressionStatement","src":"4012:21:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4053:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"4064:2:35","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4049:3:35"},"nodeType":"YulFunctionCall","src":"4049:18:35"},{"kind":"number","nodeType":"YulLiteral","src":"4069:2:35","type":"","value":"14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4042:6:35"},"nodeType":"YulFunctionCall","src":"4042:30:35"},"nodeType":"YulExpressionStatement","src":"4042:30:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4092:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"4103:2:35","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4088:3:35"},"nodeType":"YulFunctionCall","src":"4088:18:35"},{"kind":"string","nodeType":"YulLiteral","src":"4108:16:35","type":"","value":"Invalid token0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4081:6:35"},"nodeType":"YulFunctionCall","src":"4081:44:35"},"nodeType":"YulExpressionStatement","src":"4081:44:35"},{"nodeType":"YulAssignment","src":"4134:26:35","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4146:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"4157:2:35","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4142:3:35"},"nodeType":"YulFunctionCall","src":"4142:18:35"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4134:4:35"}]}]},"name":"abi_encode_tuple_t_stringliteral_b6d5a7bdcfb780f231026790364d4d2382ce8e57553b444e7dcd9b8bf1483029__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3979:9:35","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3993:4:35","type":""}],"src":"3828:338:35"},{"body":{"nodeType":"YulBlock","src":"4345:174:35","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4362:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"4373:2:35","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4355:6:35"},"nodeType":"YulFunctionCall","src":"4355:21:35"},"nodeType":"YulExpressionStatement","src":"4355:21:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4396:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"4407:2:35","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4392:3:35"},"nodeType":"YulFunctionCall","src":"4392:18:35"},{"kind":"number","nodeType":"YulLiteral","src":"4412:2:35","type":"","value":"24"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4385:6:35"},"nodeType":"YulFunctionCall","src":"4385:30:35"},"nodeType":"YulExpressionStatement","src":"4385:30:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4435:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"4446:2:35","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4431:3:35"},"nodeType":"YulFunctionCall","src":"4431:18:35"},{"kind":"string","nodeType":"YulLiteral","src":"4451:26:35","type":"","value":"Invalid position manager"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4424:6:35"},"nodeType":"YulFunctionCall","src":"4424:54:35"},"nodeType":"YulExpressionStatement","src":"4424:54:35"},{"nodeType":"YulAssignment","src":"4487:26:35","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4499:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"4510:2:35","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4495:3:35"},"nodeType":"YulFunctionCall","src":"4495:18:35"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4487:4:35"}]}]},"name":"abi_encode_tuple_t_stringliteral_c93e361b037cd714035f17dd926b952b8bfa26f6ec37918364159fab925b85cc__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4322:9:35","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4336:4:35","type":""}],"src":"4171:348:35"},{"body":{"nodeType":"YulBlock","src":"4698:164:35","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4715:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"4726:2:35","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4708:6:35"},"nodeType":"YulFunctionCall","src":"4708:21:35"},"nodeType":"YulExpressionStatement","src":"4708:21:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4749:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"4760:2:35","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4745:3:35"},"nodeType":"YulFunctionCall","src":"4745:18:35"},{"kind":"number","nodeType":"YulLiteral","src":"4765:2:35","type":"","value":"14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4738:6:35"},"nodeType":"YulFunctionCall","src":"4738:30:35"},"nodeType":"YulExpressionStatement","src":"4738:30:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4788:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"4799:2:35","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4784:3:35"},"nodeType":"YulFunctionCall","src":"4784:18:35"},{"kind":"string","nodeType":"YulLiteral","src":"4804:16:35","type":"","value":"Invalid token1"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4777:6:35"},"nodeType":"YulFunctionCall","src":"4777:44:35"},"nodeType":"YulExpressionStatement","src":"4777:44:35"},{"nodeType":"YulAssignment","src":"4830:26:35","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4842:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"4853:2:35","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4838:3:35"},"nodeType":"YulFunctionCall","src":"4838:18:35"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4830:4:35"}]}]},"name":"abi_encode_tuple_t_stringliteral_cdc277a530a3ae06e75e0b2a5974d2c1da8131c539ac243fcb5311ed1b234a7c__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4675:9:35","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4689:4:35","type":""}],"src":"4524:338:35"}]},"contents":"{\n    { }\n    function abi_decode_t_address_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := abi_decode_t_address_fromMemory(headStart)\n    }\n    function abi_decode_tuple_t_addresst_addresst_addresst_addresst_addresst_uint24_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5\n    {\n        if slt(sub(dataEnd, headStart), 192) { revert(value4, value4) }\n        value0 := abi_decode_t_address_fromMemory(headStart)\n        value1 := abi_decode_t_address_fromMemory(add(headStart, 32))\n        value2 := abi_decode_t_address_fromMemory(add(headStart, 64))\n        value3 := abi_decode_t_address_fromMemory(add(headStart, 96))\n        value4 := abi_decode_t_address_fromMemory(add(headStart, 128))\n        let value := mload(add(headStart, 160))\n        if iszero(eq(value, and(value, 0xffffff))) { revert(value5, value5) }\n        value5 := value\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let value := mload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(value0, value0) }\n        value0 := value\n    }\n    function abi_decode_tuple_t_int24_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let value := mload(headStart)\n        if iszero(eq(value, signextend(2, value))) { revert(value0, value0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint24__to_t_address_t_address_t_uint24__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), and(value2, 0xffffff))\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_stringliteral_16cfceb364b99915d337c26d8ba3bdcbce06c3595a535f586d679980d6a44d7d__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 23)\n        mstore(add(headStart, 64), \"Invalid factory address\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_5431fb1d188dcb2accc598cd1f0bfc0c6d8ac1fdd8f589953b20179c9a903b37__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 19)\n        mstore(add(headStart, 64), \"Pool does not exist\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_7ff6289abbb0687399ebc1aafeab18832fc5a110fcdbd805e18f72d422711e7a__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 11)\n        mstore(add(headStart, 64), \"Invalid fee\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_a80ff0b859aa4f4f9d71f3bd675f38ba96b010e98f529811ec38e8b4da949a9c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 19)\n        mstore(add(headStart, 64), \"Invalid swap router\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_b6d5a7bdcfb780f231026790364d4d2382ce8e57553b444e7dcd9b8bf1483029__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 14)\n        mstore(add(headStart, 64), \"Invalid token0\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_c93e361b037cd714035f17dd926b952b8bfa26f6ec37918364159fab925b85cc__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 24)\n        mstore(add(headStart, 64), \"Invalid position manager\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_cdc277a530a3ae06e75e0b2a5974d2c1da8131c539ac243fcb5311ed1b234a7c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 14)\n        mstore(add(headStart, 64), \"Invalid token1\")\n        tail := add(headStart, 96)\n    }\n}","id":35,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"","opcodes":"PUSH2 0x160 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x12 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x263C CODESIZE SUB DUP1 PUSH3 0x263C DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x35 SWAP2 PUSH3 0x57C JUMP JUMPDEST PUSH1 0x0 PUSH3 0x41 PUSH3 0x537 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 DUP2 OR DUP3 SSTORE PUSH1 0x40 MLOAD SWAP3 SWAP4 POP SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP3 SWAP1 LOG3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH3 0xBD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0xB4 SWAP1 PUSH3 0x68C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH3 0xE6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0xB4 SWAP1 PUSH3 0x77E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH3 0x10F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0xB4 SWAP1 PUSH3 0x71F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH3 0x138 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0xB4 SWAP1 PUSH3 0x756 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH3 0x161 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0xB4 SWAP1 PUSH3 0x7B5 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH3 0xFFFFFF AND GT PUSH3 0x189 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0xB4 SWAP1 PUSH3 0x6FA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT PUSH1 0x60 DUP8 DUP2 SHL DUP3 AND PUSH1 0x80 MSTORE DUP7 DUP2 SHL DUP3 AND PUSH1 0xA0 MSTORE DUP6 DUP2 SHL DUP3 AND PUSH1 0xC0 MSTORE DUP5 DUP2 SHL DUP3 AND PUSH1 0xE0 MSTORE DUP4 SWAP1 SHL AND PUSH2 0x100 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xE8 SHL SUB NOT PUSH1 0xE8 DUP3 SWAP1 SHL AND PUSH2 0x120 MSTORE PUSH1 0x40 MLOAD PUSH4 0xB4C7741 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND SWAP1 PUSH4 0x1698EE82 SWAP1 PUSH3 0x204 SWAP1 DUP8 SWAP1 DUP8 SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH3 0x64B JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x21D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0x232 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0x258 SWAP2 SWAP1 PUSH3 0x558 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH3 0x283 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0xB4 SWAP1 PUSH3 0x6C3 JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD0C93A7C PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x2BD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0x2D2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0x2F8 SWAP2 SWAP1 PUSH3 0x628 JUMP JUMPDEST PUSH1 0x2 SWAP1 DUP2 SIGNEXTEND SWAP1 SIGNEXTEND PUSH1 0xE8 SHL PUSH2 0x140 MSTORE PUSH1 0x40 MLOAD PUSH4 0x95EA7B3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0x95EA7B3 SWAP1 PUSH3 0x338 SWAP1 DUP10 SWAP1 PUSH1 0x0 NOT SWAP1 PUSH1 0x4 ADD PUSH3 0x673 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x353 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH3 0x368 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0x38E SWAP2 SWAP1 PUSH3 0x606 JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH4 0x95EA7B3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x95EA7B3 SWAP1 PUSH3 0x3C1 SWAP1 DUP10 SWAP1 PUSH1 0x0 NOT SWAP1 PUSH1 0x4 ADD PUSH3 0x673 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x3DC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH3 0x3F1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0x417 SWAP2 SWAP1 PUSH3 0x606 JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH4 0x95EA7B3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0x95EA7B3 SWAP1 PUSH3 0x44A SWAP1 DUP9 SWAP1 PUSH1 0x0 NOT SWAP1 PUSH1 0x4 ADD PUSH3 0x673 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x465 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH3 0x47A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0x4A0 SWAP2 SWAP1 PUSH3 0x606 JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH4 0x95EA7B3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x95EA7B3 SWAP1 PUSH3 0x4D3 SWAP1 DUP9 SWAP1 PUSH1 0x0 NOT SWAP1 PUSH1 0x4 ADD PUSH3 0x673 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x4EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH3 0x503 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0x529 SWAP2 SWAP1 PUSH3 0x606 JUMP JUMPDEST POP POP POP POP POP POP POP POP PUSH3 0x7DD JUMP JUMPDEST CALLER SWAP1 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x553 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x56A JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH3 0x575 DUP3 PUSH3 0x53B JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH3 0x595 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH3 0x5A0 DUP8 PUSH3 0x53B JUMP JUMPDEST SWAP6 POP PUSH3 0x5B0 PUSH1 0x20 DUP9 ADD PUSH3 0x53B JUMP JUMPDEST SWAP5 POP PUSH3 0x5C0 PUSH1 0x40 DUP9 ADD PUSH3 0x53B JUMP JUMPDEST SWAP4 POP PUSH3 0x5D0 PUSH1 0x60 DUP9 ADD PUSH3 0x53B JUMP JUMPDEST SWAP3 POP PUSH3 0x5E0 PUSH1 0x80 DUP9 ADD PUSH3 0x53B JUMP JUMPDEST SWAP2 POP PUSH1 0xA0 DUP8 ADD MLOAD PUSH3 0xFFFFFF DUP2 AND DUP2 EQ PUSH3 0x5F8 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x618 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH3 0x575 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x63A JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD DUP1 PUSH1 0x2 SIGNEXTEND DUP2 EQ PUSH3 0x575 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH3 0xFFFFFF SWAP1 SWAP2 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x17 SWAP1 DUP3 ADD MSTORE PUSH32 0x496E76616C696420666163746F72792061646472657373000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x13 SWAP1 DUP3 ADD MSTORE PUSH32 0x506F6F6C20646F6573206E6F7420657869737400000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xB SWAP1 DUP3 ADD MSTORE PUSH11 0x496E76616C696420666565 PUSH1 0xA8 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x13 SWAP1 DUP3 ADD MSTORE PUSH32 0x496E76616C6964207377617020726F7574657200000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH14 0x496E76616C696420746F6B656E3 PUSH1 0x94 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x18 SWAP1 DUP3 ADD MSTORE PUSH32 0x496E76616C696420706F736974696F6E206D616E616765720000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH14 0x496E76616C696420746F6B656E31 PUSH1 0x90 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH1 0x60 SHR PUSH1 0xA0 MLOAD PUSH1 0x60 SHR PUSH1 0xC0 MLOAD PUSH1 0x60 SHR PUSH1 0xE0 MLOAD PUSH1 0x60 SHR PUSH2 0x100 MLOAD PUSH1 0x60 SHR PUSH2 0x120 MLOAD PUSH1 0xE8 SHR PUSH2 0x140 MLOAD PUSH1 0xE8 SHR PUSH2 0x1D88 PUSH3 0x8B4 PUSH1 0x0 CODECOPY DUP1 PUSH2 0x6D0 MSTORE DUP1 PUSH2 0x719 MSTORE DUP1 PUSH2 0x73A MSTORE DUP1 PUSH2 0xC4D MSTORE POP DUP1 PUSH2 0x3FD MSTORE DUP1 PUSH2 0x5A9 MSTORE DUP1 PUSH2 0xC95 MSTORE DUP1 PUSH2 0x1272 MSTORE POP DUP1 PUSH2 0x113 MSTORE DUP1 PUSH2 0x199 MSTORE DUP1 PUSH2 0x587 MSTORE DUP1 PUSH2 0xBDC MSTORE DUP1 PUSH2 0xC71 MSTORE DUP1 PUSH2 0x1123 MSTORE DUP1 PUSH2 0x1243 MSTORE POP DUP1 PUSH2 0x1BA MSTORE DUP1 PUSH2 0x565 MSTORE DUP1 PUSH2 0x7F6 MSTORE DUP1 PUSH2 0x1098 MSTORE DUP1 PUSH2 0x1214 MSTORE POP DUP1 PUSH2 0x452 MSTORE DUP1 PUSH2 0xB1D MSTORE POP DUP1 PUSH2 0xADC MSTORE DUP1 PUSH2 0xE42 MSTORE DUP1 PUSH2 0xF09 MSTORE DUP1 PUSH2 0xFAC MSTORE DUP1 PUSH2 0x11D9 MSTORE POP DUP1 PUSH2 0x538 MSTORE DUP1 PUSH2 0xB41 MSTORE POP PUSH2 0x1D88 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x10C JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0x95 JUMPI DUP1 PUSH4 0xC853C4BC GT PUSH2 0x64 JUMPI DUP1 PUSH4 0xC853C4BC EQ PUSH2 0x34B JUMPI DUP1 PUSH4 0xD0C93A7C EQ PUSH2 0x36B JUMPI DUP1 PUSH4 0xD21220A7 EQ PUSH2 0x380 JUMPI DUP1 PUSH4 0xDDCA3F43 EQ PUSH2 0x395 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x3B7 JUMPI PUSH2 0x1EB JUMP JUMPDEST DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x2F7 JUMPI DUP1 PUSH4 0x9B1344AC EQ PUSH2 0x30C JUMPI DUP1 PUSH4 0xC31C9C07 EQ PUSH2 0x321 JUMPI DUP1 PUSH4 0xC45A0155 EQ PUSH2 0x336 JUMPI PUSH2 0x1EB JUMP JUMPDEST DUP1 PUSH4 0x62CA5772 GT PUSH2 0xDC JUMPI DUP1 PUSH4 0x62CA5772 EQ PUSH2 0x274 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x289 JUMPI DUP1 PUSH4 0x727DD228 EQ PUSH2 0x29E JUMPI DUP1 PUSH4 0x75A6A7A9 EQ PUSH2 0x2C0 JUMPI DUP1 PUSH4 0x791B98BC EQ PUSH2 0x2E2 JUMPI PUSH2 0x1EB JUMP JUMPDEST DUP1 PUSH3 0x9A9B7B EQ PUSH2 0x1F0 JUMPI DUP1 PUSH4 0xDFE1681 EQ PUSH2 0x21B JUMPI DUP1 PUSH4 0x20800A00 EQ PUSH2 0x23D JUMPI DUP1 PUSH4 0x5431C94E EQ PUSH2 0x254 JUMPI PUSH2 0x1EB JUMP JUMPDEST CALLDATASIZE PUSH2 0x1EB JUMPI PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD0E30DB0 CALLVALUE PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x16C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x180 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP PUSH1 0x0 PUSH1 0x2 CALLVALUE DUP2 PUSH2 0x191 JUMPI INVALID JUMPDEST DIV SWAP1 POP PUSH2 0x1DF PUSH32 0x0 PUSH32 0x0 DUP4 PUSH2 0x3D7 JUMP JUMPDEST POP PUSH2 0x1E8 PUSH2 0x51E JUMP JUMPDEST POP STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x205 PUSH2 0x7EE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x212 SWAP2 SWAP1 PUSH2 0x1C5F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x227 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x230 PUSH2 0x7F4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x212 SWAP2 SWAP1 PUSH2 0x1916 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x249 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x252 PUSH2 0x818 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x260 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x252 PUSH2 0x26F CALLDATASIZE PUSH1 0x4 PUSH2 0x1786 JUMP JUMPDEST PUSH2 0x8C6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x280 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x252 PUSH2 0x51E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x295 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x252 PUSH2 0xA14 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2B3 PUSH2 0xAC0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x212 SWAP2 SWAP1 PUSH2 0x1979 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2D5 PUSH2 0xAD1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x212 SWAP2 SWAP1 PUSH2 0x1952 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x230 PUSH2 0xADA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x303 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x230 PUSH2 0xAFE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x318 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2B3 PUSH2 0xB0D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x32D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x230 PUSH2 0xB1B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x342 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x230 PUSH2 0xB3F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x357 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x252 PUSH2 0x366 CALLDATASIZE PUSH1 0x4 PUSH2 0x185E JUMP JUMPDEST PUSH2 0xB63 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x377 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2B3 PUSH2 0xC4B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x38C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x230 PUSH2 0xC6F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3A1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3AA PUSH2 0xC93 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x212 SWAP2 SWAP1 PUSH2 0x1C4F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x252 PUSH2 0x3D2 CALLDATASIZE PUSH1 0x4 PUSH2 0x174E JUMP JUMPDEST PUSH2 0xCB7 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH2 0x100 DUP2 ADD DUP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP7 AND DUP3 MSTORE DUP5 DUP2 AND PUSH1 0x20 DUP4 ADD MSTORE PUSH3 0xFFFFFF PUSH32 0x0 AND DUP3 DUP5 ADD MSTORE ADDRESS PUSH1 0x60 DUP4 ADD MSTORE TIMESTAMP PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP3 ADD DUP5 SWAP1 MSTORE PUSH1 0x0 PUSH1 0xC0 DUP4 ADD DUP2 SWAP1 MSTORE PUSH1 0xE0 DUP4 ADD DUP2 SWAP1 MSTORE SWAP3 MLOAD PUSH4 0x414BF389 PUSH1 0xE0 SHL DUP2 MSTORE PUSH32 0x0 SWAP1 SWAP2 AND SWAP1 PUSH4 0x414BF389 SWAP1 PUSH2 0x489 SWAP1 DUP5 SWAP1 PUSH1 0x4 ADD PUSH2 0x1B38 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x4B7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4DB SWAP2 SWAP1 PUSH2 0x1876 JUMP JUMPDEST SWAP2 POP PUSH32 0xBDC89DF9460547640E2147BA22A6EF8476D5390EECC620E9D76FBAA551BF4E8A DUP4 DUP4 PUSH1 0x40 MLOAD PUSH2 0x50E SWAP3 SWAP2 SWAP1 PUSH2 0x1C68 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xB4C7741 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND SWAP1 PUSH4 0x1698EE82 SWAP1 PUSH2 0x5D1 SWAP1 PUSH32 0x0 SWAP1 PUSH32 0x0 SWAP1 PUSH32 0x0 SWAP1 PUSH1 0x4 ADD PUSH2 0x192A JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5FD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x621 SWAP2 SWAP1 PUSH2 0x176A JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x652 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x649 SWAP1 PUSH2 0x1A8A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x3850C7BD PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0xE0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x68E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x6A2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x6C6 SWAP2 SWAP1 PUSH2 0x17BE JUMP JUMPDEST POP SWAP5 SWAP7 POP SWAP3 SWAP5 POP POP PUSH32 0x0 PUSH1 0x4 DUP2 MUL SWAP4 POP PUSH1 0x0 SWAP3 POP SWAP1 POP PUSH1 0x2 DUP2 DUP2 SIGNEXTEND SWAP1 DUP5 DUP2 SIGNEXTEND SDIV DUP6 SUB PUSH1 0x2 SIGNEXTEND DUP2 PUSH2 0x711 JUMPI INVALID JUMPDEST SDIV MUL SWAP1 POP PUSH1 0x0 PUSH32 0x0 PUSH32 0x0 PUSH1 0x2 SIGNEXTEND PUSH1 0x2 DUP6 PUSH1 0x2 SIGNEXTEND DUP2 PUSH2 0x769 JUMPI INVALID JUMPDEST SDIV DUP7 ADD PUSH1 0x2 SIGNEXTEND DUP2 PUSH2 0x776 JUMPI INVALID JUMPDEST PUSH1 0x2 SLOAD SWAP2 SWAP1 SDIV SWAP2 SWAP1 SWAP2 MUL SWAP2 POP PUSH1 0xFF AND ISZERO PUSH2 0x792 JUMPI PUSH2 0x792 PUSH2 0xDB9 JUMP JUMPDEST PUSH2 0x79C DUP3 DUP3 PUSH2 0x1059 JUMP JUMPDEST PUSH32 0x15F744A7D97F7ABD1BC7398CB3F55BB78B9DD63011770E854D31D8D846F13EF3 TIMESTAMP PUSH2 0x7C7 DUP8 PUSH2 0x13DC JUMP JUMPDEST DUP7 DUP6 DUP6 PUSH1 0x1 PUSH1 0x40 MLOAD PUSH2 0x7DE SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1C76 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD DUP2 JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x820 PUSH2 0x141C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x831 PUSH2 0xAFE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x87A JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1D09 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST SELFBALANCE DUP1 ISZERO PUSH2 0x8C3 JUMPI PUSH2 0x889 PUSH2 0xAFE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x8FC DUP3 SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x8C1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP JUMPDEST POP JUMP JUMPDEST PUSH2 0x8CE PUSH2 0x141C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x8DF PUSH2 0xAFE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x928 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1D09 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x94E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x649 SWAP1 PUSH2 0x1987 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x974 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x649 SWAP1 PUSH2 0x1A06 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH2 0x9A3 SWAP1 ADDRESS SWAP1 PUSH1 0x4 ADD PUSH2 0x1916 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x9BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x9CF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x9F3 SWAP2 SWAP1 PUSH2 0x1876 JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0xA0F JUMPI PUSH2 0xA0F PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND DUP4 DUP4 PUSH2 0x1420 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0xA1C PUSH2 0x141C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xA2D PUSH2 0xAFE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xA76 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1D09 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP4 SWAP1 LOG3 PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x2 DUP1 SLOAD PUSH5 0x100000000 SWAP1 DIV SWAP1 SIGNEXTEND DUP2 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x2 DUP1 SLOAD PUSH2 0x100 SWAP1 DIV SWAP1 SIGNEXTEND DUP2 JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0xB6B PUSH2 0x141C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xB7C PUSH2 0xAFE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xBC5 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1D09 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x2E1A7D4D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND SWAP1 PUSH4 0x2E1A7D4D SWAP1 PUSH2 0xC11 SWAP1 DUP5 SWAP1 PUSH1 0x4 ADD PUSH2 0x1C5F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xC2B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xC3F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH2 0x889 PUSH2 0xAFE JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0xCBF PUSH2 0x141C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xCD0 PUSH2 0xAFE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xD19 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1D09 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xD5E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1CBD PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND SWAP4 SWAP3 AND SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 LOG3 PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0xFF AND PUSH2 0xDDB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x649 SWAP1 PUSH2 0x1A5B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SLOAD GT PUSH2 0xDFD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x649 SWAP1 PUSH2 0x1A31 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xA0 DUP2 ADD DUP3 MSTORE PUSH1 0x1 SLOAD DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 DUP2 DUP4 ADD DUP2 SWAP1 MSTORE PUSH1 0x60 DUP3 ADD MSTORE TIMESTAMP PUSH1 0x80 DUP3 ADD MSTORE SWAP1 MLOAD PUSH4 0x624E65F PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND SWAP2 PUSH4 0xC49CCBE SWAP2 PUSH2 0xE76 SWAP2 SWAP1 PUSH1 0x4 ADD PUSH2 0x1AF5 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xE8F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0xEBF JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0xEBC SWAP2 DUP2 ADD SWAP1 PUSH2 0x18D6 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0xEC8 JUMPI PUSH2 0xECB JUMP JUMPDEST POP POP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x80 DUP2 ADD DUP3 MSTORE PUSH1 0x1 SLOAD DUP2 MSTORE ADDRESS PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP2 DUP4 ADD DUP2 SWAP1 MSTORE PUSH1 0x60 DUP3 ADD MSTORE SWAP1 MLOAD PUSH4 0xFC6F7865 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND SWAP2 PUSH4 0xFC6F7865 SWAP2 PUSH2 0xF3D SWAP2 SWAP1 PUSH1 0x4 ADD PUSH2 0x1AB2 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xF56 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0xF86 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0xF83 SWAP2 DUP2 ADD SWAP1 PUSH2 0x18D6 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0xF8F JUMPI PUSH2 0xF92 JUMP JUMPDEST POP POP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH4 0x852CD8D PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND SWAP2 PUSH4 0x42966C68 SWAP2 PUSH2 0xFE0 SWAP2 SWAP1 PUSH1 0x4 ADD PUSH2 0x1C5F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xFFA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x100B JUMPI POP PUSH1 0x1 JUMPDEST POP PUSH1 0x2 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE PUSH1 0x0 PUSH1 0x1 DUP2 SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH32 0x2A189A700EF68D9815A7F1C9A2AA4FF3EADD8675084668B6F754A9FE403E33B9 SWAP2 PUSH2 0x104F SWAP2 DUP2 SWAP1 DUP2 SWAP1 PUSH2 0x195D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST DUP1 PUSH1 0x2 SIGNEXTEND DUP3 PUSH1 0x2 SIGNEXTEND SLT PUSH2 0x107E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x649 SWAP1 PUSH2 0x19AE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH2 0x10CD SWAP1 ADDRESS SWAP1 PUSH1 0x4 ADD PUSH2 0x1916 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x10E5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x10F9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x111D SWAP2 SWAP1 PUSH2 0x1876 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x70A08231 ADDRESS PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x116D SWAP2 SWAP1 PUSH2 0x1916 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1185 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1199 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x11BD SWAP2 SWAP1 PUSH2 0x1876 JUMP JUMPDEST SWAP1 POP DUP2 ISZERO DUP1 ISZERO PUSH2 0x11CB JUMPI POP DUP1 ISZERO JUMPDEST ISZERO PUSH2 0x11D7 JUMPI POP POP PUSH2 0x8C1 JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x88316456 PUSH1 0x40 MLOAD DUP1 PUSH2 0x160 ADD PUSH1 0x40 MSTORE DUP1 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x0 PUSH3 0xFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH1 0x2 SIGNEXTEND DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH1 0x2 SIGNEXTEND DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD TIMESTAMP DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12F6 SWAP2 SWAP1 PUSH2 0x1BA1 JUMP JUMPDEST PUSH1 0x80 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1310 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1340 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x133D SWAP2 DUP2 ADD SWAP1 PUSH2 0x188E JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1349 JUMPI PUSH2 0x13D6 JUMP JUMPDEST DUP4 ISZERO PUSH2 0x13D1 JUMPI PUSH1 0x1 DUP5 DUP2 SSTORE PUSH1 0x2 DUP1 SLOAD DUP10 DUP3 SIGNEXTEND PUSH3 0xFFFFFF SWAP1 DUP2 AND PUSH5 0x100000000 MUL PUSH7 0xFFFFFF00000000 NOT DUP14 DUP6 SIGNEXTEND SWAP1 SWAP3 AND PUSH2 0x100 MUL PUSH4 0xFFFFFF00 NOT PUSH1 0xFF NOT SWAP1 SWAP5 AND DUP7 OR SWAP4 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR AND OR SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH32 0x2A189A700EF68D9815A7F1C9A2AA4FF3EADD8675084668B6F754A9FE403E33B9 SWAP2 PUSH2 0x13C8 SWAP2 DUP12 SWAP1 DUP12 SWAP1 PUSH2 0x195D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP POP POP POP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GT PUSH2 0x1406 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x649 SWAP1 PUSH2 0x19DA JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP1 MUL PUSH1 0x60 SHR JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST CALLER SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP1 DUP3 ADD DUP5 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0xA9059CBB PUSH1 0xE0 SHL OR SWAP1 MSTORE PUSH2 0xA0F SWAP1 DUP5 SWAP1 PUSH1 0x0 PUSH2 0x14C2 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x151E SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0xA0F JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x14E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH2 0xA0F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2A DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1D29 PUSH1 0x2A SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x60 PUSH2 0x152D DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x1537 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x1578 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1CE3 PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1581 DUP6 PUSH2 0x1692 JUMP JUMPDEST PUSH2 0x15D2 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP8 PUSH1 0x40 MLOAD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x1610 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x15F1 JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1672 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1677 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x1687 DUP3 DUP3 DUP7 PUSH2 0x1698 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST EXTCODESIZE ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x16A7 JUMPI POP DUP2 PUSH2 0x1530 JUMP JUMPDEST DUP3 MLOAD ISZERO PUSH2 0x16B7 JUMPI DUP3 MLOAD DUP1 DUP5 PUSH1 0x20 ADD REVERT JUMPDEST DUP2 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1701 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x16E9 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x172E JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD PUSH2 0xFFFF DUP2 AND DUP2 EQ PUSH2 0x1417 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x175F JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1530 DUP2 PUSH2 0x1CA7 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x177B JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x1530 DUP2 PUSH2 0x1CA7 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1798 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x17A3 DUP2 PUSH2 0x1CA7 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x17B3 DUP2 PUSH2 0x1CA7 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xE0 DUP9 DUP11 SUB SLT ISZERO PUSH2 0x17D8 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP8 MLOAD PUSH2 0x17E3 DUP2 PUSH2 0x1CA7 JUMP JUMPDEST DUP1 SWAP8 POP POP PUSH1 0x20 DUP9 ADD MLOAD DUP1 PUSH1 0x2 SIGNEXTEND DUP2 EQ PUSH2 0x17FA JUMPI DUP4 DUP5 REVERT JUMPDEST SWAP6 POP PUSH2 0x1808 PUSH1 0x40 DUP10 ADD PUSH2 0x173C JUMP JUMPDEST SWAP5 POP PUSH2 0x1816 PUSH1 0x60 DUP10 ADD PUSH2 0x173C JUMP JUMPDEST SWAP4 POP PUSH2 0x1824 PUSH1 0x80 DUP10 ADD PUSH2 0x173C JUMP JUMPDEST SWAP3 POP PUSH1 0xA0 DUP9 ADD MLOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x1839 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0xC0 DUP10 ADD MLOAD SWAP1 SWAP3 POP DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x184E JUMPI DUP2 DUP3 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP6 SWAP9 SWAP2 SWAP5 SWAP8 POP SWAP3 SWAP6 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x186F JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1887 JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x18A3 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP5 MLOAD SWAP4 POP PUSH1 0x20 DUP6 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x18C0 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH1 0x40 DUP7 ADD MLOAD PUSH1 0x60 SWAP1 SWAP7 ADD MLOAD SWAP5 SWAP8 SWAP1 SWAP7 POP SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x18E8 JUMPI DUP2 DUP3 REVERT JUMPDEST POP POP DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD MLOAD SWAP1 SWAP3 SWAP1 SWAP2 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x2 SIGNEXTEND SWAP1 MSTORE JUMP JUMPDEST PUSH3 0xFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH3 0xFFFFFF SWAP1 SWAP2 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP3 ISZERO ISZERO DUP4 MSTORE PUSH1 0x2 SWAP2 DUP3 SIGNEXTEND PUSH1 0x20 DUP5 ADD MSTORE SWAP1 SIGNEXTEND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x2 SWAP2 SWAP1 SWAP2 SIGNEXTEND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xD SWAP1 DUP3 ADD MSTORE PUSH13 0x24B73B30B634B2103A37B5B2B7 PUSH1 0x99 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x12 SWAP1 DUP3 ADD MSTORE PUSH18 0x496E76616C6964207469636B2072616E6765 PUSH1 0x70 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x12 SWAP1 DUP3 ADD MSTORE PUSH18 0x496E76616C69642073717274207072696365 PUSH1 0x70 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x11 SWAP1 DUP3 ADD MSTORE PUSH17 0x125B9D985B1A59081C9958DA5C1A595B9D PUSH1 0x7A SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x10 SWAP1 DUP3 ADD MSTORE PUSH16 0x125B9D985B1A59081D1BDAD95B881251 PUSH1 0x82 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x15 SWAP1 DUP3 ADD MSTORE PUSH21 0x4E6F20706F736974696F6E20746F2072656D6F7665 PUSH1 0x58 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH14 0x141BDBDB081B9BDD08199BDD5B99 PUSH1 0x92 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 DUP1 DUP4 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP3 ADD MSTORE PUSH1 0x40 DUP1 DUP4 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB SWAP1 DUP2 AND SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 SWAP3 DUP4 ADD MLOAD AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 ADD SWAP1 POP DUP3 MLOAD DUP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB PUSH1 0x20 DUP5 ADD MLOAD AND PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP4 ADD MLOAD PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP4 ADD MLOAD PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x80 DUP4 ADD MLOAD PUSH1 0x80 DUP4 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0x20 DUP1 DUP5 ADD MLOAD DUP3 AND SWAP1 DUP4 ADD MSTORE PUSH1 0x40 DUP1 DUP5 ADD MLOAD PUSH3 0xFFFFFF AND SWAP1 DUP4 ADD MSTORE PUSH1 0x60 DUP1 DUP5 ADD MLOAD DUP3 AND SWAP1 DUP4 ADD MSTORE PUSH1 0x80 DUP1 DUP5 ADD MLOAD SWAP1 DUP4 ADD MSTORE PUSH1 0xA0 DUP4 DUP2 ADD MLOAD SWAP1 DUP4 ADD MSTORE PUSH1 0xC0 DUP1 DUP5 ADD MLOAD SWAP1 DUP4 ADD MSTORE PUSH1 0xE0 SWAP3 DUP4 ADD MLOAD AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH2 0x100 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x160 DUP3 ADD SWAP1 POP PUSH2 0x1BB5 DUP3 DUP5 MLOAD PUSH2 0x18F9 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MLOAD PUSH2 0x1BC7 PUSH1 0x20 DUP5 ADD DUP3 PUSH2 0x18F9 JUMP JUMPDEST POP PUSH1 0x40 DUP4 ADD MLOAD PUSH2 0x1BDA PUSH1 0x40 DUP5 ADD DUP3 PUSH2 0x190D JUMP JUMPDEST POP PUSH1 0x60 DUP4 ADD MLOAD PUSH2 0x1BED PUSH1 0x60 DUP5 ADD DUP3 PUSH2 0x1906 JUMP JUMPDEST POP PUSH1 0x80 DUP4 ADD MLOAD PUSH2 0x1C00 PUSH1 0x80 DUP5 ADD DUP3 PUSH2 0x1906 JUMP JUMPDEST POP PUSH1 0xA0 DUP4 ADD MLOAD PUSH1 0xA0 DUP4 ADD MSTORE PUSH1 0xC0 DUP4 ADD MLOAD PUSH1 0xC0 DUP4 ADD MSTORE PUSH1 0xE0 DUP4 ADD MLOAD PUSH1 0xE0 DUP4 ADD MSTORE PUSH2 0x100 DUP1 DUP5 ADD MLOAD DUP2 DUP5 ADD MSTORE POP PUSH2 0x120 DUP1 DUP5 ADD MLOAD PUSH2 0x1C3E DUP3 DUP6 ADD DUP3 PUSH2 0x18F9 JUMP JUMPDEST POP POP PUSH2 0x140 SWAP3 DUP4 ADD MLOAD SWAP2 SWAP1 SWAP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH3 0xFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST SWAP6 DUP7 MSTORE PUSH1 0x20 DUP7 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0x2 SWAP3 DUP4 SIGNEXTEND PUSH1 0x40 DUP7 ADD MSTORE SWAP1 DUP3 SIGNEXTEND PUSH1 0x60 DUP6 ADD MSTORE SWAP1 SIGNEXTEND PUSH1 0x80 DUP4 ADD MSTORE ISZERO ISZERO PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x8C3 JUMPI PUSH1 0x0 DUP1 REVERT INVALID 0x4F PUSH24 0x6E61626C653A206E6577206F776E65722069732074686520 PUSH27 0x65726F2061646472657373416464726573733A20696E7375666669 PUSH4 0x69656E74 KECCAK256 PUSH3 0x616C61 PUSH15 0x636520666F722063616C6C4F776E61 PUSH3 0x6C653A KECCAK256 PUSH4 0x616C6C65 PUSH19 0x206973206E6F7420746865206F776E65725361 PUSH7 0x6545524332303A KECCAK256 GASLIMIT MSTORE NUMBER ORIGIN ADDRESS KECCAK256 PUSH16 0x7065726174696F6E20646964206E6F74 KECCAK256 PUSH20 0x756363656564A26469706673582212209CED09FB 0xB0 EXTCODECOPY AND LOG4 PUSH12 0x80502E59400F96CC1EF89211 MLOAD 0x4B CREATE 0x27 0xA9 PUSH17 0x91584D887364736F6C6343000706003300 ","sourceMap":"863:8959:31:-:0;;;1928:1529;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;884:17:0;904:12;:10;:12::i;:::-;926:6;:18;;-1:-1:-1;;;;;;926:18:0;-1:-1:-1;;;;;926:18:0;;;;;;;959:43;;926:18;;-1:-1:-1;926:18:0;959:43;;926:6;;959:43;-1:-1:-1;;;;;;2132:22:31;;2124:58;;;;-1:-1:-1;;;2124:58:31;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;2201:30:31;;2193:67;;;;-1:-1:-1;;;2193:67:31;;;;;;;:::i;:::-;-1:-1:-1;;;;;2279:25:31;;2271:57;;;;-1:-1:-1;;;2271:57:31;;;;;;;:::i;:::-;-1:-1:-1;;;;;2347:21:31;;2339:48;;;;-1:-1:-1;;;2339:48:31;;;;;;;:::i;:::-;-1:-1:-1;;;;;2406:21:31;;2398:48;;;;-1:-1:-1;;;2398:48:31;;;;;;;:::i;:::-;2472:1;2465:4;:8;;;2457:32;;;;-1:-1:-1;;;2457:32:31;;;;;;;:::i;:::-;-1:-1:-1;;;;;;2502:37:31;;;;;;;;2550:63;;;;;;;2624:37;;;;;;;2672:16;;;;;;;2699;;;;;;-1:-1:-1;;;;;;2726:10:31;;;;;;;2838:109;;-1:-1:-1;;;2838:109:31;;2816:19;;-1:-1:-1;;;;;2502:37:31;;;2838:35;;:109;;2681:7;;2708;;2732:4;;2838:109;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2816:131;-1:-1:-1;;;;;;2966:25:31;;2958:57;;;;-1:-1:-1;;;2958:57:31;;;;;;;:::i;:::-;3055:11;-1:-1:-1;;;;;3040:39:31;;:41;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3026:55;;;;;;;;;;3150:69;;-1:-1:-1;;;3150:69:31;;-1:-1:-1;;;;;3150:23:31;;;;;:69;;3182:16;;-1:-1:-1;;3201:17:31;3150:69;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;3230:69:31;;-1:-1:-1;;;3230:69:31;;-1:-1:-1;;;;;3230:23:31;;;;;:69;;3262:16;;-1:-1:-1;;3281:17:31;3230:69;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;3310:64:31;;-1:-1:-1;;;3310:64:31;;-1:-1:-1;;;;;3310:23:31;;;;;:64;;3342:11;;-1:-1:-1;;3356:17:31;3310:64;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;3385:64:31;;-1:-1:-1;;;3385:64:31;;-1:-1:-1;;;;;3385:23:31;;;;;:64;;3417:11;;-1:-1:-1;;3431:17:31;3385:64;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;1928:1529;;;;;;;863:8959;;598:104:9;685:10;598:104;:::o;14:179:35:-;95:13;;-1:-1:-1;;;;;137:31:35;;127:42;;117:2;;183:1;180;173:12;117:2;76:117;;;:::o;198:220::-;;321:2;309:9;300:7;296:23;292:32;289:2;;;342:6;334;327:22;289:2;370:42;402:9;370:42;:::i;:::-;360:52;279:139;-1:-1:-1;;;279:139:35:o;423:736::-;;;;;;;630:3;618:9;609:7;605:23;601:33;598:2;;;652:6;644;637:22;598:2;680:42;712:9;680:42;:::i;:::-;670:52;;741:51;788:2;777:9;773:18;741:51;:::i;:::-;731:61;;811:51;858:2;847:9;843:18;811:51;:::i;:::-;801:61;;881:51;928:2;917:9;913:18;881:51;:::i;:::-;871:61;;951:52;998:3;987:9;983:19;951:52;:::i;:::-;941:62;;1046:3;1035:9;1031:19;1025:26;1091:8;1084:5;1080:20;1073:5;1070:31;1060:2;;1120:6;1112;1105:22;1060:2;1148:5;1138:15;;;588:571;;;;;;;;:::o;1164:297::-;;1284:2;1272:9;1263:7;1259:23;1255:32;1252:2;;;1305:6;1297;1290:22;1252:2;1342:9;1336:16;1395:5;1388:13;1381:21;1374:5;1371:32;1361:2;;1422:6;1414;1407:22;1466:297;;1587:2;1575:9;1566:7;1562:23;1558:32;1555:2;;;1608:6;1600;1593:22;1555:2;1645:9;1639:16;1698:5;1695:1;1684:20;1677:5;1674:31;1664:2;;1724:6;1716;1709:22;1768:388;-1:-1:-1;;;;;2024:15:35;;;2006:34;;2076:15;;;;2071:2;2056:18;;2049:43;2140:8;2128:21;;;2123:2;2108:18;;2101:49;1956:2;1941:18;;1923:233::o;2161:274::-;-1:-1:-1;;;;;2353:32:35;;;;2335:51;;2417:2;2402:18;;2395:34;2323:2;2308:18;;2290:145::o;2440:347::-;2642:2;2624:21;;;2681:2;2661:18;;;2654:30;2720:25;2715:2;2700:18;;2693:53;2778:2;2763:18;;2614:173::o;2792:343::-;2994:2;2976:21;;;3033:2;3013:18;;;3006:30;3072:21;3067:2;3052:18;;3045:49;3126:2;3111:18;;2966:169::o;3140:335::-;3342:2;3324:21;;;3381:2;3361:18;;;3354:30;-1:-1:-1;;;3415:2:35;3400:18;;3393:41;3466:2;3451:18;;3314:161::o;3480:343::-;3682:2;3664:21;;;3721:2;3701:18;;;3694:30;3760:21;3755:2;3740:18;;3733:49;3814:2;3799:18;;3654:169::o;3828:338::-;4030:2;4012:21;;;4069:2;4049:18;;;4042:30;-1:-1:-1;;;4103:2:35;4088:18;;4081:44;4157:2;4142:18;;4002:164::o;4171:348::-;4373:2;4355:21;;;4412:2;4392:18;;;4385:30;4451:26;4446:2;4431:18;;4424:54;4510:2;4495:18;;4345:174::o;4524:338::-;4726:2;4708:21;;;4765:2;4745:18;;;4738:30;-1:-1:-1;;;4799:2:35;4784:18;;4777:44;4853:2;4838:18;;4698:164::o;:::-;863:8959:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:13229:35","statements":[{"nodeType":"YulBlock","src":"6:3:35","statements":[]},{"body":{"nodeType":"YulBlock","src":"75:104:35","statements":[{"nodeType":"YulAssignment","src":"85:22:35","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"100:6:35"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"94:5:35"},"nodeType":"YulFunctionCall","src":"94:13:35"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"85:5:35"}]},{"body":{"nodeType":"YulBlock","src":"157:16:35","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"166:1:35","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"169:1:35","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"159:6:35"},"nodeType":"YulFunctionCall","src":"159:12:35"},"nodeType":"YulExpressionStatement","src":"159:12:35"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"129:5:35"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"140:5:35"},{"kind":"number","nodeType":"YulLiteral","src":"147:6:35","type":"","value":"0xffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"136:3:35"},"nodeType":"YulFunctionCall","src":"136:18:35"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"126:2:35"},"nodeType":"YulFunctionCall","src":"126:29:35"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"119:6:35"},"nodeType":"YulFunctionCall","src":"119:37:35"},"nodeType":"YulIf","src":"116:2:35"}]},"name":"abi_decode_t_uint16_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"54:6:35","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"65:5:35","type":""}],"src":"14:165:35"},{"body":{"nodeType":"YulBlock","src":"254:189:35","statements":[{"body":{"nodeType":"YulBlock","src":"300:26:35","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"309:6:35"},{"name":"value0","nodeType":"YulIdentifier","src":"317:6:35"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"302:6:35"},"nodeType":"YulFunctionCall","src":"302:22:35"},"nodeType":"YulExpressionStatement","src":"302:22:35"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"275:7:35"},{"name":"headStart","nodeType":"YulIdentifier","src":"284:9:35"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"271:3:35"},"nodeType":"YulFunctionCall","src":"271:23:35"},{"kind":"number","nodeType":"YulLiteral","src":"296:2:35","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"267:3:35"},"nodeType":"YulFunctionCall","src":"267:32:35"},"nodeType":"YulIf","src":"264:2:35"},{"nodeType":"YulVariableDeclaration","src":"335:36:35","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"361:9:35"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"348:12:35"},"nodeType":"YulFunctionCall","src":"348:23:35"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"339:5:35","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"407:5:35"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"380:26:35"},"nodeType":"YulFunctionCall","src":"380:33:35"},"nodeType":"YulExpressionStatement","src":"380:33:35"},{"nodeType":"YulAssignment","src":"422:15:35","value":{"name":"value","nodeType":"YulIdentifier","src":"432:5:35"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"422:6:35"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"220:9:35","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"231:7:35","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"243:6:35","type":""}],"src":"184:259:35"},{"body":{"nodeType":"YulBlock","src":"529:182:35","statements":[{"body":{"nodeType":"YulBlock","src":"575:26:35","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"584:6:35"},{"name":"value0","nodeType":"YulIdentifier","src":"592:6:35"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"577:6:35"},"nodeType":"YulFunctionCall","src":"577:22:35"},"nodeType":"YulExpressionStatement","src":"577:22:35"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"550:7:35"},{"name":"headStart","nodeType":"YulIdentifier","src":"559:9:35"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"546:3:35"},"nodeType":"YulFunctionCall","src":"546:23:35"},{"kind":"number","nodeType":"YulLiteral","src":"571:2:35","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"542:3:35"},"nodeType":"YulFunctionCall","src":"542:32:35"},"nodeType":"YulIf","src":"539:2:35"},{"nodeType":"YulVariableDeclaration","src":"610:29:35","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"629:9:35"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"623:5:35"},"nodeType":"YulFunctionCall","src":"623:16:35"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"614:5:35","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"675:5:35"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"648:26:35"},"nodeType":"YulFunctionCall","src":"648:33:35"},"nodeType":"YulExpressionStatement","src":"648:33:35"},{"nodeType":"YulAssignment","src":"690:15:35","value":{"name":"value","nodeType":"YulIdentifier","src":"700:5:35"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"690:6:35"}]}]},"name":"abi_decode_tuple_t_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"495:9:35","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"506:7:35","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"518:6:35","type":""}],"src":"448:263:35"},{"body":{"nodeType":"YulBlock","src":"803:315:35","statements":[{"body":{"nodeType":"YulBlock","src":"849:26:35","statements":[{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"858:6:35"},{"name":"value1","nodeType":"YulIdentifier","src":"866:6:35"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"851:6:35"},"nodeType":"YulFunctionCall","src":"851:22:35"},"nodeType":"YulExpressionStatement","src":"851:22:35"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"824:7:35"},{"name":"headStart","nodeType":"YulIdentifier","src":"833:9:35"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"820:3:35"},"nodeType":"YulFunctionCall","src":"820:23:35"},{"kind":"number","nodeType":"YulLiteral","src":"845:2:35","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"816:3:35"},"nodeType":"YulFunctionCall","src":"816:32:35"},"nodeType":"YulIf","src":"813:2:35"},{"nodeType":"YulVariableDeclaration","src":"884:36:35","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"910:9:35"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"897:12:35"},"nodeType":"YulFunctionCall","src":"897:23:35"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"888:5:35","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"956:5:35"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"929:26:35"},"nodeType":"YulFunctionCall","src":"929:33:35"},"nodeType":"YulExpressionStatement","src":"929:33:35"},{"nodeType":"YulAssignment","src":"971:15:35","value":{"name":"value","nodeType":"YulIdentifier","src":"981:5:35"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"971:6:35"}]},{"nodeType":"YulVariableDeclaration","src":"995:47:35","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1027:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"1038:2:35","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1023:3:35"},"nodeType":"YulFunctionCall","src":"1023:18:35"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1010:12:35"},"nodeType":"YulFunctionCall","src":"1010:32:35"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"999:7:35","type":""}]},{"expression":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"1078:7:35"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"1051:26:35"},"nodeType":"YulFunctionCall","src":"1051:35:35"},"nodeType":"YulExpressionStatement","src":"1051:35:35"},{"nodeType":"YulAssignment","src":"1095:17:35","value":{"name":"value_1","nodeType":"YulIdentifier","src":"1105:7:35"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1095:6:35"}]}]},"name":"abi_decode_tuple_t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"761:9:35","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"772:7:35","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"784:6:35","type":""},{"name":"value1","nodeType":"YulTypedName","src":"792:6:35","type":""}],"src":"716:402:35"},{"body":{"nodeType":"YulBlock","src":"1296:861:35","statements":[{"body":{"nodeType":"YulBlock","src":"1343:26:35","statements":[{"expression":{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"1352:6:35"},{"name":"value4","nodeType":"YulIdentifier","src":"1360:6:35"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1345:6:35"},"nodeType":"YulFunctionCall","src":"1345:22:35"},"nodeType":"YulExpressionStatement","src":"1345:22:35"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1317:7:35"},{"name":"headStart","nodeType":"YulIdentifier","src":"1326:9:35"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1313:3:35"},"nodeType":"YulFunctionCall","src":"1313:23:35"},{"kind":"number","nodeType":"YulLiteral","src":"1338:3:35","type":"","value":"224"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1309:3:35"},"nodeType":"YulFunctionCall","src":"1309:33:35"},"nodeType":"YulIf","src":"1306:2:35"},{"nodeType":"YulVariableDeclaration","src":"1378:29:35","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1397:9:35"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1391:5:35"},"nodeType":"YulFunctionCall","src":"1391:16:35"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"1382:5:35","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1443:5:35"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"1416:26:35"},"nodeType":"YulFunctionCall","src":"1416:33:35"},"nodeType":"YulExpressionStatement","src":"1416:33:35"},{"nodeType":"YulAssignment","src":"1458:15:35","value":{"name":"value","nodeType":"YulIdentifier","src":"1468:5:35"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1458:6:35"}]},{"nodeType":"YulVariableDeclaration","src":"1482:40:35","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1507:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"1518:2:35","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1503:3:35"},"nodeType":"YulFunctionCall","src":"1503:18:35"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1497:5:35"},"nodeType":"YulFunctionCall","src":"1497:25:35"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"1486:7:35","type":""}]},{"body":{"nodeType":"YulBlock","src":"1578:26:35","statements":[{"expression":{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"1587:6:35"},{"name":"value4","nodeType":"YulIdentifier","src":"1595:6:35"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1580:6:35"},"nodeType":"YulFunctionCall","src":"1580:22:35"},"nodeType":"YulExpressionStatement","src":"1580:22:35"}]},"condition":{"arguments":[{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"1544:7:35"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1564:1:35","type":"","value":"2"},{"name":"value_1","nodeType":"YulIdentifier","src":"1567:7:35"}],"functionName":{"name":"signextend","nodeType":"YulIdentifier","src":"1553:10:35"},"nodeType":"YulFunctionCall","src":"1553:22:35"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1541:2:35"},"nodeType":"YulFunctionCall","src":"1541:35:35"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1534:6:35"},"nodeType":"YulFunctionCall","src":"1534:43:35"},"nodeType":"YulIf","src":"1531:2:35"},{"nodeType":"YulAssignment","src":"1613:17:35","value":{"name":"value_1","nodeType":"YulIdentifier","src":"1623:7:35"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1613:6:35"}]},{"nodeType":"YulAssignment","src":"1639:60:35","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1684:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"1695:2:35","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1680:3:35"},"nodeType":"YulFunctionCall","src":"1680:18:35"}],"functionName":{"name":"abi_decode_t_uint16_fromMemory","nodeType":"YulIdentifier","src":"1649:30:35"},"nodeType":"YulFunctionCall","src":"1649:50:35"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"1639:6:35"}]},{"nodeType":"YulAssignment","src":"1708:60:35","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1753:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"1764:2:35","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1749:3:35"},"nodeType":"YulFunctionCall","src":"1749:18:35"}],"functionName":{"name":"abi_decode_t_uint16_fromMemory","nodeType":"YulIdentifier","src":"1718:30:35"},"nodeType":"YulFunctionCall","src":"1718:50:35"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"1708:6:35"}]},{"nodeType":"YulAssignment","src":"1777:61:35","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1822:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"1833:3:35","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1818:3:35"},"nodeType":"YulFunctionCall","src":"1818:19:35"}],"functionName":{"name":"abi_decode_t_uint16_fromMemory","nodeType":"YulIdentifier","src":"1787:30:35"},"nodeType":"YulFunctionCall","src":"1787:51:35"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"1777:6:35"}]},{"nodeType":"YulVariableDeclaration","src":"1847:41:35","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1872:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"1883:3:35","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1868:3:35"},"nodeType":"YulFunctionCall","src":"1868:19:35"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1862:5:35"},"nodeType":"YulFunctionCall","src":"1862:26:35"},"variables":[{"name":"value_2","nodeType":"YulTypedName","src":"1851:7:35","type":""}]},{"body":{"nodeType":"YulBlock","src":"1940:26:35","statements":[{"expression":{"arguments":[{"name":"value5","nodeType":"YulIdentifier","src":"1949:6:35"},{"name":"value5","nodeType":"YulIdentifier","src":"1957:6:35"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1942:6:35"},"nodeType":"YulFunctionCall","src":"1942:22:35"},"nodeType":"YulExpressionStatement","src":"1942:22:35"}]},"condition":{"arguments":[{"arguments":[{"name":"value_2","nodeType":"YulIdentifier","src":"1910:7:35"},{"arguments":[{"name":"value_2","nodeType":"YulIdentifier","src":"1923:7:35"},{"kind":"number","nodeType":"YulLiteral","src":"1932:4:35","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1919:3:35"},"nodeType":"YulFunctionCall","src":"1919:18:35"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1907:2:35"},"nodeType":"YulFunctionCall","src":"1907:31:35"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1900:6:35"},"nodeType":"YulFunctionCall","src":"1900:39:35"},"nodeType":"YulIf","src":"1897:2:35"},{"nodeType":"YulAssignment","src":"1975:17:35","value":{"name":"value_2","nodeType":"YulIdentifier","src":"1985:7:35"},"variableNames":[{"name":"value5","nodeType":"YulIdentifier","src":"1975:6:35"}]},{"nodeType":"YulVariableDeclaration","src":"2001:41:35","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2026:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"2037:3:35","type":"","value":"192"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2022:3:35"},"nodeType":"YulFunctionCall","src":"2022:19:35"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2016:5:35"},"nodeType":"YulFunctionCall","src":"2016:26:35"},"variables":[{"name":"value_3","nodeType":"YulTypedName","src":"2005:7:35","type":""}]},{"body":{"nodeType":"YulBlock","src":"2099:26:35","statements":[{"expression":{"arguments":[{"name":"value6","nodeType":"YulIdentifier","src":"2108:6:35"},{"name":"value6","nodeType":"YulIdentifier","src":"2116:6:35"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2101:6:35"},"nodeType":"YulFunctionCall","src":"2101:22:35"},"nodeType":"YulExpressionStatement","src":"2101:22:35"}]},"condition":{"arguments":[{"arguments":[{"name":"value_3","nodeType":"YulIdentifier","src":"2064:7:35"},{"arguments":[{"arguments":[{"name":"value_3","nodeType":"YulIdentifier","src":"2087:7:35"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2080:6:35"},"nodeType":"YulFunctionCall","src":"2080:15:35"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2073:6:35"},"nodeType":"YulFunctionCall","src":"2073:23:35"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"2061:2:35"},"nodeType":"YulFunctionCall","src":"2061:36:35"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2054:6:35"},"nodeType":"YulFunctionCall","src":"2054:44:35"},"nodeType":"YulIf","src":"2051:2:35"},{"nodeType":"YulAssignment","src":"2134:17:35","value":{"name":"value_3","nodeType":"YulIdentifier","src":"2144:7:35"},"variableNames":[{"name":"value6","nodeType":"YulIdentifier","src":"2134:6:35"}]}]},"name":"abi_decode_tuple_t_uint160t_int24t_uint16t_uint16t_uint16t_uint8t_bool_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1214:9:35","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1225:7:35","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1237:6:35","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1245:6:35","type":""},{"name":"value2","nodeType":"YulTypedName","src":"1253:6:35","type":""},{"name":"value3","nodeType":"YulTypedName","src":"1261:6:35","type":""},{"name":"value4","nodeType":"YulTypedName","src":"1269:6:35","type":""},{"name":"value5","nodeType":"YulTypedName","src":"1277:6:35","type":""},{"name":"value6","nodeType":"YulTypedName","src":"1285:6:35","type":""}],"src":"1123:1034:35"},{"body":{"nodeType":"YulBlock","src":"2232:120:35","statements":[{"body":{"nodeType":"YulBlock","src":"2278:26:35","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2287:6:35"},{"name":"value0","nodeType":"YulIdentifier","src":"2295:6:35"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2280:6:35"},"nodeType":"YulFunctionCall","src":"2280:22:35"},"nodeType":"YulExpressionStatement","src":"2280:22:35"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2253:7:35"},{"name":"headStart","nodeType":"YulIdentifier","src":"2262:9:35"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2249:3:35"},"nodeType":"YulFunctionCall","src":"2249:23:35"},{"kind":"number","nodeType":"YulLiteral","src":"2274:2:35","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2245:3:35"},"nodeType":"YulFunctionCall","src":"2245:32:35"},"nodeType":"YulIf","src":"2242:2:35"},{"nodeType":"YulAssignment","src":"2313:33:35","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2336:9:35"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2323:12:35"},"nodeType":"YulFunctionCall","src":"2323:23:35"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2313:6:35"}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2198:9:35","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2209:7:35","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2221:6:35","type":""}],"src":"2162:190:35"},{"body":{"nodeType":"YulBlock","src":"2438:113:35","statements":[{"body":{"nodeType":"YulBlock","src":"2484:26:35","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2493:6:35"},{"name":"value0","nodeType":"YulIdentifier","src":"2501:6:35"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2486:6:35"},"nodeType":"YulFunctionCall","src":"2486:22:35"},"nodeType":"YulExpressionStatement","src":"2486:22:35"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2459:7:35"},{"name":"headStart","nodeType":"YulIdentifier","src":"2468:9:35"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2455:3:35"},"nodeType":"YulFunctionCall","src":"2455:23:35"},{"kind":"number","nodeType":"YulLiteral","src":"2480:2:35","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2451:3:35"},"nodeType":"YulFunctionCall","src":"2451:32:35"},"nodeType":"YulIf","src":"2448:2:35"},{"nodeType":"YulAssignment","src":"2519:26:35","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2535:9:35"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2529:5:35"},"nodeType":"YulFunctionCall","src":"2529:16:35"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2519:6:35"}]}]},"name":"abi_decode_tuple_t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2404:9:35","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2415:7:35","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2427:6:35","type":""}],"src":"2357:194:35"},{"body":{"nodeType":"YulBlock","src":"2688:377:35","statements":[{"body":{"nodeType":"YulBlock","src":"2735:26:35","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2744:6:35"},{"name":"value0","nodeType":"YulIdentifier","src":"2752:6:35"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2737:6:35"},"nodeType":"YulFunctionCall","src":"2737:22:35"},"nodeType":"YulExpressionStatement","src":"2737:22:35"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2709:7:35"},{"name":"headStart","nodeType":"YulIdentifier","src":"2718:9:35"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2705:3:35"},"nodeType":"YulFunctionCall","src":"2705:23:35"},{"kind":"number","nodeType":"YulLiteral","src":"2730:3:35","type":"","value":"128"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2701:3:35"},"nodeType":"YulFunctionCall","src":"2701:33:35"},"nodeType":"YulIf","src":"2698:2:35"},{"nodeType":"YulAssignment","src":"2770:26:35","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2786:9:35"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2780:5:35"},"nodeType":"YulFunctionCall","src":"2780:16:35"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2770:6:35"}]},{"nodeType":"YulVariableDeclaration","src":"2805:38:35","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2828:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"2839:2:35","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2824:3:35"},"nodeType":"YulFunctionCall","src":"2824:18:35"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2818:5:35"},"nodeType":"YulFunctionCall","src":"2818:25:35"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"2809:5:35","type":""}]},{"body":{"nodeType":"YulBlock","src":"2921:26:35","statements":[{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"2930:6:35"},{"name":"value1","nodeType":"YulIdentifier","src":"2938:6:35"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2923:6:35"},"nodeType":"YulFunctionCall","src":"2923:22:35"},"nodeType":"YulExpressionStatement","src":"2923:22:35"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2865:5:35"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2876:5:35"},{"kind":"number","nodeType":"YulLiteral","src":"2883:34:35","type":"","value":"0xffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2872:3:35"},"nodeType":"YulFunctionCall","src":"2872:46:35"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"2862:2:35"},"nodeType":"YulFunctionCall","src":"2862:57:35"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2855:6:35"},"nodeType":"YulFunctionCall","src":"2855:65:35"},"nodeType":"YulIf","src":"2852:2:35"},{"nodeType":"YulAssignment","src":"2956:15:35","value":{"name":"value","nodeType":"YulIdentifier","src":"2966:5:35"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2956:6:35"}]},{"nodeType":"YulAssignment","src":"2980:35:35","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3000:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"3011:2:35","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2996:3:35"},"nodeType":"YulFunctionCall","src":"2996:18:35"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2990:5:35"},"nodeType":"YulFunctionCall","src":"2990:25:35"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"2980:6:35"}]},{"nodeType":"YulAssignment","src":"3024:35:35","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3044:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"3055:2:35","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3040:3:35"},"nodeType":"YulFunctionCall","src":"3040:18:35"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3034:5:35"},"nodeType":"YulFunctionCall","src":"3034:25:35"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"3024:6:35"}]}]},"name":"abi_decode_tuple_t_uint256t_uint128t_uint256t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2630:9:35","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2641:7:35","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2653:6:35","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2661:6:35","type":""},{"name":"value2","nodeType":"YulTypedName","src":"2669:6:35","type":""},{"name":"value3","nodeType":"YulTypedName","src":"2677:6:35","type":""}],"src":"2556:509:35"},{"body":{"nodeType":"YulBlock","src":"3168:157:35","statements":[{"body":{"nodeType":"YulBlock","src":"3214:26:35","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3223:6:35"},{"name":"value0","nodeType":"YulIdentifier","src":"3231:6:35"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3216:6:35"},"nodeType":"YulFunctionCall","src":"3216:22:35"},"nodeType":"YulExpressionStatement","src":"3216:22:35"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3189:7:35"},{"name":"headStart","nodeType":"YulIdentifier","src":"3198:9:35"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3185:3:35"},"nodeType":"YulFunctionCall","src":"3185:23:35"},{"kind":"number","nodeType":"YulLiteral","src":"3210:2:35","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3181:3:35"},"nodeType":"YulFunctionCall","src":"3181:32:35"},"nodeType":"YulIf","src":"3178:2:35"},{"nodeType":"YulAssignment","src":"3249:26:35","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3265:9:35"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3259:5:35"},"nodeType":"YulFunctionCall","src":"3259:16:35"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3249:6:35"}]},{"nodeType":"YulAssignment","src":"3284:35:35","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3304:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"3315:2:35","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3300:3:35"},"nodeType":"YulFunctionCall","src":"3300:18:35"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3294:5:35"},"nodeType":"YulFunctionCall","src":"3294:25:35"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3284:6:35"}]}]},"name":"abi_decode_tuple_t_uint256t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3126:9:35","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3137:7:35","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3149:6:35","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3157:6:35","type":""}],"src":"3070:255:35"},{"body":{"nodeType":"YulBlock","src":"3376:60:35","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3393:3:35"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3402:5:35"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3417:3:35","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"3422:1:35","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3413:3:35"},"nodeType":"YulFunctionCall","src":"3413:11:35"},{"kind":"number","nodeType":"YulLiteral","src":"3426:1:35","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3409:3:35"},"nodeType":"YulFunctionCall","src":"3409:19:35"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3398:3:35"},"nodeType":"YulFunctionCall","src":"3398:31:35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3386:6:35"},"nodeType":"YulFunctionCall","src":"3386:44:35"},"nodeType":"YulExpressionStatement","src":"3386:44:35"}]},"name":"abi_encode_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3360:5:35","type":""},{"name":"pos","nodeType":"YulTypedName","src":"3367:3:35","type":""}],"src":"3330:106:35"},{"body":{"nodeType":"YulBlock","src":"3485:49:35","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3502:3:35"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3518:1:35","type":"","value":"2"},{"name":"value","nodeType":"YulIdentifier","src":"3521:5:35"}],"functionName":{"name":"signextend","nodeType":"YulIdentifier","src":"3507:10:35"},"nodeType":"YulFunctionCall","src":"3507:20:35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3495:6:35"},"nodeType":"YulFunctionCall","src":"3495:33:35"},"nodeType":"YulExpressionStatement","src":"3495:33:35"}]},"name":"abi_encode_t_int24","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3469:5:35","type":""},{"name":"pos","nodeType":"YulTypedName","src":"3476:3:35","type":""}],"src":"3441:93:35"},{"body":{"nodeType":"YulBlock","src":"3584:49:35","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3601:3:35"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3610:5:35"},{"kind":"number","nodeType":"YulLiteral","src":"3617:8:35","type":"","value":"0xffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3606:3:35"},"nodeType":"YulFunctionCall","src":"3606:20:35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3594:6:35"},"nodeType":"YulFunctionCall","src":"3594:33:35"},"nodeType":"YulExpressionStatement","src":"3594:33:35"}]},"name":"abi_encode_t_uint24","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3568:5:35","type":""},{"name":"pos","nodeType":"YulTypedName","src":"3575:3:35","type":""}],"src":"3539:94:35"},{"body":{"nodeType":"YulBlock","src":"3739:102:35","statements":[{"nodeType":"YulAssignment","src":"3749:26:35","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3761:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"3772:2:35","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3757:3:35"},"nodeType":"YulFunctionCall","src":"3757:18:35"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3749:4:35"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3791:9:35"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3806:6:35"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3822:3:35","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"3827:1:35","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3818:3:35"},"nodeType":"YulFunctionCall","src":"3818:11:35"},{"kind":"number","nodeType":"YulLiteral","src":"3831:1:35","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3814:3:35"},"nodeType":"YulFunctionCall","src":"3814:19:35"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3802:3:35"},"nodeType":"YulFunctionCall","src":"3802:32:35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3784:6:35"},"nodeType":"YulFunctionCall","src":"3784:51:35"},"nodeType":"YulExpressionStatement","src":"3784:51:35"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3708:9:35","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3719:6:35","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3730:4:35","type":""}],"src":"3638:203:35"},{"body":{"nodeType":"YulBlock","src":"3955:102:35","statements":[{"nodeType":"YulAssignment","src":"3965:26:35","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3977:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"3988:2:35","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3973:3:35"},"nodeType":"YulFunctionCall","src":"3973:18:35"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3965:4:35"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4007:9:35"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4022:6:35"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4038:3:35","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"4043:1:35","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"4034:3:35"},"nodeType":"YulFunctionCall","src":"4034:11:35"},{"kind":"number","nodeType":"YulLiteral","src":"4047:1:35","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4030:3:35"},"nodeType":"YulFunctionCall","src":"4030:19:35"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4018:3:35"},"nodeType":"YulFunctionCall","src":"4018:32:35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4000:6:35"},"nodeType":"YulFunctionCall","src":"4000:51:35"},"nodeType":"YulExpressionStatement","src":"4000:51:35"}]},"name":"abi_encode_tuple_t_address_payable__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3924:9:35","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3935:6:35","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3946:4:35","type":""}],"src":"3846:211:35"},{"body":{"nodeType":"YulBlock","src":"4217:233:35","statements":[{"nodeType":"YulAssignment","src":"4227:26:35","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4239:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"4250:2:35","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4235:3:35"},"nodeType":"YulFunctionCall","src":"4235:18:35"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4227:4:35"}]},{"nodeType":"YulVariableDeclaration","src":"4262:29:35","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4280:3:35","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"4285:1:35","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"4276:3:35"},"nodeType":"YulFunctionCall","src":"4276:11:35"},{"kind":"number","nodeType":"YulLiteral","src":"4289:1:35","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4272:3:35"},"nodeType":"YulFunctionCall","src":"4272:19:35"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"4266:2:35","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4307:9:35"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4322:6:35"},{"name":"_1","nodeType":"YulIdentifier","src":"4330:2:35"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4318:3:35"},"nodeType":"YulFunctionCall","src":"4318:15:35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4300:6:35"},"nodeType":"YulFunctionCall","src":"4300:34:35"},"nodeType":"YulExpressionStatement","src":"4300:34:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4354:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"4365:2:35","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4350:3:35"},"nodeType":"YulFunctionCall","src":"4350:18:35"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"4374:6:35"},{"name":"_1","nodeType":"YulIdentifier","src":"4382:2:35"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4370:3:35"},"nodeType":"YulFunctionCall","src":"4370:15:35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4343:6:35"},"nodeType":"YulFunctionCall","src":"4343:43:35"},"nodeType":"YulExpressionStatement","src":"4343:43:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4406:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"4417:2:35","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4402:3:35"},"nodeType":"YulFunctionCall","src":"4402:18:35"},{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"4426:6:35"},{"kind":"number","nodeType":"YulLiteral","src":"4434:8:35","type":"","value":"0xffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4422:3:35"},"nodeType":"YulFunctionCall","src":"4422:21:35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4395:6:35"},"nodeType":"YulFunctionCall","src":"4395:49:35"},"nodeType":"YulExpressionStatement","src":"4395:49:35"}]},"name":"abi_encode_tuple_t_address_t_address_t_uint24__to_t_address_t_address_t_uint24__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4170:9:35","type":""},{"name":"value2","nodeType":"YulTypedName","src":"4181:6:35","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4189:6:35","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4197:6:35","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4208:4:35","type":""}],"src":"4062:388:35"},{"body":{"nodeType":"YulBlock","src":"4550:92:35","statements":[{"nodeType":"YulAssignment","src":"4560:26:35","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4572:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"4583:2:35","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4568:3:35"},"nodeType":"YulFunctionCall","src":"4568:18:35"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4560:4:35"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4602:9:35"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4627:6:35"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4620:6:35"},"nodeType":"YulFunctionCall","src":"4620:14:35"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4613:6:35"},"nodeType":"YulFunctionCall","src":"4613:22:35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4595:6:35"},"nodeType":"YulFunctionCall","src":"4595:41:35"},"nodeType":"YulExpressionStatement","src":"4595:41:35"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4519:9:35","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4530:6:35","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4541:4:35","type":""}],"src":"4455:187:35"},{"body":{"nodeType":"YulBlock","src":"4790:208:35","statements":[{"nodeType":"YulAssignment","src":"4800:26:35","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4812:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"4823:2:35","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4808:3:35"},"nodeType":"YulFunctionCall","src":"4808:18:35"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4800:4:35"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4842:9:35"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4867:6:35"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4860:6:35"},"nodeType":"YulFunctionCall","src":"4860:14:35"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4853:6:35"},"nodeType":"YulFunctionCall","src":"4853:22:35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4835:6:35"},"nodeType":"YulFunctionCall","src":"4835:41:35"},"nodeType":"YulExpressionStatement","src":"4835:41:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4896:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"4907:2:35","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4892:3:35"},"nodeType":"YulFunctionCall","src":"4892:18:35"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4923:1:35","type":"","value":"2"},{"name":"value1","nodeType":"YulIdentifier","src":"4926:6:35"}],"functionName":{"name":"signextend","nodeType":"YulIdentifier","src":"4912:10:35"},"nodeType":"YulFunctionCall","src":"4912:21:35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4885:6:35"},"nodeType":"YulFunctionCall","src":"4885:49:35"},"nodeType":"YulExpressionStatement","src":"4885:49:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4954:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"4965:2:35","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4950:3:35"},"nodeType":"YulFunctionCall","src":"4950:18:35"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4981:1:35","type":"","value":"2"},{"name":"value2","nodeType":"YulIdentifier","src":"4984:6:35"}],"functionName":{"name":"signextend","nodeType":"YulIdentifier","src":"4970:10:35"},"nodeType":"YulFunctionCall","src":"4970:21:35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4943:6:35"},"nodeType":"YulFunctionCall","src":"4943:49:35"},"nodeType":"YulExpressionStatement","src":"4943:49:35"}]},"name":"abi_encode_tuple_t_bool_t_int24_t_int24__to_t_bool_t_int24_t_int24__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4743:9:35","type":""},{"name":"value2","nodeType":"YulTypedName","src":"4754:6:35","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4762:6:35","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4770:6:35","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4781:4:35","type":""}],"src":"4647:351:35"},{"body":{"nodeType":"YulBlock","src":"5166:208:35","statements":[{"nodeType":"YulAssignment","src":"5176:26:35","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5188:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"5199:2:35","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5184:3:35"},"nodeType":"YulFunctionCall","src":"5184:18:35"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5176:4:35"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5218:9:35"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"5243:6:35"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5236:6:35"},"nodeType":"YulFunctionCall","src":"5236:14:35"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5229:6:35"},"nodeType":"YulFunctionCall","src":"5229:22:35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5211:6:35"},"nodeType":"YulFunctionCall","src":"5211:41:35"},"nodeType":"YulExpressionStatement","src":"5211:41:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5272:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"5283:2:35","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5268:3:35"},"nodeType":"YulFunctionCall","src":"5268:18:35"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5299:1:35","type":"","value":"2"},{"name":"value1","nodeType":"YulIdentifier","src":"5302:6:35"}],"functionName":{"name":"signextend","nodeType":"YulIdentifier","src":"5288:10:35"},"nodeType":"YulFunctionCall","src":"5288:21:35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5261:6:35"},"nodeType":"YulFunctionCall","src":"5261:49:35"},"nodeType":"YulExpressionStatement","src":"5261:49:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5330:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"5341:2:35","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5326:3:35"},"nodeType":"YulFunctionCall","src":"5326:18:35"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5357:1:35","type":"","value":"2"},{"name":"value2","nodeType":"YulIdentifier","src":"5360:6:35"}],"functionName":{"name":"signextend","nodeType":"YulIdentifier","src":"5346:10:35"},"nodeType":"YulFunctionCall","src":"5346:21:35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5319:6:35"},"nodeType":"YulFunctionCall","src":"5319:49:35"},"nodeType":"YulExpressionStatement","src":"5319:49:35"}]},"name":"abi_encode_tuple_t_bool_t_rational_0_by_1_t_rational_0_by_1__to_t_bool_t_int24_t_int24__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5119:9:35","type":""},{"name":"value2","nodeType":"YulTypedName","src":"5130:6:35","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5138:6:35","type":""},{"name":"value0","nodeType":"YulTypedName","src":"5146:6:35","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5157:4:35","type":""}],"src":"5003:371:35"},{"body":{"nodeType":"YulBlock","src":"5516:102:35","statements":[{"nodeType":"YulAssignment","src":"5526:26:35","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5538:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"5549:2:35","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5534:3:35"},"nodeType":"YulFunctionCall","src":"5534:18:35"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5526:4:35"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5568:9:35"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"5583:6:35"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5599:3:35","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"5604:1:35","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"5595:3:35"},"nodeType":"YulFunctionCall","src":"5595:11:35"},{"kind":"number","nodeType":"YulLiteral","src":"5608:1:35","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5591:3:35"},"nodeType":"YulFunctionCall","src":"5591:19:35"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5579:3:35"},"nodeType":"YulFunctionCall","src":"5579:32:35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5561:6:35"},"nodeType":"YulFunctionCall","src":"5561:51:35"},"nodeType":"YulExpressionStatement","src":"5561:51:35"}]},"name":"abi_encode_tuple_t_contract$_INonfungiblePositionManager_$2618__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5485:9:35","type":""},{"name":"value0","nodeType":"YulTypedName","src":"5496:6:35","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5507:4:35","type":""}],"src":"5379:239:35"},{"body":{"nodeType":"YulBlock","src":"5744:102:35","statements":[{"nodeType":"YulAssignment","src":"5754:26:35","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5766:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"5777:2:35","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5762:3:35"},"nodeType":"YulFunctionCall","src":"5762:18:35"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5754:4:35"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5796:9:35"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"5811:6:35"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5827:3:35","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"5832:1:35","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"5823:3:35"},"nodeType":"YulFunctionCall","src":"5823:11:35"},{"kind":"number","nodeType":"YulLiteral","src":"5836:1:35","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5819:3:35"},"nodeType":"YulFunctionCall","src":"5819:19:35"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5807:3:35"},"nodeType":"YulFunctionCall","src":"5807:32:35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5789:6:35"},"nodeType":"YulFunctionCall","src":"5789:51:35"},"nodeType":"YulExpressionStatement","src":"5789:51:35"}]},"name":"abi_encode_tuple_t_contract$_ISwapRouter_$2775__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5713:9:35","type":""},{"name":"value0","nodeType":"YulTypedName","src":"5724:6:35","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5735:4:35","type":""}],"src":"5623:223:35"},{"body":{"nodeType":"YulBlock","src":"5978:102:35","statements":[{"nodeType":"YulAssignment","src":"5988:26:35","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6000:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"6011:2:35","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5996:3:35"},"nodeType":"YulFunctionCall","src":"5996:18:35"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5988:4:35"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6030:9:35"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"6045:6:35"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6061:3:35","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"6066:1:35","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"6057:3:35"},"nodeType":"YulFunctionCall","src":"6057:11:35"},{"kind":"number","nodeType":"YulLiteral","src":"6070:1:35","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6053:3:35"},"nodeType":"YulFunctionCall","src":"6053:19:35"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6041:3:35"},"nodeType":"YulFunctionCall","src":"6041:32:35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6023:6:35"},"nodeType":"YulFunctionCall","src":"6023:51:35"},"nodeType":"YulExpressionStatement","src":"6023:51:35"}]},"name":"abi_encode_tuple_t_contract$_IUniswapV3Factory_$1383__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5947:9:35","type":""},{"name":"value0","nodeType":"YulTypedName","src":"5958:6:35","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5969:4:35","type":""}],"src":"5851:229:35"},{"body":{"nodeType":"YulBlock","src":"6182:91:35","statements":[{"nodeType":"YulAssignment","src":"6192:26:35","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6204:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"6215:2:35","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6200:3:35"},"nodeType":"YulFunctionCall","src":"6200:18:35"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6192:4:35"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6234:9:35"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6256:1:35","type":"","value":"2"},{"name":"value0","nodeType":"YulIdentifier","src":"6259:6:35"}],"functionName":{"name":"signextend","nodeType":"YulIdentifier","src":"6245:10:35"},"nodeType":"YulFunctionCall","src":"6245:21:35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6227:6:35"},"nodeType":"YulFunctionCall","src":"6227:40:35"},"nodeType":"YulExpressionStatement","src":"6227:40:35"}]},"name":"abi_encode_tuple_t_int24__to_t_int24__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6151:9:35","type":""},{"name":"value0","nodeType":"YulTypedName","src":"6162:6:35","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6173:4:35","type":""}],"src":"6085:188:35"},{"body":{"nodeType":"YulBlock","src":"6452:163:35","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6469:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"6480:2:35","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6462:6:35"},"nodeType":"YulFunctionCall","src":"6462:21:35"},"nodeType":"YulExpressionStatement","src":"6462:21:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6503:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"6514:2:35","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6499:3:35"},"nodeType":"YulFunctionCall","src":"6499:18:35"},{"kind":"number","nodeType":"YulLiteral","src":"6519:2:35","type":"","value":"13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6492:6:35"},"nodeType":"YulFunctionCall","src":"6492:30:35"},"nodeType":"YulExpressionStatement","src":"6492:30:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6542:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"6553:2:35","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6538:3:35"},"nodeType":"YulFunctionCall","src":"6538:18:35"},{"kind":"string","nodeType":"YulLiteral","src":"6558:15:35","type":"","value":"Invalid token"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6531:6:35"},"nodeType":"YulFunctionCall","src":"6531:43:35"},"nodeType":"YulExpressionStatement","src":"6531:43:35"},{"nodeType":"YulAssignment","src":"6583:26:35","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6595:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"6606:2:35","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6591:3:35"},"nodeType":"YulFunctionCall","src":"6591:18:35"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6583:4:35"}]}]},"name":"abi_encode_tuple_t_stringliteral_5e70ebd1d4072d337a7fabaa7bda70fa2633d6e3f89d5cb725a16b10d07e54c6__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6429:9:35","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6443:4:35","type":""}],"src":"6278:337:35"},{"body":{"nodeType":"YulBlock","src":"6794:168:35","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6811:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"6822:2:35","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6804:6:35"},"nodeType":"YulFunctionCall","src":"6804:21:35"},"nodeType":"YulExpressionStatement","src":"6804:21:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6845:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"6856:2:35","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6841:3:35"},"nodeType":"YulFunctionCall","src":"6841:18:35"},{"kind":"number","nodeType":"YulLiteral","src":"6861:2:35","type":"","value":"18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6834:6:35"},"nodeType":"YulFunctionCall","src":"6834:30:35"},"nodeType":"YulExpressionStatement","src":"6834:30:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6884:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"6895:2:35","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6880:3:35"},"nodeType":"YulFunctionCall","src":"6880:18:35"},{"kind":"string","nodeType":"YulLiteral","src":"6900:20:35","type":"","value":"Invalid tick range"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6873:6:35"},"nodeType":"YulFunctionCall","src":"6873:48:35"},"nodeType":"YulExpressionStatement","src":"6873:48:35"},{"nodeType":"YulAssignment","src":"6930:26:35","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6942:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"6953:2:35","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6938:3:35"},"nodeType":"YulFunctionCall","src":"6938:18:35"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6930:4:35"}]}]},"name":"abi_encode_tuple_t_stringliteral_5fb447cb8a73099b715c4ab92ff6f271e9605295d15c8841bc0b730a60ec7abf__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6771:9:35","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6785:4:35","type":""}],"src":"6620:342:35"},{"body":{"nodeType":"YulBlock","src":"7141:168:35","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7158:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"7169:2:35","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7151:6:35"},"nodeType":"YulFunctionCall","src":"7151:21:35"},"nodeType":"YulExpressionStatement","src":"7151:21:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7192:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"7203:2:35","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7188:3:35"},"nodeType":"YulFunctionCall","src":"7188:18:35"},{"kind":"number","nodeType":"YulLiteral","src":"7208:2:35","type":"","value":"18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7181:6:35"},"nodeType":"YulFunctionCall","src":"7181:30:35"},"nodeType":"YulExpressionStatement","src":"7181:30:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7231:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"7242:2:35","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7227:3:35"},"nodeType":"YulFunctionCall","src":"7227:18:35"},{"kind":"string","nodeType":"YulLiteral","src":"7247:20:35","type":"","value":"Invalid sqrt price"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7220:6:35"},"nodeType":"YulFunctionCall","src":"7220:48:35"},"nodeType":"YulExpressionStatement","src":"7220:48:35"},{"nodeType":"YulAssignment","src":"7277:26:35","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7289:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"7300:2:35","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7285:3:35"},"nodeType":"YulFunctionCall","src":"7285:18:35"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7277:4:35"}]}]},"name":"abi_encode_tuple_t_stringliteral_663e6e22dacb5d5dea25b1d77198b7fe22ac7eb174bc95a4c49dc1a7be65da33__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7118:9:35","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7132:4:35","type":""}],"src":"6967:342:35"},{"body":{"nodeType":"YulBlock","src":"7488:167:35","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7505:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"7516:2:35","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7498:6:35"},"nodeType":"YulFunctionCall","src":"7498:21:35"},"nodeType":"YulExpressionStatement","src":"7498:21:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7539:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"7550:2:35","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7535:3:35"},"nodeType":"YulFunctionCall","src":"7535:18:35"},{"kind":"number","nodeType":"YulLiteral","src":"7555:2:35","type":"","value":"17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7528:6:35"},"nodeType":"YulFunctionCall","src":"7528:30:35"},"nodeType":"YulExpressionStatement","src":"7528:30:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7578:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"7589:2:35","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7574:3:35"},"nodeType":"YulFunctionCall","src":"7574:18:35"},{"kind":"string","nodeType":"YulLiteral","src":"7594:19:35","type":"","value":"Invalid recipient"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7567:6:35"},"nodeType":"YulFunctionCall","src":"7567:47:35"},"nodeType":"YulExpressionStatement","src":"7567:47:35"},{"nodeType":"YulAssignment","src":"7623:26:35","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7635:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"7646:2:35","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7631:3:35"},"nodeType":"YulFunctionCall","src":"7631:18:35"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7623:4:35"}]}]},"name":"abi_encode_tuple_t_stringliteral_a6664b97aef19c137d44ec81dfc0c0cc28a2c3470357b125208345a2c048425d__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7465:9:35","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7479:4:35","type":""}],"src":"7314:341:35"},{"body":{"nodeType":"YulBlock","src":"7834:166:35","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7851:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"7862:2:35","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7844:6:35"},"nodeType":"YulFunctionCall","src":"7844:21:35"},"nodeType":"YulExpressionStatement","src":"7844:21:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7885:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"7896:2:35","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7881:3:35"},"nodeType":"YulFunctionCall","src":"7881:18:35"},{"kind":"number","nodeType":"YulLiteral","src":"7901:2:35","type":"","value":"16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7874:6:35"},"nodeType":"YulFunctionCall","src":"7874:30:35"},"nodeType":"YulExpressionStatement","src":"7874:30:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7924:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"7935:2:35","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7920:3:35"},"nodeType":"YulFunctionCall","src":"7920:18:35"},{"kind":"string","nodeType":"YulLiteral","src":"7940:18:35","type":"","value":"Invalid token ID"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7913:6:35"},"nodeType":"YulFunctionCall","src":"7913:46:35"},"nodeType":"YulExpressionStatement","src":"7913:46:35"},{"nodeType":"YulAssignment","src":"7968:26:35","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7980:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"7991:2:35","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7976:3:35"},"nodeType":"YulFunctionCall","src":"7976:18:35"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7968:4:35"}]}]},"name":"abi_encode_tuple_t_stringliteral_b44e5a2e76d616f71f124d91f8560c46215c55a45ba6a1b6e492edf2295dcc48__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7811:9:35","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7825:4:35","type":""}],"src":"7660:340:35"},{"body":{"nodeType":"YulBlock","src":"8179:171:35","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8196:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"8207:2:35","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8189:6:35"},"nodeType":"YulFunctionCall","src":"8189:21:35"},"nodeType":"YulExpressionStatement","src":"8189:21:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8230:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"8241:2:35","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8226:3:35"},"nodeType":"YulFunctionCall","src":"8226:18:35"},{"kind":"number","nodeType":"YulLiteral","src":"8246:2:35","type":"","value":"21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8219:6:35"},"nodeType":"YulFunctionCall","src":"8219:30:35"},"nodeType":"YulExpressionStatement","src":"8219:30:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8269:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"8280:2:35","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8265:3:35"},"nodeType":"YulFunctionCall","src":"8265:18:35"},{"kind":"string","nodeType":"YulLiteral","src":"8285:23:35","type":"","value":"No position to remove"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8258:6:35"},"nodeType":"YulFunctionCall","src":"8258:51:35"},"nodeType":"YulExpressionStatement","src":"8258:51:35"},{"nodeType":"YulAssignment","src":"8318:26:35","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8330:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"8341:2:35","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8326:3:35"},"nodeType":"YulFunctionCall","src":"8326:18:35"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8318:4:35"}]}]},"name":"abi_encode_tuple_t_stringliteral_d3f3a127142a3a087ded95fcff040c1c8ace07bf5efa58badf473bbf6b2d666e__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8156:9:35","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8170:4:35","type":""}],"src":"8005:345:35"},{"body":{"nodeType":"YulBlock","src":"8529:164:35","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8546:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"8557:2:35","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8539:6:35"},"nodeType":"YulFunctionCall","src":"8539:21:35"},"nodeType":"YulExpressionStatement","src":"8539:21:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8580:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"8591:2:35","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8576:3:35"},"nodeType":"YulFunctionCall","src":"8576:18:35"},{"kind":"number","nodeType":"YulLiteral","src":"8596:2:35","type":"","value":"14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8569:6:35"},"nodeType":"YulFunctionCall","src":"8569:30:35"},"nodeType":"YulExpressionStatement","src":"8569:30:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8619:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"8630:2:35","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8615:3:35"},"nodeType":"YulFunctionCall","src":"8615:18:35"},{"kind":"string","nodeType":"YulLiteral","src":"8635:16:35","type":"","value":"Pool not found"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8608:6:35"},"nodeType":"YulFunctionCall","src":"8608:44:35"},"nodeType":"YulExpressionStatement","src":"8608:44:35"},{"nodeType":"YulAssignment","src":"8661:26:35","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8673:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"8684:2:35","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8669:3:35"},"nodeType":"YulFunctionCall","src":"8669:18:35"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8661:4:35"}]}]},"name":"abi_encode_tuple_t_stringliteral_fe7e6a141e3b44702009b5d1e2c3268e1a572059382817edb68e0f82d474906f__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8506:9:35","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8520:4:35","type":""}],"src":"8355:338:35"},{"body":{"nodeType":"YulBlock","src":"8861:411:35","statements":[{"nodeType":"YulAssignment","src":"8871:27:35","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8883:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"8894:3:35","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8879:3:35"},"nodeType":"YulFunctionCall","src":"8879:19:35"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8871:4:35"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8914:9:35"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"8931:6:35"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8925:5:35"},"nodeType":"YulFunctionCall","src":"8925:13:35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8907:6:35"},"nodeType":"YulFunctionCall","src":"8907:32:35"},"nodeType":"YulExpressionStatement","src":"8907:32:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8959:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"8970:4:35","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8955:3:35"},"nodeType":"YulFunctionCall","src":"8955:20:35"},{"arguments":[{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"8991:6:35"},{"kind":"number","nodeType":"YulLiteral","src":"8999:4:35","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8987:3:35"},"nodeType":"YulFunctionCall","src":"8987:17:35"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8981:5:35"},"nodeType":"YulFunctionCall","src":"8981:24:35"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9015:3:35","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"9020:1:35","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"9011:3:35"},"nodeType":"YulFunctionCall","src":"9011:11:35"},{"kind":"number","nodeType":"YulLiteral","src":"9024:1:35","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9007:3:35"},"nodeType":"YulFunctionCall","src":"9007:19:35"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"8977:3:35"},"nodeType":"YulFunctionCall","src":"8977:50:35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8948:6:35"},"nodeType":"YulFunctionCall","src":"8948:80:35"},"nodeType":"YulExpressionStatement","src":"8948:80:35"},{"nodeType":"YulVariableDeclaration","src":"9037:44:35","value":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"9067:6:35"},{"kind":"number","nodeType":"YulLiteral","src":"9075:4:35","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9063:3:35"},"nodeType":"YulFunctionCall","src":"9063:17:35"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9057:5:35"},"nodeType":"YulFunctionCall","src":"9057:24:35"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"9041:12:35","type":""}]},{"nodeType":"YulVariableDeclaration","src":"9090:44:35","value":{"kind":"number","nodeType":"YulLiteral","src":"9100:34:35","type":"","value":"0xffffffffffffffffffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"9094:2:35","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9154:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"9165:4:35","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9150:3:35"},"nodeType":"YulFunctionCall","src":"9150:20:35"},{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"9176:12:35"},{"name":"_1","nodeType":"YulIdentifier","src":"9190:2:35"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"9172:3:35"},"nodeType":"YulFunctionCall","src":"9172:21:35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9143:6:35"},"nodeType":"YulFunctionCall","src":"9143:51:35"},"nodeType":"YulExpressionStatement","src":"9143:51:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9214:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"9225:4:35","type":"","value":"0x60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9210:3:35"},"nodeType":"YulFunctionCall","src":"9210:20:35"},{"arguments":[{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"9246:6:35"},{"kind":"number","nodeType":"YulLiteral","src":"9254:4:35","type":"","value":"0x60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9242:3:35"},"nodeType":"YulFunctionCall","src":"9242:17:35"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9236:5:35"},"nodeType":"YulFunctionCall","src":"9236:24:35"},{"name":"_1","nodeType":"YulIdentifier","src":"9262:2:35"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"9232:3:35"},"nodeType":"YulFunctionCall","src":"9232:33:35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9203:6:35"},"nodeType":"YulFunctionCall","src":"9203:63:35"},"nodeType":"YulExpressionStatement","src":"9203:63:35"}]},"name":"abi_encode_tuple_t_struct$_CollectParams_$2601_memory_ptr__to_t_struct$_CollectParams_$2601_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8830:9:35","type":""},{"name":"value0","nodeType":"YulTypedName","src":"8841:6:35","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8852:4:35","type":""}],"src":"8698:574:35"},{"body":{"nodeType":"YulBlock","src":"9460:377:35","statements":[{"nodeType":"YulAssignment","src":"9470:27:35","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9482:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"9493:3:35","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9478:3:35"},"nodeType":"YulFunctionCall","src":"9478:19:35"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9470:4:35"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9513:9:35"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"9530:6:35"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9524:5:35"},"nodeType":"YulFunctionCall","src":"9524:13:35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9506:6:35"},"nodeType":"YulFunctionCall","src":"9506:32:35"},"nodeType":"YulExpressionStatement","src":"9506:32:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9558:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"9569:4:35","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9554:3:35"},"nodeType":"YulFunctionCall","src":"9554:20:35"},{"arguments":[{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"9590:6:35"},{"kind":"number","nodeType":"YulLiteral","src":"9598:4:35","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9586:3:35"},"nodeType":"YulFunctionCall","src":"9586:17:35"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9580:5:35"},"nodeType":"YulFunctionCall","src":"9580:24:35"},{"kind":"number","nodeType":"YulLiteral","src":"9606:34:35","type":"","value":"0xffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"9576:3:35"},"nodeType":"YulFunctionCall","src":"9576:65:35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9547:6:35"},"nodeType":"YulFunctionCall","src":"9547:95:35"},"nodeType":"YulExpressionStatement","src":"9547:95:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9662:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"9673:4:35","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9658:3:35"},"nodeType":"YulFunctionCall","src":"9658:20:35"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"9690:6:35"},{"kind":"number","nodeType":"YulLiteral","src":"9698:4:35","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9686:3:35"},"nodeType":"YulFunctionCall","src":"9686:17:35"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9680:5:35"},"nodeType":"YulFunctionCall","src":"9680:24:35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9651:6:35"},"nodeType":"YulFunctionCall","src":"9651:54:35"},"nodeType":"YulExpressionStatement","src":"9651:54:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9725:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"9736:4:35","type":"","value":"0x60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9721:3:35"},"nodeType":"YulFunctionCall","src":"9721:20:35"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"9753:6:35"},{"kind":"number","nodeType":"YulLiteral","src":"9761:4:35","type":"","value":"0x60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9749:3:35"},"nodeType":"YulFunctionCall","src":"9749:17:35"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9743:5:35"},"nodeType":"YulFunctionCall","src":"9743:24:35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9714:6:35"},"nodeType":"YulFunctionCall","src":"9714:54:35"},"nodeType":"YulExpressionStatement","src":"9714:54:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9788:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"9799:4:35","type":"","value":"0x80"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9784:3:35"},"nodeType":"YulFunctionCall","src":"9784:20:35"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"9816:6:35"},{"kind":"number","nodeType":"YulLiteral","src":"9824:4:35","type":"","value":"0x80"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9812:3:35"},"nodeType":"YulFunctionCall","src":"9812:17:35"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9806:5:35"},"nodeType":"YulFunctionCall","src":"9806:24:35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9777:6:35"},"nodeType":"YulFunctionCall","src":"9777:54:35"},"nodeType":"YulExpressionStatement","src":"9777:54:35"}]},"name":"abi_encode_tuple_t_struct$_DecreaseLiquidityParams_$2582_memory_ptr__to_t_struct$_DecreaseLiquidityParams_$2582_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9429:9:35","type":""},{"name":"value0","nodeType":"YulTypedName","src":"9440:6:35","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9451:4:35","type":""}],"src":"9277:560:35"},{"body":{"nodeType":"YulBlock","src":"10023:614:35","statements":[{"nodeType":"YulAssignment","src":"10033:27:35","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10045:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"10056:3:35","type":"","value":"256"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10041:3:35"},"nodeType":"YulFunctionCall","src":"10041:19:35"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10033:4:35"}]},{"nodeType":"YulVariableDeclaration","src":"10069:29:35","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10087:3:35","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"10092:1:35","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"10083:3:35"},"nodeType":"YulFunctionCall","src":"10083:11:35"},{"kind":"number","nodeType":"YulLiteral","src":"10096:1:35","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10079:3:35"},"nodeType":"YulFunctionCall","src":"10079:19:35"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"10073:2:35","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10114:9:35"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"10135:6:35"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"10129:5:35"},"nodeType":"YulFunctionCall","src":"10129:13:35"},{"name":"_1","nodeType":"YulIdentifier","src":"10144:2:35"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"10125:3:35"},"nodeType":"YulFunctionCall","src":"10125:22:35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10107:6:35"},"nodeType":"YulFunctionCall","src":"10107:41:35"},"nodeType":"YulExpressionStatement","src":"10107:41:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10168:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"10179:4:35","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10164:3:35"},"nodeType":"YulFunctionCall","src":"10164:20:35"},{"arguments":[{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"10200:6:35"},{"kind":"number","nodeType":"YulLiteral","src":"10208:4:35","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10196:3:35"},"nodeType":"YulFunctionCall","src":"10196:17:35"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"10190:5:35"},"nodeType":"YulFunctionCall","src":"10190:24:35"},{"name":"_1","nodeType":"YulIdentifier","src":"10216:2:35"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"10186:3:35"},"nodeType":"YulFunctionCall","src":"10186:33:35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10157:6:35"},"nodeType":"YulFunctionCall","src":"10157:63:35"},"nodeType":"YulExpressionStatement","src":"10157:63:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10240:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"10251:4:35","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10236:3:35"},"nodeType":"YulFunctionCall","src":"10236:20:35"},{"arguments":[{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"10272:6:35"},{"kind":"number","nodeType":"YulLiteral","src":"10280:4:35","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10268:3:35"},"nodeType":"YulFunctionCall","src":"10268:17:35"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"10262:5:35"},"nodeType":"YulFunctionCall","src":"10262:24:35"},{"kind":"number","nodeType":"YulLiteral","src":"10288:8:35","type":"","value":"0xffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"10258:3:35"},"nodeType":"YulFunctionCall","src":"10258:39:35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10229:6:35"},"nodeType":"YulFunctionCall","src":"10229:69:35"},"nodeType":"YulExpressionStatement","src":"10229:69:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10318:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"10329:4:35","type":"","value":"0x60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10314:3:35"},"nodeType":"YulFunctionCall","src":"10314:20:35"},{"arguments":[{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"10350:6:35"},{"kind":"number","nodeType":"YulLiteral","src":"10358:4:35","type":"","value":"0x60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10346:3:35"},"nodeType":"YulFunctionCall","src":"10346:17:35"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"10340:5:35"},"nodeType":"YulFunctionCall","src":"10340:24:35"},{"name":"_1","nodeType":"YulIdentifier","src":"10366:2:35"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"10336:3:35"},"nodeType":"YulFunctionCall","src":"10336:33:35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10307:6:35"},"nodeType":"YulFunctionCall","src":"10307:63:35"},"nodeType":"YulExpressionStatement","src":"10307:63:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10390:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"10401:4:35","type":"","value":"0x80"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10386:3:35"},"nodeType":"YulFunctionCall","src":"10386:20:35"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"10418:6:35"},{"kind":"number","nodeType":"YulLiteral","src":"10426:4:35","type":"","value":"0x80"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10414:3:35"},"nodeType":"YulFunctionCall","src":"10414:17:35"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"10408:5:35"},"nodeType":"YulFunctionCall","src":"10408:24:35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10379:6:35"},"nodeType":"YulFunctionCall","src":"10379:54:35"},"nodeType":"YulExpressionStatement","src":"10379:54:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10453:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"10464:4:35","type":"","value":"0xa0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10449:3:35"},"nodeType":"YulFunctionCall","src":"10449:20:35"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"10481:6:35"},{"kind":"number","nodeType":"YulLiteral","src":"10489:4:35","type":"","value":"0xa0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10477:3:35"},"nodeType":"YulFunctionCall","src":"10477:17:35"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"10471:5:35"},"nodeType":"YulFunctionCall","src":"10471:24:35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10442:6:35"},"nodeType":"YulFunctionCall","src":"10442:54:35"},"nodeType":"YulExpressionStatement","src":"10442:54:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10516:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"10527:4:35","type":"","value":"0xc0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10512:3:35"},"nodeType":"YulFunctionCall","src":"10512:20:35"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"10544:6:35"},{"kind":"number","nodeType":"YulLiteral","src":"10552:4:35","type":"","value":"0xc0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10540:3:35"},"nodeType":"YulFunctionCall","src":"10540:17:35"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"10534:5:35"},"nodeType":"YulFunctionCall","src":"10534:24:35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10505:6:35"},"nodeType":"YulFunctionCall","src":"10505:54:35"},"nodeType":"YulExpressionStatement","src":"10505:54:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10579:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"10590:4:35","type":"","value":"0xe0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10575:3:35"},"nodeType":"YulFunctionCall","src":"10575:20:35"},{"arguments":[{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"10611:6:35"},{"kind":"number","nodeType":"YulLiteral","src":"10619:4:35","type":"","value":"0xe0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10607:3:35"},"nodeType":"YulFunctionCall","src":"10607:17:35"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"10601:5:35"},"nodeType":"YulFunctionCall","src":"10601:24:35"},{"name":"_1","nodeType":"YulIdentifier","src":"10627:2:35"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"10597:3:35"},"nodeType":"YulFunctionCall","src":"10597:33:35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10568:6:35"},"nodeType":"YulFunctionCall","src":"10568:63:35"},"nodeType":"YulExpressionStatement","src":"10568:63:35"}]},"name":"abi_encode_tuple_t_struct$_ExactInputSingleParams_$2703_memory_ptr__to_t_struct$_ExactInputSingleParams_$2703_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9992:9:35","type":""},{"name":"value0","nodeType":"YulTypedName","src":"10003:6:35","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"10014:4:35","type":""}],"src":"9842:795:35"},{"body":{"nodeType":"YulBlock","src":"10799:1077:35","statements":[{"nodeType":"YulAssignment","src":"10809:27:35","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10821:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"10832:3:35","type":"","value":"352"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10817:3:35"},"nodeType":"YulFunctionCall","src":"10817:19:35"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10809:4:35"}]},{"expression":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"10872:6:35"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"10866:5:35"},"nodeType":"YulFunctionCall","src":"10866:13:35"},{"name":"headStart","nodeType":"YulIdentifier","src":"10881:9:35"}],"functionName":{"name":"abi_encode_t_address","nodeType":"YulIdentifier","src":"10845:20:35"},"nodeType":"YulFunctionCall","src":"10845:46:35"},"nodeType":"YulExpressionStatement","src":"10845:46:35"},{"nodeType":"YulVariableDeclaration","src":"10900:44:35","value":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"10930:6:35"},{"kind":"number","nodeType":"YulLiteral","src":"10938:4:35","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10926:3:35"},"nodeType":"YulFunctionCall","src":"10926:17:35"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"10920:5:35"},"nodeType":"YulFunctionCall","src":"10920:24:35"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"10904:12:35","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"10974:12:35"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10992:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"11003:4:35","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10988:3:35"},"nodeType":"YulFunctionCall","src":"10988:20:35"}],"functionName":{"name":"abi_encode_t_address","nodeType":"YulIdentifier","src":"10953:20:35"},"nodeType":"YulFunctionCall","src":"10953:56:35"},"nodeType":"YulExpressionStatement","src":"10953:56:35"},{"nodeType":"YulVariableDeclaration","src":"11018:46:35","value":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"11050:6:35"},{"kind":"number","nodeType":"YulLiteral","src":"11058:4:35","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11046:3:35"},"nodeType":"YulFunctionCall","src":"11046:17:35"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"11040:5:35"},"nodeType":"YulFunctionCall","src":"11040:24:35"},"variables":[{"name":"memberValue0_1","nodeType":"YulTypedName","src":"11022:14:35","type":""}]},{"expression":{"arguments":[{"name":"memberValue0_1","nodeType":"YulIdentifier","src":"11093:14:35"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11113:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"11124:4:35","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11109:3:35"},"nodeType":"YulFunctionCall","src":"11109:20:35"}],"functionName":{"name":"abi_encode_t_uint24","nodeType":"YulIdentifier","src":"11073:19:35"},"nodeType":"YulFunctionCall","src":"11073:57:35"},"nodeType":"YulExpressionStatement","src":"11073:57:35"},{"nodeType":"YulVariableDeclaration","src":"11139:46:35","value":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"11171:6:35"},{"kind":"number","nodeType":"YulLiteral","src":"11179:4:35","type":"","value":"0x60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11167:3:35"},"nodeType":"YulFunctionCall","src":"11167:17:35"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"11161:5:35"},"nodeType":"YulFunctionCall","src":"11161:24:35"},"variables":[{"name":"memberValue0_2","nodeType":"YulTypedName","src":"11143:14:35","type":""}]},{"expression":{"arguments":[{"name":"memberValue0_2","nodeType":"YulIdentifier","src":"11213:14:35"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11233:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"11244:4:35","type":"","value":"0x60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11229:3:35"},"nodeType":"YulFunctionCall","src":"11229:20:35"}],"functionName":{"name":"abi_encode_t_int24","nodeType":"YulIdentifier","src":"11194:18:35"},"nodeType":"YulFunctionCall","src":"11194:56:35"},"nodeType":"YulExpressionStatement","src":"11194:56:35"},{"nodeType":"YulVariableDeclaration","src":"11259:46:35","value":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"11291:6:35"},{"kind":"number","nodeType":"YulLiteral","src":"11299:4:35","type":"","value":"0x80"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11287:3:35"},"nodeType":"YulFunctionCall","src":"11287:17:35"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"11281:5:35"},"nodeType":"YulFunctionCall","src":"11281:24:35"},"variables":[{"name":"memberValue0_3","nodeType":"YulTypedName","src":"11263:14:35","type":""}]},{"expression":{"arguments":[{"name":"memberValue0_3","nodeType":"YulIdentifier","src":"11333:14:35"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11353:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"11364:4:35","type":"","value":"0x80"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11349:3:35"},"nodeType":"YulFunctionCall","src":"11349:20:35"}],"functionName":{"name":"abi_encode_t_int24","nodeType":"YulIdentifier","src":"11314:18:35"},"nodeType":"YulFunctionCall","src":"11314:56:35"},"nodeType":"YulExpressionStatement","src":"11314:56:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11390:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"11401:4:35","type":"","value":"0xa0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11386:3:35"},"nodeType":"YulFunctionCall","src":"11386:20:35"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"11418:6:35"},{"kind":"number","nodeType":"YulLiteral","src":"11426:4:35","type":"","value":"0xa0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11414:3:35"},"nodeType":"YulFunctionCall","src":"11414:17:35"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"11408:5:35"},"nodeType":"YulFunctionCall","src":"11408:24:35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11379:6:35"},"nodeType":"YulFunctionCall","src":"11379:54:35"},"nodeType":"YulExpressionStatement","src":"11379:54:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11453:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"11464:4:35","type":"","value":"0xc0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11449:3:35"},"nodeType":"YulFunctionCall","src":"11449:20:35"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"11481:6:35"},{"kind":"number","nodeType":"YulLiteral","src":"11489:4:35","type":"","value":"0xc0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11477:3:35"},"nodeType":"YulFunctionCall","src":"11477:17:35"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"11471:5:35"},"nodeType":"YulFunctionCall","src":"11471:24:35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11442:6:35"},"nodeType":"YulFunctionCall","src":"11442:54:35"},"nodeType":"YulExpressionStatement","src":"11442:54:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11516:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"11527:4:35","type":"","value":"0xe0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11512:3:35"},"nodeType":"YulFunctionCall","src":"11512:20:35"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"11544:6:35"},{"kind":"number","nodeType":"YulLiteral","src":"11552:4:35","type":"","value":"0xe0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11540:3:35"},"nodeType":"YulFunctionCall","src":"11540:17:35"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"11534:5:35"},"nodeType":"YulFunctionCall","src":"11534:24:35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11505:6:35"},"nodeType":"YulFunctionCall","src":"11505:54:35"},"nodeType":"YulExpressionStatement","src":"11505:54:35"},{"nodeType":"YulVariableDeclaration","src":"11568:16:35","value":{"kind":"number","nodeType":"YulLiteral","src":"11578:6:35","type":"","value":"0x0100"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"11572:2:35","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11604:9:35"},{"name":"_1","nodeType":"YulIdentifier","src":"11615:2:35"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11600:3:35"},"nodeType":"YulFunctionCall","src":"11600:18:35"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"11630:6:35"},{"name":"_1","nodeType":"YulIdentifier","src":"11638:2:35"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11626:3:35"},"nodeType":"YulFunctionCall","src":"11626:15:35"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"11620:5:35"},"nodeType":"YulFunctionCall","src":"11620:22:35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11593:6:35"},"nodeType":"YulFunctionCall","src":"11593:50:35"},"nodeType":"YulExpressionStatement","src":"11593:50:35"},{"nodeType":"YulVariableDeclaration","src":"11652:16:35","value":{"kind":"number","nodeType":"YulLiteral","src":"11662:6:35","type":"","value":"0x0120"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"11656:2:35","type":""}]},{"nodeType":"YulVariableDeclaration","src":"11677:44:35","value":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"11709:6:35"},{"name":"_2","nodeType":"YulIdentifier","src":"11717:2:35"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11705:3:35"},"nodeType":"YulFunctionCall","src":"11705:15:35"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"11699:5:35"},"nodeType":"YulFunctionCall","src":"11699:22:35"},"variables":[{"name":"memberValue0_4","nodeType":"YulTypedName","src":"11681:14:35","type":""}]},{"expression":{"arguments":[{"name":"memberValue0_4","nodeType":"YulIdentifier","src":"11751:14:35"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11771:9:35"},{"name":"_2","nodeType":"YulIdentifier","src":"11782:2:35"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11767:3:35"},"nodeType":"YulFunctionCall","src":"11767:18:35"}],"functionName":{"name":"abi_encode_t_address","nodeType":"YulIdentifier","src":"11730:20:35"},"nodeType":"YulFunctionCall","src":"11730:56:35"},"nodeType":"YulExpressionStatement","src":"11730:56:35"},{"nodeType":"YulVariableDeclaration","src":"11795:16:35","value":{"kind":"number","nodeType":"YulLiteral","src":"11805:6:35","type":"","value":"0x0140"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"11799:2:35","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11831:9:35"},{"name":"_3","nodeType":"YulIdentifier","src":"11842:2:35"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11827:3:35"},"nodeType":"YulFunctionCall","src":"11827:18:35"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"11857:6:35"},{"name":"_3","nodeType":"YulIdentifier","src":"11865:2:35"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11853:3:35"},"nodeType":"YulFunctionCall","src":"11853:15:35"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"11847:5:35"},"nodeType":"YulFunctionCall","src":"11847:22:35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11820:6:35"},"nodeType":"YulFunctionCall","src":"11820:50:35"},"nodeType":"YulExpressionStatement","src":"11820:50:35"}]},"name":"abi_encode_tuple_t_struct$_MintParams_$2532_memory_ptr__to_t_struct$_MintParams_$2532_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10768:9:35","type":""},{"name":"value0","nodeType":"YulTypedName","src":"10779:6:35","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"10790:4:35","type":""}],"src":"10642:1234:35"},{"body":{"nodeType":"YulBlock","src":"11980:91:35","statements":[{"nodeType":"YulAssignment","src":"11990:26:35","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12002:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"12013:2:35","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11998:3:35"},"nodeType":"YulFunctionCall","src":"11998:18:35"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11990:4:35"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12032:9:35"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"12047:6:35"},{"kind":"number","nodeType":"YulLiteral","src":"12055:8:35","type":"","value":"0xffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"12043:3:35"},"nodeType":"YulFunctionCall","src":"12043:21:35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12025:6:35"},"nodeType":"YulFunctionCall","src":"12025:40:35"},"nodeType":"YulExpressionStatement","src":"12025:40:35"}]},"name":"abi_encode_tuple_t_uint24__to_t_uint24__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11949:9:35","type":""},{"name":"value0","nodeType":"YulTypedName","src":"11960:6:35","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11971:4:35","type":""}],"src":"11881:190:35"},{"body":{"nodeType":"YulBlock","src":"12177:76:35","statements":[{"nodeType":"YulAssignment","src":"12187:26:35","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12199:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"12210:2:35","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12195:3:35"},"nodeType":"YulFunctionCall","src":"12195:18:35"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12187:4:35"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12229:9:35"},{"name":"value0","nodeType":"YulIdentifier","src":"12240:6:35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12222:6:35"},"nodeType":"YulFunctionCall","src":"12222:25:35"},"nodeType":"YulExpressionStatement","src":"12222:25:35"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12146:9:35","type":""},{"name":"value0","nodeType":"YulTypedName","src":"12157:6:35","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12168:4:35","type":""}],"src":"12076:177:35"},{"body":{"nodeType":"YulBlock","src":"12387:119:35","statements":[{"nodeType":"YulAssignment","src":"12397:26:35","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12409:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"12420:2:35","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12405:3:35"},"nodeType":"YulFunctionCall","src":"12405:18:35"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12397:4:35"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12439:9:35"},{"name":"value0","nodeType":"YulIdentifier","src":"12450:6:35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12432:6:35"},"nodeType":"YulFunctionCall","src":"12432:25:35"},"nodeType":"YulExpressionStatement","src":"12432:25:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12477:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"12488:2:35","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12473:3:35"},"nodeType":"YulFunctionCall","src":"12473:18:35"},{"name":"value1","nodeType":"YulIdentifier","src":"12493:6:35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12466:6:35"},"nodeType":"YulFunctionCall","src":"12466:34:35"},"nodeType":"YulExpressionStatement","src":"12466:34:35"}]},"name":"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12348:9:35","type":""},{"name":"value1","nodeType":"YulTypedName","src":"12359:6:35","type":""},{"name":"value0","nodeType":"YulTypedName","src":"12367:6:35","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12378:4:35","type":""}],"src":"12258:248:35"},{"body":{"nodeType":"YulBlock","src":"12734:355:35","statements":[{"nodeType":"YulAssignment","src":"12744:27:35","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12756:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"12767:3:35","type":"","value":"192"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12752:3:35"},"nodeType":"YulFunctionCall","src":"12752:19:35"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12744:4:35"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12787:9:35"},{"name":"value0","nodeType":"YulIdentifier","src":"12798:6:35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12780:6:35"},"nodeType":"YulFunctionCall","src":"12780:25:35"},"nodeType":"YulExpressionStatement","src":"12780:25:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12825:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"12836:2:35","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12821:3:35"},"nodeType":"YulFunctionCall","src":"12821:18:35"},{"name":"value1","nodeType":"YulIdentifier","src":"12841:6:35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12814:6:35"},"nodeType":"YulFunctionCall","src":"12814:34:35"},"nodeType":"YulExpressionStatement","src":"12814:34:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12868:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"12879:2:35","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12864:3:35"},"nodeType":"YulFunctionCall","src":"12864:18:35"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12895:1:35","type":"","value":"2"},{"name":"value2","nodeType":"YulIdentifier","src":"12898:6:35"}],"functionName":{"name":"signextend","nodeType":"YulIdentifier","src":"12884:10:35"},"nodeType":"YulFunctionCall","src":"12884:21:35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12857:6:35"},"nodeType":"YulFunctionCall","src":"12857:49:35"},"nodeType":"YulExpressionStatement","src":"12857:49:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12926:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"12937:2:35","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12922:3:35"},"nodeType":"YulFunctionCall","src":"12922:18:35"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12953:1:35","type":"","value":"2"},{"name":"value3","nodeType":"YulIdentifier","src":"12956:6:35"}],"functionName":{"name":"signextend","nodeType":"YulIdentifier","src":"12942:10:35"},"nodeType":"YulFunctionCall","src":"12942:21:35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12915:6:35"},"nodeType":"YulFunctionCall","src":"12915:49:35"},"nodeType":"YulExpressionStatement","src":"12915:49:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12984:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"12995:3:35","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12980:3:35"},"nodeType":"YulFunctionCall","src":"12980:19:35"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13012:1:35","type":"","value":"2"},{"name":"value4","nodeType":"YulIdentifier","src":"13015:6:35"}],"functionName":{"name":"signextend","nodeType":"YulIdentifier","src":"13001:10:35"},"nodeType":"YulFunctionCall","src":"13001:21:35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12973:6:35"},"nodeType":"YulFunctionCall","src":"12973:50:35"},"nodeType":"YulExpressionStatement","src":"12973:50:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13043:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"13054:3:35","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13039:3:35"},"nodeType":"YulFunctionCall","src":"13039:19:35"},{"arguments":[{"arguments":[{"name":"value5","nodeType":"YulIdentifier","src":"13074:6:35"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"13067:6:35"},"nodeType":"YulFunctionCall","src":"13067:14:35"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"13060:6:35"},"nodeType":"YulFunctionCall","src":"13060:22:35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13032:6:35"},"nodeType":"YulFunctionCall","src":"13032:51:35"},"nodeType":"YulExpressionStatement","src":"13032:51:35"}]},"name":"abi_encode_tuple_t_uint256_t_uint256_t_int24_t_int24_t_int24_t_bool__to_t_uint256_t_uint256_t_int24_t_int24_t_int24_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12663:9:35","type":""},{"name":"value5","nodeType":"YulTypedName","src":"12674:6:35","type":""},{"name":"value4","nodeType":"YulTypedName","src":"12682:6:35","type":""},{"name":"value3","nodeType":"YulTypedName","src":"12690:6:35","type":""},{"name":"value2","nodeType":"YulTypedName","src":"12698:6:35","type":""},{"name":"value1","nodeType":"YulTypedName","src":"12706:6:35","type":""},{"name":"value0","nodeType":"YulTypedName","src":"12714:6:35","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12725:4:35","type":""}],"src":"12511:578:35"},{"body":{"nodeType":"YulBlock","src":"13141:86:35","statements":[{"body":{"nodeType":"YulBlock","src":"13205:16:35","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13214:1:35","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"13217:1:35","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"13207:6:35"},"nodeType":"YulFunctionCall","src":"13207:12:35"},"nodeType":"YulExpressionStatement","src":"13207:12:35"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13164:5:35"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13175:5:35"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13190:3:35","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"13195:1:35","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"13186:3:35"},"nodeType":"YulFunctionCall","src":"13186:11:35"},{"kind":"number","nodeType":"YulLiteral","src":"13199:1:35","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"13182:3:35"},"nodeType":"YulFunctionCall","src":"13182:19:35"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"13171:3:35"},"nodeType":"YulFunctionCall","src":"13171:31:35"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"13161:2:35"},"nodeType":"YulFunctionCall","src":"13161:42:35"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"13154:6:35"},"nodeType":"YulFunctionCall","src":"13154:50:35"},"nodeType":"YulIf","src":"13151:2:35"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"13130:5:35","type":""}],"src":"13094:133:35"}]},"contents":"{\n    { }\n    function abi_decode_t_uint16_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        if iszero(eq(value, and(value, 0xffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let value := calldataload(headStart)\n        validator_revert_t_address(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let value := mload(headStart)\n        validator_revert_t_address(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value1, value1) }\n        let value := calldataload(headStart)\n        validator_revert_t_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_t_address(value_1)\n        value1 := value_1\n    }\n    function abi_decode_tuple_t_uint160t_int24t_uint16t_uint16t_uint16t_uint8t_bool_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6\n    {\n        if slt(sub(dataEnd, headStart), 224) { revert(value4, value4) }\n        let value := mload(headStart)\n        validator_revert_t_address(value)\n        value0 := value\n        let value_1 := mload(add(headStart, 32))\n        if iszero(eq(value_1, signextend(2, value_1))) { revert(value4, value4) }\n        value1 := value_1\n        value2 := abi_decode_t_uint16_fromMemory(add(headStart, 64))\n        value3 := abi_decode_t_uint16_fromMemory(add(headStart, 96))\n        value4 := abi_decode_t_uint16_fromMemory(add(headStart, 128))\n        let value_2 := mload(add(headStart, 160))\n        if iszero(eq(value_2, and(value_2, 0xff))) { revert(value5, value5) }\n        value5 := value_2\n        let value_3 := mload(add(headStart, 192))\n        if iszero(eq(value_3, iszero(iszero(value_3)))) { revert(value6, value6) }\n        value6 := value_3\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := mload(headStart)\n    }\n    function abi_decode_tuple_t_uint256t_uint128t_uint256t_uint256_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(value0, value0) }\n        value0 := mload(headStart)\n        let value := mload(add(headStart, 32))\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffff))) { revert(value1, value1) }\n        value1 := value\n        value2 := mload(add(headStart, 64))\n        value3 := mload(add(headStart, 96))\n    }\n    function abi_decode_tuple_t_uint256t_uint256_fromMemory(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value0, value0) }\n        value0 := mload(headStart)\n        value1 := mload(add(headStart, 32))\n    }\n    function abi_encode_t_address(value, pos)\n    {\n        mstore(pos, and(value, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_t_int24(value, pos)\n    {\n        mstore(pos, signextend(2, value))\n    }\n    function abi_encode_t_uint24(value, pos)\n    {\n        mstore(pos, and(value, 0xffffff))\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_address_payable__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint24__to_t_address_t_address_t_uint24__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), and(value2, 0xffffff))\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_bool_t_int24_t_int24__to_t_bool_t_int24_t_int24__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, iszero(iszero(value0)))\n        mstore(add(headStart, 32), signextend(2, value1))\n        mstore(add(headStart, 64), signextend(2, value2))\n    }\n    function abi_encode_tuple_t_bool_t_rational_0_by_1_t_rational_0_by_1__to_t_bool_t_int24_t_int24__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, iszero(iszero(value0)))\n        mstore(add(headStart, 32), signextend(2, value1))\n        mstore(add(headStart, 64), signextend(2, value2))\n    }\n    function abi_encode_tuple_t_contract$_INonfungiblePositionManager_$2618__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_contract$_ISwapRouter_$2775__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_contract$_IUniswapV3Factory_$1383__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_int24__to_t_int24__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, signextend(2, value0))\n    }\n    function abi_encode_tuple_t_stringliteral_5e70ebd1d4072d337a7fabaa7bda70fa2633d6e3f89d5cb725a16b10d07e54c6__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 13)\n        mstore(add(headStart, 64), \"Invalid token\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_5fb447cb8a73099b715c4ab92ff6f271e9605295d15c8841bc0b730a60ec7abf__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 18)\n        mstore(add(headStart, 64), \"Invalid tick range\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_663e6e22dacb5d5dea25b1d77198b7fe22ac7eb174bc95a4c49dc1a7be65da33__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 18)\n        mstore(add(headStart, 64), \"Invalid sqrt price\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_a6664b97aef19c137d44ec81dfc0c0cc28a2c3470357b125208345a2c048425d__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 17)\n        mstore(add(headStart, 64), \"Invalid recipient\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_b44e5a2e76d616f71f124d91f8560c46215c55a45ba6a1b6e492edf2295dcc48__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 16)\n        mstore(add(headStart, 64), \"Invalid token ID\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_d3f3a127142a3a087ded95fcff040c1c8ace07bf5efa58badf473bbf6b2d666e__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 21)\n        mstore(add(headStart, 64), \"No position to remove\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_fe7e6a141e3b44702009b5d1e2c3268e1a572059382817edb68e0f82d474906f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 14)\n        mstore(add(headStart, 64), \"Pool not found\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_struct$_CollectParams_$2601_memory_ptr__to_t_struct$_CollectParams_$2601_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        mstore(headStart, mload(value0))\n        mstore(add(headStart, 0x20), and(mload(add(value0, 0x20)), sub(shl(160, 1), 1)))\n        let memberValue0 := mload(add(value0, 0x40))\n        let _1 := 0xffffffffffffffffffffffffffffffff\n        mstore(add(headStart, 0x40), and(memberValue0, _1))\n        mstore(add(headStart, 0x60), and(mload(add(value0, 0x60)), _1))\n    }\n    function abi_encode_tuple_t_struct$_DecreaseLiquidityParams_$2582_memory_ptr__to_t_struct$_DecreaseLiquidityParams_$2582_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 160)\n        mstore(headStart, mload(value0))\n        mstore(add(headStart, 0x20), and(mload(add(value0, 0x20)), 0xffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 0x40), mload(add(value0, 0x40)))\n        mstore(add(headStart, 0x60), mload(add(value0, 0x60)))\n        mstore(add(headStart, 0x80), mload(add(value0, 0x80)))\n    }\n    function abi_encode_tuple_t_struct$_ExactInputSingleParams_$2703_memory_ptr__to_t_struct$_ExactInputSingleParams_$2703_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 256)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(mload(value0), _1))\n        mstore(add(headStart, 0x20), and(mload(add(value0, 0x20)), _1))\n        mstore(add(headStart, 0x40), and(mload(add(value0, 0x40)), 0xffffff))\n        mstore(add(headStart, 0x60), and(mload(add(value0, 0x60)), _1))\n        mstore(add(headStart, 0x80), mload(add(value0, 0x80)))\n        mstore(add(headStart, 0xa0), mload(add(value0, 0xa0)))\n        mstore(add(headStart, 0xc0), mload(add(value0, 0xc0)))\n        mstore(add(headStart, 0xe0), and(mload(add(value0, 0xe0)), _1))\n    }\n    function abi_encode_tuple_t_struct$_MintParams_$2532_memory_ptr__to_t_struct$_MintParams_$2532_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 352)\n        abi_encode_t_address(mload(value0), headStart)\n        let memberValue0 := mload(add(value0, 0x20))\n        abi_encode_t_address(memberValue0, add(headStart, 0x20))\n        let memberValue0_1 := mload(add(value0, 0x40))\n        abi_encode_t_uint24(memberValue0_1, add(headStart, 0x40))\n        let memberValue0_2 := mload(add(value0, 0x60))\n        abi_encode_t_int24(memberValue0_2, add(headStart, 0x60))\n        let memberValue0_3 := mload(add(value0, 0x80))\n        abi_encode_t_int24(memberValue0_3, add(headStart, 0x80))\n        mstore(add(headStart, 0xa0), mload(add(value0, 0xa0)))\n        mstore(add(headStart, 0xc0), mload(add(value0, 0xc0)))\n        mstore(add(headStart, 0xe0), mload(add(value0, 0xe0)))\n        let _1 := 0x0100\n        mstore(add(headStart, _1), mload(add(value0, _1)))\n        let _2 := 0x0120\n        let memberValue0_4 := mload(add(value0, _2))\n        abi_encode_t_address(memberValue0_4, add(headStart, _2))\n        let _3 := 0x0140\n        mstore(add(headStart, _3), mload(add(value0, _3)))\n    }\n    function abi_encode_tuple_t_uint24__to_t_uint24__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffff))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256_t_int24_t_int24_t_int24_t_bool__to_t_uint256_t_uint256_t_int24_t_int24_t_int24_t_bool__fromStack_reversed(headStart, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 192)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), signextend(2, value2))\n        mstore(add(headStart, 96), signextend(2, value3))\n        mstore(add(headStart, 128), signextend(2, value4))\n        mstore(add(headStart, 160), iszero(iszero(value5)))\n    }\n    function validator_revert_t_address(value)\n    {\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n}","id":35,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"3083":[{"length":32,"start":1336},{"length":32,"start":2881}],"3085":[{"length":32,"start":2780},{"length":32,"start":3650},{"length":32,"start":3849},{"length":32,"start":4012},{"length":32,"start":4569}],"3087":[{"length":32,"start":1106},{"length":32,"start":2845}],"3089":[{"length":32,"start":442},{"length":32,"start":1381},{"length":32,"start":2038},{"length":32,"start":4248},{"length":32,"start":4628}],"3091":[{"length":32,"start":275},{"length":32,"start":409},{"length":32,"start":1415},{"length":32,"start":3036},{"length":32,"start":3185},{"length":32,"start":4387},{"length":32,"start":4675}],"3093":[{"length":32,"start":1021},{"length":32,"start":1449},{"length":32,"start":3221},{"length":32,"start":4722}],"3095":[{"length":32,"start":1744},{"length":32,"start":1817},{"length":32,"start":1850},{"length":32,"start":3149}]},"linkReferences":{},"object":"","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x10C JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0x95 JUMPI DUP1 PUSH4 0xC853C4BC GT PUSH2 0x64 JUMPI DUP1 PUSH4 0xC853C4BC EQ PUSH2 0x34B JUMPI DUP1 PUSH4 0xD0C93A7C EQ PUSH2 0x36B JUMPI DUP1 PUSH4 0xD21220A7 EQ PUSH2 0x380 JUMPI DUP1 PUSH4 0xDDCA3F43 EQ PUSH2 0x395 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x3B7 JUMPI PUSH2 0x1EB JUMP JUMPDEST DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x2F7 JUMPI DUP1 PUSH4 0x9B1344AC EQ PUSH2 0x30C JUMPI DUP1 PUSH4 0xC31C9C07 EQ PUSH2 0x321 JUMPI DUP1 PUSH4 0xC45A0155 EQ PUSH2 0x336 JUMPI PUSH2 0x1EB JUMP JUMPDEST DUP1 PUSH4 0x62CA5772 GT PUSH2 0xDC JUMPI DUP1 PUSH4 0x62CA5772 EQ PUSH2 0x274 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x289 JUMPI DUP1 PUSH4 0x727DD228 EQ PUSH2 0x29E JUMPI DUP1 PUSH4 0x75A6A7A9 EQ PUSH2 0x2C0 JUMPI DUP1 PUSH4 0x791B98BC EQ PUSH2 0x2E2 JUMPI PUSH2 0x1EB JUMP JUMPDEST DUP1 PUSH3 0x9A9B7B EQ PUSH2 0x1F0 JUMPI DUP1 PUSH4 0xDFE1681 EQ PUSH2 0x21B JUMPI DUP1 PUSH4 0x20800A00 EQ PUSH2 0x23D JUMPI DUP1 PUSH4 0x5431C94E EQ PUSH2 0x254 JUMPI PUSH2 0x1EB JUMP JUMPDEST CALLDATASIZE PUSH2 0x1EB JUMPI PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD0E30DB0 CALLVALUE PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x16C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x180 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP PUSH1 0x0 PUSH1 0x2 CALLVALUE DUP2 PUSH2 0x191 JUMPI INVALID JUMPDEST DIV SWAP1 POP PUSH2 0x1DF PUSH32 0x0 PUSH32 0x0 DUP4 PUSH2 0x3D7 JUMP JUMPDEST POP PUSH2 0x1E8 PUSH2 0x51E JUMP JUMPDEST POP STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x205 PUSH2 0x7EE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x212 SWAP2 SWAP1 PUSH2 0x1C5F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x227 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x230 PUSH2 0x7F4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x212 SWAP2 SWAP1 PUSH2 0x1916 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x249 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x252 PUSH2 0x818 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x260 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x252 PUSH2 0x26F CALLDATASIZE PUSH1 0x4 PUSH2 0x1786 JUMP JUMPDEST PUSH2 0x8C6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x280 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x252 PUSH2 0x51E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x295 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x252 PUSH2 0xA14 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2B3 PUSH2 0xAC0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x212 SWAP2 SWAP1 PUSH2 0x1979 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2D5 PUSH2 0xAD1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x212 SWAP2 SWAP1 PUSH2 0x1952 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x230 PUSH2 0xADA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x303 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x230 PUSH2 0xAFE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x318 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2B3 PUSH2 0xB0D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x32D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x230 PUSH2 0xB1B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x342 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x230 PUSH2 0xB3F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x357 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x252 PUSH2 0x366 CALLDATASIZE PUSH1 0x4 PUSH2 0x185E JUMP JUMPDEST PUSH2 0xB63 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x377 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2B3 PUSH2 0xC4B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x38C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x230 PUSH2 0xC6F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3A1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3AA PUSH2 0xC93 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x212 SWAP2 SWAP1 PUSH2 0x1C4F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x252 PUSH2 0x3D2 CALLDATASIZE PUSH1 0x4 PUSH2 0x174E JUMP JUMPDEST PUSH2 0xCB7 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH2 0x100 DUP2 ADD DUP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP7 AND DUP3 MSTORE DUP5 DUP2 AND PUSH1 0x20 DUP4 ADD MSTORE PUSH3 0xFFFFFF PUSH32 0x0 AND DUP3 DUP5 ADD MSTORE ADDRESS PUSH1 0x60 DUP4 ADD MSTORE TIMESTAMP PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP3 ADD DUP5 SWAP1 MSTORE PUSH1 0x0 PUSH1 0xC0 DUP4 ADD DUP2 SWAP1 MSTORE PUSH1 0xE0 DUP4 ADD DUP2 SWAP1 MSTORE SWAP3 MLOAD PUSH4 0x414BF389 PUSH1 0xE0 SHL DUP2 MSTORE PUSH32 0x0 SWAP1 SWAP2 AND SWAP1 PUSH4 0x414BF389 SWAP1 PUSH2 0x489 SWAP1 DUP5 SWAP1 PUSH1 0x4 ADD PUSH2 0x1B38 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x4B7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4DB SWAP2 SWAP1 PUSH2 0x1876 JUMP JUMPDEST SWAP2 POP PUSH32 0xBDC89DF9460547640E2147BA22A6EF8476D5390EECC620E9D76FBAA551BF4E8A DUP4 DUP4 PUSH1 0x40 MLOAD PUSH2 0x50E SWAP3 SWAP2 SWAP1 PUSH2 0x1C68 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xB4C7741 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND SWAP1 PUSH4 0x1698EE82 SWAP1 PUSH2 0x5D1 SWAP1 PUSH32 0x0 SWAP1 PUSH32 0x0 SWAP1 PUSH32 0x0 SWAP1 PUSH1 0x4 ADD PUSH2 0x192A JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5FD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x621 SWAP2 SWAP1 PUSH2 0x176A JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x652 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x649 SWAP1 PUSH2 0x1A8A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x3850C7BD PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0xE0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x68E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x6A2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x6C6 SWAP2 SWAP1 PUSH2 0x17BE JUMP JUMPDEST POP SWAP5 SWAP7 POP SWAP3 SWAP5 POP POP PUSH32 0x0 PUSH1 0x4 DUP2 MUL SWAP4 POP PUSH1 0x0 SWAP3 POP SWAP1 POP PUSH1 0x2 DUP2 DUP2 SIGNEXTEND SWAP1 DUP5 DUP2 SIGNEXTEND SDIV DUP6 SUB PUSH1 0x2 SIGNEXTEND DUP2 PUSH2 0x711 JUMPI INVALID JUMPDEST SDIV MUL SWAP1 POP PUSH1 0x0 PUSH32 0x0 PUSH32 0x0 PUSH1 0x2 SIGNEXTEND PUSH1 0x2 DUP6 PUSH1 0x2 SIGNEXTEND DUP2 PUSH2 0x769 JUMPI INVALID JUMPDEST SDIV DUP7 ADD PUSH1 0x2 SIGNEXTEND DUP2 PUSH2 0x776 JUMPI INVALID JUMPDEST PUSH1 0x2 SLOAD SWAP2 SWAP1 SDIV SWAP2 SWAP1 SWAP2 MUL SWAP2 POP PUSH1 0xFF AND ISZERO PUSH2 0x792 JUMPI PUSH2 0x792 PUSH2 0xDB9 JUMP JUMPDEST PUSH2 0x79C DUP3 DUP3 PUSH2 0x1059 JUMP JUMPDEST PUSH32 0x15F744A7D97F7ABD1BC7398CB3F55BB78B9DD63011770E854D31D8D846F13EF3 TIMESTAMP PUSH2 0x7C7 DUP8 PUSH2 0x13DC JUMP JUMPDEST DUP7 DUP6 DUP6 PUSH1 0x1 PUSH1 0x40 MLOAD PUSH2 0x7DE SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1C76 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD DUP2 JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x820 PUSH2 0x141C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x831 PUSH2 0xAFE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x87A JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1D09 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST SELFBALANCE DUP1 ISZERO PUSH2 0x8C3 JUMPI PUSH2 0x889 PUSH2 0xAFE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x8FC DUP3 SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x8C1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP JUMPDEST POP JUMP JUMPDEST PUSH2 0x8CE PUSH2 0x141C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x8DF PUSH2 0xAFE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x928 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1D09 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x94E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x649 SWAP1 PUSH2 0x1987 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x974 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x649 SWAP1 PUSH2 0x1A06 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH2 0x9A3 SWAP1 ADDRESS SWAP1 PUSH1 0x4 ADD PUSH2 0x1916 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x9BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x9CF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x9F3 SWAP2 SWAP1 PUSH2 0x1876 JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0xA0F JUMPI PUSH2 0xA0F PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND DUP4 DUP4 PUSH2 0x1420 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0xA1C PUSH2 0x141C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xA2D PUSH2 0xAFE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xA76 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1D09 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP4 SWAP1 LOG3 PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x2 DUP1 SLOAD PUSH5 0x100000000 SWAP1 DIV SWAP1 SIGNEXTEND DUP2 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x2 DUP1 SLOAD PUSH2 0x100 SWAP1 DIV SWAP1 SIGNEXTEND DUP2 JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0xB6B PUSH2 0x141C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xB7C PUSH2 0xAFE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xBC5 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1D09 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x2E1A7D4D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND SWAP1 PUSH4 0x2E1A7D4D SWAP1 PUSH2 0xC11 SWAP1 DUP5 SWAP1 PUSH1 0x4 ADD PUSH2 0x1C5F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xC2B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xC3F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH2 0x889 PUSH2 0xAFE JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0xCBF PUSH2 0x141C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xCD0 PUSH2 0xAFE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xD19 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1D09 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xD5E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1CBD PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND SWAP4 SWAP3 AND SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 LOG3 PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0xFF AND PUSH2 0xDDB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x649 SWAP1 PUSH2 0x1A5B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SLOAD GT PUSH2 0xDFD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x649 SWAP1 PUSH2 0x1A31 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xA0 DUP2 ADD DUP3 MSTORE PUSH1 0x1 SLOAD DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 DUP2 DUP4 ADD DUP2 SWAP1 MSTORE PUSH1 0x60 DUP3 ADD MSTORE TIMESTAMP PUSH1 0x80 DUP3 ADD MSTORE SWAP1 MLOAD PUSH4 0x624E65F PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND SWAP2 PUSH4 0xC49CCBE SWAP2 PUSH2 0xE76 SWAP2 SWAP1 PUSH1 0x4 ADD PUSH2 0x1AF5 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xE8F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0xEBF JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0xEBC SWAP2 DUP2 ADD SWAP1 PUSH2 0x18D6 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0xEC8 JUMPI PUSH2 0xECB JUMP JUMPDEST POP POP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x80 DUP2 ADD DUP3 MSTORE PUSH1 0x1 SLOAD DUP2 MSTORE ADDRESS PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP2 DUP4 ADD DUP2 SWAP1 MSTORE PUSH1 0x60 DUP3 ADD MSTORE SWAP1 MLOAD PUSH4 0xFC6F7865 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND SWAP2 PUSH4 0xFC6F7865 SWAP2 PUSH2 0xF3D SWAP2 SWAP1 PUSH1 0x4 ADD PUSH2 0x1AB2 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xF56 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0xF86 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0xF83 SWAP2 DUP2 ADD SWAP1 PUSH2 0x18D6 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0xF8F JUMPI PUSH2 0xF92 JUMP JUMPDEST POP POP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH4 0x852CD8D PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND SWAP2 PUSH4 0x42966C68 SWAP2 PUSH2 0xFE0 SWAP2 SWAP1 PUSH1 0x4 ADD PUSH2 0x1C5F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xFFA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x100B JUMPI POP PUSH1 0x1 JUMPDEST POP PUSH1 0x2 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE PUSH1 0x0 PUSH1 0x1 DUP2 SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH32 0x2A189A700EF68D9815A7F1C9A2AA4FF3EADD8675084668B6F754A9FE403E33B9 SWAP2 PUSH2 0x104F SWAP2 DUP2 SWAP1 DUP2 SWAP1 PUSH2 0x195D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST DUP1 PUSH1 0x2 SIGNEXTEND DUP3 PUSH1 0x2 SIGNEXTEND SLT PUSH2 0x107E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x649 SWAP1 PUSH2 0x19AE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH2 0x10CD SWAP1 ADDRESS SWAP1 PUSH1 0x4 ADD PUSH2 0x1916 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x10E5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x10F9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x111D SWAP2 SWAP1 PUSH2 0x1876 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x70A08231 ADDRESS PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x116D SWAP2 SWAP1 PUSH2 0x1916 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1185 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1199 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x11BD SWAP2 SWAP1 PUSH2 0x1876 JUMP JUMPDEST SWAP1 POP DUP2 ISZERO DUP1 ISZERO PUSH2 0x11CB JUMPI POP DUP1 ISZERO JUMPDEST ISZERO PUSH2 0x11D7 JUMPI POP POP PUSH2 0x8C1 JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x88316456 PUSH1 0x40 MLOAD DUP1 PUSH2 0x160 ADD PUSH1 0x40 MSTORE DUP1 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x0 PUSH3 0xFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH1 0x2 SIGNEXTEND DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH1 0x2 SIGNEXTEND DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD TIMESTAMP DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12F6 SWAP2 SWAP1 PUSH2 0x1BA1 JUMP JUMPDEST PUSH1 0x80 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1310 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1340 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x133D SWAP2 DUP2 ADD SWAP1 PUSH2 0x188E JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1349 JUMPI PUSH2 0x13D6 JUMP JUMPDEST DUP4 ISZERO PUSH2 0x13D1 JUMPI PUSH1 0x1 DUP5 DUP2 SSTORE PUSH1 0x2 DUP1 SLOAD DUP10 DUP3 SIGNEXTEND PUSH3 0xFFFFFF SWAP1 DUP2 AND PUSH5 0x100000000 MUL PUSH7 0xFFFFFF00000000 NOT DUP14 DUP6 SIGNEXTEND SWAP1 SWAP3 AND PUSH2 0x100 MUL PUSH4 0xFFFFFF00 NOT PUSH1 0xFF NOT SWAP1 SWAP5 AND DUP7 OR SWAP4 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR AND OR SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH32 0x2A189A700EF68D9815A7F1C9A2AA4FF3EADD8675084668B6F754A9FE403E33B9 SWAP2 PUSH2 0x13C8 SWAP2 DUP12 SWAP1 DUP12 SWAP1 PUSH2 0x195D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP POP POP POP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GT PUSH2 0x1406 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x649 SWAP1 PUSH2 0x19DA JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP1 MUL PUSH1 0x60 SHR JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST CALLER SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP1 DUP3 ADD DUP5 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0xA9059CBB PUSH1 0xE0 SHL OR SWAP1 MSTORE PUSH2 0xA0F SWAP1 DUP5 SWAP1 PUSH1 0x0 PUSH2 0x14C2 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x151E SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0xA0F JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x14E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH2 0xA0F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2A DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1D29 PUSH1 0x2A SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x60 PUSH2 0x152D DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x1537 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x1578 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1CE3 PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1581 DUP6 PUSH2 0x1692 JUMP JUMPDEST PUSH2 0x15D2 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP8 PUSH1 0x40 MLOAD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x1610 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x15F1 JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1672 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1677 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x1687 DUP3 DUP3 DUP7 PUSH2 0x1698 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST EXTCODESIZE ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x16A7 JUMPI POP DUP2 PUSH2 0x1530 JUMP JUMPDEST DUP3 MLOAD ISZERO PUSH2 0x16B7 JUMPI DUP3 MLOAD DUP1 DUP5 PUSH1 0x20 ADD REVERT JUMPDEST DUP2 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1701 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x16E9 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x172E JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD PUSH2 0xFFFF DUP2 AND DUP2 EQ PUSH2 0x1417 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x175F JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1530 DUP2 PUSH2 0x1CA7 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x177B JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x1530 DUP2 PUSH2 0x1CA7 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1798 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x17A3 DUP2 PUSH2 0x1CA7 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x17B3 DUP2 PUSH2 0x1CA7 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xE0 DUP9 DUP11 SUB SLT ISZERO PUSH2 0x17D8 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP8 MLOAD PUSH2 0x17E3 DUP2 PUSH2 0x1CA7 JUMP JUMPDEST DUP1 SWAP8 POP POP PUSH1 0x20 DUP9 ADD MLOAD DUP1 PUSH1 0x2 SIGNEXTEND DUP2 EQ PUSH2 0x17FA JUMPI DUP4 DUP5 REVERT JUMPDEST SWAP6 POP PUSH2 0x1808 PUSH1 0x40 DUP10 ADD PUSH2 0x173C JUMP JUMPDEST SWAP5 POP PUSH2 0x1816 PUSH1 0x60 DUP10 ADD PUSH2 0x173C JUMP JUMPDEST SWAP4 POP PUSH2 0x1824 PUSH1 0x80 DUP10 ADD PUSH2 0x173C JUMP JUMPDEST SWAP3 POP PUSH1 0xA0 DUP9 ADD MLOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x1839 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0xC0 DUP10 ADD MLOAD SWAP1 SWAP3 POP DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x184E JUMPI DUP2 DUP3 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP6 SWAP9 SWAP2 SWAP5 SWAP8 POP SWAP3 SWAP6 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x186F JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1887 JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x18A3 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP5 MLOAD SWAP4 POP PUSH1 0x20 DUP6 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x18C0 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH1 0x40 DUP7 ADD MLOAD PUSH1 0x60 SWAP1 SWAP7 ADD MLOAD SWAP5 SWAP8 SWAP1 SWAP7 POP SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x18E8 JUMPI DUP2 DUP3 REVERT JUMPDEST POP POP DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD MLOAD SWAP1 SWAP3 SWAP1 SWAP2 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x2 SIGNEXTEND SWAP1 MSTORE JUMP JUMPDEST PUSH3 0xFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH3 0xFFFFFF SWAP1 SWAP2 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP3 ISZERO ISZERO DUP4 MSTORE PUSH1 0x2 SWAP2 DUP3 SIGNEXTEND PUSH1 0x20 DUP5 ADD MSTORE SWAP1 SIGNEXTEND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x2 SWAP2 SWAP1 SWAP2 SIGNEXTEND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xD SWAP1 DUP3 ADD MSTORE PUSH13 0x24B73B30B634B2103A37B5B2B7 PUSH1 0x99 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x12 SWAP1 DUP3 ADD MSTORE PUSH18 0x496E76616C6964207469636B2072616E6765 PUSH1 0x70 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x12 SWAP1 DUP3 ADD MSTORE PUSH18 0x496E76616C69642073717274207072696365 PUSH1 0x70 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x11 SWAP1 DUP3 ADD MSTORE PUSH17 0x125B9D985B1A59081C9958DA5C1A595B9D PUSH1 0x7A SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x10 SWAP1 DUP3 ADD MSTORE PUSH16 0x125B9D985B1A59081D1BDAD95B881251 PUSH1 0x82 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x15 SWAP1 DUP3 ADD MSTORE PUSH21 0x4E6F20706F736974696F6E20746F2072656D6F7665 PUSH1 0x58 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH14 0x141BDBDB081B9BDD08199BDD5B99 PUSH1 0x92 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 DUP1 DUP4 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP3 ADD MSTORE PUSH1 0x40 DUP1 DUP4 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB SWAP1 DUP2 AND SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 SWAP3 DUP4 ADD MLOAD AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 ADD SWAP1 POP DUP3 MLOAD DUP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB PUSH1 0x20 DUP5 ADD MLOAD AND PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP4 ADD MLOAD PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP4 ADD MLOAD PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x80 DUP4 ADD MLOAD PUSH1 0x80 DUP4 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0x20 DUP1 DUP5 ADD MLOAD DUP3 AND SWAP1 DUP4 ADD MSTORE PUSH1 0x40 DUP1 DUP5 ADD MLOAD PUSH3 0xFFFFFF AND SWAP1 DUP4 ADD MSTORE PUSH1 0x60 DUP1 DUP5 ADD MLOAD DUP3 AND SWAP1 DUP4 ADD MSTORE PUSH1 0x80 DUP1 DUP5 ADD MLOAD SWAP1 DUP4 ADD MSTORE PUSH1 0xA0 DUP4 DUP2 ADD MLOAD SWAP1 DUP4 ADD MSTORE PUSH1 0xC0 DUP1 DUP5 ADD MLOAD SWAP1 DUP4 ADD MSTORE PUSH1 0xE0 SWAP3 DUP4 ADD MLOAD AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH2 0x100 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x160 DUP3 ADD SWAP1 POP PUSH2 0x1BB5 DUP3 DUP5 MLOAD PUSH2 0x18F9 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MLOAD PUSH2 0x1BC7 PUSH1 0x20 DUP5 ADD DUP3 PUSH2 0x18F9 JUMP JUMPDEST POP PUSH1 0x40 DUP4 ADD MLOAD PUSH2 0x1BDA PUSH1 0x40 DUP5 ADD DUP3 PUSH2 0x190D JUMP JUMPDEST POP PUSH1 0x60 DUP4 ADD MLOAD PUSH2 0x1BED PUSH1 0x60 DUP5 ADD DUP3 PUSH2 0x1906 JUMP JUMPDEST POP PUSH1 0x80 DUP4 ADD MLOAD PUSH2 0x1C00 PUSH1 0x80 DUP5 ADD DUP3 PUSH2 0x1906 JUMP JUMPDEST POP PUSH1 0xA0 DUP4 ADD MLOAD PUSH1 0xA0 DUP4 ADD MSTORE PUSH1 0xC0 DUP4 ADD MLOAD PUSH1 0xC0 DUP4 ADD MSTORE PUSH1 0xE0 DUP4 ADD MLOAD PUSH1 0xE0 DUP4 ADD MSTORE PUSH2 0x100 DUP1 DUP5 ADD MLOAD DUP2 DUP5 ADD MSTORE POP PUSH2 0x120 DUP1 DUP5 ADD MLOAD PUSH2 0x1C3E DUP3 DUP6 ADD DUP3 PUSH2 0x18F9 JUMP JUMPDEST POP POP PUSH2 0x140 SWAP3 DUP4 ADD MLOAD SWAP2 SWAP1 SWAP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH3 0xFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST SWAP6 DUP7 MSTORE PUSH1 0x20 DUP7 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0x2 SWAP3 DUP4 SIGNEXTEND PUSH1 0x40 DUP7 ADD MSTORE SWAP1 DUP3 SIGNEXTEND PUSH1 0x60 DUP6 ADD MSTORE SWAP1 SIGNEXTEND PUSH1 0x80 DUP4 ADD MSTORE ISZERO ISZERO PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x8C3 JUMPI PUSH1 0x0 DUP1 REVERT INVALID 0x4F PUSH24 0x6E61626C653A206E6577206F776E65722069732074686520 PUSH27 0x65726F2061646472657373416464726573733A20696E7375666669 PUSH4 0x69656E74 KECCAK256 PUSH3 0x616C61 PUSH15 0x636520666F722063616C6C4F776E61 PUSH3 0x6C653A KECCAK256 PUSH4 0x616C6C65 PUSH19 0x206973206E6F7420746865206F776E65725361 PUSH7 0x6545524332303A KECCAK256 GASLIMIT MSTORE NUMBER ORIGIN ADDRESS KECCAK256 PUSH16 0x7065726174696F6E20646964206E6F74 KECCAK256 PUSH20 0x756363656564A26469706673582212209CED09FB 0xB0 EXTCODECOPY AND LOG4 PUSH12 0x80502E59400F96CC1EF89211 MLOAD 0x4B CREATE 0x27 0xA9 PUSH17 0x91584D887364736F6C6343000706003300 ","sourceMap":"863:8959:31:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3588:6;-1:-1:-1;;;;;3582:21:31;;3611:9;3582:41;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3688:18;3721:1;3709:9;:13;;;;;;3688:34;;3733:49;3755:6;3763;3771:10;3733:21;:49::i;:::-;;3865:33;:31;:33::i;:::-;3507:399;863:8959;;;;;1377:29;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1156:31;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;9419:186::-;;;;;;;;;;;;;:::i;:::-;;9006:348;;;;;;;;;;-1:-1:-1;9006:348:31;;;;;:::i;:::-;;:::i;4716:1212::-;;;;;;;;;;;;;:::i;1717:145:0:-;;;;;;;;;;;;;:::i;1472:22:31:-;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;1413:23::-;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;1043:60::-;;;;;;;;;;;;;:::i;1085:85:0:-;;;;;;;;;;;;;:::i;1443:22:31:-;;;;;;;;;;;;;:::i;1110:39::-;;;;;;;;;;;;;:::i;994:42::-;;;;;;;;;;;;;:::i;9671:148::-;;;;;;;;;;-1:-1:-1;9671:148:31;;;;;:::i;:::-;;:::i;1266:34::-;;;;;;;;;;;;;:::i;1194:31::-;;;;;;;;;;;;;:::i;1232:27::-;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;2011:240:0:-;;;;;;;;;;-1:-1:-1;2011:240:0;;;;;:::i;:::-;;:::i;3948:700:31:-;4165:365;;;;;;;;-1:-1:-1;;;;;4165:365:31;;;;;;;;;;;;;4310:3;4165:365;;;;;4351:4;4165:365;;;;4385:15;4165:365;;;;;;;;;;4084:17;4165:365;;;;;;;;;;;;4555:35;;-1:-1:-1;;;4555:35:31;;:10;:27;;;;;;:35;;4165:365;;4555:35;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4543:47;;4606:34;4620:8;4630:9;4606:34;;;;;;;:::i;:::-;;;;;;;;3948:700;;;;;;:::o;4716:1212::-;4861:36;;-1:-1:-1;;;4861:36:31;;4846:12;;-1:-1:-1;;;;;4861:7:31;:15;;;;:36;;4877:6;;4885;;4893:3;;4861:36;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4846:51;-1:-1:-1;;;;;;4916:18:31;;4908:45;;;;-1:-1:-1;;;4908:45:31;;;;;;;:::i;:::-;;;;;;;;;4966:20;4997:17;5080:4;-1:-1:-1;;;;;5065:26:31;;:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;5025:68:31;;-1:-1:-1;5025:68:31;;-1:-1:-1;;5175:11:31;5189:1;5175:15;;;-1:-1:-1;5161:11:31;;-1:-1:-1;5175:11:31;-1:-1:-1;5223:39:31;;;;;5238:9;;;;5224:11;:23;5223:39;;;;;;;;5222:68;5201:89;;5301:18;5379:11;5351;5323:39;;5346:1;5338:5;:9;;;;;;;;5324:11;:23;5323:39;;;;;;;5453:11;;5323:39;;;5322:68;;;;;-1:-1:-1;5453:11:31;;5449:61;;;5481:17;:15;:17::i;:::-;5604:43;5620:12;5634;5604:15;:43::i;:::-;5706:214;5746:15;5776:34;5797:12;5776:20;:34::i;:::-;5825:11;5851:12;5878;5905:4;5706:214;;;;;;;;;;;:::i;:::-;;;;;;;;4716:1212;;;;;;:::o;1377:29::-;;;;:::o;1156:31::-;;;:::o;9419:186::-;1308:12:0;:10;:12::i;:::-;-1:-1:-1;;;;;1297:23:0;:7;:5;:7::i;:::-;-1:-1:-1;;;;;1297:23:0;;1289:68;;;;;-1:-1:-1;;;1289:68:0;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;1289:68:0;;;;;;;;;;;;;;;9488:21:31::1;9524:11:::0;;9520:78:::1;;9560:7;:5;:7::i;:::-;-1:-1:-1::0;;;;;9552:25:31::1;:34;9578:7;9552:34;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;9520:78;1367:1:0;9419:186:31:o:0;9006:348::-;1308:12:0;:10;:12::i;:::-;-1:-1:-1;;;;;1297:23:0;:7;:5;:7::i;:::-;-1:-1:-1;;;;;1297:23:0;;1289:68;;;;;-1:-1:-1;;;1289:68:0;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;1289:68:0;;;;;;;;;;;;;;;-1:-1:-1;;;;;9093:19:31;::::1;9085:45;;;;-1:-1:-1::0;;;9085:45:31::1;;;;;;;:::i;:::-;-1:-1:-1::0;;;;;9149:16:31;::::1;9141:46;;;;-1:-1:-1::0;;;9141:46:31::1;;;;;;;:::i;:::-;9217:38;::::0;-1:-1:-1;;;9217:38:31;;9200:14:::1;::::0;-1:-1:-1;;;;;9217:23:31;::::1;::::0;::::1;::::0;:38:::1;::::0;9249:4:::1;::::0;9217:38:::1;;;:::i;:::-;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;9200:55:::0;-1:-1:-1;9270:10:31;;9266:81:::1;;9297:38;-1:-1:-1::0;;;;;9297:26:31;::::1;9324:2:::0;9328:6;9297:26:::1;:38::i;:::-;1367:1:0;9006:348:31::0;;:::o;1717:145:0:-;1308:12;:10;:12::i;:::-;-1:-1:-1;;;;;1297:23:0;:7;:5;:7::i;:::-;-1:-1:-1;;;;;1297:23:0;;1289:68;;;;;-1:-1:-1;;;1289:68:0;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;1289:68:0;;;;;;;;;;;;;;;1823:1:::1;1807:6:::0;;1786:40:::1;::::0;-1:-1:-1;;;;;1807:6:0;;::::1;::::0;1786:40:::1;::::0;1823:1;;1786:40:::1;1853:1;1836:19:::0;;-1:-1:-1;;;;;;1836:19:0::1;::::0;;1717:145::o;1472:22:31:-;;;;;;;;;;:::o;1413:23::-;;;;;;:::o;1043:60::-;;;:::o;1085:85:0:-;1131:7;1157:6;-1:-1:-1;;;;;1157:6:0;1085:85;:::o;1443:22:31:-;;;;;;;;;;:::o;1110:39::-;;;:::o;994:42::-;;;:::o;9671:148::-;1308:12:0;:10;:12::i;:::-;-1:-1:-1;;;;;1297:23:0;:7;:5;:7::i;:::-;-1:-1:-1;;;;;1297:23:0;;1289:68;;;;;-1:-1:-1;;;1289:68:0;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;1289:68:0;;;;;;;;;;;;;;;9737:30:31::1;::::0;-1:-1:-1;;;9737:30:31;;-1:-1:-1;;;;;9743:6:31::1;9737:22;::::0;::::1;::::0;:30:::1;::::0;9760:6;;9737:30:::1;;;:::i;:::-;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;9786:7;:5;:7::i;1266:34::-:0;;;:::o;1194:31::-;;;:::o;1232:27::-;;;:::o;2011:240:0:-;1308:12;:10;:12::i;:::-;-1:-1:-1;;;;;1297:23:0;:7;:5;:7::i;:::-;-1:-1:-1;;;;;1297:23:0;;1289:68;;;;;-1:-1:-1;;;1289:68:0;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;1289:68:0;;;;;;;;;;;;;;;-1:-1:-1;;;;;2099:22:0;::::1;2091:73;;;;-1:-1:-1::0;;;2091:73:0::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2200:6;::::0;;2179:38:::1;::::0;-1:-1:-1;;;;;2179:38:0;;::::1;::::0;2200:6;::::1;::::0;2179:38:::1;::::0;::::1;2227:6;:17:::0;;-1:-1:-1;;;;;;2227:17:0::1;-1:-1:-1::0;;;;;2227:17:0;;;::::1;::::0;;;::::1;::::0;;2011:240::o;5972:1252:31:-;6027:11;;;;6019:45;;;;-1:-1:-1;;;6019:45:31;;;;;;;:::i;:::-;6100:1;6083:14;;:18;6075:47;;;;-1:-1:-1;;;6075:47:31;;;;;;;:::i;:::-;6238:289;;;;;;;;6322:14;;6238:289;;-1:-1:-1;;;;;6238:289:31;;;;-1:-1:-1;6238:289:31;;;;;;;;;;6492:15;6238:289;;;;6186:356;;-1:-1:-1;;;6186:356:31;;-1:-1:-1;;;;;6186:15:31;:33;;;;:356;;6238:289;6186:356;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;6186:356:31;;;;;;;;-1:-1:-1;;6186:356:31;;;;;;;;;;;;:::i;:::-;;;6169:394;;;;;;;;6680:259;;;;;;;;6754:14;;6680:259;;6810:4;6680:259;;;;-1:-1:-1;;;;;6680:259:31;;;;;;;;;;6638:316;;-1:-1:-1;;;6638:316:31;;-1:-1:-1;;;;;6638:15:31;:23;;;;:316;;6680:259;6638:316;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;6638:316:31;;;;;;;;-1:-1:-1;;6638:316:31;;;;;;;;;;;;:::i;:::-;;;6621:354;;;;;;;;7043:14;;7022:36;;-1:-1:-1;;;7022:36:31;;-1:-1:-1;;;;;7022:15:31;:20;;;;:36;;7043:14;7022:36;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7018:52;7122:11;:19;;-1:-1:-1;;7122:19:31;;;7136:5;7122:19;7152:18;;;7188:28;;;;;;7136:5;;;;7188:28;:::i;:::-;;;;;;;;5972:1252::o;7272:1318::-;7374:10;7361:23;;:10;:23;;;7353:54;;;;-1:-1:-1;;;7353:54:31;;;;;;;:::i;:::-;7438:39;;-1:-1:-1;;;7438:39:31;;7420:15;;-1:-1:-1;;;;;7445:6:31;7438:24;;;;:39;;7471:4;;7438:39;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;7420:57;;7488:15;7513:6;-1:-1:-1;;;;;7506:24:31;;7539:4;7506:39;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;7488:57;-1:-1:-1;7562:12:31;;:28;;;;-1:-1:-1;7578:12:31;;7562:28;7558:67;;;7607:7;;;;7558:67;7654:15;-1:-1:-1;;;;;7654:20:31;;7693:511;;;;;;;;7763:6;-1:-1:-1;;;;;7693:511:31;;;;;7800:6;-1:-1:-1;;;;;7693:511:31;;;;;7834:3;7693:511;;;;;;7871:10;7693:511;;;;;;7915:10;7693:511;;;;;;7964:7;7693:511;;;;8010:7;7693:511;;;;8052:1;7693:511;;;;8088:1;7693:511;;;;8131:4;-1:-1:-1;;;;;7693:511:31;;;;;8169:15;7693:511;;;7654:565;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;7654:565:31;;;;;;;;-1:-1:-1;;7654:565:31;;;;;;;;;;;;:::i;:::-;;;7637:946;;;;;8301:11;;8297:266;;8333:14;:24;;;8376:11;:18;;8454:22;;;8413;8454;;;;;-1:-1:-1;;8413:22:31;;;;;;8376:18;8413:22;-1:-1:-1;;;;8376:18:31;;;;;8413:22;;;;;;;;8454;;;;8502:45;;;;;;8425:10;;8466;;8502:45;:::i;:::-;;;;;;;;8297:266;8229:345;;;;7637:946;7272:1318;;;;:::o;8663:275::-;8754:7;8797:1;8782:12;-1:-1:-1;;;;;8782:16:31;;8774:47;;;;-1:-1:-1;;;8774:47:31;;;;;;;:::i;:::-;-1:-1:-1;;;;;;8876:21:31;;8852:45;;8928:2;8915:15;8663:275;;;;:::o;598:104:9:-;685:10;598:104;:::o;704:175:4:-;813:58;;;-1:-1:-1;;;;;813:58:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;813:58:4;-1:-1:-1;;;813:58:4;;;786:86;;806:5;;3386:23;3412:69;3440:4;3412:69;;;;;;;;;;;;;;;;;3420:5;-1:-1:-1;;;;;3412:27:4;;;:69;;;;;:::i;:::-;3495:17;;3386:95;;-1:-1:-1;3495:21:4;3491:221;;3635:10;3624:30;;;;;;;;;;;;;;;-1:-1:-1;3624:30:4;3616:85;;;;-1:-1:-1;;;3616:85:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3581:193:8;3684:12;3715:52;3737:6;3745:4;3751:1;3754:12;3715:21;:52::i;:::-;3708:59;;3581:193;;;;;;:::o;4608:523::-;4735:12;4792:5;4767:21;:30;;4759:81;;;;-1:-1:-1;;;4759:81:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4858:18;4869:6;4858:10;:18::i;:::-;4850:60;;;;;-1:-1:-1;;;4850:60:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;4981:12;4995:23;5022:6;-1:-1:-1;;;;;5022:11:8;5042:5;5050:4;5022:33;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;5022:33:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4980:75;;;;5072:52;5090:7;5099:10;5111:12;5072:17;:52::i;:::-;5065:59;4608:523;-1:-1:-1;;;;;;;4608:523:8:o;726:413::-;1086:20;1124:8;;;726:413::o;7091:725::-;7206:12;7234:7;7230:580;;;-1:-1:-1;7264:10:8;7257:17;;7230:580;7375:17;;:21;7371:429;;7633:10;7627:17;7693:15;7680:10;7676:2;7672:19;7665:44;7582:145;7772:12;7765:20;;-1:-1:-1;;;7765:20:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14:165:35;94:13;;147:6;136:18;;126:29;;116:2;;169:1;166;159:12;184:259;;296:2;284:9;275:7;271:23;267:32;264:2;;;317:6;309;302:22;264:2;361:9;348:23;380:33;407:5;380:33;:::i;448:263::-;;571:2;559:9;550:7;546:23;542:32;539:2;;;592:6;584;577:22;539:2;629:9;623:16;648:33;675:5;648:33;:::i;716:402::-;;;845:2;833:9;824:7;820:23;816:32;813:2;;;866:6;858;851:22;813:2;910:9;897:23;929:33;956:5;929:33;:::i;:::-;981:5;-1:-1:-1;1038:2:35;1023:18;;1010:32;1051:35;1010:32;1051:35;:::i;:::-;1105:7;1095:17;;;803:315;;;;;:::o;1123:1034::-;;;;;;;;1338:3;1326:9;1317:7;1313:23;1309:33;1306:2;;;1360:6;1352;1345:22;1306:2;1397:9;1391:16;1416:33;1443:5;1416:33;:::i;:::-;1468:5;1458:15;;;1518:2;1507:9;1503:18;1497:25;1567:7;1564:1;1553:22;1544:7;1541:35;1531:2;;1595:6;1587;1580:22;1531:2;1623:7;-1:-1:-1;1649:50:35;1695:2;1680:18;;1649:50;:::i;:::-;1639:60;;1718:50;1764:2;1753:9;1749:18;1718:50;:::i;:::-;1708:60;;1787:51;1833:3;1822:9;1818:19;1787:51;:::i;:::-;1777:61;;1883:3;1872:9;1868:19;1862:26;1932:4;1923:7;1919:18;1910:7;1907:31;1897:2;;1957:6;1949;1942:22;1897:2;2037:3;2022:19;;2016:26;1985:7;;-1:-1:-1;2080:15:35;;2073:23;2061:36;;2051:2;;2116:6;2108;2101:22;2051:2;2144:7;2134:17;;;1296:861;;;;;;;;;;:::o;2162:190::-;;2274:2;2262:9;2253:7;2249:23;2245:32;2242:2;;;2295:6;2287;2280:22;2242:2;-1:-1:-1;2323:23:35;;2232:120;-1:-1:-1;2232:120:35:o;2357:194::-;;2480:2;2468:9;2459:7;2455:23;2451:32;2448:2;;;2501:6;2493;2486:22;2448:2;-1:-1:-1;2529:16:35;;2438:113;-1:-1:-1;2438:113:35:o;2556:509::-;;;;;2730:3;2718:9;2709:7;2705:23;2701:33;2698:2;;;2752:6;2744;2737:22;2698:2;2786:9;2780:16;2770:26;;2839:2;2828:9;2824:18;2818:25;-1:-1:-1;;;;;2876:5:35;2872:46;2865:5;2862:57;2852:2;;2938:6;2930;2923:22;2852:2;3011;2996:18;;2990:25;3055:2;3040:18;;;3034:25;2688:377;;2966:5;;-1:-1:-1;2688:377:35;-1:-1:-1;;;2688:377:35:o;3070:255::-;;;3210:2;3198:9;3189:7;3185:23;3181:32;3178:2;;;3231:6;3223;3216:22;3178:2;-1:-1:-1;;3259:16:35;;3315:2;3300:18;;;3294:25;3259:16;;3294:25;;-1:-1:-1;3168:157:35:o;3330:106::-;-1:-1:-1;;;;;3398:31:35;3386:44;;3376:60::o;3441:93::-;3518:1;3507:20;3495:33;;3485:49::o;3539:94::-;3617:8;3606:20;3594:33;;3584:49::o;3638:203::-;-1:-1:-1;;;;;3802:32:35;;;;3784:51;;3772:2;3757:18;;3739:102::o;4062:388::-;-1:-1:-1;;;;;4318:15:35;;;4300:34;;4370:15;;;;4365:2;4350:18;;4343:43;4434:8;4422:21;;;4417:2;4402:18;;4395:49;4250:2;4235:18;;4217:233::o;4455:187::-;4620:14;;4613:22;4595:41;;4583:2;4568:18;;4550:92::o;4647:351::-;4860:14;;4853:22;4835:41;;4923:1;4912:21;;;4907:2;4892:18;;4885:49;4970:21;;4965:2;4950:18;;4943:49;4823:2;4808:18;;4790:208::o;6085:188::-;6256:1;6245:21;;;;6227:40;;6215:2;6200:18;;6182:91::o;6278:337::-;6480:2;6462:21;;;6519:2;6499:18;;;6492:30;-1:-1:-1;;;6553:2:35;6538:18;;6531:43;6606:2;6591:18;;6452:163::o;6620:342::-;6822:2;6804:21;;;6861:2;6841:18;;;6834:30;-1:-1:-1;;;6895:2:35;6880:18;;6873:48;6953:2;6938:18;;6794:168::o;6967:342::-;7169:2;7151:21;;;7208:2;7188:18;;;7181:30;-1:-1:-1;;;7242:2:35;7227:18;;7220:48;7300:2;7285:18;;7141:168::o;7314:341::-;7516:2;7498:21;;;7555:2;7535:18;;;7528:30;-1:-1:-1;;;7589:2:35;7574:18;;7567:47;7646:2;7631:18;;7488:167::o;7660:340::-;7862:2;7844:21;;;7901:2;7881:18;;;7874:30;-1:-1:-1;;;7935:2:35;7920:18;;7913:46;7991:2;7976:18;;7834:166::o;8005:345::-;8207:2;8189:21;;;8246:2;8226:18;;;8219:30;-1:-1:-1;;;8280:2:35;8265:18;;8258:51;8341:2;8326:18;;8179:171::o;8355:338::-;8557:2;8539:21;;;8596:2;8576:18;;;8569:30;-1:-1:-1;;;8630:2:35;8615:18;;8608:44;8684:2;8669:18;;8529:164::o;8698:574::-;8925:13;;8907:32;;8999:4;8987:17;;;8981:24;-1:-1:-1;;;;;8977:50:35;8955:20;;;8948:80;9075:4;9063:17;;;9057:24;-1:-1:-1;;;;;9172:21:35;;;9150:20;;;9143:51;;;;9254:4;9242:17;;;9236:24;9232:33;9210:20;;;9203:63;;;;8894:3;8879:19;;8861:411::o;9277:560::-;;9493:3;9482:9;9478:19;9470:27;;9530:6;9524:13;9513:9;9506:32;-1:-1:-1;;;;;9598:4:35;9590:6;9586:17;9580:24;9576:65;9569:4;9558:9;9554:20;9547:95;9698:4;9690:6;9686:17;9680:24;9673:4;9662:9;9658:20;9651:54;9761:4;9753:6;9749:17;9743:24;9736:4;9725:9;9721:20;9714:54;9824:4;9816:6;9812:17;9806:24;9799:4;9788:9;9784:20;9777:54;9460:377;;;;:::o;9842:795::-;10129:13;;-1:-1:-1;;;;;10125:22:35;;;10107:41;;10208:4;10196:17;;;10190:24;10186:33;;10164:20;;;10157:63;10280:4;10268:17;;;10262:24;10288:8;10258:39;10236:20;;;10229:69;10358:4;10346:17;;;10340:24;10336:33;;10314:20;;;10307:63;10426:4;10414:17;;;10408:24;10386:20;;;10379:54;10087:3;10477:17;;;10471:24;10449:20;;;10442:54;10552:4;10540:17;;;10534:24;10512:20;;;10505:54;10619:4;10607:17;;;10601:24;10597:33;10575:20;;;10568:63;;;;10056:3;10041:19;;10023:614::o;10642:1234::-;;10832:3;10821:9;10817:19;10809:27;;10845:46;10881:9;10872:6;10866:13;10845:46;:::i;:::-;10938:4;10930:6;10926:17;10920:24;10953:56;11003:4;10992:9;10988:20;10974:12;10953:56;:::i;:::-;;11058:4;11050:6;11046:17;11040:24;11073:57;11124:4;11113:9;11109:20;11093:14;11073:57;:::i;:::-;;11179:4;11171:6;11167:17;11161:24;11194:56;11244:4;11233:9;11229:20;11213:14;11194:56;:::i;:::-;;11299:4;11291:6;11287:17;11281:24;11314:56;11364:4;11353:9;11349:20;11333:14;11314:56;:::i;:::-;;11426:4;11418:6;11414:17;11408:24;11401:4;11390:9;11386:20;11379:54;11489:4;11481:6;11477:17;11471:24;11464:4;11453:9;11449:20;11442:54;11552:4;11544:6;11540:17;11534:24;11527:4;11516:9;11512:20;11505:54;11578:6;11638:2;11630:6;11626:15;11620:22;11615:2;11604:9;11600:18;11593:50;;11662:6;11717:2;11709:6;11705:15;11699:22;11730:56;11782:2;11771:9;11767:18;11751:14;11730:56;:::i;:::-;-1:-1:-1;;11805:6:35;11853:15;;;11847:22;11827:18;;;;11820:50;10799:1077;:::o;11881:190::-;12055:8;12043:21;;;;12025:40;;12013:2;11998:18;;11980:91::o;12076:177::-;12222:25;;;12210:2;12195:18;;12177:76::o;12258:248::-;12432:25;;;12488:2;12473:18;;12466:34;12420:2;12405:18;;12387:119::o;12511:578::-;12780:25;;;12836:2;12821:18;;12814:34;;;;12895:1;12884:21;;;12879:2;12864:18;;12857:49;12942:21;;;12937:2;12922:18;;12915:49;13001:21;;12995:3;12980:19;;12973:50;13067:14;13060:22;13054:3;13039:19;;13032:51;12767:3;12752:19;;12734:355::o;13094:133::-;-1:-1:-1;;;;;13171:31:35;;13161:42;;13151:2;;13217:1;13214;13207:12"},"gasEstimates":{"creation":{"codeDepositCost":"1512000","executionCost":"infinite","totalCost":"infinite"},"external":{"adjustLiquidityWithCurrentPrice()":"infinite","currentTokenId()":"1052","factory()":"infinite","fee()":"infinite","hasPosition()":"1129","lowerTick()":"1109","owner()":"1093","positionManager()":"infinite","renounceOwnership()":"infinite","rescueETH()":"infinite","rescueTokens(address,address)":"infinite","rescueWETH(uint256)":"infinite","swapRouter()":"infinite","tickSpacing()":"infinite","token0()":"infinite","token1()":"infinite","transferOwnership(address)":"infinite","upperTick()":"1131"},"internal":{"_createPosition(int24,int24)":"infinite","_removePosition()":"infinite","_sqrtPriceX96ToPrice(uint160)":"infinite","_swapExactInputSingle(address,address,uint256)":"infinite"}},"methodIdentifiers":{"adjustLiquidityWithCurrentPrice()":"62ca5772","currentTokenId()":"009a9b7b","factory()":"c45a0155","fee()":"ddca3f43","hasPosition()":"75a6a7a9","lowerTick()":"9b1344ac","owner()":"8da5cb5b","positionManager()":"791b98bc","renounceOwnership()":"715018a6","rescueETH()":"20800a00","rescueTokens(address,address)":"5431c94e","rescueWETH(uint256)":"c853c4bc","swapRouter()":"c31c9c07","tickSpacing()":"d0c93a7c","token0()":"0dfe1681","token1()":"d21220a7","transferOwnership(address)":"f2fde38b","upperTick()":"727dd228"}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_positionManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_swapRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"_fee\",\"type\":\"uint24\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"currentTick\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"finalTickLower\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"finalTickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"adjusted\",\"type\":\"bool\"}],\"name\":\"BaselineAdjustmentMetrics\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"hasPosition\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"lowerTick\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"upperTick\",\"type\":\"int24\"}],\"name\":\"PositionChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"TokensSwapped\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"adjustLiquidityWithCurrentPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contract IUniswapV3Factory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasPosition\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lowerTick\",\"outputs\":[{\"internalType\":\"int24\",\"name\":\"\",\"type\":\"int24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"positionManager\",\"outputs\":[{\"internalType\":\"contract INonfungiblePositionManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rescueETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"rescueTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rescueWETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapRouter\",\"outputs\":[{\"internalType\":\"contract ISwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tickSpacing\",\"outputs\":[{\"internalType\":\"int24\",\"name\":\"\",\"type\":\"int24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upperTick\",\"outputs\":[{\"internalType\":\"int24\",\"name\":\"\",\"type\":\"int24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"BaselineMinimal\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"\\u0646\\u0633\\u062e\\u0647 \\u062d\\u062f\\u0627\\u0642\\u0644\\u06cc \\u0642\\u0631\\u0627\\u0631\\u062f\\u0627\\u062f \\u0645\\u062f\\u06cc\\u0631\\u06cc\\u062a \\u0646\\u0642\\u062f\\u06cc\\u0646\\u06af\\u06cc \\u0628\\u06cc\\u0633\\u200c\\u0644\\u0627\\u06cc\\u0646\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BaselineMinimal.sol\":\"BaselineMinimal\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xf70bc25d981e4ec9673a995ad2995d5d493ea188d3d8f388bba9c227ce09fb82\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x2d99a0deb6648c34fbc66d6ac4a2d64798d7a5321b45624f6736fadc63da1962\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xe6bd1b1218338b6f9fe17776f48623b4ac3d8a40405f74a44bc23c00abe2ca13\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xccb917776f826ac6b68bd5a15a5f711e3967848a52ba11e6104d9a4f593314a7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title The interface for the Uniswap V3 Factory\\n/// @notice The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees\\ninterface IUniswapV3Factory {\\n    /// @notice Emitted when the owner of the factory is changed\\n    /// @param oldOwner The owner before the owner was changed\\n    /// @param newOwner The owner after the owner was changed\\n    event OwnerChanged(address indexed oldOwner, address indexed newOwner);\\n\\n    /// @notice Emitted when a pool is created\\n    /// @param token0 The first token of the pool by address sort order\\n    /// @param token1 The second token of the pool by address sort order\\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n    /// @param tickSpacing The minimum number of ticks between initialized ticks\\n    /// @param pool The address of the created pool\\n    event PoolCreated(\\n        address indexed token0,\\n        address indexed token1,\\n        uint24 indexed fee,\\n        int24 tickSpacing,\\n        address pool\\n    );\\n\\n    /// @notice Emitted when a new fee amount is enabled for pool creation via the factory\\n    /// @param fee The enabled fee, denominated in hundredths of a bip\\n    /// @param tickSpacing The minimum number of ticks between initialized ticks for pools created with the given fee\\n    event FeeAmountEnabled(uint24 indexed fee, int24 indexed tickSpacing);\\n\\n    /// @notice Returns the current owner of the factory\\n    /// @dev Can be changed by the current owner via setOwner\\n    /// @return The address of the factory owner\\n    function owner() external view returns (address);\\n\\n    /// @notice Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled\\n    /// @dev A fee amount can never be removed, so this value should be hard coded or cached in the calling context\\n    /// @param fee The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\\n    /// @return The tick spacing\\n    function feeAmountTickSpacing(uint24 fee) external view returns (int24);\\n\\n    /// @notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\\n    /// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\\n    /// @param tokenA The contract address of either token0 or token1\\n    /// @param tokenB The contract address of the other token\\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n    /// @return pool The pool address\\n    function getPool(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) external view returns (address pool);\\n\\n    /// @notice Creates a pool for the given two tokens and fee\\n    /// @param tokenA One of the two tokens in the desired pool\\n    /// @param tokenB The other of the two tokens in the desired pool\\n    /// @param fee The desired fee for the pool\\n    /// @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved\\n    /// from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments\\n    /// are invalid.\\n    /// @return pool The address of the newly created pool\\n    function createPool(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) external returns (address pool);\\n\\n    /// @notice Updates the owner of the factory\\n    /// @dev Must be called by the current owner\\n    /// @param _owner The new owner of the factory\\n    function setOwner(address _owner) external;\\n\\n    /// @notice Enables a fee amount with the given tickSpacing\\n    /// @dev Fee amounts may never be removed once enabled\\n    /// @param fee The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)\\n    /// @param tickSpacing The spacing between ticks to be enforced for all pools created with the given fee amount\\n    function enableFeeAmount(uint24 fee, int24 tickSpacing) external;\\n}\\n\",\"keccak256\":\"0xcc3d0c93fc9ac0febbe09f941b465b57f750bcf3b48432da0b97dc289cfdc489\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\nimport './pool/IUniswapV3PoolImmutables.sol';\\nimport './pool/IUniswapV3PoolState.sol';\\nimport './pool/IUniswapV3PoolDerivedState.sol';\\nimport './pool/IUniswapV3PoolActions.sol';\\nimport './pool/IUniswapV3PoolOwnerActions.sol';\\nimport './pool/IUniswapV3PoolEvents.sol';\\n\\n/// @title The interface for a Uniswap V3 Pool\\n/// @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\\n/// to the ERC20 specification\\n/// @dev The pool interface is broken up into many smaller pieces\\ninterface IUniswapV3Pool is\\n    IUniswapV3PoolImmutables,\\n    IUniswapV3PoolState,\\n    IUniswapV3PoolDerivedState,\\n    IUniswapV3PoolActions,\\n    IUniswapV3PoolOwnerActions,\\n    IUniswapV3PoolEvents\\n{\\n\\n}\\n\",\"keccak256\":\"0xfe6113d518466cd6652c85b111e01f33eb62157f49ae5ed7d5a3947a2044adb1\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissionless pool actions\\n/// @notice Contains pool methods that can be called by anyone\\ninterface IUniswapV3PoolActions {\\n    /// @notice Sets the initial price for the pool\\n    /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\\n    /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96\\n    function initialize(uint160 sqrtPriceX96) external;\\n\\n    /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\\n    /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\\n    /// on tickLower, tickUpper, the amount of liquidity, and the current price.\\n    /// @param recipient The address for which the liquidity will be created\\n    /// @param tickLower The lower tick of the position in which to add liquidity\\n    /// @param tickUpper The upper tick of the position in which to add liquidity\\n    /// @param amount The amount of liquidity to mint\\n    /// @param data Any data that should be passed through to the callback\\n    /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    function mint(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount,\\n        bytes calldata data\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Collects tokens owed to a position\\n    /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\\n    /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\\n    /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\\n    /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\\n    /// @param recipient The address which should receive the fees collected\\n    /// @param tickLower The lower tick of the position for which to collect fees\\n    /// @param tickUpper The upper tick of the position for which to collect fees\\n    /// @param amount0Requested How much token0 should be withdrawn from the fees owed\\n    /// @param amount1Requested How much token1 should be withdrawn from the fees owed\\n    /// @return amount0 The amount of fees collected in token0\\n    /// @return amount1 The amount of fees collected in token1\\n    function collect(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n\\n    /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\\n    /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\\n    /// @dev Fees must be collected separately via a call to #collect\\n    /// @param tickLower The lower tick of the position for which to burn liquidity\\n    /// @param tickUpper The upper tick of the position for which to burn liquidity\\n    /// @param amount How much liquidity to burn\\n    /// @return amount0 The amount of token0 sent to the recipient\\n    /// @return amount1 The amount of token1 sent to the recipient\\n    function burn(\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Swap token0 for token1, or token1 for token0\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\\n    /// @param recipient The address to receive the output of the swap\\n    /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\\n    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\\n    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\\n    /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\\n    /// @param data Any data to be passed through to the callback\\n    /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\\n    /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\\n    function swap(\\n        address recipient,\\n        bool zeroForOne,\\n        int256 amountSpecified,\\n        uint160 sqrtPriceLimitX96,\\n        bytes calldata data\\n    ) external returns (int256 amount0, int256 amount1);\\n\\n    /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\\n    /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\\n    /// with 0 amount{0,1} and sending the donation amount(s) from the callback\\n    /// @param recipient The address which will receive the token0 and token1 amounts\\n    /// @param amount0 The amount of token0 to send\\n    /// @param amount1 The amount of token1 to send\\n    /// @param data Any data to be passed through to the callback\\n    function flash(\\n        address recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bytes calldata data\\n    ) external;\\n\\n    /// @notice Increase the maximum number of price and liquidity observations that this pool will store\\n    /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\\n    /// the input observationCardinalityNext.\\n    /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\\n}\\n\",\"keccak256\":\"0x9453dd0e7442188667d01d9b65de3f1e14e9511ff3e303179a15f6fc267f7634\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that is not stored\\n/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the\\n/// blockchain. The functions here may have variable gas costs.\\ninterface IUniswapV3PoolDerivedState {\\n    /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\\n    /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\\n    /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\\n    /// you must call it with secondsAgos = [3600, 0].\\n    /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\\n    /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\\n    /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\\n    /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\\n    /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\\n    /// timestamp\\n    function observe(uint32[] calldata secondsAgos)\\n        external\\n        view\\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\\n\\n    /// @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\\n    /// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\\n    /// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\\n    /// snapshot is taken and the second snapshot is taken.\\n    /// @param tickLower The lower tick of the range\\n    /// @param tickUpper The upper tick of the range\\n    /// @return tickCumulativeInside The snapshot of the tick accumulator for the range\\n    /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\\n    /// @return secondsInside The snapshot of seconds per liquidity for the range\\n    function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\\n        external\\n        view\\n        returns (\\n            int56 tickCumulativeInside,\\n            uint160 secondsPerLiquidityInsideX128,\\n            uint32 secondsInside\\n        );\\n}\\n\",\"keccak256\":\"0xe603ac5b17ecdee73ba2b27efdf386c257a19c14206e87eee77e2017b742d9e5\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Events emitted by a pool\\n/// @notice Contains all events emitted by the pool\\ninterface IUniswapV3PoolEvents {\\n    /// @notice Emitted exactly once by a pool when #initialize is first called on the pool\\n    /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\\n    /// @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\\n    /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\\n    event Initialize(uint160 sqrtPriceX96, int24 tick);\\n\\n    /// @notice Emitted when liquidity is minted for a given position\\n    /// @param sender The address that minted the liquidity\\n    /// @param owner The owner of the position and recipient of any minted liquidity\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount The amount of liquidity minted to the position range\\n    /// @param amount0 How much token0 was required for the minted liquidity\\n    /// @param amount1 How much token1 was required for the minted liquidity\\n    event Mint(\\n        address sender,\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted when fees are collected by the owner of a position\\n    /// @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\\n    /// @param owner The owner of the position for which fees are collected\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount0 The amount of token0 fees collected\\n    /// @param amount1 The amount of token1 fees collected\\n    event Collect(\\n        address indexed owner,\\n        address recipient,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount0,\\n        uint128 amount1\\n    );\\n\\n    /// @notice Emitted when a position's liquidity is removed\\n    /// @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\\n    /// @param owner The owner of the position for which liquidity is removed\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount The amount of liquidity to remove\\n    /// @param amount0 The amount of token0 withdrawn\\n    /// @param amount1 The amount of token1 withdrawn\\n    event Burn(\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted by the pool for any swaps between token0 and token1\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param recipient The address that received the output of the swap\\n    /// @param amount0 The delta of the token0 balance of the pool\\n    /// @param amount1 The delta of the token1 balance of the pool\\n    /// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\\n    /// @param liquidity The liquidity of the pool after the swap\\n    /// @param tick The log base 1.0001 of price of the pool after the swap\\n    event Swap(\\n        address indexed sender,\\n        address indexed recipient,\\n        int256 amount0,\\n        int256 amount1,\\n        uint160 sqrtPriceX96,\\n        uint128 liquidity,\\n        int24 tick\\n    );\\n\\n    /// @notice Emitted by the pool for any flashes of token0/token1\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param recipient The address that received the tokens from flash\\n    /// @param amount0 The amount of token0 that was flashed\\n    /// @param amount1 The amount of token1 that was flashed\\n    /// @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\\n    /// @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\\n    event Flash(\\n        address indexed sender,\\n        address indexed recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        uint256 paid0,\\n        uint256 paid1\\n    );\\n\\n    /// @notice Emitted by the pool for increases to the number of observations that can be stored\\n    /// @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\\n    /// just before a mint/swap/burn.\\n    /// @param observationCardinalityNextOld The previous value of the next observation cardinality\\n    /// @param observationCardinalityNextNew The updated value of the next observation cardinality\\n    event IncreaseObservationCardinalityNext(\\n        uint16 observationCardinalityNextOld,\\n        uint16 observationCardinalityNextNew\\n    );\\n\\n    /// @notice Emitted when the protocol fee is changed by the pool\\n    /// @param feeProtocol0Old The previous value of the token0 protocol fee\\n    /// @param feeProtocol1Old The previous value of the token1 protocol fee\\n    /// @param feeProtocol0New The updated value of the token0 protocol fee\\n    /// @param feeProtocol1New The updated value of the token1 protocol fee\\n    event SetFeeProtocol(uint8 feeProtocol0Old, uint8 feeProtocol1Old, uint8 feeProtocol0New, uint8 feeProtocol1New);\\n\\n    /// @notice Emitted when the collected protocol fees are withdrawn by the factory owner\\n    /// @param sender The address that collects the protocol fees\\n    /// @param recipient The address that receives the collected protocol fees\\n    /// @param amount0 The amount of token0 protocol fees that is withdrawn\\n    /// @param amount0 The amount of token1 protocol fees that is withdrawn\\n    event CollectProtocol(address indexed sender, address indexed recipient, uint128 amount0, uint128 amount1);\\n}\\n\",\"keccak256\":\"0x8071514d0fe5d17d6fbd31c191cdfb703031c24e0ece3621d88ab10e871375cd\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that never changes\\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\\ninterface IUniswapV3PoolImmutables {\\n    /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\\n    /// @return The contract address\\n    function factory() external view returns (address);\\n\\n    /// @notice The first of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token0() external view returns (address);\\n\\n    /// @notice The second of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token1() external view returns (address);\\n\\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\\n    /// @return The fee\\n    function fee() external view returns (uint24);\\n\\n    /// @notice The pool tick spacing\\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\\n    /// This value is an int24 to avoid casting even though it is always positive.\\n    /// @return The tick spacing\\n    function tickSpacing() external view returns (int24);\\n\\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\\n    /// @return The max amount of liquidity per tick\\n    function maxLiquidityPerTick() external view returns (uint128);\\n}\\n\",\"keccak256\":\"0xf6e5d2cd1139c4c276bdbc8e1d2b256e456c866a91f1b868da265c6d2685c3f7\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissioned pool actions\\n/// @notice Contains pool methods that may only be called by the factory owner\\ninterface IUniswapV3PoolOwnerActions {\\n    /// @notice Set the denominator of the protocol's % share of the fees\\n    /// @param feeProtocol0 new protocol fee for token0 of the pool\\n    /// @param feeProtocol1 new protocol fee for token1 of the pool\\n    function setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external;\\n\\n    /// @notice Collect the protocol fee accrued to the pool\\n    /// @param recipient The address to which collected protocol fees should be sent\\n    /// @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\\n    /// @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\\n    /// @return amount0 The protocol fee collected in token0\\n    /// @return amount1 The protocol fee collected in token1\\n    function collectProtocol(\\n        address recipient,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n}\\n\",\"keccak256\":\"0x759b78a2918af9e99e246dc3af084f654e48ef32bb4e4cb8a966aa3dcaece235\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that can change\\n/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\\n/// per transaction\\ninterface IUniswapV3PoolState {\\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\\n    /// when accessed externally.\\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\\n    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\\n    /// boundary.\\n    /// observationIndex The index of the last oracle observation that was written,\\n    /// observationCardinality The current maximum number of observations stored in the pool,\\n    /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\\n    /// feeProtocol The protocol fee for both tokens of the pool.\\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\\n    /// unlocked Whether the pool is currently locked to reentrancy\\n    function slot0()\\n        external\\n        view\\n        returns (\\n            uint160 sqrtPriceX96,\\n            int24 tick,\\n            uint16 observationIndex,\\n            uint16 observationCardinality,\\n            uint16 observationCardinalityNext,\\n            uint8 feeProtocol,\\n            bool unlocked\\n        );\\n\\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal0X128() external view returns (uint256);\\n\\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal1X128() external view returns (uint256);\\n\\n    /// @notice The amounts of token0 and token1 that are owed to the protocol\\n    /// @dev Protocol fees will never exceed uint128 max in either token\\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\\n\\n    /// @notice The currently in range liquidity available to the pool\\n    /// @dev This value has no relationship to the total liquidity across all ticks\\n    function liquidity() external view returns (uint128);\\n\\n    /// @notice Look up information about a specific tick in the pool\\n    /// @param tick The tick to look up\\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\\n    /// tick upper,\\n    /// liquidityNet how much liquidity changes when the pool price crosses the tick,\\n    /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\\n    /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\\n    /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\\n    /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\\n    /// secondsOutside the seconds spent on the other side of the tick from the current tick,\\n    /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\\n    /// a specific position.\\n    function ticks(int24 tick)\\n        external\\n        view\\n        returns (\\n            uint128 liquidityGross,\\n            int128 liquidityNet,\\n            uint256 feeGrowthOutside0X128,\\n            uint256 feeGrowthOutside1X128,\\n            int56 tickCumulativeOutside,\\n            uint160 secondsPerLiquidityOutsideX128,\\n            uint32 secondsOutside,\\n            bool initialized\\n        );\\n\\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\\n\\n    /// @notice Returns the information about a position by the position's key\\n    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\\n    /// @return _liquidity The amount of liquidity in the position,\\n    /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\\n    /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\\n    /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\\n    /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\\n    function positions(bytes32 key)\\n        external\\n        view\\n        returns (\\n            uint128 _liquidity,\\n            uint256 feeGrowthInside0LastX128,\\n            uint256 feeGrowthInside1LastX128,\\n            uint128 tokensOwed0,\\n            uint128 tokensOwed1\\n        );\\n\\n    /// @notice Returns data about a specific observation index\\n    /// @param index The element of the observations array to fetch\\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\\n    /// ago, rather than at a specific index in the array.\\n    /// @return blockTimestamp The timestamp of the observation,\\n    /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\\n    /// Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\\n    /// Returns initialized whether the observation has been initialized and the values are safe to use\\n    function observations(uint256 index)\\n        external\\n        view\\n        returns (\\n            uint32 blockTimestamp,\\n            int56 tickCumulative,\\n            uint160 secondsPerLiquidityCumulativeX128,\\n            bool initialized\\n        );\\n}\\n\",\"keccak256\":\"0x852dc1f5df7dcf7f11e7bb3eed79f0cea72ad4b25f6a9d2c35aafb48925fd49f\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/IERC721Permit.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\n\\n/// @title ERC721 with permit\\n/// @notice Extension to ERC721 that includes a permit function for signature based approvals\\ninterface IERC721Permit is IERC721 {\\n    /// @notice The permit typehash used in the permit signature\\n    /// @return The typehash for the permit\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    /// @notice The domain separator used in the permit signature\\n    /// @return The domain seperator used in encoding of permit signature\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    /// @notice Approve of a specific token ID for spending by spender via signature\\n    /// @param spender The account that is being approved\\n    /// @param tokenId The ID of the token that is being approved for spending\\n    /// @param deadline The deadline timestamp by which the call must be mined for the approve to work\\n    /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\\n    /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\\n    /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\\n    function permit(\\n        address spender,\\n        uint256 tokenId,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x9e3c2a4ee65ddf95b2dfcb0815784eea3a295707e6f8b83e4c4f0f8fe2e3a1d4\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/INonfungiblePositionManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol';\\nimport '@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol';\\n\\nimport './IPoolInitializer.sol';\\nimport './IERC721Permit.sol';\\nimport './IPeripheryPayments.sol';\\nimport './IPeripheryImmutableState.sol';\\nimport '../libraries/PoolAddress.sol';\\n\\n/// @title Non-fungible token for positions\\n/// @notice Wraps Uniswap V3 positions in a non-fungible token interface which allows for them to be transferred\\n/// and authorized.\\ninterface INonfungiblePositionManager is\\n    IPoolInitializer,\\n    IPeripheryPayments,\\n    IPeripheryImmutableState,\\n    IERC721Metadata,\\n    IERC721Enumerable,\\n    IERC721Permit\\n{\\n    /// @notice Emitted when liquidity is increased for a position NFT\\n    /// @dev Also emitted when a token is minted\\n    /// @param tokenId The ID of the token for which liquidity was increased\\n    /// @param liquidity The amount by which liquidity for the NFT position was increased\\n    /// @param amount0 The amount of token0 that was paid for the increase in liquidity\\n    /// @param amount1 The amount of token1 that was paid for the increase in liquidity\\n    event IncreaseLiquidity(uint256 indexed tokenId, uint128 liquidity, uint256 amount0, uint256 amount1);\\n    /// @notice Emitted when liquidity is decreased for a position NFT\\n    /// @param tokenId The ID of the token for which liquidity was decreased\\n    /// @param liquidity The amount by which liquidity for the NFT position was decreased\\n    /// @param amount0 The amount of token0 that was accounted for the decrease in liquidity\\n    /// @param amount1 The amount of token1 that was accounted for the decrease in liquidity\\n    event DecreaseLiquidity(uint256 indexed tokenId, uint128 liquidity, uint256 amount0, uint256 amount1);\\n    /// @notice Emitted when tokens are collected for a position NFT\\n    /// @dev The amounts reported may not be exactly equivalent to the amounts transferred, due to rounding behavior\\n    /// @param tokenId The ID of the token for which underlying tokens were collected\\n    /// @param recipient The address of the account that received the collected tokens\\n    /// @param amount0 The amount of token0 owed to the position that was collected\\n    /// @param amount1 The amount of token1 owed to the position that was collected\\n    event Collect(uint256 indexed tokenId, address recipient, uint256 amount0, uint256 amount1);\\n\\n    /// @notice Returns the position information associated with a given token ID.\\n    /// @dev Throws if the token ID is not valid.\\n    /// @param tokenId The ID of the token that represents the position\\n    /// @return nonce The nonce for permits\\n    /// @return operator The address that is approved for spending\\n    /// @return token0 The address of the token0 for a specific pool\\n    /// @return token1 The address of the token1 for a specific pool\\n    /// @return fee The fee associated with the pool\\n    /// @return tickLower The lower end of the tick range for the position\\n    /// @return tickUpper The higher end of the tick range for the position\\n    /// @return liquidity The liquidity of the position\\n    /// @return feeGrowthInside0LastX128 The fee growth of token0 as of the last action on the individual position\\n    /// @return feeGrowthInside1LastX128 The fee growth of token1 as of the last action on the individual position\\n    /// @return tokensOwed0 The uncollected amount of token0 owed to the position as of the last computation\\n    /// @return tokensOwed1 The uncollected amount of token1 owed to the position as of the last computation\\n    function positions(uint256 tokenId)\\n        external\\n        view\\n        returns (\\n            uint96 nonce,\\n            address operator,\\n            address token0,\\n            address token1,\\n            uint24 fee,\\n            int24 tickLower,\\n            int24 tickUpper,\\n            uint128 liquidity,\\n            uint256 feeGrowthInside0LastX128,\\n            uint256 feeGrowthInside1LastX128,\\n            uint128 tokensOwed0,\\n            uint128 tokensOwed1\\n        );\\n\\n    struct MintParams {\\n        address token0;\\n        address token1;\\n        uint24 fee;\\n        int24 tickLower;\\n        int24 tickUpper;\\n        uint256 amount0Desired;\\n        uint256 amount1Desired;\\n        uint256 amount0Min;\\n        uint256 amount1Min;\\n        address recipient;\\n        uint256 deadline;\\n    }\\n\\n    /// @notice Creates a new position wrapped in a NFT\\n    /// @dev Call this when the pool does exist and is initialized. Note that if the pool is created but not initialized\\n    /// a method does not exist, i.e. the pool is assumed to be initialized.\\n    /// @param params The params necessary to mint a position, encoded as `MintParams` in calldata\\n    /// @return tokenId The ID of the token that represents the minted position\\n    /// @return liquidity The amount of liquidity for this position\\n    /// @return amount0 The amount of token0\\n    /// @return amount1 The amount of token1\\n    function mint(MintParams calldata params)\\n        external\\n        payable\\n        returns (\\n            uint256 tokenId,\\n            uint128 liquidity,\\n            uint256 amount0,\\n            uint256 amount1\\n        );\\n\\n    struct IncreaseLiquidityParams {\\n        uint256 tokenId;\\n        uint256 amount0Desired;\\n        uint256 amount1Desired;\\n        uint256 amount0Min;\\n        uint256 amount1Min;\\n        uint256 deadline;\\n    }\\n\\n    /// @notice Increases the amount of liquidity in a position, with tokens paid by the `msg.sender`\\n    /// @param params tokenId The ID of the token for which liquidity is being increased,\\n    /// amount0Desired The desired amount of token0 to be spent,\\n    /// amount1Desired The desired amount of token1 to be spent,\\n    /// amount0Min The minimum amount of token0 to spend, which serves as a slippage check,\\n    /// amount1Min The minimum amount of token1 to spend, which serves as a slippage check,\\n    /// deadline The time by which the transaction must be included to effect the change\\n    /// @return liquidity The new liquidity amount as a result of the increase\\n    /// @return amount0 The amount of token0 to acheive resulting liquidity\\n    /// @return amount1 The amount of token1 to acheive resulting liquidity\\n    function increaseLiquidity(IncreaseLiquidityParams calldata params)\\n        external\\n        payable\\n        returns (\\n            uint128 liquidity,\\n            uint256 amount0,\\n            uint256 amount1\\n        );\\n\\n    struct DecreaseLiquidityParams {\\n        uint256 tokenId;\\n        uint128 liquidity;\\n        uint256 amount0Min;\\n        uint256 amount1Min;\\n        uint256 deadline;\\n    }\\n\\n    /// @notice Decreases the amount of liquidity in a position and accounts it to the position\\n    /// @param params tokenId The ID of the token for which liquidity is being decreased,\\n    /// amount The amount by which liquidity will be decreased,\\n    /// amount0Min The minimum amount of token0 that should be accounted for the burned liquidity,\\n    /// amount1Min The minimum amount of token1 that should be accounted for the burned liquidity,\\n    /// deadline The time by which the transaction must be included to effect the change\\n    /// @return amount0 The amount of token0 accounted to the position's tokens owed\\n    /// @return amount1 The amount of token1 accounted to the position's tokens owed\\n    function decreaseLiquidity(DecreaseLiquidityParams calldata params)\\n        external\\n        payable\\n        returns (uint256 amount0, uint256 amount1);\\n\\n    struct CollectParams {\\n        uint256 tokenId;\\n        address recipient;\\n        uint128 amount0Max;\\n        uint128 amount1Max;\\n    }\\n\\n    /// @notice Collects up to a maximum amount of fees owed to a specific position to the recipient\\n    /// @param params tokenId The ID of the NFT for which tokens are being collected,\\n    /// recipient The account that should receive the tokens,\\n    /// amount0Max The maximum amount of token0 to collect,\\n    /// amount1Max The maximum amount of token1 to collect\\n    /// @return amount0 The amount of fees collected in token0\\n    /// @return amount1 The amount of fees collected in token1\\n    function collect(CollectParams calldata params) external payable returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Burns a token ID, which deletes it from the NFT contract. The token must have 0 liquidity and all tokens\\n    /// must be collected first.\\n    /// @param tokenId The ID of the token that is being burned\\n    function burn(uint256 tokenId) external payable;\\n}\\n\",\"keccak256\":\"0xe1dadc73e60bf05d0b4e0f05bd2847c5783e833cc10352c14763360b13495ee1\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/IPeripheryImmutableState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Immutable state\\n/// @notice Functions that return immutable state of the router\\ninterface IPeripheryImmutableState {\\n    /// @return Returns the address of the Uniswap V3 factory\\n    function factory() external view returns (address);\\n\\n    /// @return Returns the address of WETH9\\n    function WETH9() external view returns (address);\\n}\\n\",\"keccak256\":\"0x7affcfeb5127c0925a71d6a65345e117c33537523aeca7bc98085ead8452519d\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/IPeripheryPayments.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\n\\n/// @title Periphery Payments\\n/// @notice Functions to ease deposits and withdrawals of ETH\\ninterface IPeripheryPayments {\\n    /// @notice Unwraps the contract's WETH9 balance and sends it to recipient as ETH.\\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.\\n    /// @param amountMinimum The minimum amount of WETH9 to unwrap\\n    /// @param recipient The address receiving ETH\\n    function unwrapWETH9(uint256 amountMinimum, address recipient) external payable;\\n\\n    /// @notice Refunds any ETH balance held by this contract to the `msg.sender`\\n    /// @dev Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps\\n    /// that use ether for the input amount\\n    function refundETH() external payable;\\n\\n    /// @notice Transfers the full amount of a token held by this contract to recipient\\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing the token from users\\n    /// @param token The contract address of the token which will be transferred to `recipient`\\n    /// @param amountMinimum The minimum amount of token required for a transfer\\n    /// @param recipient The destination address of the token\\n    function sweepToken(\\n        address token,\\n        uint256 amountMinimum,\\n        address recipient\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0xb547e10f1e69bed03621a62b73a503e260643066c6b4054867a4d1fef47eb274\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/IPoolInitializer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\n/// @title Creates and initializes V3 Pools\\n/// @notice Provides a method for creating and initializing a pool, if necessary, for bundling with other methods that\\n/// require the pool to exist.\\ninterface IPoolInitializer {\\n    /// @notice Creates a new pool if it does not exist, then initializes if not initialized\\n    /// @dev This method can be bundled with others via IMulticall for the first action (e.g. mint) performed against a pool\\n    /// @param token0 The contract address of token0 of the pool\\n    /// @param token1 The contract address of token1 of the pool\\n    /// @param fee The fee amount of the v3 pool for the specified token pair\\n    /// @param sqrtPriceX96 The initial square root price of the pool as a Q64.96 value\\n    /// @return pool Returns the pool address based on the pair of tokens and fee, will return the newly created pool address if necessary\\n    function createAndInitializePoolIfNecessary(\\n        address token0,\\n        address token1,\\n        uint24 fee,\\n        uint160 sqrtPriceX96\\n    ) external payable returns (address pool);\\n}\\n\",\"keccak256\":\"0x9d7695e8d94c22cc5fcced602017aabb988de89981ea7bee29ea629d5328a862\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x9bfaf1feb32814623e627ab70f2409760b15d95f1f9b058e2b3399a8bb732975\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/libraries/PoolAddress.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Provides functions for deriving a pool address from the factory, tokens, and the fee\\nlibrary PoolAddress {\\n    bytes32 internal constant POOL_INIT_CODE_HASH = 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54;\\n\\n    /// @notice The identifying key of the pool\\n    struct PoolKey {\\n        address token0;\\n        address token1;\\n        uint24 fee;\\n    }\\n\\n    /// @notice Returns PoolKey: the ordered tokens with the matched fee levels\\n    /// @param tokenA The first token of a pool, unsorted\\n    /// @param tokenB The second token of a pool, unsorted\\n    /// @param fee The fee level of the pool\\n    /// @return Poolkey The pool details with ordered token0 and token1 assignments\\n    function getPoolKey(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) internal pure returns (PoolKey memory) {\\n        if (tokenA > tokenB) (tokenA, tokenB) = (tokenB, tokenA);\\n        return PoolKey({token0: tokenA, token1: tokenB, fee: fee});\\n    }\\n\\n    /// @notice Deterministically computes the pool address given the factory and PoolKey\\n    /// @param factory The Uniswap V3 factory contract address\\n    /// @param key The PoolKey\\n    /// @return pool The contract address of the V3 pool\\n    function computeAddress(address factory, PoolKey memory key) internal pure returns (address pool) {\\n        require(key.token0 < key.token1);\\n        pool = address(\\n            uint256(\\n                keccak256(\\n                    abi.encodePacked(\\n                        hex'ff',\\n                        factory,\\n                        keccak256(abi.encode(key.token0, key.token1, key.fee)),\\n                        POOL_INIT_CODE_HASH\\n                    )\\n                )\\n            )\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x5edd84eb8ba7c12fd8cb6cffe52e1e9f3f6464514ee5f539c2283826209035a2\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.6.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nlibrary TransferHelper {\\n    /// @notice Transfers tokens from the targeted address to the given destination\\n    /// @notice Errors with 'STF' if transfer fails\\n    /// @param token The contract address of the token to be transferred\\n    /// @param from The originating address from which the tokens will be transferred\\n    /// @param to The destination address of the transfer\\n    /// @param value The amount to be transferred\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) =\\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\\n    }\\n\\n    /// @notice Transfers tokens from msg.sender to a recipient\\n    /// @dev Errors with ST if transfer fails\\n    /// @param token The contract address of the token which will be transferred\\n    /// @param to The recipient of the transfer\\n    /// @param value The value of the transfer\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');\\n    }\\n\\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\\n    /// @dev Errors with 'SA' if transfer fails\\n    /// @param token The contract address of the token to be approved\\n    /// @param to The target of the approval\\n    /// @param value The amount of the given token the target will be allowed to spend\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');\\n    }\\n\\n    /// @notice Transfers ETH to the recipient address\\n    /// @dev Fails with `STE`\\n    /// @param to The destination of the transfer\\n    /// @param value The value to be transferred\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'STE');\\n    }\\n}\\n\",\"keccak256\":\"0x9af98b0908c96320ca6d08b22f0efca864742f6adbe5794cafe2d1d2e808b0cd\",\"license\":\"GPL-2.0-or-later\"},\"contracts/BaselineMinimal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.7.6;\\r\\npragma abicoder v2;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\r\\nimport \\\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\\\";\\r\\nimport \\\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol\\\";\\r\\nimport \\\"@uniswap/v3-periphery/contracts/interfaces/INonfungiblePositionManager.sol\\\";\\r\\nimport \\\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\\\";\\r\\nimport \\\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\\\";\\r\\n\\r\\ninterface IWETH {\\r\\n    function deposit() external payable;\\r\\n    function withdraw(uint256) external;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title BaselineMinimal\\r\\n * @notice \\u0646\\u0633\\u062e\\u0647 \\u062d\\u062f\\u0627\\u0642\\u0644\\u06cc \\u0642\\u0631\\u0627\\u0631\\u062f\\u0627\\u062f \\u0645\\u062f\\u06cc\\u0631\\u06cc\\u062a \\u0646\\u0642\\u062f\\u06cc\\u0646\\u06af\\u06cc \\u0628\\u06cc\\u0633\\u200c\\u0644\\u0627\\u06cc\\u0646\\r\\n */\\r\\ncontract BaselineMinimal is Ownable {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    // --- \\u0645\\u062a\\u063a\\u06cc\\u0631\\u0647\\u0627\\u06cc \\u0648\\u0636\\u0639\\u06cc\\u062a \\u0627\\u0635\\u0644\\u06cc ---\\r\\n    IUniswapV3Factory public immutable factory;\\r\\n    INonfungiblePositionManager public immutable positionManager;\\r\\n    ISwapRouter public immutable swapRouter;\\r\\n    address public immutable token0;\\r\\n    address public immutable token1;\\r\\n    uint24 public immutable fee;\\r\\n    int24 public immutable tickSpacing;\\r\\n\\r\\n    // --- \\u0645\\u062a\\u063a\\u06cc\\u0631\\u0647\\u0627 \\u0628\\u0631\\u0627\\u06cc \\u0646\\u06af\\u0647\\u062f\\u0627\\u0631\\u06cc \\u0645\\u0648\\u0642\\u0639\\u06cc\\u062a ---\\r\\n    uint256 public currentTokenId;\\r\\n    bool public hasPosition;\\r\\n    int24 public lowerTick;\\r\\n    int24 public upperTick;\\r\\n\\r\\n    // --- \\u0631\\u0648\\u06cc\\u062f\\u0627\\u062f\\u0647\\u0627 ---\\r\\n    event PositionChanged(bool hasPosition, int24 lowerTick, int24 upperTick);\\r\\n    event BaselineAdjustmentMetrics(\\r\\n        uint256 timestamp,\\r\\n        uint256 currentPrice,\\r\\n        int24 currentTick,\\r\\n        int24 finalTickLower,\\r\\n        int24 finalTickUpper,\\r\\n        bool adjusted\\r\\n    );\\r\\n    event TokensSwapped(uint256 amountIn, uint256 amountOut);\\r\\n\\r\\n    // --- \\u0633\\u0627\\u0632\\u0646\\u062f\\u0647 ---\\r\\n    constructor(\\r\\n        address _factory,\\r\\n        address _positionManager,\\r\\n        address _swapRouter,\\r\\n        address _token0,\\r\\n        address _token1,\\r\\n        uint24 _fee\\r\\n    ) {\\r\\n        require(_factory != address(0), \\\"Invalid factory address\\\");\\r\\n        require(_positionManager != address(0), \\\"Invalid position manager\\\");\\r\\n        require(_swapRouter != address(0), \\\"Invalid swap router\\\");\\r\\n        require(_token0 != address(0), \\\"Invalid token0\\\");\\r\\n        require(_token1 != address(0), \\\"Invalid token1\\\");\\r\\n        require(_fee > 0, \\\"Invalid fee\\\");\\r\\n\\r\\n        factory = IUniswapV3Factory(_factory);\\r\\n        positionManager = INonfungiblePositionManager(_positionManager);\\r\\n        swapRouter = ISwapRouter(_swapRouter);\\r\\n        token0 = _token0;\\r\\n        token1 = _token1;\\r\\n        fee = _fee;\\r\\n\\r\\n        // \\u062a\\u0646\\u0638\\u06cc\\u0645 tickSpacing \\u0628\\u0627 \\u0627\\u0633\\u062a\\u0641\\u0627\\u062f\\u0647 \\u0627\\u0632 \\u067e\\u0648\\u0644\\r\\n        address poolAddress = IUniswapV3Factory(_factory).getPool(\\r\\n            _token0,\\r\\n            _token1,\\r\\n            _fee\\r\\n        );\\r\\n        require(poolAddress != address(0), \\\"Pool does not exist\\\");\\r\\n        tickSpacing = IUniswapV3Pool(poolAddress).tickSpacing();\\r\\n\\r\\n        // \\u062a\\u0646\\u0638\\u06cc\\u0645 \\u062a\\u0623\\u06cc\\u06cc\\u062f\\u06cc\\u0647\\u200c\\u0647\\u0627\\u06cc \\u062a\\u0648\\u06a9\\u0646\\r\\n        IERC20(_token0).approve(address(_positionManager), type(uint256).max);\\r\\n        IERC20(_token1).approve(address(_positionManager), type(uint256).max);\\r\\n        IERC20(_token0).approve(address(_swapRouter), type(uint256).max);\\r\\n        IERC20(_token1).approve(address(_swapRouter), type(uint256).max);\\r\\n    }\\r\\n\\r\\n    // --- \\u062a\\u0627\\u0628\\u0639 \\u062f\\u0631\\u06cc\\u0627\\u0641\\u062a ETH ---\\r\\n    receive() external payable {\\r\\n        // \\u062a\\u0628\\u062f\\u06cc\\u0644 ETH \\u0628\\u0647 WETH\\r\\n        IWETH(token1).deposit{value: msg.value}();\\r\\n\\r\\n        // \\u062a\\u0628\\u062f\\u06cc\\u0644 \\u0646\\u06cc\\u0645\\u06cc \\u0627\\u0632 WETH \\u0628\\u0647 USDC\\r\\n        uint256 halfAmount = msg.value / 2;\\r\\n        _swapExactInputSingle(token1, token0, halfAmount);\\r\\n\\r\\n        // \\u062a\\u0646\\u0638\\u06cc\\u0645 \\u0646\\u0642\\u062f\\u06cc\\u0646\\u06af\\u06cc \\u0628\\u0627 \\u062a\\u0648\\u06a9\\u0646\\u200c\\u0647\\u0627\\u06cc \\u062c\\u062f\\u06cc\\u062f\\r\\n        adjustLiquidityWithCurrentPrice();\\r\\n    }\\r\\n\\r\\n    // --- \\u062a\\u0627\\u0628\\u0639 \\u0633\\u0648\\u0627\\u067e ---\\r\\n    function _swapExactInputSingle(\\r\\n        address tokenIn,\\r\\n        address tokenOut,\\r\\n        uint256 amountIn\\r\\n    ) internal returns (uint256 amountOut) {\\r\\n        ISwapRouter.ExactInputSingleParams memory params = ISwapRouter\\r\\n            .ExactInputSingleParams({\\r\\n                tokenIn: tokenIn,\\r\\n                tokenOut: tokenOut,\\r\\n                fee: fee,\\r\\n                recipient: address(this),\\r\\n                deadline: block.timestamp,\\r\\n                amountIn: amountIn,\\r\\n                amountOutMinimum: 0,\\r\\n                sqrtPriceLimitX96: 0\\r\\n            });\\r\\n\\r\\n        amountOut = swapRouter.exactInputSingle(params);\\r\\n        emit TokensSwapped(amountIn, amountOut);\\r\\n    }\\r\\n\\r\\n    // --- \\u062a\\u0627\\u0628\\u0639 \\u0627\\u0635\\u0644\\u06cc \\u062a\\u0646\\u0638\\u06cc\\u0645 \\u0646\\u0642\\u062f\\u06cc\\u0646\\u06af\\u06cc ---\\r\\n    function adjustLiquidityWithCurrentPrice() public {\\r\\n        // 1. \\u062f\\u0631\\u06cc\\u0627\\u0641\\u062a \\u0627\\u0637\\u0644\\u0627\\u0639\\u0627\\u062a \\u0642\\u06cc\\u0645\\u062a \\u0648 tick \\u0641\\u0639\\u0644\\u06cc\\r\\n        address pool = factory.getPool(token0, token1, fee);\\r\\n        require(pool != address(0), \\\"Pool not found\\\");\\r\\n\\r\\n        uint160 sqrtPriceX96;\\r\\n        int24 currentTick;\\r\\n        (sqrtPriceX96, currentTick, , , , , ) = IUniswapV3Pool(pool).slot0();\\r\\n\\r\\n        // 2. \\u0645\\u062d\\u0627\\u0633\\u0628\\u0647 \\u0645\\u062d\\u062f\\u0648\\u062f\\u0647 tick \\u062c\\u062f\\u06cc\\u062f\\r\\n        int24 width = tickSpacing * 4;\\r\\n        int24 newLowerTick = ((currentTick - width / 2) / tickSpacing) *\\r\\n            tickSpacing;\\r\\n        int24 newUpperTick = ((currentTick + width / 2) / tickSpacing) *\\r\\n            tickSpacing;\\r\\n\\r\\n        // 3. \\u062d\\u0630\\u0641 \\u0645\\u0648\\u0642\\u0639\\u06cc\\u062a \\u0645\\u0648\\u062c\\u0648\\u062f\\r\\n        if (hasPosition) {\\r\\n            _removePosition();\\r\\n        }\\r\\n\\r\\n        // 4. \\u0627\\u06cc\\u062c\\u0627\\u062f \\u0645\\u0648\\u0642\\u0639\\u06cc\\u062a \\u062c\\u062f\\u06cc\\u062f \\u0628\\u0627 \\u0645\\u0648\\u062c\\u0648\\u062f\\u06cc \\u062a\\u0648\\u06a9\\u0646\\u200c\\u0647\\u0627\\r\\n        _createPosition(newLowerTick, newUpperTick);\\r\\n\\r\\n        // 5. \\u0627\\u0646\\u062a\\u0634\\u0627\\u0631 \\u0631\\u0648\\u06cc\\u062f\\u0627\\u062f\\r\\n        emit BaselineAdjustmentMetrics(\\r\\n            block.timestamp,\\r\\n            _sqrtPriceX96ToPrice(sqrtPriceX96),\\r\\n            currentTick,\\r\\n            newLowerTick,\\r\\n            newUpperTick,\\r\\n            true\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // --- \\u062d\\u0630\\u0641 \\u0645\\u0648\\u0642\\u0639\\u06cc\\u062a ---\\r\\n    function _removePosition() internal {\\r\\n        require(hasPosition, \\\"No position to remove\\\");\\r\\n        require(currentTokenId > 0, \\\"Invalid token ID\\\");\\r\\n\\r\\n        // \\u062d\\u0630\\u0641 \\u0646\\u0642\\u062f\\u06cc\\u0646\\u06af\\u06cc\\r\\n        try\\r\\n            positionManager.decreaseLiquidity(\\r\\n                INonfungiblePositionManager.DecreaseLiquidityParams({\\r\\n                    tokenId: currentTokenId,\\r\\n                    liquidity: type(uint128).max,\\r\\n                    amount0Min: 0,\\r\\n                    amount1Min: 0,\\r\\n                    deadline: block.timestamp\\r\\n                })\\r\\n            )\\r\\n        {} catch {}\\r\\n\\r\\n        // \\u062c\\u0645\\u0639\\u200c\\u0622\\u0648\\u0631\\u06cc \\u062a\\u0648\\u06a9\\u0646\\u200c\\u0647\\u0627\\r\\n        try\\r\\n            positionManager.collect(\\r\\n                INonfungiblePositionManager.CollectParams({\\r\\n                    tokenId: currentTokenId,\\r\\n                    recipient: address(this),\\r\\n                    amount0Max: type(uint128).max,\\r\\n                    amount1Max: type(uint128).max\\r\\n                })\\r\\n            )\\r\\n        {} catch {}\\r\\n\\r\\n        // \\u0633\\u0648\\u0632\\u0627\\u0646\\u062f\\u0646 NFT\\r\\n        try positionManager.burn(currentTokenId) {} catch {}\\r\\n\\r\\n        // \\u0628\\u0627\\u0632\\u0646\\u0634\\u0627\\u0646\\u06cc \\u0648\\u0636\\u0639\\u06cc\\u062a\\r\\n        hasPosition = false;\\r\\n        currentTokenId = 0;\\r\\n\\r\\n        emit PositionChanged(false, 0, 0);\\r\\n    }\\r\\n\\r\\n    // --- \\u0627\\u06cc\\u062c\\u0627\\u062f \\u0645\\u0648\\u0642\\u0639\\u06cc\\u062a ---\\r\\n    function _createPosition(int24 _lowerTick, int24 _upperTick) internal {\\r\\n        require(_lowerTick < _upperTick, \\\"Invalid tick range\\\");\\r\\n\\r\\n        uint256 amount0 = IERC20(token0).balanceOf(address(this));\\r\\n        uint256 amount1 = IERC20(token1).balanceOf(address(this));\\r\\n\\r\\n        if (amount0 == 0 && amount1 == 0) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        try\\r\\n            positionManager.mint(\\r\\n                INonfungiblePositionManager.MintParams({\\r\\n                    token0: token0,\\r\\n                    token1: token1,\\r\\n                    fee: fee,\\r\\n                    tickLower: _lowerTick,\\r\\n                    tickUpper: _upperTick,\\r\\n                    amount0Desired: amount0,\\r\\n                    amount1Desired: amount1,\\r\\n                    amount0Min: 0,\\r\\n                    amount1Min: 0,\\r\\n                    recipient: address(this),\\r\\n                    deadline: block.timestamp\\r\\n                })\\r\\n            )\\r\\n        returns (uint256 tokenId, uint128, uint256, uint256) {\\r\\n            if (tokenId > 0) {\\r\\n                currentTokenId = tokenId;\\r\\n                hasPosition = true;\\r\\n                lowerTick = _lowerTick;\\r\\n                upperTick = _upperTick;\\r\\n\\r\\n                emit PositionChanged(true, _lowerTick, _upperTick);\\r\\n            }\\r\\n        } catch {}\\r\\n    }\\r\\n\\r\\n    // --- \\u062a\\u0627\\u0628\\u0639 \\u06a9\\u0645\\u06a9\\u06cc \\u0628\\u0631\\u0627\\u06cc \\u0645\\u062d\\u0627\\u0633\\u0628\\u0647 \\u0642\\u06cc\\u0645\\u062a ---\\r\\n    function _sqrtPriceX96ToPrice(\\r\\n        uint160 sqrtPriceX96\\r\\n    ) internal pure returns (uint256) {\\r\\n        require(sqrtPriceX96 > 0, \\\"Invalid sqrt price\\\");\\r\\n        uint256 priceX192 = uint256(sqrtPriceX96) * uint256(sqrtPriceX96);\\r\\n        return priceX192 >> 96;\\r\\n    }\\r\\n\\r\\n    // --- \\u0628\\u0631\\u062f\\u0627\\u0634\\u062a \\u0627\\u0636\\u0637\\u0631\\u0627\\u0631\\u06cc \\u062a\\u0648\\u06a9\\u0646\\u200c\\u0647\\u0627 ---\\r\\n    function rescueTokens(address token, address to) external onlyOwner {\\r\\n        require(token != address(0), \\\"Invalid token\\\");\\r\\n        require(to != address(0), \\\"Invalid recipient\\\");\\r\\n\\r\\n        uint256 amount = IERC20(token).balanceOf(address(this));\\r\\n        if (amount > 0) {\\r\\n            IERC20(token).safeTransfer(to, amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // --- \\u062a\\u0627\\u0628\\u0639 \\u0628\\u0631\\u062f\\u0627\\u0634\\u062a \\u0627\\u0636\\u0637\\u0631\\u0627\\u0631\\u06cc ETH ---\\r\\n    function rescueETH() external onlyOwner {\\r\\n        uint256 balance = address(this).balance;\\r\\n        if (balance > 0) {\\r\\n            payable(owner()).transfer(balance);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // --- \\u062a\\u0627\\u0628\\u0639 \\u0628\\u0631\\u062f\\u0627\\u0634\\u062a \\u0627\\u0636\\u0637\\u0631\\u0627\\u0631\\u06cc WETH ---\\r\\n    function rescueWETH(uint256 amount) external onlyOwner {\\r\\n        IWETH(token1).withdraw(amount);\\r\\n        payable(owner()).transfer(amount);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xbd1426c3f8e6dff91ea85d724202debd7f217bd8c2b86fd2a4997e04d3bf302f\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":7,"contract":"contracts/BaselineMinimal.sol:BaselineMinimal","label":"_owner","offset":0,"slot":"0","type":"t_address"},{"astId":3097,"contract":"contracts/BaselineMinimal.sol:BaselineMinimal","label":"currentTokenId","offset":0,"slot":"1","type":"t_uint256"},{"astId":3099,"contract":"contracts/BaselineMinimal.sol:BaselineMinimal","label":"hasPosition","offset":0,"slot":"2","type":"t_bool"},{"astId":3101,"contract":"contracts/BaselineMinimal.sol:BaselineMinimal","label":"lowerTick","offset":1,"slot":"2","type":"t_int24"},{"astId":3103,"contract":"contracts/BaselineMinimal.sol:BaselineMinimal","label":"upperTick","offset":4,"slot":"2","type":"t_int24"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_int24":{"encoding":"inplace","label":"int24","numberOfBytes":"3"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"notice":"نسخه حداقلی قرارداد مدیریت نقدینگی بیس‌لاین","version":1}},"IWETH":{"abi":[{"inputs":[],"name":"deposit","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"withdraw","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"deposit()":"d0e30db0","withdraw(uint256)":"2e1a7d4d"}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BaselineMinimal.sol\":\"IWETH\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xf70bc25d981e4ec9673a995ad2995d5d493ea188d3d8f388bba9c227ce09fb82\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x2d99a0deb6648c34fbc66d6ac4a2d64798d7a5321b45624f6736fadc63da1962\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xe6bd1b1218338b6f9fe17776f48623b4ac3d8a40405f74a44bc23c00abe2ca13\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xccb917776f826ac6b68bd5a15a5f711e3967848a52ba11e6104d9a4f593314a7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title The interface for the Uniswap V3 Factory\\n/// @notice The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees\\ninterface IUniswapV3Factory {\\n    /// @notice Emitted when the owner of the factory is changed\\n    /// @param oldOwner The owner before the owner was changed\\n    /// @param newOwner The owner after the owner was changed\\n    event OwnerChanged(address indexed oldOwner, address indexed newOwner);\\n\\n    /// @notice Emitted when a pool is created\\n    /// @param token0 The first token of the pool by address sort order\\n    /// @param token1 The second token of the pool by address sort order\\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n    /// @param tickSpacing The minimum number of ticks between initialized ticks\\n    /// @param pool The address of the created pool\\n    event PoolCreated(\\n        address indexed token0,\\n        address indexed token1,\\n        uint24 indexed fee,\\n        int24 tickSpacing,\\n        address pool\\n    );\\n\\n    /// @notice Emitted when a new fee amount is enabled for pool creation via the factory\\n    /// @param fee The enabled fee, denominated in hundredths of a bip\\n    /// @param tickSpacing The minimum number of ticks between initialized ticks for pools created with the given fee\\n    event FeeAmountEnabled(uint24 indexed fee, int24 indexed tickSpacing);\\n\\n    /// @notice Returns the current owner of the factory\\n    /// @dev Can be changed by the current owner via setOwner\\n    /// @return The address of the factory owner\\n    function owner() external view returns (address);\\n\\n    /// @notice Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled\\n    /// @dev A fee amount can never be removed, so this value should be hard coded or cached in the calling context\\n    /// @param fee The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\\n    /// @return The tick spacing\\n    function feeAmountTickSpacing(uint24 fee) external view returns (int24);\\n\\n    /// @notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\\n    /// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\\n    /// @param tokenA The contract address of either token0 or token1\\n    /// @param tokenB The contract address of the other token\\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n    /// @return pool The pool address\\n    function getPool(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) external view returns (address pool);\\n\\n    /// @notice Creates a pool for the given two tokens and fee\\n    /// @param tokenA One of the two tokens in the desired pool\\n    /// @param tokenB The other of the two tokens in the desired pool\\n    /// @param fee The desired fee for the pool\\n    /// @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved\\n    /// from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments\\n    /// are invalid.\\n    /// @return pool The address of the newly created pool\\n    function createPool(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) external returns (address pool);\\n\\n    /// @notice Updates the owner of the factory\\n    /// @dev Must be called by the current owner\\n    /// @param _owner The new owner of the factory\\n    function setOwner(address _owner) external;\\n\\n    /// @notice Enables a fee amount with the given tickSpacing\\n    /// @dev Fee amounts may never be removed once enabled\\n    /// @param fee The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)\\n    /// @param tickSpacing The spacing between ticks to be enforced for all pools created with the given fee amount\\n    function enableFeeAmount(uint24 fee, int24 tickSpacing) external;\\n}\\n\",\"keccak256\":\"0xcc3d0c93fc9ac0febbe09f941b465b57f750bcf3b48432da0b97dc289cfdc489\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\nimport './pool/IUniswapV3PoolImmutables.sol';\\nimport './pool/IUniswapV3PoolState.sol';\\nimport './pool/IUniswapV3PoolDerivedState.sol';\\nimport './pool/IUniswapV3PoolActions.sol';\\nimport './pool/IUniswapV3PoolOwnerActions.sol';\\nimport './pool/IUniswapV3PoolEvents.sol';\\n\\n/// @title The interface for a Uniswap V3 Pool\\n/// @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\\n/// to the ERC20 specification\\n/// @dev The pool interface is broken up into many smaller pieces\\ninterface IUniswapV3Pool is\\n    IUniswapV3PoolImmutables,\\n    IUniswapV3PoolState,\\n    IUniswapV3PoolDerivedState,\\n    IUniswapV3PoolActions,\\n    IUniswapV3PoolOwnerActions,\\n    IUniswapV3PoolEvents\\n{\\n\\n}\\n\",\"keccak256\":\"0xfe6113d518466cd6652c85b111e01f33eb62157f49ae5ed7d5a3947a2044adb1\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissionless pool actions\\n/// @notice Contains pool methods that can be called by anyone\\ninterface IUniswapV3PoolActions {\\n    /// @notice Sets the initial price for the pool\\n    /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\\n    /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96\\n    function initialize(uint160 sqrtPriceX96) external;\\n\\n    /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\\n    /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\\n    /// on tickLower, tickUpper, the amount of liquidity, and the current price.\\n    /// @param recipient The address for which the liquidity will be created\\n    /// @param tickLower The lower tick of the position in which to add liquidity\\n    /// @param tickUpper The upper tick of the position in which to add liquidity\\n    /// @param amount The amount of liquidity to mint\\n    /// @param data Any data that should be passed through to the callback\\n    /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    function mint(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount,\\n        bytes calldata data\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Collects tokens owed to a position\\n    /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\\n    /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\\n    /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\\n    /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\\n    /// @param recipient The address which should receive the fees collected\\n    /// @param tickLower The lower tick of the position for which to collect fees\\n    /// @param tickUpper The upper tick of the position for which to collect fees\\n    /// @param amount0Requested How much token0 should be withdrawn from the fees owed\\n    /// @param amount1Requested How much token1 should be withdrawn from the fees owed\\n    /// @return amount0 The amount of fees collected in token0\\n    /// @return amount1 The amount of fees collected in token1\\n    function collect(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n\\n    /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\\n    /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\\n    /// @dev Fees must be collected separately via a call to #collect\\n    /// @param tickLower The lower tick of the position for which to burn liquidity\\n    /// @param tickUpper The upper tick of the position for which to burn liquidity\\n    /// @param amount How much liquidity to burn\\n    /// @return amount0 The amount of token0 sent to the recipient\\n    /// @return amount1 The amount of token1 sent to the recipient\\n    function burn(\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Swap token0 for token1, or token1 for token0\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\\n    /// @param recipient The address to receive the output of the swap\\n    /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\\n    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\\n    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\\n    /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\\n    /// @param data Any data to be passed through to the callback\\n    /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\\n    /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\\n    function swap(\\n        address recipient,\\n        bool zeroForOne,\\n        int256 amountSpecified,\\n        uint160 sqrtPriceLimitX96,\\n        bytes calldata data\\n    ) external returns (int256 amount0, int256 amount1);\\n\\n    /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\\n    /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\\n    /// with 0 amount{0,1} and sending the donation amount(s) from the callback\\n    /// @param recipient The address which will receive the token0 and token1 amounts\\n    /// @param amount0 The amount of token0 to send\\n    /// @param amount1 The amount of token1 to send\\n    /// @param data Any data to be passed through to the callback\\n    function flash(\\n        address recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bytes calldata data\\n    ) external;\\n\\n    /// @notice Increase the maximum number of price and liquidity observations that this pool will store\\n    /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\\n    /// the input observationCardinalityNext.\\n    /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\\n}\\n\",\"keccak256\":\"0x9453dd0e7442188667d01d9b65de3f1e14e9511ff3e303179a15f6fc267f7634\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that is not stored\\n/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the\\n/// blockchain. The functions here may have variable gas costs.\\ninterface IUniswapV3PoolDerivedState {\\n    /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\\n    /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\\n    /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\\n    /// you must call it with secondsAgos = [3600, 0].\\n    /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\\n    /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\\n    /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\\n    /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\\n    /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\\n    /// timestamp\\n    function observe(uint32[] calldata secondsAgos)\\n        external\\n        view\\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\\n\\n    /// @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\\n    /// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\\n    /// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\\n    /// snapshot is taken and the second snapshot is taken.\\n    /// @param tickLower The lower tick of the range\\n    /// @param tickUpper The upper tick of the range\\n    /// @return tickCumulativeInside The snapshot of the tick accumulator for the range\\n    /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\\n    /// @return secondsInside The snapshot of seconds per liquidity for the range\\n    function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\\n        external\\n        view\\n        returns (\\n            int56 tickCumulativeInside,\\n            uint160 secondsPerLiquidityInsideX128,\\n            uint32 secondsInside\\n        );\\n}\\n\",\"keccak256\":\"0xe603ac5b17ecdee73ba2b27efdf386c257a19c14206e87eee77e2017b742d9e5\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Events emitted by a pool\\n/// @notice Contains all events emitted by the pool\\ninterface IUniswapV3PoolEvents {\\n    /// @notice Emitted exactly once by a pool when #initialize is first called on the pool\\n    /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\\n    /// @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\\n    /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\\n    event Initialize(uint160 sqrtPriceX96, int24 tick);\\n\\n    /// @notice Emitted when liquidity is minted for a given position\\n    /// @param sender The address that minted the liquidity\\n    /// @param owner The owner of the position and recipient of any minted liquidity\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount The amount of liquidity minted to the position range\\n    /// @param amount0 How much token0 was required for the minted liquidity\\n    /// @param amount1 How much token1 was required for the minted liquidity\\n    event Mint(\\n        address sender,\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted when fees are collected by the owner of a position\\n    /// @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\\n    /// @param owner The owner of the position for which fees are collected\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount0 The amount of token0 fees collected\\n    /// @param amount1 The amount of token1 fees collected\\n    event Collect(\\n        address indexed owner,\\n        address recipient,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount0,\\n        uint128 amount1\\n    );\\n\\n    /// @notice Emitted when a position's liquidity is removed\\n    /// @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\\n    /// @param owner The owner of the position for which liquidity is removed\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount The amount of liquidity to remove\\n    /// @param amount0 The amount of token0 withdrawn\\n    /// @param amount1 The amount of token1 withdrawn\\n    event Burn(\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted by the pool for any swaps between token0 and token1\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param recipient The address that received the output of the swap\\n    /// @param amount0 The delta of the token0 balance of the pool\\n    /// @param amount1 The delta of the token1 balance of the pool\\n    /// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\\n    /// @param liquidity The liquidity of the pool after the swap\\n    /// @param tick The log base 1.0001 of price of the pool after the swap\\n    event Swap(\\n        address indexed sender,\\n        address indexed recipient,\\n        int256 amount0,\\n        int256 amount1,\\n        uint160 sqrtPriceX96,\\n        uint128 liquidity,\\n        int24 tick\\n    );\\n\\n    /// @notice Emitted by the pool for any flashes of token0/token1\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param recipient The address that received the tokens from flash\\n    /// @param amount0 The amount of token0 that was flashed\\n    /// @param amount1 The amount of token1 that was flashed\\n    /// @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\\n    /// @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\\n    event Flash(\\n        address indexed sender,\\n        address indexed recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        uint256 paid0,\\n        uint256 paid1\\n    );\\n\\n    /// @notice Emitted by the pool for increases to the number of observations that can be stored\\n    /// @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\\n    /// just before a mint/swap/burn.\\n    /// @param observationCardinalityNextOld The previous value of the next observation cardinality\\n    /// @param observationCardinalityNextNew The updated value of the next observation cardinality\\n    event IncreaseObservationCardinalityNext(\\n        uint16 observationCardinalityNextOld,\\n        uint16 observationCardinalityNextNew\\n    );\\n\\n    /// @notice Emitted when the protocol fee is changed by the pool\\n    /// @param feeProtocol0Old The previous value of the token0 protocol fee\\n    /// @param feeProtocol1Old The previous value of the token1 protocol fee\\n    /// @param feeProtocol0New The updated value of the token0 protocol fee\\n    /// @param feeProtocol1New The updated value of the token1 protocol fee\\n    event SetFeeProtocol(uint8 feeProtocol0Old, uint8 feeProtocol1Old, uint8 feeProtocol0New, uint8 feeProtocol1New);\\n\\n    /// @notice Emitted when the collected protocol fees are withdrawn by the factory owner\\n    /// @param sender The address that collects the protocol fees\\n    /// @param recipient The address that receives the collected protocol fees\\n    /// @param amount0 The amount of token0 protocol fees that is withdrawn\\n    /// @param amount0 The amount of token1 protocol fees that is withdrawn\\n    event CollectProtocol(address indexed sender, address indexed recipient, uint128 amount0, uint128 amount1);\\n}\\n\",\"keccak256\":\"0x8071514d0fe5d17d6fbd31c191cdfb703031c24e0ece3621d88ab10e871375cd\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that never changes\\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\\ninterface IUniswapV3PoolImmutables {\\n    /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\\n    /// @return The contract address\\n    function factory() external view returns (address);\\n\\n    /// @notice The first of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token0() external view returns (address);\\n\\n    /// @notice The second of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token1() external view returns (address);\\n\\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\\n    /// @return The fee\\n    function fee() external view returns (uint24);\\n\\n    /// @notice The pool tick spacing\\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\\n    /// This value is an int24 to avoid casting even though it is always positive.\\n    /// @return The tick spacing\\n    function tickSpacing() external view returns (int24);\\n\\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\\n    /// @return The max amount of liquidity per tick\\n    function maxLiquidityPerTick() external view returns (uint128);\\n}\\n\",\"keccak256\":\"0xf6e5d2cd1139c4c276bdbc8e1d2b256e456c866a91f1b868da265c6d2685c3f7\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissioned pool actions\\n/// @notice Contains pool methods that may only be called by the factory owner\\ninterface IUniswapV3PoolOwnerActions {\\n    /// @notice Set the denominator of the protocol's % share of the fees\\n    /// @param feeProtocol0 new protocol fee for token0 of the pool\\n    /// @param feeProtocol1 new protocol fee for token1 of the pool\\n    function setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external;\\n\\n    /// @notice Collect the protocol fee accrued to the pool\\n    /// @param recipient The address to which collected protocol fees should be sent\\n    /// @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\\n    /// @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\\n    /// @return amount0 The protocol fee collected in token0\\n    /// @return amount1 The protocol fee collected in token1\\n    function collectProtocol(\\n        address recipient,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n}\\n\",\"keccak256\":\"0x759b78a2918af9e99e246dc3af084f654e48ef32bb4e4cb8a966aa3dcaece235\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that can change\\n/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\\n/// per transaction\\ninterface IUniswapV3PoolState {\\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\\n    /// when accessed externally.\\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\\n    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\\n    /// boundary.\\n    /// observationIndex The index of the last oracle observation that was written,\\n    /// observationCardinality The current maximum number of observations stored in the pool,\\n    /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\\n    /// feeProtocol The protocol fee for both tokens of the pool.\\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\\n    /// unlocked Whether the pool is currently locked to reentrancy\\n    function slot0()\\n        external\\n        view\\n        returns (\\n            uint160 sqrtPriceX96,\\n            int24 tick,\\n            uint16 observationIndex,\\n            uint16 observationCardinality,\\n            uint16 observationCardinalityNext,\\n            uint8 feeProtocol,\\n            bool unlocked\\n        );\\n\\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal0X128() external view returns (uint256);\\n\\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal1X128() external view returns (uint256);\\n\\n    /// @notice The amounts of token0 and token1 that are owed to the protocol\\n    /// @dev Protocol fees will never exceed uint128 max in either token\\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\\n\\n    /// @notice The currently in range liquidity available to the pool\\n    /// @dev This value has no relationship to the total liquidity across all ticks\\n    function liquidity() external view returns (uint128);\\n\\n    /// @notice Look up information about a specific tick in the pool\\n    /// @param tick The tick to look up\\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\\n    /// tick upper,\\n    /// liquidityNet how much liquidity changes when the pool price crosses the tick,\\n    /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\\n    /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\\n    /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\\n    /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\\n    /// secondsOutside the seconds spent on the other side of the tick from the current tick,\\n    /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\\n    /// a specific position.\\n    function ticks(int24 tick)\\n        external\\n        view\\n        returns (\\n            uint128 liquidityGross,\\n            int128 liquidityNet,\\n            uint256 feeGrowthOutside0X128,\\n            uint256 feeGrowthOutside1X128,\\n            int56 tickCumulativeOutside,\\n            uint160 secondsPerLiquidityOutsideX128,\\n            uint32 secondsOutside,\\n            bool initialized\\n        );\\n\\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\\n\\n    /// @notice Returns the information about a position by the position's key\\n    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\\n    /// @return _liquidity The amount of liquidity in the position,\\n    /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\\n    /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\\n    /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\\n    /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\\n    function positions(bytes32 key)\\n        external\\n        view\\n        returns (\\n            uint128 _liquidity,\\n            uint256 feeGrowthInside0LastX128,\\n            uint256 feeGrowthInside1LastX128,\\n            uint128 tokensOwed0,\\n            uint128 tokensOwed1\\n        );\\n\\n    /// @notice Returns data about a specific observation index\\n    /// @param index The element of the observations array to fetch\\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\\n    /// ago, rather than at a specific index in the array.\\n    /// @return blockTimestamp The timestamp of the observation,\\n    /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\\n    /// Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\\n    /// Returns initialized whether the observation has been initialized and the values are safe to use\\n    function observations(uint256 index)\\n        external\\n        view\\n        returns (\\n            uint32 blockTimestamp,\\n            int56 tickCumulative,\\n            uint160 secondsPerLiquidityCumulativeX128,\\n            bool initialized\\n        );\\n}\\n\",\"keccak256\":\"0x852dc1f5df7dcf7f11e7bb3eed79f0cea72ad4b25f6a9d2c35aafb48925fd49f\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/IERC721Permit.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\n\\n/// @title ERC721 with permit\\n/// @notice Extension to ERC721 that includes a permit function for signature based approvals\\ninterface IERC721Permit is IERC721 {\\n    /// @notice The permit typehash used in the permit signature\\n    /// @return The typehash for the permit\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    /// @notice The domain separator used in the permit signature\\n    /// @return The domain seperator used in encoding of permit signature\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    /// @notice Approve of a specific token ID for spending by spender via signature\\n    /// @param spender The account that is being approved\\n    /// @param tokenId The ID of the token that is being approved for spending\\n    /// @param deadline The deadline timestamp by which the call must be mined for the approve to work\\n    /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\\n    /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\\n    /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\\n    function permit(\\n        address spender,\\n        uint256 tokenId,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x9e3c2a4ee65ddf95b2dfcb0815784eea3a295707e6f8b83e4c4f0f8fe2e3a1d4\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/INonfungiblePositionManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol';\\nimport '@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol';\\n\\nimport './IPoolInitializer.sol';\\nimport './IERC721Permit.sol';\\nimport './IPeripheryPayments.sol';\\nimport './IPeripheryImmutableState.sol';\\nimport '../libraries/PoolAddress.sol';\\n\\n/// @title Non-fungible token for positions\\n/// @notice Wraps Uniswap V3 positions in a non-fungible token interface which allows for them to be transferred\\n/// and authorized.\\ninterface INonfungiblePositionManager is\\n    IPoolInitializer,\\n    IPeripheryPayments,\\n    IPeripheryImmutableState,\\n    IERC721Metadata,\\n    IERC721Enumerable,\\n    IERC721Permit\\n{\\n    /// @notice Emitted when liquidity is increased for a position NFT\\n    /// @dev Also emitted when a token is minted\\n    /// @param tokenId The ID of the token for which liquidity was increased\\n    /// @param liquidity The amount by which liquidity for the NFT position was increased\\n    /// @param amount0 The amount of token0 that was paid for the increase in liquidity\\n    /// @param amount1 The amount of token1 that was paid for the increase in liquidity\\n    event IncreaseLiquidity(uint256 indexed tokenId, uint128 liquidity, uint256 amount0, uint256 amount1);\\n    /// @notice Emitted when liquidity is decreased for a position NFT\\n    /// @param tokenId The ID of the token for which liquidity was decreased\\n    /// @param liquidity The amount by which liquidity for the NFT position was decreased\\n    /// @param amount0 The amount of token0 that was accounted for the decrease in liquidity\\n    /// @param amount1 The amount of token1 that was accounted for the decrease in liquidity\\n    event DecreaseLiquidity(uint256 indexed tokenId, uint128 liquidity, uint256 amount0, uint256 amount1);\\n    /// @notice Emitted when tokens are collected for a position NFT\\n    /// @dev The amounts reported may not be exactly equivalent to the amounts transferred, due to rounding behavior\\n    /// @param tokenId The ID of the token for which underlying tokens were collected\\n    /// @param recipient The address of the account that received the collected tokens\\n    /// @param amount0 The amount of token0 owed to the position that was collected\\n    /// @param amount1 The amount of token1 owed to the position that was collected\\n    event Collect(uint256 indexed tokenId, address recipient, uint256 amount0, uint256 amount1);\\n\\n    /// @notice Returns the position information associated with a given token ID.\\n    /// @dev Throws if the token ID is not valid.\\n    /// @param tokenId The ID of the token that represents the position\\n    /// @return nonce The nonce for permits\\n    /// @return operator The address that is approved for spending\\n    /// @return token0 The address of the token0 for a specific pool\\n    /// @return token1 The address of the token1 for a specific pool\\n    /// @return fee The fee associated with the pool\\n    /// @return tickLower The lower end of the tick range for the position\\n    /// @return tickUpper The higher end of the tick range for the position\\n    /// @return liquidity The liquidity of the position\\n    /// @return feeGrowthInside0LastX128 The fee growth of token0 as of the last action on the individual position\\n    /// @return feeGrowthInside1LastX128 The fee growth of token1 as of the last action on the individual position\\n    /// @return tokensOwed0 The uncollected amount of token0 owed to the position as of the last computation\\n    /// @return tokensOwed1 The uncollected amount of token1 owed to the position as of the last computation\\n    function positions(uint256 tokenId)\\n        external\\n        view\\n        returns (\\n            uint96 nonce,\\n            address operator,\\n            address token0,\\n            address token1,\\n            uint24 fee,\\n            int24 tickLower,\\n            int24 tickUpper,\\n            uint128 liquidity,\\n            uint256 feeGrowthInside0LastX128,\\n            uint256 feeGrowthInside1LastX128,\\n            uint128 tokensOwed0,\\n            uint128 tokensOwed1\\n        );\\n\\n    struct MintParams {\\n        address token0;\\n        address token1;\\n        uint24 fee;\\n        int24 tickLower;\\n        int24 tickUpper;\\n        uint256 amount0Desired;\\n        uint256 amount1Desired;\\n        uint256 amount0Min;\\n        uint256 amount1Min;\\n        address recipient;\\n        uint256 deadline;\\n    }\\n\\n    /// @notice Creates a new position wrapped in a NFT\\n    /// @dev Call this when the pool does exist and is initialized. Note that if the pool is created but not initialized\\n    /// a method does not exist, i.e. the pool is assumed to be initialized.\\n    /// @param params The params necessary to mint a position, encoded as `MintParams` in calldata\\n    /// @return tokenId The ID of the token that represents the minted position\\n    /// @return liquidity The amount of liquidity for this position\\n    /// @return amount0 The amount of token0\\n    /// @return amount1 The amount of token1\\n    function mint(MintParams calldata params)\\n        external\\n        payable\\n        returns (\\n            uint256 tokenId,\\n            uint128 liquidity,\\n            uint256 amount0,\\n            uint256 amount1\\n        );\\n\\n    struct IncreaseLiquidityParams {\\n        uint256 tokenId;\\n        uint256 amount0Desired;\\n        uint256 amount1Desired;\\n        uint256 amount0Min;\\n        uint256 amount1Min;\\n        uint256 deadline;\\n    }\\n\\n    /// @notice Increases the amount of liquidity in a position, with tokens paid by the `msg.sender`\\n    /// @param params tokenId The ID of the token for which liquidity is being increased,\\n    /// amount0Desired The desired amount of token0 to be spent,\\n    /// amount1Desired The desired amount of token1 to be spent,\\n    /// amount0Min The minimum amount of token0 to spend, which serves as a slippage check,\\n    /// amount1Min The minimum amount of token1 to spend, which serves as a slippage check,\\n    /// deadline The time by which the transaction must be included to effect the change\\n    /// @return liquidity The new liquidity amount as a result of the increase\\n    /// @return amount0 The amount of token0 to acheive resulting liquidity\\n    /// @return amount1 The amount of token1 to acheive resulting liquidity\\n    function increaseLiquidity(IncreaseLiquidityParams calldata params)\\n        external\\n        payable\\n        returns (\\n            uint128 liquidity,\\n            uint256 amount0,\\n            uint256 amount1\\n        );\\n\\n    struct DecreaseLiquidityParams {\\n        uint256 tokenId;\\n        uint128 liquidity;\\n        uint256 amount0Min;\\n        uint256 amount1Min;\\n        uint256 deadline;\\n    }\\n\\n    /// @notice Decreases the amount of liquidity in a position and accounts it to the position\\n    /// @param params tokenId The ID of the token for which liquidity is being decreased,\\n    /// amount The amount by which liquidity will be decreased,\\n    /// amount0Min The minimum amount of token0 that should be accounted for the burned liquidity,\\n    /// amount1Min The minimum amount of token1 that should be accounted for the burned liquidity,\\n    /// deadline The time by which the transaction must be included to effect the change\\n    /// @return amount0 The amount of token0 accounted to the position's tokens owed\\n    /// @return amount1 The amount of token1 accounted to the position's tokens owed\\n    function decreaseLiquidity(DecreaseLiquidityParams calldata params)\\n        external\\n        payable\\n        returns (uint256 amount0, uint256 amount1);\\n\\n    struct CollectParams {\\n        uint256 tokenId;\\n        address recipient;\\n        uint128 amount0Max;\\n        uint128 amount1Max;\\n    }\\n\\n    /// @notice Collects up to a maximum amount of fees owed to a specific position to the recipient\\n    /// @param params tokenId The ID of the NFT for which tokens are being collected,\\n    /// recipient The account that should receive the tokens,\\n    /// amount0Max The maximum amount of token0 to collect,\\n    /// amount1Max The maximum amount of token1 to collect\\n    /// @return amount0 The amount of fees collected in token0\\n    /// @return amount1 The amount of fees collected in token1\\n    function collect(CollectParams calldata params) external payable returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Burns a token ID, which deletes it from the NFT contract. The token must have 0 liquidity and all tokens\\n    /// must be collected first.\\n    /// @param tokenId The ID of the token that is being burned\\n    function burn(uint256 tokenId) external payable;\\n}\\n\",\"keccak256\":\"0xe1dadc73e60bf05d0b4e0f05bd2847c5783e833cc10352c14763360b13495ee1\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/IPeripheryImmutableState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Immutable state\\n/// @notice Functions that return immutable state of the router\\ninterface IPeripheryImmutableState {\\n    /// @return Returns the address of the Uniswap V3 factory\\n    function factory() external view returns (address);\\n\\n    /// @return Returns the address of WETH9\\n    function WETH9() external view returns (address);\\n}\\n\",\"keccak256\":\"0x7affcfeb5127c0925a71d6a65345e117c33537523aeca7bc98085ead8452519d\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/IPeripheryPayments.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\n\\n/// @title Periphery Payments\\n/// @notice Functions to ease deposits and withdrawals of ETH\\ninterface IPeripheryPayments {\\n    /// @notice Unwraps the contract's WETH9 balance and sends it to recipient as ETH.\\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.\\n    /// @param amountMinimum The minimum amount of WETH9 to unwrap\\n    /// @param recipient The address receiving ETH\\n    function unwrapWETH9(uint256 amountMinimum, address recipient) external payable;\\n\\n    /// @notice Refunds any ETH balance held by this contract to the `msg.sender`\\n    /// @dev Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps\\n    /// that use ether for the input amount\\n    function refundETH() external payable;\\n\\n    /// @notice Transfers the full amount of a token held by this contract to recipient\\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing the token from users\\n    /// @param token The contract address of the token which will be transferred to `recipient`\\n    /// @param amountMinimum The minimum amount of token required for a transfer\\n    /// @param recipient The destination address of the token\\n    function sweepToken(\\n        address token,\\n        uint256 amountMinimum,\\n        address recipient\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0xb547e10f1e69bed03621a62b73a503e260643066c6b4054867a4d1fef47eb274\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/IPoolInitializer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\n/// @title Creates and initializes V3 Pools\\n/// @notice Provides a method for creating and initializing a pool, if necessary, for bundling with other methods that\\n/// require the pool to exist.\\ninterface IPoolInitializer {\\n    /// @notice Creates a new pool if it does not exist, then initializes if not initialized\\n    /// @dev This method can be bundled with others via IMulticall for the first action (e.g. mint) performed against a pool\\n    /// @param token0 The contract address of token0 of the pool\\n    /// @param token1 The contract address of token1 of the pool\\n    /// @param fee The fee amount of the v3 pool for the specified token pair\\n    /// @param sqrtPriceX96 The initial square root price of the pool as a Q64.96 value\\n    /// @return pool Returns the pool address based on the pair of tokens and fee, will return the newly created pool address if necessary\\n    function createAndInitializePoolIfNecessary(\\n        address token0,\\n        address token1,\\n        uint24 fee,\\n        uint160 sqrtPriceX96\\n    ) external payable returns (address pool);\\n}\\n\",\"keccak256\":\"0x9d7695e8d94c22cc5fcced602017aabb988de89981ea7bee29ea629d5328a862\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x9bfaf1feb32814623e627ab70f2409760b15d95f1f9b058e2b3399a8bb732975\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/libraries/PoolAddress.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Provides functions for deriving a pool address from the factory, tokens, and the fee\\nlibrary PoolAddress {\\n    bytes32 internal constant POOL_INIT_CODE_HASH = 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54;\\n\\n    /// @notice The identifying key of the pool\\n    struct PoolKey {\\n        address token0;\\n        address token1;\\n        uint24 fee;\\n    }\\n\\n    /// @notice Returns PoolKey: the ordered tokens with the matched fee levels\\n    /// @param tokenA The first token of a pool, unsorted\\n    /// @param tokenB The second token of a pool, unsorted\\n    /// @param fee The fee level of the pool\\n    /// @return Poolkey The pool details with ordered token0 and token1 assignments\\n    function getPoolKey(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) internal pure returns (PoolKey memory) {\\n        if (tokenA > tokenB) (tokenA, tokenB) = (tokenB, tokenA);\\n        return PoolKey({token0: tokenA, token1: tokenB, fee: fee});\\n    }\\n\\n    /// @notice Deterministically computes the pool address given the factory and PoolKey\\n    /// @param factory The Uniswap V3 factory contract address\\n    /// @param key The PoolKey\\n    /// @return pool The contract address of the V3 pool\\n    function computeAddress(address factory, PoolKey memory key) internal pure returns (address pool) {\\n        require(key.token0 < key.token1);\\n        pool = address(\\n            uint256(\\n                keccak256(\\n                    abi.encodePacked(\\n                        hex'ff',\\n                        factory,\\n                        keccak256(abi.encode(key.token0, key.token1, key.fee)),\\n                        POOL_INIT_CODE_HASH\\n                    )\\n                )\\n            )\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x5edd84eb8ba7c12fd8cb6cffe52e1e9f3f6464514ee5f539c2283826209035a2\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.6.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nlibrary TransferHelper {\\n    /// @notice Transfers tokens from the targeted address to the given destination\\n    /// @notice Errors with 'STF' if transfer fails\\n    /// @param token The contract address of the token to be transferred\\n    /// @param from The originating address from which the tokens will be transferred\\n    /// @param to The destination address of the transfer\\n    /// @param value The amount to be transferred\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) =\\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\\n    }\\n\\n    /// @notice Transfers tokens from msg.sender to a recipient\\n    /// @dev Errors with ST if transfer fails\\n    /// @param token The contract address of the token which will be transferred\\n    /// @param to The recipient of the transfer\\n    /// @param value The value of the transfer\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');\\n    }\\n\\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\\n    /// @dev Errors with 'SA' if transfer fails\\n    /// @param token The contract address of the token to be approved\\n    /// @param to The target of the approval\\n    /// @param value The amount of the given token the target will be allowed to spend\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');\\n    }\\n\\n    /// @notice Transfers ETH to the recipient address\\n    /// @dev Fails with `STE`\\n    /// @param to The destination of the transfer\\n    /// @param value The value to be transferred\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'STE');\\n    }\\n}\\n\",\"keccak256\":\"0x9af98b0908c96320ca6d08b22f0efca864742f6adbe5794cafe2d1d2e808b0cd\",\"license\":\"GPL-2.0-or-later\"},\"contracts/BaselineMinimal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.7.6;\\r\\npragma abicoder v2;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\r\\nimport \\\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\\\";\\r\\nimport \\\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol\\\";\\r\\nimport \\\"@uniswap/v3-periphery/contracts/interfaces/INonfungiblePositionManager.sol\\\";\\r\\nimport \\\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\\\";\\r\\nimport \\\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\\\";\\r\\n\\r\\ninterface IWETH {\\r\\n    function deposit() external payable;\\r\\n    function withdraw(uint256) external;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title BaselineMinimal\\r\\n * @notice \\u0646\\u0633\\u062e\\u0647 \\u062d\\u062f\\u0627\\u0642\\u0644\\u06cc \\u0642\\u0631\\u0627\\u0631\\u062f\\u0627\\u062f \\u0645\\u062f\\u06cc\\u0631\\u06cc\\u062a \\u0646\\u0642\\u062f\\u06cc\\u0646\\u06af\\u06cc \\u0628\\u06cc\\u0633\\u200c\\u0644\\u0627\\u06cc\\u0646\\r\\n */\\r\\ncontract BaselineMinimal is Ownable {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    // --- \\u0645\\u062a\\u063a\\u06cc\\u0631\\u0647\\u0627\\u06cc \\u0648\\u0636\\u0639\\u06cc\\u062a \\u0627\\u0635\\u0644\\u06cc ---\\r\\n    IUniswapV3Factory public immutable factory;\\r\\n    INonfungiblePositionManager public immutable positionManager;\\r\\n    ISwapRouter public immutable swapRouter;\\r\\n    address public immutable token0;\\r\\n    address public immutable token1;\\r\\n    uint24 public immutable fee;\\r\\n    int24 public immutable tickSpacing;\\r\\n\\r\\n    // --- \\u0645\\u062a\\u063a\\u06cc\\u0631\\u0647\\u0627 \\u0628\\u0631\\u0627\\u06cc \\u0646\\u06af\\u0647\\u062f\\u0627\\u0631\\u06cc \\u0645\\u0648\\u0642\\u0639\\u06cc\\u062a ---\\r\\n    uint256 public currentTokenId;\\r\\n    bool public hasPosition;\\r\\n    int24 public lowerTick;\\r\\n    int24 public upperTick;\\r\\n\\r\\n    // --- \\u0631\\u0648\\u06cc\\u062f\\u0627\\u062f\\u0647\\u0627 ---\\r\\n    event PositionChanged(bool hasPosition, int24 lowerTick, int24 upperTick);\\r\\n    event BaselineAdjustmentMetrics(\\r\\n        uint256 timestamp,\\r\\n        uint256 currentPrice,\\r\\n        int24 currentTick,\\r\\n        int24 finalTickLower,\\r\\n        int24 finalTickUpper,\\r\\n        bool adjusted\\r\\n    );\\r\\n    event TokensSwapped(uint256 amountIn, uint256 amountOut);\\r\\n\\r\\n    // --- \\u0633\\u0627\\u0632\\u0646\\u062f\\u0647 ---\\r\\n    constructor(\\r\\n        address _factory,\\r\\n        address _positionManager,\\r\\n        address _swapRouter,\\r\\n        address _token0,\\r\\n        address _token1,\\r\\n        uint24 _fee\\r\\n    ) {\\r\\n        require(_factory != address(0), \\\"Invalid factory address\\\");\\r\\n        require(_positionManager != address(0), \\\"Invalid position manager\\\");\\r\\n        require(_swapRouter != address(0), \\\"Invalid swap router\\\");\\r\\n        require(_token0 != address(0), \\\"Invalid token0\\\");\\r\\n        require(_token1 != address(0), \\\"Invalid token1\\\");\\r\\n        require(_fee > 0, \\\"Invalid fee\\\");\\r\\n\\r\\n        factory = IUniswapV3Factory(_factory);\\r\\n        positionManager = INonfungiblePositionManager(_positionManager);\\r\\n        swapRouter = ISwapRouter(_swapRouter);\\r\\n        token0 = _token0;\\r\\n        token1 = _token1;\\r\\n        fee = _fee;\\r\\n\\r\\n        // \\u062a\\u0646\\u0638\\u06cc\\u0645 tickSpacing \\u0628\\u0627 \\u0627\\u0633\\u062a\\u0641\\u0627\\u062f\\u0647 \\u0627\\u0632 \\u067e\\u0648\\u0644\\r\\n        address poolAddress = IUniswapV3Factory(_factory).getPool(\\r\\n            _token0,\\r\\n            _token1,\\r\\n            _fee\\r\\n        );\\r\\n        require(poolAddress != address(0), \\\"Pool does not exist\\\");\\r\\n        tickSpacing = IUniswapV3Pool(poolAddress).tickSpacing();\\r\\n\\r\\n        // \\u062a\\u0646\\u0638\\u06cc\\u0645 \\u062a\\u0623\\u06cc\\u06cc\\u062f\\u06cc\\u0647\\u200c\\u0647\\u0627\\u06cc \\u062a\\u0648\\u06a9\\u0646\\r\\n        IERC20(_token0).approve(address(_positionManager), type(uint256).max);\\r\\n        IERC20(_token1).approve(address(_positionManager), type(uint256).max);\\r\\n        IERC20(_token0).approve(address(_swapRouter), type(uint256).max);\\r\\n        IERC20(_token1).approve(address(_swapRouter), type(uint256).max);\\r\\n    }\\r\\n\\r\\n    // --- \\u062a\\u0627\\u0628\\u0639 \\u062f\\u0631\\u06cc\\u0627\\u0641\\u062a ETH ---\\r\\n    receive() external payable {\\r\\n        // \\u062a\\u0628\\u062f\\u06cc\\u0644 ETH \\u0628\\u0647 WETH\\r\\n        IWETH(token1).deposit{value: msg.value}();\\r\\n\\r\\n        // \\u062a\\u0628\\u062f\\u06cc\\u0644 \\u0646\\u06cc\\u0645\\u06cc \\u0627\\u0632 WETH \\u0628\\u0647 USDC\\r\\n        uint256 halfAmount = msg.value / 2;\\r\\n        _swapExactInputSingle(token1, token0, halfAmount);\\r\\n\\r\\n        // \\u062a\\u0646\\u0638\\u06cc\\u0645 \\u0646\\u0642\\u062f\\u06cc\\u0646\\u06af\\u06cc \\u0628\\u0627 \\u062a\\u0648\\u06a9\\u0646\\u200c\\u0647\\u0627\\u06cc \\u062c\\u062f\\u06cc\\u062f\\r\\n        adjustLiquidityWithCurrentPrice();\\r\\n    }\\r\\n\\r\\n    // --- \\u062a\\u0627\\u0628\\u0639 \\u0633\\u0648\\u0627\\u067e ---\\r\\n    function _swapExactInputSingle(\\r\\n        address tokenIn,\\r\\n        address tokenOut,\\r\\n        uint256 amountIn\\r\\n    ) internal returns (uint256 amountOut) {\\r\\n        ISwapRouter.ExactInputSingleParams memory params = ISwapRouter\\r\\n            .ExactInputSingleParams({\\r\\n                tokenIn: tokenIn,\\r\\n                tokenOut: tokenOut,\\r\\n                fee: fee,\\r\\n                recipient: address(this),\\r\\n                deadline: block.timestamp,\\r\\n                amountIn: amountIn,\\r\\n                amountOutMinimum: 0,\\r\\n                sqrtPriceLimitX96: 0\\r\\n            });\\r\\n\\r\\n        amountOut = swapRouter.exactInputSingle(params);\\r\\n        emit TokensSwapped(amountIn, amountOut);\\r\\n    }\\r\\n\\r\\n    // --- \\u062a\\u0627\\u0628\\u0639 \\u0627\\u0635\\u0644\\u06cc \\u062a\\u0646\\u0638\\u06cc\\u0645 \\u0646\\u0642\\u062f\\u06cc\\u0646\\u06af\\u06cc ---\\r\\n    function adjustLiquidityWithCurrentPrice() public {\\r\\n        // 1. \\u062f\\u0631\\u06cc\\u0627\\u0641\\u062a \\u0627\\u0637\\u0644\\u0627\\u0639\\u0627\\u062a \\u0642\\u06cc\\u0645\\u062a \\u0648 tick \\u0641\\u0639\\u0644\\u06cc\\r\\n        address pool = factory.getPool(token0, token1, fee);\\r\\n        require(pool != address(0), \\\"Pool not found\\\");\\r\\n\\r\\n        uint160 sqrtPriceX96;\\r\\n        int24 currentTick;\\r\\n        (sqrtPriceX96, currentTick, , , , , ) = IUniswapV3Pool(pool).slot0();\\r\\n\\r\\n        // 2. \\u0645\\u062d\\u0627\\u0633\\u0628\\u0647 \\u0645\\u062d\\u062f\\u0648\\u062f\\u0647 tick \\u062c\\u062f\\u06cc\\u062f\\r\\n        int24 width = tickSpacing * 4;\\r\\n        int24 newLowerTick = ((currentTick - width / 2) / tickSpacing) *\\r\\n            tickSpacing;\\r\\n        int24 newUpperTick = ((currentTick + width / 2) / tickSpacing) *\\r\\n            tickSpacing;\\r\\n\\r\\n        // 3. \\u062d\\u0630\\u0641 \\u0645\\u0648\\u0642\\u0639\\u06cc\\u062a \\u0645\\u0648\\u062c\\u0648\\u062f\\r\\n        if (hasPosition) {\\r\\n            _removePosition();\\r\\n        }\\r\\n\\r\\n        // 4. \\u0627\\u06cc\\u062c\\u0627\\u062f \\u0645\\u0648\\u0642\\u0639\\u06cc\\u062a \\u062c\\u062f\\u06cc\\u062f \\u0628\\u0627 \\u0645\\u0648\\u062c\\u0648\\u062f\\u06cc \\u062a\\u0648\\u06a9\\u0646\\u200c\\u0647\\u0627\\r\\n        _createPosition(newLowerTick, newUpperTick);\\r\\n\\r\\n        // 5. \\u0627\\u0646\\u062a\\u0634\\u0627\\u0631 \\u0631\\u0648\\u06cc\\u062f\\u0627\\u062f\\r\\n        emit BaselineAdjustmentMetrics(\\r\\n            block.timestamp,\\r\\n            _sqrtPriceX96ToPrice(sqrtPriceX96),\\r\\n            currentTick,\\r\\n            newLowerTick,\\r\\n            newUpperTick,\\r\\n            true\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // --- \\u062d\\u0630\\u0641 \\u0645\\u0648\\u0642\\u0639\\u06cc\\u062a ---\\r\\n    function _removePosition() internal {\\r\\n        require(hasPosition, \\\"No position to remove\\\");\\r\\n        require(currentTokenId > 0, \\\"Invalid token ID\\\");\\r\\n\\r\\n        // \\u062d\\u0630\\u0641 \\u0646\\u0642\\u062f\\u06cc\\u0646\\u06af\\u06cc\\r\\n        try\\r\\n            positionManager.decreaseLiquidity(\\r\\n                INonfungiblePositionManager.DecreaseLiquidityParams({\\r\\n                    tokenId: currentTokenId,\\r\\n                    liquidity: type(uint128).max,\\r\\n                    amount0Min: 0,\\r\\n                    amount1Min: 0,\\r\\n                    deadline: block.timestamp\\r\\n                })\\r\\n            )\\r\\n        {} catch {}\\r\\n\\r\\n        // \\u062c\\u0645\\u0639\\u200c\\u0622\\u0648\\u0631\\u06cc \\u062a\\u0648\\u06a9\\u0646\\u200c\\u0647\\u0627\\r\\n        try\\r\\n            positionManager.collect(\\r\\n                INonfungiblePositionManager.CollectParams({\\r\\n                    tokenId: currentTokenId,\\r\\n                    recipient: address(this),\\r\\n                    amount0Max: type(uint128).max,\\r\\n                    amount1Max: type(uint128).max\\r\\n                })\\r\\n            )\\r\\n        {} catch {}\\r\\n\\r\\n        // \\u0633\\u0648\\u0632\\u0627\\u0646\\u062f\\u0646 NFT\\r\\n        try positionManager.burn(currentTokenId) {} catch {}\\r\\n\\r\\n        // \\u0628\\u0627\\u0632\\u0646\\u0634\\u0627\\u0646\\u06cc \\u0648\\u0636\\u0639\\u06cc\\u062a\\r\\n        hasPosition = false;\\r\\n        currentTokenId = 0;\\r\\n\\r\\n        emit PositionChanged(false, 0, 0);\\r\\n    }\\r\\n\\r\\n    // --- \\u0627\\u06cc\\u062c\\u0627\\u062f \\u0645\\u0648\\u0642\\u0639\\u06cc\\u062a ---\\r\\n    function _createPosition(int24 _lowerTick, int24 _upperTick) internal {\\r\\n        require(_lowerTick < _upperTick, \\\"Invalid tick range\\\");\\r\\n\\r\\n        uint256 amount0 = IERC20(token0).balanceOf(address(this));\\r\\n        uint256 amount1 = IERC20(token1).balanceOf(address(this));\\r\\n\\r\\n        if (amount0 == 0 && amount1 == 0) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        try\\r\\n            positionManager.mint(\\r\\n                INonfungiblePositionManager.MintParams({\\r\\n                    token0: token0,\\r\\n                    token1: token1,\\r\\n                    fee: fee,\\r\\n                    tickLower: _lowerTick,\\r\\n                    tickUpper: _upperTick,\\r\\n                    amount0Desired: amount0,\\r\\n                    amount1Desired: amount1,\\r\\n                    amount0Min: 0,\\r\\n                    amount1Min: 0,\\r\\n                    recipient: address(this),\\r\\n                    deadline: block.timestamp\\r\\n                })\\r\\n            )\\r\\n        returns (uint256 tokenId, uint128, uint256, uint256) {\\r\\n            if (tokenId > 0) {\\r\\n                currentTokenId = tokenId;\\r\\n                hasPosition = true;\\r\\n                lowerTick = _lowerTick;\\r\\n                upperTick = _upperTick;\\r\\n\\r\\n                emit PositionChanged(true, _lowerTick, _upperTick);\\r\\n            }\\r\\n        } catch {}\\r\\n    }\\r\\n\\r\\n    // --- \\u062a\\u0627\\u0628\\u0639 \\u06a9\\u0645\\u06a9\\u06cc \\u0628\\u0631\\u0627\\u06cc \\u0645\\u062d\\u0627\\u0633\\u0628\\u0647 \\u0642\\u06cc\\u0645\\u062a ---\\r\\n    function _sqrtPriceX96ToPrice(\\r\\n        uint160 sqrtPriceX96\\r\\n    ) internal pure returns (uint256) {\\r\\n        require(sqrtPriceX96 > 0, \\\"Invalid sqrt price\\\");\\r\\n        uint256 priceX192 = uint256(sqrtPriceX96) * uint256(sqrtPriceX96);\\r\\n        return priceX192 >> 96;\\r\\n    }\\r\\n\\r\\n    // --- \\u0628\\u0631\\u062f\\u0627\\u0634\\u062a \\u0627\\u0636\\u0637\\u0631\\u0627\\u0631\\u06cc \\u062a\\u0648\\u06a9\\u0646\\u200c\\u0647\\u0627 ---\\r\\n    function rescueTokens(address token, address to) external onlyOwner {\\r\\n        require(token != address(0), \\\"Invalid token\\\");\\r\\n        require(to != address(0), \\\"Invalid recipient\\\");\\r\\n\\r\\n        uint256 amount = IERC20(token).balanceOf(address(this));\\r\\n        if (amount > 0) {\\r\\n            IERC20(token).safeTransfer(to, amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // --- \\u062a\\u0627\\u0628\\u0639 \\u0628\\u0631\\u062f\\u0627\\u0634\\u062a \\u0627\\u0636\\u0637\\u0631\\u0627\\u0631\\u06cc ETH ---\\r\\n    function rescueETH() external onlyOwner {\\r\\n        uint256 balance = address(this).balance;\\r\\n        if (balance > 0) {\\r\\n            payable(owner()).transfer(balance);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // --- \\u062a\\u0627\\u0628\\u0639 \\u0628\\u0631\\u062f\\u0627\\u0634\\u062a \\u0627\\u0636\\u0637\\u0631\\u0627\\u0631\\u06cc WETH ---\\r\\n    function rescueWETH(uint256 amount) external onlyOwner {\\r\\n        IWETH(token1).withdraw(amount);\\r\\n        payable(owner()).transfer(amount);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xbd1426c3f8e6dff91ea85d724202debd7f217bd8c2b86fd2a4997e04d3bf302f\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/PredictiveLiquidityManager.sol":{"IERC20Decimals":{"abi":[{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"decimals()":"313ce567"}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PredictiveLiquidityManager.sol\":\"IERC20Decimals\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xf70bc25d981e4ec9673a995ad2995d5d493ea188d3d8f388bba9c227ce09fb82\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x2d99a0deb6648c34fbc66d6ac4a2d64798d7a5321b45624f6736fadc63da1962\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xe6bd1b1218338b6f9fe17776f48623b4ac3d8a40405f74a44bc23c00abe2ca13\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xccb917776f826ac6b68bd5a15a5f711e3967848a52ba11e6104d9a4f593314a7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x8bbbc2f5c10065ee272592ae0a7a6ceb23de2fbd81564ee0bb015ecf404d5f61\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title The interface for the Uniswap V3 Factory\\n/// @notice The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees\\ninterface IUniswapV3Factory {\\n    /// @notice Emitted when the owner of the factory is changed\\n    /// @param oldOwner The owner before the owner was changed\\n    /// @param newOwner The owner after the owner was changed\\n    event OwnerChanged(address indexed oldOwner, address indexed newOwner);\\n\\n    /// @notice Emitted when a pool is created\\n    /// @param token0 The first token of the pool by address sort order\\n    /// @param token1 The second token of the pool by address sort order\\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n    /// @param tickSpacing The minimum number of ticks between initialized ticks\\n    /// @param pool The address of the created pool\\n    event PoolCreated(\\n        address indexed token0,\\n        address indexed token1,\\n        uint24 indexed fee,\\n        int24 tickSpacing,\\n        address pool\\n    );\\n\\n    /// @notice Emitted when a new fee amount is enabled for pool creation via the factory\\n    /// @param fee The enabled fee, denominated in hundredths of a bip\\n    /// @param tickSpacing The minimum number of ticks between initialized ticks for pools created with the given fee\\n    event FeeAmountEnabled(uint24 indexed fee, int24 indexed tickSpacing);\\n\\n    /// @notice Returns the current owner of the factory\\n    /// @dev Can be changed by the current owner via setOwner\\n    /// @return The address of the factory owner\\n    function owner() external view returns (address);\\n\\n    /// @notice Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled\\n    /// @dev A fee amount can never be removed, so this value should be hard coded or cached in the calling context\\n    /// @param fee The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\\n    /// @return The tick spacing\\n    function feeAmountTickSpacing(uint24 fee) external view returns (int24);\\n\\n    /// @notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\\n    /// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\\n    /// @param tokenA The contract address of either token0 or token1\\n    /// @param tokenB The contract address of the other token\\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n    /// @return pool The pool address\\n    function getPool(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) external view returns (address pool);\\n\\n    /// @notice Creates a pool for the given two tokens and fee\\n    /// @param tokenA One of the two tokens in the desired pool\\n    /// @param tokenB The other of the two tokens in the desired pool\\n    /// @param fee The desired fee for the pool\\n    /// @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved\\n    /// from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments\\n    /// are invalid.\\n    /// @return pool The address of the newly created pool\\n    function createPool(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) external returns (address pool);\\n\\n    /// @notice Updates the owner of the factory\\n    /// @dev Must be called by the current owner\\n    /// @param _owner The new owner of the factory\\n    function setOwner(address _owner) external;\\n\\n    /// @notice Enables a fee amount with the given tickSpacing\\n    /// @dev Fee amounts may never be removed once enabled\\n    /// @param fee The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)\\n    /// @param tickSpacing The spacing between ticks to be enforced for all pools created with the given fee amount\\n    function enableFeeAmount(uint24 fee, int24 tickSpacing) external;\\n}\\n\",\"keccak256\":\"0xcc3d0c93fc9ac0febbe09f941b465b57f750bcf3b48432da0b97dc289cfdc489\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\nimport './pool/IUniswapV3PoolImmutables.sol';\\nimport './pool/IUniswapV3PoolState.sol';\\nimport './pool/IUniswapV3PoolDerivedState.sol';\\nimport './pool/IUniswapV3PoolActions.sol';\\nimport './pool/IUniswapV3PoolOwnerActions.sol';\\nimport './pool/IUniswapV3PoolEvents.sol';\\n\\n/// @title The interface for a Uniswap V3 Pool\\n/// @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\\n/// to the ERC20 specification\\n/// @dev The pool interface is broken up into many smaller pieces\\ninterface IUniswapV3Pool is\\n    IUniswapV3PoolImmutables,\\n    IUniswapV3PoolState,\\n    IUniswapV3PoolDerivedState,\\n    IUniswapV3PoolActions,\\n    IUniswapV3PoolOwnerActions,\\n    IUniswapV3PoolEvents\\n{\\n\\n}\\n\",\"keccak256\":\"0xfe6113d518466cd6652c85b111e01f33eb62157f49ae5ed7d5a3947a2044adb1\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3MintCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#mint\\n/// @notice Any contract that calls IUniswapV3PoolActions#mint must implement this interface\\ninterface IUniswapV3MintCallback {\\n    /// @notice Called to `msg.sender` after minting liquidity to a position from IUniswapV3Pool#mint.\\n    /// @dev In the implementation you must pay the pool tokens owed for the minted liquidity.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// @param amount0Owed The amount of token0 due to the pool for the minted liquidity\\n    /// @param amount1Owed The amount of token1 due to the pool for the minted liquidity\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#mint call\\n    function uniswapV3MintCallback(\\n        uint256 amount0Owed,\\n        uint256 amount1Owed,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x27a9725b8f831a92d16380860c3d348a0b926a7f01b34a54ea6eea78cbdbcd6a\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissionless pool actions\\n/// @notice Contains pool methods that can be called by anyone\\ninterface IUniswapV3PoolActions {\\n    /// @notice Sets the initial price for the pool\\n    /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\\n    /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96\\n    function initialize(uint160 sqrtPriceX96) external;\\n\\n    /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\\n    /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\\n    /// on tickLower, tickUpper, the amount of liquidity, and the current price.\\n    /// @param recipient The address for which the liquidity will be created\\n    /// @param tickLower The lower tick of the position in which to add liquidity\\n    /// @param tickUpper The upper tick of the position in which to add liquidity\\n    /// @param amount The amount of liquidity to mint\\n    /// @param data Any data that should be passed through to the callback\\n    /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    function mint(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount,\\n        bytes calldata data\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Collects tokens owed to a position\\n    /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\\n    /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\\n    /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\\n    /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\\n    /// @param recipient The address which should receive the fees collected\\n    /// @param tickLower The lower tick of the position for which to collect fees\\n    /// @param tickUpper The upper tick of the position for which to collect fees\\n    /// @param amount0Requested How much token0 should be withdrawn from the fees owed\\n    /// @param amount1Requested How much token1 should be withdrawn from the fees owed\\n    /// @return amount0 The amount of fees collected in token0\\n    /// @return amount1 The amount of fees collected in token1\\n    function collect(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n\\n    /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\\n    /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\\n    /// @dev Fees must be collected separately via a call to #collect\\n    /// @param tickLower The lower tick of the position for which to burn liquidity\\n    /// @param tickUpper The upper tick of the position for which to burn liquidity\\n    /// @param amount How much liquidity to burn\\n    /// @return amount0 The amount of token0 sent to the recipient\\n    /// @return amount1 The amount of token1 sent to the recipient\\n    function burn(\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Swap token0 for token1, or token1 for token0\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\\n    /// @param recipient The address to receive the output of the swap\\n    /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\\n    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\\n    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\\n    /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\\n    /// @param data Any data to be passed through to the callback\\n    /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\\n    /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\\n    function swap(\\n        address recipient,\\n        bool zeroForOne,\\n        int256 amountSpecified,\\n        uint160 sqrtPriceLimitX96,\\n        bytes calldata data\\n    ) external returns (int256 amount0, int256 amount1);\\n\\n    /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\\n    /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\\n    /// with 0 amount{0,1} and sending the donation amount(s) from the callback\\n    /// @param recipient The address which will receive the token0 and token1 amounts\\n    /// @param amount0 The amount of token0 to send\\n    /// @param amount1 The amount of token1 to send\\n    /// @param data Any data to be passed through to the callback\\n    function flash(\\n        address recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bytes calldata data\\n    ) external;\\n\\n    /// @notice Increase the maximum number of price and liquidity observations that this pool will store\\n    /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\\n    /// the input observationCardinalityNext.\\n    /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\\n}\\n\",\"keccak256\":\"0x9453dd0e7442188667d01d9b65de3f1e14e9511ff3e303179a15f6fc267f7634\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that is not stored\\n/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the\\n/// blockchain. The functions here may have variable gas costs.\\ninterface IUniswapV3PoolDerivedState {\\n    /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\\n    /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\\n    /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\\n    /// you must call it with secondsAgos = [3600, 0].\\n    /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\\n    /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\\n    /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\\n    /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\\n    /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\\n    /// timestamp\\n    function observe(uint32[] calldata secondsAgos)\\n        external\\n        view\\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\\n\\n    /// @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\\n    /// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\\n    /// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\\n    /// snapshot is taken and the second snapshot is taken.\\n    /// @param tickLower The lower tick of the range\\n    /// @param tickUpper The upper tick of the range\\n    /// @return tickCumulativeInside The snapshot of the tick accumulator for the range\\n    /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\\n    /// @return secondsInside The snapshot of seconds per liquidity for the range\\n    function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\\n        external\\n        view\\n        returns (\\n            int56 tickCumulativeInside,\\n            uint160 secondsPerLiquidityInsideX128,\\n            uint32 secondsInside\\n        );\\n}\\n\",\"keccak256\":\"0xe603ac5b17ecdee73ba2b27efdf386c257a19c14206e87eee77e2017b742d9e5\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Events emitted by a pool\\n/// @notice Contains all events emitted by the pool\\ninterface IUniswapV3PoolEvents {\\n    /// @notice Emitted exactly once by a pool when #initialize is first called on the pool\\n    /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\\n    /// @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\\n    /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\\n    event Initialize(uint160 sqrtPriceX96, int24 tick);\\n\\n    /// @notice Emitted when liquidity is minted for a given position\\n    /// @param sender The address that minted the liquidity\\n    /// @param owner The owner of the position and recipient of any minted liquidity\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount The amount of liquidity minted to the position range\\n    /// @param amount0 How much token0 was required for the minted liquidity\\n    /// @param amount1 How much token1 was required for the minted liquidity\\n    event Mint(\\n        address sender,\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted when fees are collected by the owner of a position\\n    /// @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\\n    /// @param owner The owner of the position for which fees are collected\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount0 The amount of token0 fees collected\\n    /// @param amount1 The amount of token1 fees collected\\n    event Collect(\\n        address indexed owner,\\n        address recipient,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount0,\\n        uint128 amount1\\n    );\\n\\n    /// @notice Emitted when a position's liquidity is removed\\n    /// @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\\n    /// @param owner The owner of the position for which liquidity is removed\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount The amount of liquidity to remove\\n    /// @param amount0 The amount of token0 withdrawn\\n    /// @param amount1 The amount of token1 withdrawn\\n    event Burn(\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted by the pool for any swaps between token0 and token1\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param recipient The address that received the output of the swap\\n    /// @param amount0 The delta of the token0 balance of the pool\\n    /// @param amount1 The delta of the token1 balance of the pool\\n    /// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\\n    /// @param liquidity The liquidity of the pool after the swap\\n    /// @param tick The log base 1.0001 of price of the pool after the swap\\n    event Swap(\\n        address indexed sender,\\n        address indexed recipient,\\n        int256 amount0,\\n        int256 amount1,\\n        uint160 sqrtPriceX96,\\n        uint128 liquidity,\\n        int24 tick\\n    );\\n\\n    /// @notice Emitted by the pool for any flashes of token0/token1\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param recipient The address that received the tokens from flash\\n    /// @param amount0 The amount of token0 that was flashed\\n    /// @param amount1 The amount of token1 that was flashed\\n    /// @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\\n    /// @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\\n    event Flash(\\n        address indexed sender,\\n        address indexed recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        uint256 paid0,\\n        uint256 paid1\\n    );\\n\\n    /// @notice Emitted by the pool for increases to the number of observations that can be stored\\n    /// @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\\n    /// just before a mint/swap/burn.\\n    /// @param observationCardinalityNextOld The previous value of the next observation cardinality\\n    /// @param observationCardinalityNextNew The updated value of the next observation cardinality\\n    event IncreaseObservationCardinalityNext(\\n        uint16 observationCardinalityNextOld,\\n        uint16 observationCardinalityNextNew\\n    );\\n\\n    /// @notice Emitted when the protocol fee is changed by the pool\\n    /// @param feeProtocol0Old The previous value of the token0 protocol fee\\n    /// @param feeProtocol1Old The previous value of the token1 protocol fee\\n    /// @param feeProtocol0New The updated value of the token0 protocol fee\\n    /// @param feeProtocol1New The updated value of the token1 protocol fee\\n    event SetFeeProtocol(uint8 feeProtocol0Old, uint8 feeProtocol1Old, uint8 feeProtocol0New, uint8 feeProtocol1New);\\n\\n    /// @notice Emitted when the collected protocol fees are withdrawn by the factory owner\\n    /// @param sender The address that collects the protocol fees\\n    /// @param recipient The address that receives the collected protocol fees\\n    /// @param amount0 The amount of token0 protocol fees that is withdrawn\\n    /// @param amount0 The amount of token1 protocol fees that is withdrawn\\n    event CollectProtocol(address indexed sender, address indexed recipient, uint128 amount0, uint128 amount1);\\n}\\n\",\"keccak256\":\"0x8071514d0fe5d17d6fbd31c191cdfb703031c24e0ece3621d88ab10e871375cd\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that never changes\\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\\ninterface IUniswapV3PoolImmutables {\\n    /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\\n    /// @return The contract address\\n    function factory() external view returns (address);\\n\\n    /// @notice The first of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token0() external view returns (address);\\n\\n    /// @notice The second of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token1() external view returns (address);\\n\\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\\n    /// @return The fee\\n    function fee() external view returns (uint24);\\n\\n    /// @notice The pool tick spacing\\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\\n    /// This value is an int24 to avoid casting even though it is always positive.\\n    /// @return The tick spacing\\n    function tickSpacing() external view returns (int24);\\n\\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\\n    /// @return The max amount of liquidity per tick\\n    function maxLiquidityPerTick() external view returns (uint128);\\n}\\n\",\"keccak256\":\"0xf6e5d2cd1139c4c276bdbc8e1d2b256e456c866a91f1b868da265c6d2685c3f7\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissioned pool actions\\n/// @notice Contains pool methods that may only be called by the factory owner\\ninterface IUniswapV3PoolOwnerActions {\\n    /// @notice Set the denominator of the protocol's % share of the fees\\n    /// @param feeProtocol0 new protocol fee for token0 of the pool\\n    /// @param feeProtocol1 new protocol fee for token1 of the pool\\n    function setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external;\\n\\n    /// @notice Collect the protocol fee accrued to the pool\\n    /// @param recipient The address to which collected protocol fees should be sent\\n    /// @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\\n    /// @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\\n    /// @return amount0 The protocol fee collected in token0\\n    /// @return amount1 The protocol fee collected in token1\\n    function collectProtocol(\\n        address recipient,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n}\\n\",\"keccak256\":\"0x759b78a2918af9e99e246dc3af084f654e48ef32bb4e4cb8a966aa3dcaece235\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that can change\\n/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\\n/// per transaction\\ninterface IUniswapV3PoolState {\\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\\n    /// when accessed externally.\\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\\n    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\\n    /// boundary.\\n    /// observationIndex The index of the last oracle observation that was written,\\n    /// observationCardinality The current maximum number of observations stored in the pool,\\n    /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\\n    /// feeProtocol The protocol fee for both tokens of the pool.\\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\\n    /// unlocked Whether the pool is currently locked to reentrancy\\n    function slot0()\\n        external\\n        view\\n        returns (\\n            uint160 sqrtPriceX96,\\n            int24 tick,\\n            uint16 observationIndex,\\n            uint16 observationCardinality,\\n            uint16 observationCardinalityNext,\\n            uint8 feeProtocol,\\n            bool unlocked\\n        );\\n\\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal0X128() external view returns (uint256);\\n\\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal1X128() external view returns (uint256);\\n\\n    /// @notice The amounts of token0 and token1 that are owed to the protocol\\n    /// @dev Protocol fees will never exceed uint128 max in either token\\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\\n\\n    /// @notice The currently in range liquidity available to the pool\\n    /// @dev This value has no relationship to the total liquidity across all ticks\\n    function liquidity() external view returns (uint128);\\n\\n    /// @notice Look up information about a specific tick in the pool\\n    /// @param tick The tick to look up\\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\\n    /// tick upper,\\n    /// liquidityNet how much liquidity changes when the pool price crosses the tick,\\n    /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\\n    /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\\n    /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\\n    /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\\n    /// secondsOutside the seconds spent on the other side of the tick from the current tick,\\n    /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\\n    /// a specific position.\\n    function ticks(int24 tick)\\n        external\\n        view\\n        returns (\\n            uint128 liquidityGross,\\n            int128 liquidityNet,\\n            uint256 feeGrowthOutside0X128,\\n            uint256 feeGrowthOutside1X128,\\n            int56 tickCumulativeOutside,\\n            uint160 secondsPerLiquidityOutsideX128,\\n            uint32 secondsOutside,\\n            bool initialized\\n        );\\n\\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\\n\\n    /// @notice Returns the information about a position by the position's key\\n    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\\n    /// @return _liquidity The amount of liquidity in the position,\\n    /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\\n    /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\\n    /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\\n    /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\\n    function positions(bytes32 key)\\n        external\\n        view\\n        returns (\\n            uint128 _liquidity,\\n            uint256 feeGrowthInside0LastX128,\\n            uint256 feeGrowthInside1LastX128,\\n            uint128 tokensOwed0,\\n            uint128 tokensOwed1\\n        );\\n\\n    /// @notice Returns data about a specific observation index\\n    /// @param index The element of the observations array to fetch\\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\\n    /// ago, rather than at a specific index in the array.\\n    /// @return blockTimestamp The timestamp of the observation,\\n    /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\\n    /// Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\\n    /// Returns initialized whether the observation has been initialized and the values are safe to use\\n    function observations(uint256 index)\\n        external\\n        view\\n        returns (\\n            uint32 blockTimestamp,\\n            int56 tickCumulative,\\n            uint160 secondsPerLiquidityCumulativeX128,\\n            bool initialized\\n        );\\n}\\n\",\"keccak256\":\"0x852dc1f5df7dcf7f11e7bb3eed79f0cea72ad4b25f6a9d2c35aafb48925fd49f\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/libraries/TickMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Math library for computing sqrt prices from ticks and vice versa\\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\\n/// prices between 2**-128 and 2**128\\nlibrary TickMath {\\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\\n    int24 internal constant MIN_TICK = -887272;\\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\\n    int24 internal constant MAX_TICK = -MIN_TICK;\\n\\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\\n\\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\\n    /// @dev Throws if |tick| > max tick\\n    /// @param tick The input tick for the above formula\\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\\n    /// at the given tick\\n    function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\\n        uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\\n        require(absTick <= uint256(MAX_TICK), 'T');\\n\\n        uint256 ratio = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\\n        if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\\n        if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\\n        if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\\n        if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\\n        if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\\n        if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\\n        if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\\n        if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\\n        if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\\n        if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\\n        if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\\n        if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\\n        if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\\n        if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\\n        if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\\n        if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\\n        if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\\n        if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\\n        if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\\n\\n        if (tick > 0) ratio = type(uint256).max / ratio;\\n\\n        // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\\n        // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\\n        // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\\n        sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\\n    }\\n\\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\\n    /// ever return.\\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\\n        // second inequality must be < because the price can never reach the price at the max tick\\n        require(sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO, 'R');\\n        uint256 ratio = uint256(sqrtPriceX96) << 32;\\n\\n        uint256 r = ratio;\\n        uint256 msb = 0;\\n\\n        assembly {\\n            let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(5, gt(r, 0xFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(4, gt(r, 0xFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(3, gt(r, 0xFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(2, gt(r, 0xF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(1, gt(r, 0x3))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := gt(r, 0x1)\\n            msb := or(msb, f)\\n        }\\n\\n        if (msb >= 128) r = ratio >> (msb - 127);\\n        else r = ratio << (127 - msb);\\n\\n        int256 log_2 = (int256(msb) - 128) << 64;\\n\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(63, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(62, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(61, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(60, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(59, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(58, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(57, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(56, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(55, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(54, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(53, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(52, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(51, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(50, f))\\n        }\\n\\n        int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\\n\\n        int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\\n        int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\\n\\n        tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\\n    }\\n}\\n\",\"keccak256\":\"0x1f864a2bf61ba05f3173eaf2e3f94c5e1da4bec0554757527b6d1ef1fe439e4e\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/IERC721Permit.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\n\\n/// @title ERC721 with permit\\n/// @notice Extension to ERC721 that includes a permit function for signature based approvals\\ninterface IERC721Permit is IERC721 {\\n    /// @notice The permit typehash used in the permit signature\\n    /// @return The typehash for the permit\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    /// @notice The domain separator used in the permit signature\\n    /// @return The domain seperator used in encoding of permit signature\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    /// @notice Approve of a specific token ID for spending by spender via signature\\n    /// @param spender The account that is being approved\\n    /// @param tokenId The ID of the token that is being approved for spending\\n    /// @param deadline The deadline timestamp by which the call must be mined for the approve to work\\n    /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\\n    /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\\n    /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\\n    function permit(\\n        address spender,\\n        uint256 tokenId,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x9e3c2a4ee65ddf95b2dfcb0815784eea3a295707e6f8b83e4c4f0f8fe2e3a1d4\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/INonfungiblePositionManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol';\\nimport '@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol';\\n\\nimport './IPoolInitializer.sol';\\nimport './IERC721Permit.sol';\\nimport './IPeripheryPayments.sol';\\nimport './IPeripheryImmutableState.sol';\\nimport '../libraries/PoolAddress.sol';\\n\\n/// @title Non-fungible token for positions\\n/// @notice Wraps Uniswap V3 positions in a non-fungible token interface which allows for them to be transferred\\n/// and authorized.\\ninterface INonfungiblePositionManager is\\n    IPoolInitializer,\\n    IPeripheryPayments,\\n    IPeripheryImmutableState,\\n    IERC721Metadata,\\n    IERC721Enumerable,\\n    IERC721Permit\\n{\\n    /// @notice Emitted when liquidity is increased for a position NFT\\n    /// @dev Also emitted when a token is minted\\n    /// @param tokenId The ID of the token for which liquidity was increased\\n    /// @param liquidity The amount by which liquidity for the NFT position was increased\\n    /// @param amount0 The amount of token0 that was paid for the increase in liquidity\\n    /// @param amount1 The amount of token1 that was paid for the increase in liquidity\\n    event IncreaseLiquidity(uint256 indexed tokenId, uint128 liquidity, uint256 amount0, uint256 amount1);\\n    /// @notice Emitted when liquidity is decreased for a position NFT\\n    /// @param tokenId The ID of the token for which liquidity was decreased\\n    /// @param liquidity The amount by which liquidity for the NFT position was decreased\\n    /// @param amount0 The amount of token0 that was accounted for the decrease in liquidity\\n    /// @param amount1 The amount of token1 that was accounted for the decrease in liquidity\\n    event DecreaseLiquidity(uint256 indexed tokenId, uint128 liquidity, uint256 amount0, uint256 amount1);\\n    /// @notice Emitted when tokens are collected for a position NFT\\n    /// @dev The amounts reported may not be exactly equivalent to the amounts transferred, due to rounding behavior\\n    /// @param tokenId The ID of the token for which underlying tokens were collected\\n    /// @param recipient The address of the account that received the collected tokens\\n    /// @param amount0 The amount of token0 owed to the position that was collected\\n    /// @param amount1 The amount of token1 owed to the position that was collected\\n    event Collect(uint256 indexed tokenId, address recipient, uint256 amount0, uint256 amount1);\\n\\n    /// @notice Returns the position information associated with a given token ID.\\n    /// @dev Throws if the token ID is not valid.\\n    /// @param tokenId The ID of the token that represents the position\\n    /// @return nonce The nonce for permits\\n    /// @return operator The address that is approved for spending\\n    /// @return token0 The address of the token0 for a specific pool\\n    /// @return token1 The address of the token1 for a specific pool\\n    /// @return fee The fee associated with the pool\\n    /// @return tickLower The lower end of the tick range for the position\\n    /// @return tickUpper The higher end of the tick range for the position\\n    /// @return liquidity The liquidity of the position\\n    /// @return feeGrowthInside0LastX128 The fee growth of token0 as of the last action on the individual position\\n    /// @return feeGrowthInside1LastX128 The fee growth of token1 as of the last action on the individual position\\n    /// @return tokensOwed0 The uncollected amount of token0 owed to the position as of the last computation\\n    /// @return tokensOwed1 The uncollected amount of token1 owed to the position as of the last computation\\n    function positions(uint256 tokenId)\\n        external\\n        view\\n        returns (\\n            uint96 nonce,\\n            address operator,\\n            address token0,\\n            address token1,\\n            uint24 fee,\\n            int24 tickLower,\\n            int24 tickUpper,\\n            uint128 liquidity,\\n            uint256 feeGrowthInside0LastX128,\\n            uint256 feeGrowthInside1LastX128,\\n            uint128 tokensOwed0,\\n            uint128 tokensOwed1\\n        );\\n\\n    struct MintParams {\\n        address token0;\\n        address token1;\\n        uint24 fee;\\n        int24 tickLower;\\n        int24 tickUpper;\\n        uint256 amount0Desired;\\n        uint256 amount1Desired;\\n        uint256 amount0Min;\\n        uint256 amount1Min;\\n        address recipient;\\n        uint256 deadline;\\n    }\\n\\n    /// @notice Creates a new position wrapped in a NFT\\n    /// @dev Call this when the pool does exist and is initialized. Note that if the pool is created but not initialized\\n    /// a method does not exist, i.e. the pool is assumed to be initialized.\\n    /// @param params The params necessary to mint a position, encoded as `MintParams` in calldata\\n    /// @return tokenId The ID of the token that represents the minted position\\n    /// @return liquidity The amount of liquidity for this position\\n    /// @return amount0 The amount of token0\\n    /// @return amount1 The amount of token1\\n    function mint(MintParams calldata params)\\n        external\\n        payable\\n        returns (\\n            uint256 tokenId,\\n            uint128 liquidity,\\n            uint256 amount0,\\n            uint256 amount1\\n        );\\n\\n    struct IncreaseLiquidityParams {\\n        uint256 tokenId;\\n        uint256 amount0Desired;\\n        uint256 amount1Desired;\\n        uint256 amount0Min;\\n        uint256 amount1Min;\\n        uint256 deadline;\\n    }\\n\\n    /// @notice Increases the amount of liquidity in a position, with tokens paid by the `msg.sender`\\n    /// @param params tokenId The ID of the token for which liquidity is being increased,\\n    /// amount0Desired The desired amount of token0 to be spent,\\n    /// amount1Desired The desired amount of token1 to be spent,\\n    /// amount0Min The minimum amount of token0 to spend, which serves as a slippage check,\\n    /// amount1Min The minimum amount of token1 to spend, which serves as a slippage check,\\n    /// deadline The time by which the transaction must be included to effect the change\\n    /// @return liquidity The new liquidity amount as a result of the increase\\n    /// @return amount0 The amount of token0 to acheive resulting liquidity\\n    /// @return amount1 The amount of token1 to acheive resulting liquidity\\n    function increaseLiquidity(IncreaseLiquidityParams calldata params)\\n        external\\n        payable\\n        returns (\\n            uint128 liquidity,\\n            uint256 amount0,\\n            uint256 amount1\\n        );\\n\\n    struct DecreaseLiquidityParams {\\n        uint256 tokenId;\\n        uint128 liquidity;\\n        uint256 amount0Min;\\n        uint256 amount1Min;\\n        uint256 deadline;\\n    }\\n\\n    /// @notice Decreases the amount of liquidity in a position and accounts it to the position\\n    /// @param params tokenId The ID of the token for which liquidity is being decreased,\\n    /// amount The amount by which liquidity will be decreased,\\n    /// amount0Min The minimum amount of token0 that should be accounted for the burned liquidity,\\n    /// amount1Min The minimum amount of token1 that should be accounted for the burned liquidity,\\n    /// deadline The time by which the transaction must be included to effect the change\\n    /// @return amount0 The amount of token0 accounted to the position's tokens owed\\n    /// @return amount1 The amount of token1 accounted to the position's tokens owed\\n    function decreaseLiquidity(DecreaseLiquidityParams calldata params)\\n        external\\n        payable\\n        returns (uint256 amount0, uint256 amount1);\\n\\n    struct CollectParams {\\n        uint256 tokenId;\\n        address recipient;\\n        uint128 amount0Max;\\n        uint128 amount1Max;\\n    }\\n\\n    /// @notice Collects up to a maximum amount of fees owed to a specific position to the recipient\\n    /// @param params tokenId The ID of the NFT for which tokens are being collected,\\n    /// recipient The account that should receive the tokens,\\n    /// amount0Max The maximum amount of token0 to collect,\\n    /// amount1Max The maximum amount of token1 to collect\\n    /// @return amount0 The amount of fees collected in token0\\n    /// @return amount1 The amount of fees collected in token1\\n    function collect(CollectParams calldata params) external payable returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Burns a token ID, which deletes it from the NFT contract. The token must have 0 liquidity and all tokens\\n    /// must be collected first.\\n    /// @param tokenId The ID of the token that is being burned\\n    function burn(uint256 tokenId) external payable;\\n}\\n\",\"keccak256\":\"0xe1dadc73e60bf05d0b4e0f05bd2847c5783e833cc10352c14763360b13495ee1\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/IPeripheryImmutableState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Immutable state\\n/// @notice Functions that return immutable state of the router\\ninterface IPeripheryImmutableState {\\n    /// @return Returns the address of the Uniswap V3 factory\\n    function factory() external view returns (address);\\n\\n    /// @return Returns the address of WETH9\\n    function WETH9() external view returns (address);\\n}\\n\",\"keccak256\":\"0x7affcfeb5127c0925a71d6a65345e117c33537523aeca7bc98085ead8452519d\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/IPeripheryPayments.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\n\\n/// @title Periphery Payments\\n/// @notice Functions to ease deposits and withdrawals of ETH\\ninterface IPeripheryPayments {\\n    /// @notice Unwraps the contract's WETH9 balance and sends it to recipient as ETH.\\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.\\n    /// @param amountMinimum The minimum amount of WETH9 to unwrap\\n    /// @param recipient The address receiving ETH\\n    function unwrapWETH9(uint256 amountMinimum, address recipient) external payable;\\n\\n    /// @notice Refunds any ETH balance held by this contract to the `msg.sender`\\n    /// @dev Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps\\n    /// that use ether for the input amount\\n    function refundETH() external payable;\\n\\n    /// @notice Transfers the full amount of a token held by this contract to recipient\\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing the token from users\\n    /// @param token The contract address of the token which will be transferred to `recipient`\\n    /// @param amountMinimum The minimum amount of token required for a transfer\\n    /// @param recipient The destination address of the token\\n    function sweepToken(\\n        address token,\\n        uint256 amountMinimum,\\n        address recipient\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0xb547e10f1e69bed03621a62b73a503e260643066c6b4054867a4d1fef47eb274\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/IPoolInitializer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\n/// @title Creates and initializes V3 Pools\\n/// @notice Provides a method for creating and initializing a pool, if necessary, for bundling with other methods that\\n/// require the pool to exist.\\ninterface IPoolInitializer {\\n    /// @notice Creates a new pool if it does not exist, then initializes if not initialized\\n    /// @dev This method can be bundled with others via IMulticall for the first action (e.g. mint) performed against a pool\\n    /// @param token0 The contract address of token0 of the pool\\n    /// @param token1 The contract address of token1 of the pool\\n    /// @param fee The fee amount of the v3 pool for the specified token pair\\n    /// @param sqrtPriceX96 The initial square root price of the pool as a Q64.96 value\\n    /// @return pool Returns the pool address based on the pair of tokens and fee, will return the newly created pool address if necessary\\n    function createAndInitializePoolIfNecessary(\\n        address token0,\\n        address token1,\\n        uint24 fee,\\n        uint160 sqrtPriceX96\\n    ) external payable returns (address pool);\\n}\\n\",\"keccak256\":\"0x9d7695e8d94c22cc5fcced602017aabb988de89981ea7bee29ea629d5328a862\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/external/IWETH9.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity =0.7.6;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\n/// @title Interface for WETH9\\ninterface IWETH9 is IERC20 {\\n    /// @notice Deposit ether to get wrapped ether\\n    function deposit() external payable;\\n\\n    /// @notice Withdraw wrapped ether to get ether\\n    function withdraw(uint256) external;\\n}\\n\",\"keccak256\":\"0x6d7a8eb484e84bceb1d84c7be431c5b8120d519b0c2a7b4c7064c814635dea4c\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/libraries/PoolAddress.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Provides functions for deriving a pool address from the factory, tokens, and the fee\\nlibrary PoolAddress {\\n    bytes32 internal constant POOL_INIT_CODE_HASH = 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54;\\n\\n    /// @notice The identifying key of the pool\\n    struct PoolKey {\\n        address token0;\\n        address token1;\\n        uint24 fee;\\n    }\\n\\n    /// @notice Returns PoolKey: the ordered tokens with the matched fee levels\\n    /// @param tokenA The first token of a pool, unsorted\\n    /// @param tokenB The second token of a pool, unsorted\\n    /// @param fee The fee level of the pool\\n    /// @return Poolkey The pool details with ordered token0 and token1 assignments\\n    function getPoolKey(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) internal pure returns (PoolKey memory) {\\n        if (tokenA > tokenB) (tokenA, tokenB) = (tokenB, tokenA);\\n        return PoolKey({token0: tokenA, token1: tokenB, fee: fee});\\n    }\\n\\n    /// @notice Deterministically computes the pool address given the factory and PoolKey\\n    /// @param factory The Uniswap V3 factory contract address\\n    /// @param key The PoolKey\\n    /// @return pool The contract address of the V3 pool\\n    function computeAddress(address factory, PoolKey memory key) internal pure returns (address pool) {\\n        require(key.token0 < key.token1);\\n        pool = address(\\n            uint256(\\n                keccak256(\\n                    abi.encodePacked(\\n                        hex'ff',\\n                        factory,\\n                        keccak256(abi.encode(key.token0, key.token1, key.fee)),\\n                        POOL_INIT_CODE_HASH\\n                    )\\n                )\\n            )\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x5edd84eb8ba7c12fd8cb6cffe52e1e9f3f6464514ee5f539c2283826209035a2\",\"license\":\"GPL-2.0-or-later\"},\"contracts/PredictiveLiquidityManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.7.6;\\r\\npragma abicoder v2; // To support structs in parameters\\r\\n\\r\\n// OpenZeppelin ~3.4.0 Imports\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\r\\n\\r\\n// Local Math Library\\r\\nimport \\\"./libraries/SqrtMath.sol\\\";\\r\\n\\r\\n// Uniswap V3 Core\\r\\nimport \\\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\\\";\\r\\nimport \\\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol\\\";\\r\\nimport \\\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3MintCallback.sol\\\";\\r\\nimport \\\"@uniswap/v3-core/contracts/libraries/TickMath.sol\\\";\\r\\n\\r\\n// Uniswap V3 Periphery\\r\\nimport \\\"@uniswap/v3-periphery/contracts/interfaces/INonfungiblePositionManager.sol\\\";\\r\\nimport \\\"@uniswap/v3-periphery/contracts/interfaces/external/IWETH9.sol\\\";\\r\\n\\r\\n// Interface for decimals()\\r\\ninterface IERC20Decimals {\\r\\n    function decimals() external view returns (uint8);\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title PredictiveLiquidityManager\\r\\n * @notice The main liquidity management contract that adjusts positions based on price predictions\\r\\n */\\r\\ncontract PredictiveLiquidityManager is\\r\\n    Ownable,\\r\\n    ReentrancyGuard,\\r\\n    IUniswapV3MintCallback\\r\\n{\\r\\n    using SafeERC20 for IERC20;\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    // --- State Variables ---\\r\\n    IUniswapV3Factory public immutable factory;\\r\\n    INonfungiblePositionManager public immutable positionManager;\\r\\n    address public immutable token0;\\r\\n    address public immutable token1;\\r\\n    uint8 public immutable token0Decimals;\\r\\n    uint8 public immutable token1Decimals;\\r\\n    uint24 public immutable fee;\\r\\n    int24 public immutable tickSpacing;\\r\\n    address public immutable WETH9;\\r\\n\\r\\n    // Structure for liquidity positions\\r\\n    struct Position {\\r\\n        uint256 tokenId;\\r\\n        uint128 liquidity;\\r\\n        int24 tickLower;\\r\\n        int24 tickUpper;\\r\\n        bool active;\\r\\n    }\\r\\n    Position public currentPosition;\\r\\n\\r\\n    // Strategy Parameters\\r\\n    uint24 public rangeWidthMultiplier = 4;\\r\\n\\r\\n    // --- Events ---\\r\\n    // Event for liquidity operations\\r\\n    event LiquidityOperation(\\r\\n        string operationType,\\r\\n        uint256 indexed tokenId,\\r\\n        int24 tickLower,\\r\\n        int24 tickUpper,\\r\\n        uint128 liquidity,\\r\\n        uint256 amount0,\\r\\n        uint256 amount1,\\r\\n        bool success\\r\\n    );\\r\\n\\r\\n    // Event for outputting main adjustment logic\\r\\n    event PredictionAdjustmentMetrics(\\r\\n        uint256 timestamp,\\r\\n        uint256 actualPrice,\\r\\n        uint256 predictedPrice,\\r\\n        int24 predictedTick,\\r\\n        int24 finalTickLower,\\r\\n        int24 finalTickUpper,\\r\\n        bool adjusted\\r\\n    );\\r\\n\\r\\n    event StrategyParamUpdated(string indexed paramName, uint256 newValue);\\r\\n\\r\\n    // --- Constructor ---\\r\\n    constructor(\\r\\n        address _factory,\\r\\n        address _positionManager,\\r\\n        address _token0,\\r\\n        address _token1,\\r\\n        uint24 _fee,\\r\\n        address _weth9,\\r\\n        address _initialOwner\\r\\n    ) {\\r\\n        // Store values in immutable variables\\r\\n        factory = IUniswapV3Factory(_factory);\\r\\n        positionManager = INonfungiblePositionManager(_positionManager);\\r\\n        token0 = _token0;\\r\\n        token1 = _token1;\\r\\n        fee = _fee;\\r\\n        WETH9 = _weth9;\\r\\n\\r\\n        // Check decimals using try-catch\\r\\n        try IERC20Decimals(_token0).decimals() returns (uint8 _decimals) {\\r\\n            token0Decimals = _decimals;\\r\\n        } catch {\\r\\n            revert(\\\"Token0 does not support decimals()\\\");\\r\\n        }\\r\\n\\r\\n        try IERC20Decimals(_token1).decimals() returns (uint8 _decimals) {\\r\\n            token1Decimals = _decimals;\\r\\n        } catch {\\r\\n            revert(\\\"Token1 does not support decimals()\\\");\\r\\n        }\\r\\n\\r\\n        // Store tickSpacing in a temporary variable\\r\\n        address poolAddress = IUniswapV3Factory(_factory).getPool(\\r\\n            _token0,\\r\\n            _token1,\\r\\n            _fee\\r\\n        );\\r\\n        require(poolAddress != address(0), \\\"Pool does not exist\\\");\\r\\n        tickSpacing = IUniswapV3Pool(poolAddress).tickSpacing();\\r\\n\\r\\n        // Set approvals for token0 and token1\\r\\n        IERC20(_token0).safeApprove(\\r\\n            address(_positionManager),\\r\\n            type(uint256).max\\r\\n        );\\r\\n        IERC20(_token1).safeApprove(\\r\\n            address(_positionManager),\\r\\n            type(uint256).max\\r\\n        );\\r\\n\\r\\n        if (_initialOwner != address(0)) {\\r\\n            transferOwnership(_initialOwner);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // --- Automated Liquidity Management (Owner Only) ---\\r\\n    function updatePredictionAndAdjust(\\r\\n        uint256 predictedPriceDecimal\\r\\n    ) external nonReentrant onlyOwner {\\r\\n        // Calculate current price and predicted tick information\\r\\n        (\\r\\n            uint256 currentPriceDecimal,\\r\\n            int24 currentTick,\\r\\n            int24 predictedTick,\\r\\n            int24 targetTickLower,\\r\\n            int24 targetTickUpper\\r\\n        ) = _calculatePredictionData(predictedPriceDecimal);\\r\\n\\r\\n        // Update position if needed\\r\\n        bool adjusted = _updatePositionIfNeeded(\\r\\n            targetTickLower,\\r\\n            targetTickUpper\\r\\n        );\\r\\n\\r\\n        // Emit prediction adjustment metrics using a helper function to reduce stack depth\\r\\n        _emitPredictionMetrics(\\r\\n            currentPriceDecimal,\\r\\n            predictedPriceDecimal,\\r\\n            predictedTick,\\r\\n            targetTickLower,\\r\\n            targetTickUpper,\\r\\n            adjusted\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // Helper function for calculating prediction data - reducing stack depth\\r\\n    function _calculatePredictionData(\\r\\n        uint256 predictedPriceDecimal\\r\\n    )\\r\\n        internal\\r\\n        view\\r\\n        returns (\\r\\n            uint256 currentPriceDecimal,\\r\\n            int24 currentTick,\\r\\n            int24 predictedTick,\\r\\n            int24 targetTickLower,\\r\\n            int24 targetTickUpper\\r\\n        )\\r\\n    {\\r\\n        // Retrieve current price and tick information\\r\\n        uint160 sqrtPriceX96;\\r\\n        int24 tick;\\r\\n        (sqrtPriceX96, tick) = _getCurrentSqrtPriceAndTick();\\r\\n        currentTick = tick;\\r\\n        currentPriceDecimal = _sqrtPriceX96ToPrice(sqrtPriceX96);\\r\\n        predictedTick = _priceToTick(predictedPriceDecimal);\\r\\n\\r\\n        // Calculate new position\\r\\n        (targetTickLower, targetTickUpper) = _calculateTicks(predictedTick);\\r\\n\\r\\n        return (\\r\\n            currentPriceDecimal,\\r\\n            currentTick,\\r\\n            predictedTick,\\r\\n            targetTickLower,\\r\\n            targetTickUpper\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // Helper function to update position if needed - reducing stack depth\\r\\n    function _updatePositionIfNeeded(\\r\\n        int24 targetTickLower,\\r\\n        int24 targetTickUpper\\r\\n    ) internal returns (bool adjusted) {\\r\\n        if (\\r\\n            !currentPosition.active ||\\r\\n            targetTickLower != currentPosition.tickLower ||\\r\\n            targetTickUpper != currentPosition.tickUpper\\r\\n        ) {\\r\\n            _adjustLiquidity(targetTickLower, targetTickUpper);\\r\\n            return true;\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    // --- Internal Liquidity Management Helpers ---\\r\\n    function _adjustLiquidity(int24 tickLower, int24 tickUpper) internal {\\r\\n        if (currentPosition.active) {\\r\\n            _removeLiquidity();\\r\\n        }\\r\\n        uint256 balance0 = IERC20(token0).balanceOf(address(this));\\r\\n        uint256 balance1 = IERC20(token1).balanceOf(address(this));\\r\\n        if (balance0 > 0 || balance1 > 0) {\\r\\n            _mintLiquidity(tickLower, tickUpper, balance0, balance1);\\r\\n        } else {\\r\\n            currentPosition = Position(0, 0, 0, 0, false);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Helper function for emitting liquidity removal events - reducing stack depth\\r\\n    function _emitLiquidityRemoveEvent(\\r\\n        uint256 tokenId,\\r\\n        int24 tickLower,\\r\\n        int24 tickUpper,\\r\\n        uint128 liquidity,\\r\\n        uint256 amount0,\\r\\n        uint256 amount1,\\r\\n        bool success\\r\\n    ) internal {\\r\\n        emit LiquidityOperation(\\r\\n            \\\"REMOVE\\\",\\r\\n            tokenId,\\r\\n            tickLower,\\r\\n            tickUpper,\\r\\n            liquidity,\\r\\n            amount0,\\r\\n            amount1,\\r\\n            success\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _removeLiquidity() internal {\\r\\n        require(\\r\\n            currentPosition.active && currentPosition.tokenId != 0,\\r\\n            \\\"No active position\\\"\\r\\n        );\\r\\n        uint256 _tokenId = currentPosition.tokenId;\\r\\n        uint128 _liquidity = currentPosition.liquidity;\\r\\n        int24 _tickLower = currentPosition.tickLower;\\r\\n        int24 _tickUpper = currentPosition.tickUpper;\\r\\n\\r\\n        currentPosition = Position(0, 0, 0, 0, false);\\r\\n\\r\\n        // Executing removal process in a separate function to prevent stack too deep\\r\\n        _executeRemoval(_tokenId, _liquidity, _tickLower, _tickUpper);\\r\\n    }\\r\\n\\r\\n    // Helper function for executing liquidity removal - reducing stack depth\\r\\n    function _executeRemoval(\\r\\n        uint256 _tokenId,\\r\\n        uint128 _liquidity,\\r\\n        int24 _tickLower,\\r\\n        int24 _tickUpper\\r\\n    ) internal {\\r\\n        bool decreaseSuccess = false;\\r\\n        bool collectSuccess = false;\\r\\n        uint256 amount0Collected = 0;\\r\\n        uint256 amount1Collected = 0;\\r\\n\\r\\n        if (_liquidity > 0) {\\r\\n            try\\r\\n                positionManager.decreaseLiquidity(\\r\\n                    INonfungiblePositionManager.DecreaseLiquidityParams({\\r\\n                        tokenId: _tokenId,\\r\\n                        liquidity: _liquidity,\\r\\n                        amount0Min: 0,\\r\\n                        amount1Min: 0,\\r\\n                        deadline: block.timestamp\\r\\n                    })\\r\\n                )\\r\\n            {\\r\\n                decreaseSuccess = true;\\r\\n            } catch {\\r\\n                // Silent failure, success = false will be returned at the end\\r\\n            }\\r\\n        } else {\\r\\n            decreaseSuccess = true;\\r\\n        }\\r\\n\\r\\n        if (decreaseSuccess) {\\r\\n            try\\r\\n                positionManager.collect(\\r\\n                    INonfungiblePositionManager.CollectParams({\\r\\n                        tokenId: _tokenId,\\r\\n                        recipient: address(this),\\r\\n                        amount0Max: type(uint128).max,\\r\\n                        amount1Max: type(uint128).max\\r\\n                    })\\r\\n                )\\r\\n            returns (uint256 a0, uint256 a1) {\\r\\n                amount0Collected = a0;\\r\\n                amount1Collected = a1;\\r\\n                collectSuccess = true;\\r\\n            } catch {\\r\\n                // Silent failure, success = false will be returned at the end\\r\\n            }\\r\\n\\r\\n            // Try to burn regardless of collect success\\r\\n            try positionManager.burn(_tokenId) {} catch {}\\r\\n        }\\r\\n\\r\\n        bool overallSuccess = decreaseSuccess && collectSuccess;\\r\\n\\r\\n        // Using helper function to emit event - reducing stack depth\\r\\n        _emitLiquidityRemoveEvent(\\r\\n            _tokenId,\\r\\n            _tickLower,\\r\\n            _tickUpper,\\r\\n            _liquidity,\\r\\n            amount0Collected,\\r\\n            amount1Collected,\\r\\n            overallSuccess\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // Helper function for emitting liquidity mint events - reducing stack depth\\r\\n    function _emitLiquidityMintEvent(\\r\\n        uint256 tokenId,\\r\\n        int24 tickLower,\\r\\n        int24 tickUpper,\\r\\n        uint128 liquidity,\\r\\n        uint256 amount0,\\r\\n        uint256 amount1,\\r\\n        bool success\\r\\n    ) internal {\\r\\n        emit LiquidityOperation(\\r\\n            \\\"MINT\\\",\\r\\n            tokenId,\\r\\n            tickLower,\\r\\n            tickUpper,\\r\\n            liquidity,\\r\\n            amount0,\\r\\n            amount1,\\r\\n            success\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _mintLiquidity(\\r\\n        int24 tickLower,\\r\\n        int24 tickUpper,\\r\\n        uint256 amount0Desired,\\r\\n        uint256 amount1Desired\\r\\n    ) internal {\\r\\n        require(!currentPosition.active, \\\"Position already active\\\");\\r\\n\\r\\n        INonfungiblePositionManager.MintParams\\r\\n            memory params = INonfungiblePositionManager.MintParams({\\r\\n                token0: token0,\\r\\n                token1: token1,\\r\\n                fee: fee,\\r\\n                tickLower: tickLower,\\r\\n                tickUpper: tickUpper,\\r\\n                amount0Desired: amount0Desired,\\r\\n                amount1Desired: amount1Desired,\\r\\n                amount0Min: 0,\\r\\n                amount1Min: 0,\\r\\n                recipient: address(this),\\r\\n                deadline: block.timestamp\\r\\n            });\\r\\n\\r\\n        // Execute mint and manage position creation in a separate function\\r\\n        _executeMint(params, tickLower, tickUpper);\\r\\n    }\\r\\n\\r\\n    function _executeMint(\\r\\n        INonfungiblePositionManager.MintParams memory params,\\r\\n        int24 tickLower,\\r\\n        int24 tickUpper\\r\\n    ) internal {\\r\\n        uint256 tokenId = 0;\\r\\n        uint128 liquidity = 0;\\r\\n        uint256 amount0Actual = 0;\\r\\n        uint256 amount1Actual = 0;\\r\\n        bool success = false;\\r\\n\\r\\n        try positionManager.mint(params) returns (\\r\\n            uint256 _tokenId,\\r\\n            uint128 _liquidity,\\r\\n            uint256 _amount0,\\r\\n            uint256 _amount1\\r\\n        ) {\\r\\n            tokenId = _tokenId;\\r\\n            liquidity = _liquidity;\\r\\n            amount0Actual = _amount0;\\r\\n            amount1Actual = _amount1;\\r\\n\\r\\n            if (liquidity > 0) {\\r\\n                currentPosition = Position(\\r\\n                    tokenId,\\r\\n                    liquidity,\\r\\n                    tickLower,\\r\\n                    tickUpper,\\r\\n                    true\\r\\n                );\\r\\n                success = true;\\r\\n            } else if (tokenId != 0) {\\r\\n                try positionManager.burn(tokenId) {} catch {}\\r\\n            }\\r\\n        } catch {\\r\\n            // Silent failure, event will be emitted with success = false\\r\\n        }\\r\\n\\r\\n        // Using helper function to emit event - reducing stack depth\\r\\n        _emitLiquidityMintEvent(\\r\\n            tokenId,\\r\\n            tickLower,\\r\\n            tickUpper,\\r\\n            liquidity,\\r\\n            amount0Actual,\\r\\n            amount1Actual,\\r\\n            success\\r\\n        );\\r\\n\\r\\n        if (!success) {\\r\\n            currentPosition = Position(0, 0, 0, 0, false);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // --- Internal Calculation Helpers ---\\r\\n    function _calculateTicks(\\r\\n        int24 targetCenterTick\\r\\n    ) internal view returns (int24 tickLower, int24 tickUpper) {\\r\\n        require(tickSpacing > 0, \\\"Invalid tick spacing\\\");\\r\\n\\r\\n        // Calculate half width with better symmetry\\r\\n        int24 halfWidth = (tickSpacing * int24(rangeWidthMultiplier)) / 2;\\r\\n        if (halfWidth <= 0) halfWidth = tickSpacing;\\r\\n\\r\\n        // Ensure half width is a multiple of tick spacing for perfect symmetry\\r\\n        halfWidth = (halfWidth / tickSpacing) * tickSpacing;\\r\\n        if (halfWidth == 0) halfWidth = tickSpacing;\\r\\n\\r\\n        // Calculate raw tick boundaries with better centering\\r\\n        int24 rawTickLower = targetCenterTick - halfWidth;\\r\\n        int24 rawTickUpper = targetCenterTick + halfWidth;\\r\\n\\r\\n        // Align with tick spacing\\r\\n        tickLower = floorToTickSpacing(rawTickLower, tickSpacing);\\r\\n        tickUpper = floorToTickSpacing(rawTickUpper, tickSpacing);\\r\\n\\r\\n        // If upper tick is not properly spaced after flooring, add another tick spacing\\r\\n        if ((rawTickUpper % tickSpacing) != 0) {\\r\\n            tickUpper += tickSpacing;\\r\\n        }\\r\\n\\r\\n        // Ensure proper spacing between ticks\\r\\n        if (tickLower >= tickUpper) {\\r\\n            tickUpper = tickLower + tickSpacing;\\r\\n        }\\r\\n\\r\\n        // Ensure ticks are within global range\\r\\n        tickLower = tickLower < TickMath.MIN_TICK\\r\\n            ? floorToTickSpacing(TickMath.MIN_TICK, tickSpacing)\\r\\n            : tickLower;\\r\\n\\r\\n        tickUpper = tickUpper > TickMath.MAX_TICK\\r\\n            ? floorToTickSpacing(TickMath.MAX_TICK, tickSpacing)\\r\\n            : tickUpper;\\r\\n\\r\\n        // Final check to ensure proper ordering\\r\\n        if (tickLower >= tickUpper) {\\r\\n            tickUpper = tickLower + tickSpacing;\\r\\n\\r\\n            // If upper tick exceeds MAX_TICK, adjust both\\r\\n            if (tickUpper > TickMath.MAX_TICK) {\\r\\n                tickUpper = floorToTickSpacing(TickMath.MAX_TICK, tickSpacing);\\r\\n                tickLower = tickUpper - tickSpacing;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return (tickLower, tickUpper);\\r\\n    }\\r\\n\\r\\n    function floorToTickSpacing(\\r\\n        int24 tick,\\r\\n        int24 _tickSpacing\\r\\n    ) internal pure returns (int24) {\\r\\n        require(_tickSpacing > 0, \\\"Tick spacing must be positive\\\");\\r\\n        int24 compressed = tick / _tickSpacing;\\r\\n        if (tick < 0 && (tick % _tickSpacing != 0)) {\\r\\n            compressed--;\\r\\n        }\\r\\n        return compressed * _tickSpacing;\\r\\n    }\\r\\n\\r\\n    function _getCurrentSqrtPriceAndTick()\\r\\n        internal\\r\\n        view\\r\\n        returns (uint160 sqrtPriceX96, int24 tick)\\r\\n    {\\r\\n        address poolAddress = factory.getPool(token0, token1, fee);\\r\\n        require(poolAddress != address(0), \\\"Pool doesn't exist\\\");\\r\\n        (sqrtPriceX96, tick, , , , , ) = IUniswapV3Pool(poolAddress).slot0();\\r\\n    }\\r\\n\\r\\n    // Helper function to convert sqrtPriceX96 to price decimal\\r\\n    function _sqrtPriceX96ToPrice(\\r\\n        uint160 sqrtPriceX96\\r\\n    ) internal view returns (uint256) {\\r\\n        uint256 price = uint256(sqrtPriceX96) * uint256(sqrtPriceX96);\\r\\n        uint256 adjustedPrice = price >> 192; // Divide by 2^192\\r\\n\\r\\n        // Adjust for decimal differences between tokens\\r\\n        if (token1Decimals > token0Decimals) {\\r\\n            adjustedPrice =\\r\\n                adjustedPrice /\\r\\n                (10 ** (token1Decimals - token0Decimals));\\r\\n        } else if (token0Decimals > token1Decimals) {\\r\\n            adjustedPrice =\\r\\n                adjustedPrice *\\r\\n                (10 ** (token0Decimals - token1Decimals));\\r\\n        }\\r\\n\\r\\n        return adjustedPrice;\\r\\n    }\\r\\n\\r\\n    function _priceToTick(uint256 priceDecimal) internal view returns (int24) {\\r\\n        require(priceDecimal > 0, \\\"Price must be > 0\\\");\\r\\n\\r\\n        // If the input price is ETH/USDC (e.g., 1500)\\r\\n        // We need to convert it to WETH/USDC (e.g., 1/1500 = 0.00066)\\r\\n        // To match Uniswap's logic which uses token1/token0 ratio\\r\\n\\r\\n        // Calculate inverted price\\r\\n        uint256 invertedPrice;\\r\\n        if (priceDecimal > 1e12) {\\r\\n            // If price is large (if price is ETH/USDC)\\r\\n            // Invert price with high precision\\r\\n            // Use 1e36 to maintain precision in division\\r\\n            invertedPrice = uint256(1e36).div(priceDecimal);\\r\\n        } else {\\r\\n            // If price is small (likely already inverted), use it as is\\r\\n            invertedPrice = priceDecimal;\\r\\n        }\\r\\n\\r\\n        // Adjust for decimal differences\\r\\n        uint256 numerator = invertedPrice;\\r\\n        uint256 denominator = 1e18;\\r\\n\\r\\n        if (token1Decimals > token0Decimals) {\\r\\n            numerator = numerator.mul(\\r\\n                10 ** (uint256(token1Decimals).sub(token0Decimals))\\r\\n            );\\r\\n        } else if (token0Decimals > token1Decimals) {\\r\\n            denominator = denominator.mul(\\r\\n                10 ** (uint256(token0Decimals).sub(token1Decimals))\\r\\n            );\\r\\n        }\\r\\n\\r\\n        // Calculate ratioX192 considering inverted price\\r\\n        uint256 ratioX192 = numerator.mul(1 << 192).div(denominator);\\r\\n\\r\\n        uint160 sqrtPriceX96 = uint160(SqrtMath.sqrt(ratioX192));\\r\\n\\r\\n        // Check Uniswap constraints\\r\\n        require(sqrtPriceX96 >= TickMath.MIN_SQRT_RATIO, \\\"Price too low\\\");\\r\\n        require(sqrtPriceX96 <= TickMath.MAX_SQRT_RATIO, \\\"Price too high\\\");\\r\\n\\r\\n        return TickMath.getTickAtSqrtRatio(sqrtPriceX96);\\r\\n    }\\r\\n\\r\\n    // Helper function to emit prediction metrics event\\r\\n    function _emitPredictionMetrics(\\r\\n        uint256 actualPrice,\\r\\n        uint256 predictedPrice,\\r\\n        int24 predictedTick,\\r\\n        int24 finalTickLower,\\r\\n        int24 finalTickUpper,\\r\\n        bool adjusted\\r\\n    ) internal {\\r\\n        emit PredictionAdjustmentMetrics(\\r\\n            block.timestamp,\\r\\n            actualPrice,\\r\\n            predictedPrice,\\r\\n            predictedTick,\\r\\n            finalTickLower,\\r\\n            finalTickUpper,\\r\\n            adjusted\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // Implement IUniswapV3MintCallback interface\\r\\n    function uniswapV3MintCallback(\\r\\n        uint256 amount0Owed,\\r\\n        uint256 amount1Owed,\\r\\n        bytes calldata data\\r\\n    ) external override {\\r\\n        // Verify the caller is the Uniswap V3 position manager\\r\\n        require(\\r\\n            msg.sender == address(positionManager),\\r\\n            \\\"Unauthorized callback\\\"\\r\\n        );\\r\\n\\r\\n        // Send the required tokens\\r\\n        if (amount0Owed > 0) {\\r\\n            IERC20(token0).safeTransfer(msg.sender, amount0Owed);\\r\\n        }\\r\\n        if (amount1Owed > 0) {\\r\\n            IERC20(token1).safeTransfer(msg.sender, amount1Owed);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x9f4ade8ff2474e9a2044dc20a116b63ca42a2064e759224feb8e66ba66a9426b\",\"license\":\"MIT\"},\"contracts/libraries/SqrtMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.7.6;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\"; // Import OZ 3.4 SafeMath\\r\\n\\r\\n/**\\r\\n * @title Safe Square Root Math Library for Solidity 0.7.x\\r\\n * @author Adapted from OpenZeppelin Contracts & other sources\\r\\n * @notice Provides square root functionality using SafeMath for uint256.\\r\\n */\\r\\nlibrary SqrtMath {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    // Optional: Include Rounding enum if your main contract needs the rounding variant\\r\\n    enum Rounding {\\r\\n        Floor,\\r\\n        Ceil\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer square root of a number rounded down (floor).\\r\\n     * Uses Babylonian method with SafeMath. 6 iterations are sufficient for uint256.\\r\\n     */\\r\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\r\\n        if (a == 0) return 0;\\r\\n\\r\\n        // Initial estimate - can start with a simple estimate like a/2 or use log2 based estimate\\r\\n        // Using roughly x = 2**(log2(a)/2) based estimate (safer)\\r\\n        uint256 estimate = 1 << (log2(a) >> 1);\\r\\n        if (estimate == 0) estimate = 1; // Ensure estimate is not zero if a > 0\\r\\n\\r\\n        // Babylonian method iterations using SafeMath\\r\\n        // result = (estimate + a / estimate) / 2;\\r\\n        uint256 result = estimate.add(a.div(estimate)).div(2);\\r\\n        result = result.add(a.div(result)).div(2);\\r\\n        result = result.add(a.div(result)).div(2);\\r\\n        result = result.add(a.div(result)).div(2);\\r\\n        result = result.add(a.div(result)).div(2);\\r\\n        result = result.add(a.div(result)).div(2);\\r\\n\\r\\n        // Final check for floor rounding (integer truncation might overshoot)\\r\\n        // Check if result * result > a\\r\\n        // Avoid direct multiplication if result can be large, use division check: result > a / result\\r\\n        if (result > a.div(result)) {\\r\\n            // If result > a/result, it means result*result > a (potential overflow avoided)\\r\\n            // So, the floor value is result - 1\\r\\n            return result.sub(1);\\r\\n        } else {\\r\\n            // Otherwise, result*result <= a, so result is the floor value\\r\\n            return result;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Calculates sqrt(a), following the selected rounding direction.\\r\\n     */\\r\\n    function sqrt(\\r\\n        uint256 a,\\r\\n        Rounding rounding\\r\\n    ) internal pure returns (uint256) {\\r\\n        uint256 resultFloor = sqrt(a); // Calculate floor value first\\r\\n        if (rounding == Rounding.Floor) {\\r\\n            return resultFloor;\\r\\n        } else {\\r\\n            // rounding == Rounding.Ceil\\r\\n            // Check if ceil is needed (i.e., if a is not a perfect square)\\r\\n            // If resultFloor * resultFloor < a, then we need to round up\\r\\n            if (resultFloor.mul(resultFloor) < a) {\\r\\n                // Use SafeMath for the check\\r\\n                return resultFloor.add(1);\\r\\n            } else {\\r\\n                return resultFloor; // a was a perfect square, floor == ceil\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // --- Internal helper: log2 needed for initial estimate ---\\r\\n    /**\\r\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\r\\n     * Returns 0 if given 0. Adapted from OZ 4.x for 0.7.6 compatibility using assembly.\\r\\n     */\\r\\n    function log2(uint256 x) internal pure returns (uint256 r) {\\r\\n        assembly {\\r\\n            let v := x\\r\\n            if iszero(v) {\\r\\n                r := 0\\r\\n            }\\r\\n            if gt(v, 0xffffffffffffffffffffffffffffffff) {\\r\\n                r := add(r, 128)\\r\\n                v := shr(128, v)\\r\\n            }\\r\\n            if gt(v, 0xffffffffffffffff) {\\r\\n                r := add(r, 64)\\r\\n                v := shr(64, v)\\r\\n            }\\r\\n            if gt(v, 0xffffffff) {\\r\\n                r := add(r, 32)\\r\\n                v := shr(32, v)\\r\\n            }\\r\\n            if gt(v, 0xffff) {\\r\\n                r := add(r, 16)\\r\\n                v := shr(16, v)\\r\\n            }\\r\\n            if gt(v, 0xff) {\\r\\n                r := add(r, 8)\\r\\n                v := shr(8, v)\\r\\n            }\\r\\n            if gt(v, 0xf) {\\r\\n                r := add(r, 4)\\r\\n                v := shr(4, v)\\r\\n            }\\r\\n            if gt(v, 0x3) {\\r\\n                r := add(r, 2)\\r\\n                v := shr(2, v)\\r\\n            }\\r\\n            if gt(v, 0x1) {\\r\\n                r := add(r, 1)\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7b28ea41070f2aa2bc2a07bb69c8c78511d7e7067cfb8c8c857be435811bed38\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}},"PredictiveLiquidityManager":{"abi":[{"inputs":[{"internalType":"address","name":"_factory","type":"address"},{"internalType":"address","name":"_positionManager","type":"address"},{"internalType":"address","name":"_token0","type":"address"},{"internalType":"address","name":"_token1","type":"address"},{"internalType":"uint24","name":"_fee","type":"uint24"},{"internalType":"address","name":"_weth9","type":"address"},{"internalType":"address","name":"_initialOwner","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"operationType","type":"string"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"},{"indexed":false,"internalType":"int24","name":"tickLower","type":"int24"},{"indexed":false,"internalType":"int24","name":"tickUpper","type":"int24"},{"indexed":false,"internalType":"uint128","name":"liquidity","type":"uint128"},{"indexed":false,"internalType":"uint256","name":"amount0","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount1","type":"uint256"},{"indexed":false,"internalType":"bool","name":"success","type":"bool"}],"name":"LiquidityOperation","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"timestamp","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"actualPrice","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"predictedPrice","type":"uint256"},{"indexed":false,"internalType":"int24","name":"predictedTick","type":"int24"},{"indexed":false,"internalType":"int24","name":"finalTickLower","type":"int24"},{"indexed":false,"internalType":"int24","name":"finalTickUpper","type":"int24"},{"indexed":false,"internalType":"bool","name":"adjusted","type":"bool"}],"name":"PredictionAdjustmentMetrics","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"string","name":"paramName","type":"string"},{"indexed":false,"internalType":"uint256","name":"newValue","type":"uint256"}],"name":"StrategyParamUpdated","type":"event"},{"inputs":[],"name":"WETH9","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"currentPosition","outputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"uint128","name":"liquidity","type":"uint128"},{"internalType":"int24","name":"tickLower","type":"int24"},{"internalType":"int24","name":"tickUpper","type":"int24"},{"internalType":"bool","name":"active","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"factory","outputs":[{"internalType":"contract IUniswapV3Factory","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"fee","outputs":[{"internalType":"uint24","name":"","type":"uint24"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"positionManager","outputs":[{"internalType":"contract INonfungiblePositionManager","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"rangeWidthMultiplier","outputs":[{"internalType":"uint24","name":"","type":"uint24"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"tickSpacing","outputs":[{"internalType":"int24","name":"","type":"int24"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"token0","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"token0Decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"token1","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"token1Decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount0Owed","type":"uint256"},{"internalType":"uint256","name":"amount1Owed","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"uniswapV3MintCallback","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"predictedPriceDecimal","type":"uint256"}],"name":"updatePredictionAndAdjust","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."},"uniswapV3MintCallback(uint256,uint256,bytes)":{"details":"In the implementation you must pay the pool tokens owed for the minted liquidity. The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.","params":{"amount0Owed":"The amount of token0 due to the pool for the minted liquidity","amount1Owed":"The amount of token1 due to the pool for the minted liquidity","data":"Any data passed through by the caller via the IUniswapV3PoolActions#mint call"}}},"title":"PredictiveLiquidityManager","version":1},"evm":{"bytecode":{"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:3396:35","statements":[{"nodeType":"YulBlock","src":"6:3:35","statements":[]},{"body":{"nodeType":"YulBlock","src":"76:117:35","statements":[{"nodeType":"YulAssignment","src":"86:22:35","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"101:6:35"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"95:5:35"},"nodeType":"YulFunctionCall","src":"95:13:35"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"86:5:35"}]},{"body":{"nodeType":"YulBlock","src":"171:16:35","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"180:1:35","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"183:1:35","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"173:6:35"},"nodeType":"YulFunctionCall","src":"173:12:35"},"nodeType":"YulExpressionStatement","src":"173:12:35"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"130:5:35"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"141:5:35"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"156:3:35","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"161:1:35","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"152:3:35"},"nodeType":"YulFunctionCall","src":"152:11:35"},{"kind":"number","nodeType":"YulLiteral","src":"165:1:35","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"148:3:35"},"nodeType":"YulFunctionCall","src":"148:19:35"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"137:3:35"},"nodeType":"YulFunctionCall","src":"137:31:35"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"127:2:35"},"nodeType":"YulFunctionCall","src":"127:42:35"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"120:6:35"},"nodeType":"YulFunctionCall","src":"120:50:35"},"nodeType":"YulIf","src":"117:2:35"}]},"name":"abi_decode_t_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"55:6:35","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"66:5:35","type":""}],"src":"14:179:35"},{"body":{"nodeType":"YulBlock","src":"279:139:35","statements":[{"body":{"nodeType":"YulBlock","src":"325:26:35","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"334:6:35"},{"name":"value0","nodeType":"YulIdentifier","src":"342:6:35"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"327:6:35"},"nodeType":"YulFunctionCall","src":"327:22:35"},"nodeType":"YulExpressionStatement","src":"327:22:35"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"300:7:35"},{"name":"headStart","nodeType":"YulIdentifier","src":"309:9:35"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"296:3:35"},"nodeType":"YulFunctionCall","src":"296:23:35"},{"kind":"number","nodeType":"YulLiteral","src":"321:2:35","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"292:3:35"},"nodeType":"YulFunctionCall","src":"292:32:35"},"nodeType":"YulIf","src":"289:2:35"},{"nodeType":"YulAssignment","src":"360:52:35","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"402:9:35"}],"functionName":{"name":"abi_decode_t_address_fromMemory","nodeType":"YulIdentifier","src":"370:31:35"},"nodeType":"YulFunctionCall","src":"370:42:35"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"360:6:35"}]}]},"name":"abi_decode_tuple_t_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"245:9:35","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"256:7:35","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"268:6:35","type":""}],"src":"198:220:35"},{"body":{"nodeType":"YulBlock","src":"605:642:35","statements":[{"body":{"nodeType":"YulBlock","src":"652:26:35","statements":[{"expression":{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"661:6:35"},{"name":"value4","nodeType":"YulIdentifier","src":"669:6:35"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"654:6:35"},"nodeType":"YulFunctionCall","src":"654:22:35"},"nodeType":"YulExpressionStatement","src":"654:22:35"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"626:7:35"},{"name":"headStart","nodeType":"YulIdentifier","src":"635:9:35"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"622:3:35"},"nodeType":"YulFunctionCall","src":"622:23:35"},{"kind":"number","nodeType":"YulLiteral","src":"647:3:35","type":"","value":"224"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"618:3:35"},"nodeType":"YulFunctionCall","src":"618:33:35"},"nodeType":"YulIf","src":"615:2:35"},{"nodeType":"YulAssignment","src":"687:52:35","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"729:9:35"}],"functionName":{"name":"abi_decode_t_address_fromMemory","nodeType":"YulIdentifier","src":"697:31:35"},"nodeType":"YulFunctionCall","src":"697:42:35"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"687:6:35"}]},{"nodeType":"YulAssignment","src":"748:61:35","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"794:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"805:2:35","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"790:3:35"},"nodeType":"YulFunctionCall","src":"790:18:35"}],"functionName":{"name":"abi_decode_t_address_fromMemory","nodeType":"YulIdentifier","src":"758:31:35"},"nodeType":"YulFunctionCall","src":"758:51:35"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"748:6:35"}]},{"nodeType":"YulAssignment","src":"818:61:35","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"864:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"875:2:35","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"860:3:35"},"nodeType":"YulFunctionCall","src":"860:18:35"}],"functionName":{"name":"abi_decode_t_address_fromMemory","nodeType":"YulIdentifier","src":"828:31:35"},"nodeType":"YulFunctionCall","src":"828:51:35"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"818:6:35"}]},{"nodeType":"YulAssignment","src":"888:61:35","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"934:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"945:2:35","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"930:3:35"},"nodeType":"YulFunctionCall","src":"930:18:35"}],"functionName":{"name":"abi_decode_t_address_fromMemory","nodeType":"YulIdentifier","src":"898:31:35"},"nodeType":"YulFunctionCall","src":"898:51:35"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"888:6:35"}]},{"nodeType":"YulVariableDeclaration","src":"958:39:35","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"981:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"992:3:35","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"977:3:35"},"nodeType":"YulFunctionCall","src":"977:19:35"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"971:5:35"},"nodeType":"YulFunctionCall","src":"971:26:35"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"962:5:35","type":""}]},{"body":{"nodeType":"YulBlock","src":"1049:26:35","statements":[{"expression":{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"1058:6:35"},{"name":"value4","nodeType":"YulIdentifier","src":"1066:6:35"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1051:6:35"},"nodeType":"YulFunctionCall","src":"1051:22:35"},"nodeType":"YulExpressionStatement","src":"1051:22:35"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1019:5:35"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1030:5:35"},{"kind":"number","nodeType":"YulLiteral","src":"1037:8:35","type":"","value":"0xffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1026:3:35"},"nodeType":"YulFunctionCall","src":"1026:20:35"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1016:2:35"},"nodeType":"YulFunctionCall","src":"1016:31:35"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1009:6:35"},"nodeType":"YulFunctionCall","src":"1009:39:35"},"nodeType":"YulIf","src":"1006:2:35"},{"nodeType":"YulAssignment","src":"1084:15:35","value":{"name":"value","nodeType":"YulIdentifier","src":"1094:5:35"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"1084:6:35"}]},{"nodeType":"YulAssignment","src":"1108:62:35","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1154:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"1165:3:35","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1150:3:35"},"nodeType":"YulFunctionCall","src":"1150:19:35"}],"functionName":{"name":"abi_decode_t_address_fromMemory","nodeType":"YulIdentifier","src":"1118:31:35"},"nodeType":"YulFunctionCall","src":"1118:52:35"},"variableNames":[{"name":"value5","nodeType":"YulIdentifier","src":"1108:6:35"}]},{"nodeType":"YulAssignment","src":"1179:62:35","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1225:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"1236:3:35","type":"","value":"192"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1221:3:35"},"nodeType":"YulFunctionCall","src":"1221:19:35"}],"functionName":{"name":"abi_decode_t_address_fromMemory","nodeType":"YulIdentifier","src":"1189:31:35"},"nodeType":"YulFunctionCall","src":"1189:52:35"},"variableNames":[{"name":"value6","nodeType":"YulIdentifier","src":"1179:6:35"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_addresst_addresst_uint24t_addresst_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"523:9:35","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"534:7:35","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"546:6:35","type":""},{"name":"value1","nodeType":"YulTypedName","src":"554:6:35","type":""},{"name":"value2","nodeType":"YulTypedName","src":"562:6:35","type":""},{"name":"value3","nodeType":"YulTypedName","src":"570:6:35","type":""},{"name":"value4","nodeType":"YulTypedName","src":"578:6:35","type":""},{"name":"value5","nodeType":"YulTypedName","src":"586:6:35","type":""},{"name":"value6","nodeType":"YulTypedName","src":"594:6:35","type":""}],"src":"423:824:35"},{"body":{"nodeType":"YulBlock","src":"1331:218:35","statements":[{"body":{"nodeType":"YulBlock","src":"1377:26:35","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1386:6:35"},{"name":"value0","nodeType":"YulIdentifier","src":"1394:6:35"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1379:6:35"},"nodeType":"YulFunctionCall","src":"1379:22:35"},"nodeType":"YulExpressionStatement","src":"1379:22:35"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1352:7:35"},{"name":"headStart","nodeType":"YulIdentifier","src":"1361:9:35"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1348:3:35"},"nodeType":"YulFunctionCall","src":"1348:23:35"},{"kind":"number","nodeType":"YulLiteral","src":"1373:2:35","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1344:3:35"},"nodeType":"YulFunctionCall","src":"1344:32:35"},"nodeType":"YulIf","src":"1341:2:35"},{"nodeType":"YulVariableDeclaration","src":"1412:29:35","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1431:9:35"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1425:5:35"},"nodeType":"YulFunctionCall","src":"1425:16:35"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"1416:5:35","type":""}]},{"body":{"nodeType":"YulBlock","src":"1493:26:35","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1502:6:35"},{"name":"value0","nodeType":"YulIdentifier","src":"1510:6:35"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1495:6:35"},"nodeType":"YulFunctionCall","src":"1495:22:35"},"nodeType":"YulExpressionStatement","src":"1495:22:35"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1463:5:35"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1481:1:35","type":"","value":"2"},{"name":"value","nodeType":"YulIdentifier","src":"1484:5:35"}],"functionName":{"name":"signextend","nodeType":"YulIdentifier","src":"1470:10:35"},"nodeType":"YulFunctionCall","src":"1470:20:35"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1460:2:35"},"nodeType":"YulFunctionCall","src":"1460:31:35"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1453:6:35"},"nodeType":"YulFunctionCall","src":"1453:39:35"},"nodeType":"YulIf","src":"1450:2:35"},{"nodeType":"YulAssignment","src":"1528:15:35","value":{"name":"value","nodeType":"YulIdentifier","src":"1538:5:35"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1528:6:35"}]}]},"name":"abi_decode_tuple_t_int24_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1297:9:35","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1308:7:35","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1320:6:35","type":""}],"src":"1252:297:35"},{"body":{"nodeType":"YulBlock","src":"1633:214:35","statements":[{"body":{"nodeType":"YulBlock","src":"1679:26:35","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1688:6:35"},{"name":"value0","nodeType":"YulIdentifier","src":"1696:6:35"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1681:6:35"},"nodeType":"YulFunctionCall","src":"1681:22:35"},"nodeType":"YulExpressionStatement","src":"1681:22:35"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1654:7:35"},{"name":"headStart","nodeType":"YulIdentifier","src":"1663:9:35"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1650:3:35"},"nodeType":"YulFunctionCall","src":"1650:23:35"},{"kind":"number","nodeType":"YulLiteral","src":"1675:2:35","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1646:3:35"},"nodeType":"YulFunctionCall","src":"1646:32:35"},"nodeType":"YulIf","src":"1643:2:35"},{"nodeType":"YulVariableDeclaration","src":"1714:29:35","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1733:9:35"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1727:5:35"},"nodeType":"YulFunctionCall","src":"1727:16:35"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"1718:5:35","type":""}]},{"body":{"nodeType":"YulBlock","src":"1791:26:35","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1800:6:35"},{"name":"value0","nodeType":"YulIdentifier","src":"1808:6:35"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1793:6:35"},"nodeType":"YulFunctionCall","src":"1793:22:35"},"nodeType":"YulExpressionStatement","src":"1793:22:35"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1765:5:35"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1776:5:35"},{"kind":"number","nodeType":"YulLiteral","src":"1783:4:35","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1772:3:35"},"nodeType":"YulFunctionCall","src":"1772:16:35"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1762:2:35"},"nodeType":"YulFunctionCall","src":"1762:27:35"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1755:6:35"},"nodeType":"YulFunctionCall","src":"1755:35:35"},"nodeType":"YulIf","src":"1752:2:35"},{"nodeType":"YulAssignment","src":"1826:15:35","value":{"name":"value","nodeType":"YulIdentifier","src":"1836:5:35"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1826:6:35"}]}]},"name":"abi_decode_tuple_t_uint8_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1599:9:35","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1610:7:35","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1622:6:35","type":""}],"src":"1554:293:35"},{"body":{"nodeType":"YulBlock","src":"2007:233:35","statements":[{"nodeType":"YulAssignment","src":"2017:26:35","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2029:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"2040:2:35","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2025:3:35"},"nodeType":"YulFunctionCall","src":"2025:18:35"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2017:4:35"}]},{"nodeType":"YulVariableDeclaration","src":"2052:29:35","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2070:3:35","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"2075:1:35","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2066:3:35"},"nodeType":"YulFunctionCall","src":"2066:11:35"},{"kind":"number","nodeType":"YulLiteral","src":"2079:1:35","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2062:3:35"},"nodeType":"YulFunctionCall","src":"2062:19:35"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"2056:2:35","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2097:9:35"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2112:6:35"},{"name":"_1","nodeType":"YulIdentifier","src":"2120:2:35"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2108:3:35"},"nodeType":"YulFunctionCall","src":"2108:15:35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2090:6:35"},"nodeType":"YulFunctionCall","src":"2090:34:35"},"nodeType":"YulExpressionStatement","src":"2090:34:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2144:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"2155:2:35","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2140:3:35"},"nodeType":"YulFunctionCall","src":"2140:18:35"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"2164:6:35"},{"name":"_1","nodeType":"YulIdentifier","src":"2172:2:35"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2160:3:35"},"nodeType":"YulFunctionCall","src":"2160:15:35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2133:6:35"},"nodeType":"YulFunctionCall","src":"2133:43:35"},"nodeType":"YulExpressionStatement","src":"2133:43:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2196:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"2207:2:35","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2192:3:35"},"nodeType":"YulFunctionCall","src":"2192:18:35"},{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"2216:6:35"},{"kind":"number","nodeType":"YulLiteral","src":"2224:8:35","type":"","value":"0xffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2212:3:35"},"nodeType":"YulFunctionCall","src":"2212:21:35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2185:6:35"},"nodeType":"YulFunctionCall","src":"2185:49:35"},"nodeType":"YulExpressionStatement","src":"2185:49:35"}]},"name":"abi_encode_tuple_t_address_t_address_t_uint24__to_t_address_t_address_t_uint24__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1960:9:35","type":""},{"name":"value2","nodeType":"YulTypedName","src":"1971:6:35","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1979:6:35","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1987:6:35","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1998:4:35","type":""}],"src":"1852:388:35"},{"body":{"nodeType":"YulBlock","src":"2419:224:35","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2436:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"2447:2:35","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2429:6:35"},"nodeType":"YulFunctionCall","src":"2429:21:35"},"nodeType":"YulExpressionStatement","src":"2429:21:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2470:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"2481:2:35","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2466:3:35"},"nodeType":"YulFunctionCall","src":"2466:18:35"},{"kind":"number","nodeType":"YulLiteral","src":"2486:2:35","type":"","value":"34"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2459:6:35"},"nodeType":"YulFunctionCall","src":"2459:30:35"},"nodeType":"YulExpressionStatement","src":"2459:30:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2509:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"2520:2:35","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2505:3:35"},"nodeType":"YulFunctionCall","src":"2505:18:35"},{"kind":"string","nodeType":"YulLiteral","src":"2525:34:35","type":"","value":"Token1 does not support decimals"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2498:6:35"},"nodeType":"YulFunctionCall","src":"2498:62:35"},"nodeType":"YulExpressionStatement","src":"2498:62:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2580:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"2591:2:35","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2576:3:35"},"nodeType":"YulFunctionCall","src":"2576:18:35"},{"kind":"string","nodeType":"YulLiteral","src":"2596:4:35","type":"","value":"()"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2569:6:35"},"nodeType":"YulFunctionCall","src":"2569:32:35"},"nodeType":"YulExpressionStatement","src":"2569:32:35"},{"nodeType":"YulAssignment","src":"2610:27:35","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2622:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"2633:3:35","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2618:3:35"},"nodeType":"YulFunctionCall","src":"2618:19:35"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2610:4:35"}]}]},"name":"abi_encode_tuple_t_stringliteral_1a7fec9648706a07f007a7b8cfb0532c4d975c09980513eb1cfb7916bca8e585__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2396:9:35","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2410:4:35","type":""}],"src":"2245:398:35"},{"body":{"nodeType":"YulBlock","src":"2822:169:35","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2839:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"2850:2:35","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2832:6:35"},"nodeType":"YulFunctionCall","src":"2832:21:35"},"nodeType":"YulExpressionStatement","src":"2832:21:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2873:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"2884:2:35","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2869:3:35"},"nodeType":"YulFunctionCall","src":"2869:18:35"},{"kind":"number","nodeType":"YulLiteral","src":"2889:2:35","type":"","value":"19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2862:6:35"},"nodeType":"YulFunctionCall","src":"2862:30:35"},"nodeType":"YulExpressionStatement","src":"2862:30:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2912:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"2923:2:35","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2908:3:35"},"nodeType":"YulFunctionCall","src":"2908:18:35"},{"kind":"string","nodeType":"YulLiteral","src":"2928:21:35","type":"","value":"Pool does not exist"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2901:6:35"},"nodeType":"YulFunctionCall","src":"2901:49:35"},"nodeType":"YulExpressionStatement","src":"2901:49:35"},{"nodeType":"YulAssignment","src":"2959:26:35","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2971:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"2982:2:35","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2967:3:35"},"nodeType":"YulFunctionCall","src":"2967:18:35"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2959:4:35"}]}]},"name":"abi_encode_tuple_t_stringliteral_5431fb1d188dcb2accc598cd1f0bfc0c6d8ac1fdd8f589953b20179c9a903b37__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2799:9:35","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2813:4:35","type":""}],"src":"2648:343:35"},{"body":{"nodeType":"YulBlock","src":"3170:224:35","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3187:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"3198:2:35","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3180:6:35"},"nodeType":"YulFunctionCall","src":"3180:21:35"},"nodeType":"YulExpressionStatement","src":"3180:21:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3221:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"3232:2:35","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3217:3:35"},"nodeType":"YulFunctionCall","src":"3217:18:35"},{"kind":"number","nodeType":"YulLiteral","src":"3237:2:35","type":"","value":"34"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3210:6:35"},"nodeType":"YulFunctionCall","src":"3210:30:35"},"nodeType":"YulExpressionStatement","src":"3210:30:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3260:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"3271:2:35","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3256:3:35"},"nodeType":"YulFunctionCall","src":"3256:18:35"},{"kind":"string","nodeType":"YulLiteral","src":"3276:34:35","type":"","value":"Token0 does not support decimals"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3249:6:35"},"nodeType":"YulFunctionCall","src":"3249:62:35"},"nodeType":"YulExpressionStatement","src":"3249:62:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3331:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"3342:2:35","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3327:3:35"},"nodeType":"YulFunctionCall","src":"3327:18:35"},{"kind":"string","nodeType":"YulLiteral","src":"3347:4:35","type":"","value":"()"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3320:6:35"},"nodeType":"YulFunctionCall","src":"3320:32:35"},"nodeType":"YulExpressionStatement","src":"3320:32:35"},{"nodeType":"YulAssignment","src":"3361:27:35","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3373:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"3384:3:35","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3369:3:35"},"nodeType":"YulFunctionCall","src":"3369:19:35"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3361:4:35"}]}]},"name":"abi_encode_tuple_t_stringliteral_661d8ba06e4fe11f48d275e6363a31b01958af1680fc61f9e1e59f57f2f459e5__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3147:9:35","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3161:4:35","type":""}],"src":"2996:398:35"}]},"contents":"{\n    { }\n    function abi_decode_t_address_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := abi_decode_t_address_fromMemory(headStart)\n    }\n    function abi_decode_tuple_t_addresst_addresst_addresst_addresst_uint24t_addresst_address_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6\n    {\n        if slt(sub(dataEnd, headStart), 224) { revert(value4, value4) }\n        value0 := abi_decode_t_address_fromMemory(headStart)\n        value1 := abi_decode_t_address_fromMemory(add(headStart, 32))\n        value2 := abi_decode_t_address_fromMemory(add(headStart, 64))\n        value3 := abi_decode_t_address_fromMemory(add(headStart, 96))\n        let value := mload(add(headStart, 128))\n        if iszero(eq(value, and(value, 0xffffff))) { revert(value4, value4) }\n        value4 := value\n        value5 := abi_decode_t_address_fromMemory(add(headStart, 160))\n        value6 := abi_decode_t_address_fromMemory(add(headStart, 192))\n    }\n    function abi_decode_tuple_t_int24_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let value := mload(headStart)\n        if iszero(eq(value, signextend(2, value))) { revert(value0, value0) }\n        value0 := value\n    }\n    function abi_decode_tuple_t_uint8_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let value := mload(headStart)\n        if iszero(eq(value, and(value, 0xff))) { revert(value0, value0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint24__to_t_address_t_address_t_uint24__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), and(value2, 0xffffff))\n    }\n    function abi_encode_tuple_t_stringliteral_1a7fec9648706a07f007a7b8cfb0532c4d975c09980513eb1cfb7916bca8e585__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 34)\n        mstore(add(headStart, 64), \"Token1 does not support decimals\")\n        mstore(add(headStart, 96), \"()\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_5431fb1d188dcb2accc598cd1f0bfc0c6d8ac1fdd8f589953b20179c9a903b37__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 19)\n        mstore(add(headStart, 64), \"Pool does not exist\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_661d8ba06e4fe11f48d275e6363a31b01958af1680fc61f9e1e59f57f2f459e5__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 34)\n        mstore(add(headStart, 64), \"Token0 does not support decimals\")\n        mstore(add(headStart, 96), \"()\")\n        tail := add(headStart, 128)\n    }\n}","id":35,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"","opcodes":"PUSH2 0x1A0 PUSH1 0x40 MSTORE PUSH1 0x4 DUP1 SLOAD PUSH3 0xFFFFFF NOT AND DUP2 OR SWAP1 SSTORE CALLVALUE DUP1 ISZERO PUSH3 0x20 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x3C59 CODESIZE SUB DUP1 PUSH3 0x3C59 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x43 SWAP2 PUSH3 0x932 JUMP JUMPDEST PUSH1 0x0 PUSH3 0x4F PUSH3 0x3CA JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 DUP2 OR DUP3 SSTORE PUSH1 0x40 MLOAD SWAP3 SWAP4 POP SWAP2 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0x3BD9 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 DUP3 SWAP1 LOG3 POP PUSH1 0x1 DUP1 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT PUSH1 0x60 DUP9 DUP2 SHL DUP3 AND PUSH1 0x80 MSTORE DUP8 DUP2 SHL DUP3 AND PUSH1 0xA0 MSTORE DUP7 DUP2 SHL DUP3 AND PUSH1 0xC0 MSTORE DUP6 DUP2 SHL DUP3 AND PUSH1 0xE0 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xE8 SHL SUB NOT PUSH1 0xE8 DUP7 SWAP1 SHL AND PUSH2 0x140 MSTORE DUP4 SWAP1 SHL AND PUSH2 0x180 MSTORE PUSH1 0x40 DUP1 MLOAD PUSH4 0x313CE567 PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND SWAP2 PUSH4 0x313CE567 SWAP2 PUSH1 0x4 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x113 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH3 0x146 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH3 0x143 SWAP2 DUP2 ADD SWAP1 PUSH3 0x9F1 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH3 0x16E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x165 SWAP1 PUSH3 0xAB5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT PUSH1 0xF8 SWAP2 SWAP1 SWAP2 SHL AND PUSH2 0x100 MSTORE DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x313CE567 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x1BC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH3 0x1EF JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH3 0x1EC SWAP2 DUP2 ADD SWAP1 PUSH3 0x9F1 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH3 0x20E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x165 SWAP1 PUSH3 0xA3C JUMP JUMPDEST PUSH1 0xF8 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND PUSH2 0x120 MSTORE PUSH1 0x40 MLOAD PUSH4 0xB4C7741 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND SWAP1 PUSH4 0x1698EE82 SWAP1 PUSH3 0x254 SWAP1 DUP10 SWAP1 DUP10 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH3 0xA14 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x26D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0x282 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0x2A8 SWAP2 SWAP1 PUSH3 0x915 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH3 0x2D3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x165 SWAP1 PUSH3 0xA7E JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD0C93A7C PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x30D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0x322 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0x348 SWAP2 SWAP1 PUSH3 0x9CE JUMP JUMPDEST PUSH1 0x2 SWAP1 DUP2 SIGNEXTEND SWAP1 SIGNEXTEND PUSH1 0xE8 SHL PUSH2 0x160 MSTORE PUSH3 0x37A PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP9 PUSH1 0x0 NOT PUSH3 0x3CE PUSH1 0x20 SWAP1 DUP2 SHL PUSH3 0x73B OR SWAP1 SHR JUMP JUMPDEST PUSH3 0x3A1 DUP8 PUSH1 0x0 NOT DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH3 0x3CE PUSH1 0x20 SHL PUSH3 0x73B OR SWAP1 SWAP3 SWAP2 SWAP1 PUSH1 0x20 SHR JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND ISZERO PUSH3 0x3BC JUMPI PUSH3 0x3BC DUP3 PUSH3 0x4F2 JUMP JUMPDEST POP POP POP POP POP POP POP POP PUSH3 0xAF7 JUMP JUMPDEST CALLER SWAP1 JUMP JUMPDEST DUP1 ISZERO DUP1 PUSH3 0x458 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH4 0x6EB1769F PUSH1 0xE1 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE SWAP2 MLOAD SWAP2 DUP6 AND SWAP2 PUSH4 0xDD62ED3E SWAP2 PUSH1 0x44 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x428 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0x43D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH3 0x454 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD ISZERO JUMPDEST PUSH3 0x495 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x36 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH3 0x3C23 PUSH1 0x36 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP1 DUP3 ADD DUP5 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB SWAP1 DUP2 AND PUSH4 0x95EA7B3 PUSH1 0xE0 SHL OR SWAP1 SWAP2 MSTORE PUSH3 0x4ED SWAP2 DUP6 SWAP2 PUSH3 0x5FC AND JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH3 0x4FC PUSH3 0x3CA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH3 0x50F PUSH3 0x6B8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH3 0x56B JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH3 0x5B2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH3 0x3B8D PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND SWAP4 SWAP3 AND SWAP2 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0x3BD9 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP2 LOG3 PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH3 0x658 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH3 0x6C7 PUSH1 0x20 SHL PUSH3 0x853 OR SWAP1 SWAP3 SWAP2 SWAP1 PUSH1 0x20 SHR JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP ISZERO PUSH3 0x4ED JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH1 0x20 DUP2 LT ISZERO PUSH3 0x679 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH3 0x4ED JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2A DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH3 0x3BF9 PUSH1 0x2A SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH3 0x6D8 DUP5 DUP5 PUSH1 0x0 DUP6 PUSH3 0x6E2 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH3 0x725 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH3 0x3BB3 PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH3 0x730 DUP6 PUSH3 0x849 JUMP JUMPDEST PUSH3 0x782 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP8 PUSH1 0x40 MLOAD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH3 0x7C2 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH3 0x7A1 JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH3 0x826 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH3 0x82B JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH3 0x83E DUP3 DUP3 DUP7 PUSH3 0x853 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST DUP1 EXTCODESIZE ISZERO ISZERO JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH3 0x864 JUMPI POP DUP2 PUSH3 0x6DB JUMP JUMPDEST DUP3 MLOAD ISZERO PUSH3 0x875 JUMPI DUP3 MLOAD DUP1 DUP5 PUSH1 0x20 ADD REVERT JUMPDEST DUP2 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0x8C1 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH3 0x8A7 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH3 0x8EF JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x84E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x927 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH3 0x6DB DUP3 PUSH3 0x8FD JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xE0 DUP9 DUP11 SUB SLT ISZERO PUSH3 0x94D JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH3 0x958 DUP9 PUSH3 0x8FD JUMP JUMPDEST SWAP7 POP PUSH3 0x968 PUSH1 0x20 DUP10 ADD PUSH3 0x8FD JUMP JUMPDEST SWAP6 POP PUSH3 0x978 PUSH1 0x40 DUP10 ADD PUSH3 0x8FD JUMP JUMPDEST SWAP5 POP PUSH3 0x988 PUSH1 0x60 DUP10 ADD PUSH3 0x8FD JUMP JUMPDEST SWAP4 POP PUSH1 0x80 DUP9 ADD MLOAD PUSH3 0xFFFFFF DUP2 AND DUP2 EQ PUSH3 0x9A0 JUMPI DUP4 DUP5 REVERT JUMPDEST SWAP3 POP PUSH3 0x9B0 PUSH1 0xA0 DUP10 ADD PUSH3 0x8FD JUMP JUMPDEST SWAP2 POP PUSH3 0x9C0 PUSH1 0xC0 DUP10 ADD PUSH3 0x8FD JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 SWAP9 SWAP2 SWAP5 SWAP8 POP SWAP3 SWAP6 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x9E0 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD DUP1 PUSH1 0x2 SIGNEXTEND DUP2 EQ PUSH3 0x6DB JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0xA03 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH3 0x6DB JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH3 0xFFFFFF SWAP1 SWAP2 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x22 SWAP1 DUP3 ADD MSTORE PUSH32 0x546F6B656E3120646F6573206E6F7420737570706F727420646563696D616C73 PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x2829 PUSH1 0xF0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x13 SWAP1 DUP3 ADD MSTORE PUSH32 0x506F6F6C20646F6573206E6F7420657869737400000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x22 SWAP1 DUP3 ADD MSTORE PUSH32 0x546F6B656E3020646F6573206E6F7420737570706F727420646563696D616C73 PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x2829 PUSH1 0xF0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH1 0x60 SHR PUSH1 0xA0 MLOAD PUSH1 0x60 SHR PUSH1 0xC0 MLOAD PUSH1 0x60 SHR PUSH1 0xE0 MLOAD PUSH1 0x60 SHR PUSH2 0x100 MLOAD PUSH1 0xF8 SHR PUSH2 0x120 MLOAD PUSH1 0xF8 SHR PUSH2 0x140 MLOAD PUSH1 0xE8 SHR PUSH2 0x160 MLOAD PUSH1 0xE8 SHR PUSH2 0x180 MLOAD PUSH1 0x60 SHR PUSH2 0x2F1E PUSH3 0xC6F PUSH1 0x0 CODECOPY DUP1 PUSH2 0x360 MSTORE POP DUP1 PUSH2 0x4BD MSTORE DUP1 PUSH2 0x1137 MSTORE DUP1 PUSH2 0x1186 MSTORE DUP1 PUSH2 0x11B9 MSTORE DUP1 PUSH2 0x11DB MSTORE DUP1 PUSH2 0x11FC MSTORE DUP1 PUSH2 0x123C MSTORE DUP1 PUSH2 0x1268 MSTORE DUP1 PUSH2 0x1294 MSTORE DUP1 PUSH2 0x12BC MSTORE DUP1 PUSH2 0x12F4 MSTORE DUP1 PUSH2 0x1327 MSTORE DUP1 PUSH2 0x136A MSTORE DUP1 PUSH2 0x13AD MSTORE DUP1 PUSH2 0x13E2 MSTORE DUP1 PUSH2 0x141D MSTORE DUP1 PUSH2 0x1445 MSTORE POP DUP1 PUSH2 0x605 MSTORE DUP1 PUSH2 0xC42 MSTORE DUP1 PUSH2 0x1DA6 MSTORE POP DUP1 PUSH2 0x203 MSTORE DUP1 PUSH2 0xDB2 MSTORE DUP1 PUSH2 0xDFD MSTORE DUP1 PUSH2 0xE35 MSTORE DUP1 PUSH2 0xE85 MSTORE DUP1 PUSH2 0xF59 MSTORE DUP1 PUSH2 0xF8B MSTORE DUP1 PUSH2 0xFE7 MSTORE DUP1 PUSH2 0x1061 MSTORE POP DUP1 PUSH2 0x475 MSTORE DUP1 PUSH2 0xD8F MSTORE DUP1 PUSH2 0xDDC MSTORE DUP1 PUSH2 0xE59 MSTORE DUP1 PUSH2 0xEA6 MSTORE DUP1 PUSH2 0xF36 MSTORE DUP1 PUSH2 0xFAF MSTORE DUP1 PUSH2 0x100B MSTORE DUP1 PUSH2 0x103D MSTORE POP DUP1 PUSH2 0x4E1 MSTORE DUP1 PUSH2 0x5A1 MSTORE DUP1 PUSH2 0xC21 MSTORE DUP1 PUSH2 0x1530 MSTORE DUP1 PUSH2 0x1D77 MSTORE POP DUP1 PUSH2 0x227 MSTORE DUP1 PUSH2 0x567 MSTORE DUP1 PUSH2 0xC00 MSTORE DUP1 PUSH2 0x14A5 MSTORE DUP1 PUSH2 0x1D48 MSTORE POP DUP1 PUSH2 0x442 MSTORE DUP1 PUSH2 0x50E MSTORE DUP1 PUSH2 0x22B2 MSTORE DUP1 PUSH2 0x238B MSTORE DUP1 PUSH2 0x2432 MSTORE DUP1 PUSH2 0x24C6 MSTORE DUP1 PUSH2 0x2646 MSTORE POP DUP1 PUSH2 0x499 MSTORE DUP1 PUSH2 0xBD1 MSTORE POP PUSH2 0x2F1E PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x100 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xB31AC6E2 GT PUSH2 0x97 JUMPI DUP1 PUSH4 0xD3487997 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xD3487997 EQ PUSH2 0x1AF JUMPI DUP1 PUSH4 0xD534D636 EQ PUSH2 0x1C2 JUMPI DUP1 PUSH4 0xDDCA3F43 EQ PUSH2 0x1DB JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x1E3 JUMPI PUSH2 0x100 JUMP JUMPDEST DUP1 PUSH4 0xB31AC6E2 EQ PUSH2 0x182 JUMPI DUP1 PUSH4 0xC45A0155 EQ PUSH2 0x18A JUMPI DUP1 PUSH4 0xD0C93A7C EQ PUSH2 0x192 JUMPI DUP1 PUSH4 0xD21220A7 EQ PUSH2 0x1A7 JUMPI PUSH2 0x100 JUMP JUMPDEST DUP1 PUSH4 0x4AA4A4FC GT PUSH2 0xD3 JUMPI DUP1 PUSH4 0x4AA4A4FC EQ PUSH2 0x162 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x16A JUMPI DUP1 PUSH4 0x791B98BC EQ PUSH2 0x172 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x17A JUMPI PUSH2 0x100 JUMP JUMPDEST DUP1 PUSH4 0x1D31E7C EQ PUSH2 0x105 JUMPI DUP1 PUSH4 0xB77884D EQ PUSH2 0x123 JUMPI DUP1 PUSH4 0xDFE1681 EQ PUSH2 0x138 JUMPI DUP1 PUSH4 0x41675B05 EQ PUSH2 0x14D JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x10D PUSH2 0x1F6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x11A SWAP2 SWAP1 PUSH2 0x2D73 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x12B PUSH2 0x201 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x11A SWAP2 SWAP1 PUSH2 0x2DF5 JUMP JUMPDEST PUSH2 0x140 PUSH2 0x225 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x11A SWAP2 SWAP1 PUSH2 0x29AA JUMP JUMPDEST PUSH2 0x160 PUSH2 0x15B CALLDATASIZE PUSH1 0x4 PUSH2 0x2877 JUMP JUMPDEST PUSH2 0x249 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x140 PUSH2 0x35E JUMP JUMPDEST PUSH2 0x160 PUSH2 0x382 JUMP JUMPDEST PUSH2 0x140 PUSH2 0x440 JUMP JUMPDEST PUSH2 0x140 PUSH2 0x464 JUMP JUMPDEST PUSH2 0x12B PUSH2 0x473 JUMP JUMPDEST PUSH2 0x140 PUSH2 0x497 JUMP JUMPDEST PUSH2 0x19A PUSH2 0x4BB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x11A SWAP2 SWAP1 PUSH2 0x29E6 JUMP JUMPDEST PUSH2 0x140 PUSH2 0x4DF JUMP JUMPDEST PUSH2 0x160 PUSH2 0x1BD CALLDATASIZE PUSH1 0x4 PUSH2 0x2912 JUMP JUMPDEST PUSH2 0x503 JUMP JUMPDEST PUSH2 0x1CA PUSH2 0x5CE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x11A SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2D8C JUMP JUMPDEST PUSH2 0x10D PUSH2 0x603 JUMP JUMPDEST PUSH2 0x160 PUSH2 0x1F1 CALLDATASIZE PUSH1 0x4 PUSH2 0x279F JUMP JUMPDEST PUSH2 0x627 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH3 0xFFFFFF AND DUP2 JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SLOAD EQ ISZERO PUSH2 0x2A1 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x1 SSTORE PUSH2 0x2AE PUSH2 0x86C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x2BF PUSH2 0x464 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x31A JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x32B DUP7 PUSH2 0x870 JUMP JUMPDEST SWAP5 POP SWAP5 POP SWAP5 POP SWAP5 POP SWAP5 POP PUSH1 0x0 PUSH2 0x341 DUP4 DUP4 PUSH2 0x8B9 JUMP JUMPDEST SWAP1 POP PUSH2 0x351 DUP7 DUP9 DUP7 DUP7 DUP7 DUP7 PUSH2 0x925 JUMP JUMPDEST POP POP PUSH1 0x1 DUP1 SSTORE POP POP POP POP POP JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x38A PUSH2 0x86C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x39B PUSH2 0x464 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x3F6 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP4 SWAP1 LOG3 PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ PUSH2 0x554 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x54B SWAP1 PUSH2 0x2A47 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP4 ISZERO PUSH2 0x58E JUMPI PUSH2 0x58E PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND CALLER DUP7 PUSH2 0x970 JUMP JUMPDEST DUP3 ISZERO PUSH2 0x5C8 JUMPI PUSH2 0x5C8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND CALLER DUP6 PUSH2 0x970 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x2 DUP1 SLOAD PUSH1 0x3 SLOAD SWAP1 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP3 AND SWAP2 PUSH1 0x1 PUSH1 0x80 SHL DUP2 DIV DUP3 SIGNEXTEND SWAP2 PUSH1 0x1 PUSH1 0x98 SHL DUP3 DIV SWAP1 SIGNEXTEND SWAP1 PUSH1 0x1 PUSH1 0xB0 SHL SWAP1 DIV PUSH1 0xFF AND DUP6 JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x62F PUSH2 0x86C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x640 PUSH2 0x464 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x69B JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x6E0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x2E1C PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND SWAP4 SWAP3 AND SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 LOG3 PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST DUP1 ISZERO DUP1 PUSH2 0x7C1 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH4 0x6EB1769F PUSH1 0xE1 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE SWAP2 MLOAD SWAP2 DUP6 AND SWAP2 PUSH4 0xDD62ED3E SWAP2 PUSH1 0x44 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x793 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x7A7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x7BD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD ISZERO JUMPDEST PUSH2 0x7FC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x36 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x2EB3 PUSH1 0x36 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP1 DUP3 ADD DUP5 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0x95EA7B3 PUSH1 0xE0 SHL OR SWAP1 MSTORE PUSH2 0x84E SWAP1 DUP5 SWAP1 PUSH2 0x9BE JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x862 DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0xA6F JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST CALLER SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x883 PUSH2 0xBCA JUMP JUMPDEST SWAP7 POP SWAP2 POP DUP6 SWAP1 POP PUSH2 0x893 DUP3 PUSH2 0xD78 JUMP JUMPDEST SWAP7 POP PUSH2 0x89E DUP9 PUSH2 0xED5 JUMP JUMPDEST SWAP5 POP PUSH2 0x8A9 DUP6 PUSH2 0x1130 JUMP JUMPDEST SWAP1 SWAP5 POP SWAP3 POP POP POP SWAP2 SWAP4 SWAP6 SWAP1 SWAP3 SWAP5 POP JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0xB0 SHL SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 PUSH2 0x8E7 JUMPI POP PUSH1 0x3 SLOAD PUSH1 0x2 DUP5 DUP2 SIGNEXTEND PUSH1 0x1 PUSH1 0x80 SHL SWAP1 SWAP3 DIV DUP2 SIGNEXTEND SWAP1 SIGNEXTEND EQ ISZERO JUMPDEST DUP1 PUSH2 0x904 JUMPI POP PUSH1 0x3 SLOAD PUSH1 0x2 DUP4 DUP2 SIGNEXTEND PUSH1 0x1 PUSH1 0x98 SHL SWAP1 SWAP3 DIV DUP2 SIGNEXTEND SWAP1 SIGNEXTEND EQ ISZERO JUMPDEST ISZERO PUSH2 0x91B JUMPI PUSH2 0x913 DUP4 DUP4 PUSH2 0x1471 JUMP JUMPDEST POP PUSH1 0x1 PUSH2 0x91F JUMP JUMPDEST POP PUSH1 0x0 JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x5422E969A24D0B1E269860D579E64358E9DE3DF58E771549E1F5310C2EE2E562 TIMESTAMP DUP8 DUP8 DUP8 DUP8 DUP8 DUP8 PUSH1 0x40 MLOAD PUSH2 0x960 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2DBE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP1 DUP3 ADD DUP5 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0xA9059CBB PUSH1 0xE0 SHL OR SWAP1 MSTORE PUSH2 0x84E SWAP1 DUP5 SWAP1 JUMPDEST PUSH1 0x0 PUSH2 0xA13 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x853 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0x84E JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xA32 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH2 0x84E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2A DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x2E89 PUSH1 0x2A SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0xAB0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x2E42 PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xAB9 DUP6 PUSH2 0x1633 JUMP JUMPDEST PUSH2 0xB0A JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP8 PUSH1 0x40 MLOAD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0xB48 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0xB29 JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0xBAA JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xBAF JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0xBBF DUP3 DUP3 DUP7 PUSH2 0x1639 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x1698EE82 PUSH32 0x0 PUSH32 0x0 PUSH32 0x0 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC7F SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x29BE JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xC97 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xCAB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xCCF SWAP2 SWAP1 PUSH2 0x27BB JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xCF7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x54B SWAP1 PUSH2 0x2B31 JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x3850C7BD PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0xE0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xD30 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xD44 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xD68 SWAP2 SWAP1 PUSH2 0x27D7 JUMP JUMPDEST POP SWAP5 SWAP9 SWAP4 SWAP8 POP SWAP3 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP1 MUL PUSH1 0xC0 DUP2 SWAP1 SHR PUSH1 0xFF PUSH32 0x0 DUP2 AND PUSH32 0x0 SWAP1 SWAP2 AND GT ISZERO PUSH2 0xE33 JUMPI PUSH32 0x0 PUSH32 0x0 SUB PUSH1 0xFF AND PUSH1 0xA EXP DUP2 DUP2 PUSH2 0xE2B JUMPI INVALID JUMPDEST DIV SWAP1 POP PUSH2 0xECC JUMP JUMPDEST PUSH32 0x0 PUSH1 0xFF AND PUSH32 0x0 PUSH1 0xFF AND GT ISZERO PUSH2 0xECC JUMPI PUSH1 0xFF PUSH32 0x0 PUSH32 0x0 SUB AND PUSH1 0xA EXP MUL JUMPDEST SWAP2 POP POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 GT PUSH2 0xEF6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x54B SWAP1 PUSH2 0x29F4 JUMP JUMPDEST PUSH1 0x0 PUSH5 0xE8D4A51000 DUP4 GT ISZERO PUSH2 0xF25 JUMPI PUSH2 0xF1E PUSH15 0xC097CE7BC90715B34B9F1000000000 DUP5 PUSH2 0x16DD JUMP JUMPDEST SWAP1 POP PUSH2 0xF28 JUMP JUMPDEST POP DUP2 JUMPDEST DUP1 PUSH8 0xDE0B6B3A7640000 PUSH1 0xFF PUSH32 0x0 DUP2 AND PUSH32 0x0 SWAP1 SWAP2 AND GT ISZERO PUSH2 0xFE5 JUMPI PUSH2 0xFDE PUSH2 0xFD4 PUSH1 0xFF PUSH32 0x0 DUP2 AND SWAP1 PUSH32 0x0 AND PUSH2 0x1744 JUMP JUMPDEST DUP4 SWAP1 PUSH1 0xA EXP PUSH2 0x17A1 JUMP JUMPDEST SWAP2 POP PUSH2 0x1093 JUMP JUMPDEST PUSH32 0x0 PUSH1 0xFF AND PUSH32 0x0 PUSH1 0xFF AND GT ISZERO PUSH2 0x1093 JUMPI PUSH2 0x1090 PUSH2 0x1086 PUSH1 0xFF PUSH32 0x0 DUP2 AND SWAP1 PUSH32 0x0 AND PUSH2 0x1744 JUMP JUMPDEST DUP3 SWAP1 PUSH1 0xA EXP PUSH2 0x17A1 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x0 PUSH2 0x10AD DUP3 PUSH2 0x10A7 DUP6 PUSH1 0x1 PUSH1 0xC0 SHL PUSH2 0x17A1 JUMP JUMPDEST SWAP1 PUSH2 0x16DD JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x10BA DUP3 PUSH2 0x17FA JUMP JUMPDEST SWAP1 POP PUSH5 0x1000276A3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND LT ISZERO PUSH2 0x10EA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x54B SWAP1 PUSH2 0x2B8B JUMP JUMPDEST PUSH20 0xFFFD8963EFD1FC6A506488495D951D5263988D26 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND GT ISZERO PUSH2 0x1127 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x54B SWAP1 PUSH2 0x2A1F JUMP JUMPDEST PUSH2 0xBBF DUP2 PUSH2 0x18DC JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH32 0x0 PUSH1 0x2 SIGNEXTEND SGT PUSH2 0x1176 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x54B SWAP1 PUSH2 0x2B5D JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x0 SWAP1 PUSH1 0x2 SWAP1 PUSH3 0xFFFFFF AND PUSH32 0x0 MUL DUP2 SIGNEXTEND SDIV SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x2 SIGNEXTEND SGT PUSH2 0x11D9 JUMPI POP PUSH32 0x0 JUMPDEST PUSH32 0x0 PUSH32 0x0 PUSH1 0x2 SIGNEXTEND DUP3 PUSH1 0x2 SIGNEXTEND DUP2 PUSH2 0x1229 JUMPI INVALID JUMPDEST SDIV MUL SWAP1 POP DUP1 PUSH1 0x2 SIGNEXTEND PUSH1 0x0 EQ ISZERO PUSH2 0x125C JUMPI POP PUSH32 0x0 JUMPDEST DUP1 DUP5 SUB DUP5 DUP3 ADD PUSH2 0x128C DUP3 PUSH32 0x0 PUSH2 0x1BFB JUMP JUMPDEST SWAP5 POP PUSH2 0x12B8 DUP2 PUSH32 0x0 PUSH2 0x1BFB JUMP JUMPDEST SWAP4 POP PUSH32 0x0 PUSH1 0x2 SIGNEXTEND DUP2 PUSH1 0x2 SIGNEXTEND DUP2 PUSH2 0x12E9 JUMPI INVALID JUMPDEST SMOD PUSH1 0x2 SIGNEXTEND ISZERO PUSH2 0x1318 JUMPI PUSH32 0x0 DUP5 ADD SWAP4 POP JUMPDEST DUP4 PUSH1 0x2 SIGNEXTEND DUP6 PUSH1 0x2 SIGNEXTEND SLT PUSH2 0x134B JUMPI PUSH32 0x0 DUP6 ADD SWAP4 POP JUMPDEST PUSH3 0xD89E7 NOT PUSH1 0x2 DUP7 SWAP1 SIGNEXTEND SLT PUSH2 0x1360 JUMPI DUP5 PUSH2 0x138E JUMP JUMPDEST PUSH2 0x138E PUSH3 0xD89E7 NOT PUSH32 0x0 PUSH2 0x1BFB JUMP JUMPDEST SWAP5 POP PUSH3 0xD89E8 PUSH1 0x2 DUP6 SWAP1 SIGNEXTEND SGT PUSH2 0x13A4 JUMPI DUP4 PUSH2 0x13D1 JUMP JUMPDEST PUSH2 0x13D1 PUSH3 0xD89E8 PUSH32 0x0 PUSH2 0x1BFB JUMP JUMPDEST SWAP4 POP DUP4 PUSH1 0x2 SIGNEXTEND DUP6 PUSH1 0x2 SIGNEXTEND SLT PUSH2 0x1469 JUMPI PUSH32 0x0 DUP6 ADD SWAP4 POP PUSH3 0xD89E8 PUSH1 0x2 DUP6 SWAP1 SIGNEXTEND SGT ISZERO PUSH2 0x1469 JUMPI PUSH2 0x1441 PUSH3 0xD89E8 PUSH32 0x0 PUSH2 0x1BFB JUMP JUMPDEST SWAP4 POP PUSH32 0x0 DUP5 SUB SWAP5 POP JUMPDEST POP POP POP SWAP2 POP SWAP2 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0xB0 SHL SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x148B JUMPI PUSH2 0x148B PUSH2 0x1C6A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH2 0x14DA SWAP1 ADDRESS SWAP1 PUSH1 0x4 ADD PUSH2 0x29AA JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x14F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1506 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x152A SWAP2 SWAP1 PUSH2 0x288F JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x70A08231 ADDRESS PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x157A SWAP2 SWAP1 PUSH2 0x29AA JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1592 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x15A6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x15CA SWAP2 SWAP1 PUSH2 0x288F JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP3 GT DUP1 PUSH2 0x15DB JUMPI POP PUSH1 0x0 DUP2 GT JUMPDEST ISZERO PUSH2 0x15F1 JUMPI PUSH2 0x15EC DUP5 DUP5 DUP5 DUP5 PUSH2 0x1D0E JUMP JUMPDEST PUSH2 0x5C8 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xA0 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x80 ADD DUP2 SWAP1 MSTORE PUSH1 0x2 SSTORE PUSH1 0x3 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xB8 SHL SUB NOT AND SWAP1 SSTORE POP POP POP POP JUMP JUMPDEST EXTCODESIZE ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x1648 JUMPI POP DUP2 PUSH2 0x865 JUMP JUMPDEST DUP3 MLOAD ISZERO PUSH2 0x1658 JUMPI DUP3 MLOAD DUP1 DUP5 PUSH1 0x20 ADD REVERT JUMPDEST DUP2 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x16A2 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x168A JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x16CF JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP3 GT PUSH2 0x1733 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A206469766973696F6E206279207A65726F000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST DUP2 DUP4 DUP2 PUSH2 0x173C JUMPI INVALID JUMPDEST DIV SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x179B JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A207375627472616374696F6E206F766572666C6F770000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x17B0 JUMPI POP PUSH1 0x0 PUSH2 0x91F JUMP JUMPDEST DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 PUSH2 0x17BD JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x865 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x21 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x2E68 PUSH1 0x21 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x1809 JUMPI POP PUSH1 0x0 PUSH2 0xED0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH2 0x1816 DUP5 PUSH2 0x1E22 JUMP JUMPDEST PUSH1 0x1 SWAP2 SHR SHL SWAP1 POP DUP1 PUSH2 0x1826 JUMPI POP PUSH1 0x1 JUMPDEST PUSH1 0x0 PUSH2 0x1841 PUSH1 0x2 PUSH2 0x10A7 PUSH2 0x183A DUP8 DUP7 PUSH2 0x16DD JUMP JUMPDEST DUP6 SWAP1 PUSH2 0x1ECD JUMP JUMPDEST SWAP1 POP PUSH2 0x185C PUSH1 0x2 PUSH2 0x10A7 PUSH2 0x1855 DUP8 DUP6 PUSH2 0x16DD JUMP JUMPDEST DUP5 SWAP1 PUSH2 0x1ECD JUMP JUMPDEST SWAP1 POP PUSH2 0x1870 PUSH1 0x2 PUSH2 0x10A7 PUSH2 0x1855 DUP8 DUP6 PUSH2 0x16DD JUMP JUMPDEST SWAP1 POP PUSH2 0x1884 PUSH1 0x2 PUSH2 0x10A7 PUSH2 0x1855 DUP8 DUP6 PUSH2 0x16DD JUMP JUMPDEST SWAP1 POP PUSH2 0x1898 PUSH1 0x2 PUSH2 0x10A7 PUSH2 0x1855 DUP8 DUP6 PUSH2 0x16DD JUMP JUMPDEST SWAP1 POP PUSH2 0x18AC PUSH1 0x2 PUSH2 0x10A7 PUSH2 0x1855 DUP8 DUP6 PUSH2 0x16DD JUMP JUMPDEST SWAP1 POP PUSH2 0x18B8 DUP5 DUP3 PUSH2 0x16DD JUMP JUMPDEST DUP2 GT ISZERO PUSH2 0x18D3 JUMPI PUSH2 0x18CA DUP2 PUSH1 0x1 PUSH2 0x1744 JUMP JUMPDEST SWAP3 POP POP POP PUSH2 0xED0 JUMP JUMPDEST SWAP2 POP PUSH2 0xED0 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH5 0x1000276A3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND LT DUP1 ISZERO SWAP1 PUSH2 0x1918 JUMPI POP PUSH20 0xFFFD8963EFD1FC6A506488495D951D5263988D26 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND LT JUMPDEST PUSH2 0x194D JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0xF9 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH5 0x100000000 PUSH1 0x1 PUSH1 0xC0 SHL SUB PUSH1 0x20 DUP4 SWAP1 SHL AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP2 GT PUSH1 0x7 SHL DUP2 DUP2 SHR PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH1 0x6 SHL SWAP1 DUP2 SHR PUSH4 0xFFFFFFFF DUP2 GT PUSH1 0x5 SHL SWAP1 DUP2 SHR PUSH2 0xFFFF DUP2 GT PUSH1 0x4 SHL SWAP1 DUP2 SHR PUSH1 0xFF DUP2 GT PUSH1 0x3 SWAP1 DUP2 SHL SWAP2 DUP3 SHR PUSH1 0xF DUP2 GT PUSH1 0x2 SHL SWAP1 DUP2 SHR SWAP2 DUP3 GT PUSH1 0x1 SWAP1 DUP2 SHL SWAP3 DUP4 SHR SWAP8 SWAP1 DUP9 GT SWAP7 OR SWAP1 SWAP5 OR SWAP1 SWAP3 OR OR SWAP1 SWAP2 OR OR OR PUSH1 0x80 DUP2 LT PUSH2 0x19E1 JUMPI PUSH1 0x7F DUP2 SUB DUP4 SWAP1 SHR SWAP2 POP PUSH2 0x19EB JUMP JUMPDEST DUP1 PUSH1 0x7F SUB DUP4 SWAP1 SHL SWAP2 POP JUMPDEST SWAP1 DUP1 MUL PUSH1 0x7F DUP2 DUP2 SHR PUSH1 0xFF DUP4 DUP2 SHR SWAP2 SWAP1 SWAP2 SHR DUP1 MUL DUP1 DUP4 SHR DUP2 DUP4 SHR SHR DUP1 MUL DUP1 DUP5 SHR DUP2 DUP5 SHR SHR DUP1 MUL DUP1 DUP6 SHR DUP2 DUP6 SHR SHR DUP1 MUL DUP1 DUP7 SHR DUP2 DUP7 SHR SHR DUP1 MUL DUP1 DUP8 SHR DUP2 DUP8 SHR SHR DUP1 MUL DUP1 DUP9 SHR DUP2 DUP9 SHR SHR DUP1 MUL DUP1 DUP10 SHR DUP2 DUP10 SHR SHR DUP1 MUL DUP1 DUP11 SHR DUP2 DUP11 SHR SHR DUP1 MUL DUP1 DUP12 SHR DUP2 DUP12 SHR SHR DUP1 MUL DUP1 DUP13 SHR DUP2 DUP13 SHR SHR DUP1 MUL DUP1 DUP14 SHR DUP2 DUP14 SHR SHR DUP1 MUL DUP1 DUP15 SHR SWAP13 DUP2 SWAP1 SHR SWAP13 SWAP1 SWAP13 SHR DUP1 MUL SWAP13 DUP14 SWAP1 SHR SWAP15 SWAP14 PUSH1 0x7F NOT DUP16 ADD PUSH1 0x40 SHL PUSH1 0xC0 SWAP2 SWAP1 SWAP2 SHR PUSH8 0x8000000000000000 AND OR PUSH1 0xC1 SWAP12 SWAP1 SWAP12 SHR PUSH8 0x4000000000000000 AND SWAP11 SWAP1 SWAP11 OR PUSH1 0xC2 SWAP10 SWAP1 SWAP10 SHR PUSH8 0x2000000000000000 AND SWAP9 SWAP1 SWAP9 OR PUSH1 0xC3 SWAP8 SWAP1 SWAP8 SHR PUSH8 0x1000000000000000 AND SWAP7 SWAP1 SWAP7 OR PUSH1 0xC4 SWAP6 SWAP1 SWAP6 SHR PUSH8 0x800000000000000 AND SWAP5 SWAP1 SWAP5 OR PUSH1 0xC5 SWAP4 SWAP1 SWAP4 SHR PUSH8 0x400000000000000 AND SWAP3 SWAP1 SWAP3 OR PUSH1 0xC6 SWAP2 SWAP1 SWAP2 SHR PUSH8 0x200000000000000 AND OR PUSH1 0xC7 SWAP2 SWAP1 SWAP2 SHR PUSH8 0x100000000000000 AND OR PUSH1 0xC8 SWAP2 SWAP1 SWAP2 SHR PUSH7 0x80000000000000 AND OR PUSH1 0xC9 SWAP2 SWAP1 SWAP2 SHR PUSH7 0x40000000000000 AND OR PUSH1 0xCA SWAP2 SWAP1 SWAP2 SHR PUSH7 0x20000000000000 AND OR PUSH1 0xCB SWAP2 SWAP1 SWAP2 SHR PUSH7 0x10000000000000 AND OR PUSH1 0xCC SWAP2 SWAP1 SWAP2 SHR PUSH7 0x8000000000000 AND OR PUSH1 0xCD SWAP2 SWAP1 SWAP2 SHR PUSH7 0x4000000000000 AND OR PUSH10 0x3627A301D71055774C85 DUP2 MUL PUSH16 0x28F6481AB7F045A5AF012A19D003AA9 NOT DUP2 ADD PUSH1 0x80 SWAP1 DUP2 SAR SWAP1 PUSH16 0xDB2DF09E81959A81455E260799A0632F DUP4 ADD SWAP1 SAR PUSH1 0x2 DUP2 DUP2 SIGNEXTEND SWAP1 DUP4 SWAP1 SIGNEXTEND EQ PUSH2 0x1BEC JUMPI DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1BD0 DUP3 PUSH2 0x1F27 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GT ISZERO PUSH2 0x1BE5 JUMPI DUP2 PUSH2 0x1BE7 JUMP JUMPDEST DUP1 JUMPDEST PUSH2 0x1BEE JUMP JUMPDEST DUP2 JUMPDEST SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH1 0x2 SIGNEXTEND SGT PUSH2 0x1C1F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x54B SWAP1 PUSH2 0x2BB2 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x2 SIGNEXTEND DUP5 PUSH1 0x2 SIGNEXTEND DUP2 PUSH2 0x1C30 JUMPI INVALID JUMPDEST SDIV SWAP1 POP PUSH1 0x0 DUP5 PUSH1 0x2 SIGNEXTEND SLT DUP1 ISZERO PUSH2 0x1C57 JUMPI POP DUP3 PUSH1 0x2 SIGNEXTEND DUP5 PUSH1 0x2 SIGNEXTEND DUP2 PUSH2 0x1C50 JUMPI INVALID JUMPDEST SMOD PUSH1 0x2 SIGNEXTEND ISZERO ISZERO JUMPDEST ISZERO PUSH2 0x1C61 JUMPI PUSH1 0x0 NOT ADD JUMPDEST SWAP1 SWAP2 MUL SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0xB0 SHL SWAP1 DIV PUSH1 0xFF AND DUP1 ISZERO PUSH2 0x1C84 JUMPI POP PUSH1 0x2 SLOAD ISZERO ISZERO JUMPDEST PUSH2 0x1CA0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x54B SWAP1 PUSH2 0x2AAD JUMP JUMPDEST PUSH1 0x2 DUP1 SLOAD PUSH1 0x3 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0xA0 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x80 ADD DUP2 SWAP1 MSTORE DUP5 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xB8 SHL SUB NOT DUP2 AND SWAP1 SWAP2 SSTORE SWAP1 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP3 AND SWAP2 PUSH1 0x1 PUSH1 0x80 SHL DUP2 DIV DUP3 SIGNEXTEND SWAP2 PUSH1 0x1 PUSH1 0x98 SHL SWAP1 SWAP2 DIV SWAP1 SIGNEXTEND PUSH2 0x5C8 DUP5 DUP5 DUP5 DUP5 PUSH2 0x2259 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0xB0 SHL SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x1D38 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x54B SWAP1 PUSH2 0x2A76 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH2 0x160 ADD PUSH1 0x40 MSTORE DUP1 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x0 PUSH3 0xFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH1 0x2 SIGNEXTEND DUP2 MSTORE PUSH1 0x20 ADD DUP6 PUSH1 0x2 SIGNEXTEND DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD TIMESTAMP DUP2 MSTORE POP SWAP1 POP PUSH2 0x1E1B DUP2 DUP7 DUP7 PUSH2 0x24BC JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP1 PUSH2 0x1E2F JUMPI PUSH1 0x0 SWAP2 POP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP2 GT ISZERO PUSH2 0x1E46 JUMPI PUSH1 0x80 SWAP2 DUP3 ADD SWAP2 SHR JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1E5E JUMPI PUSH1 0x40 SWAP2 DUP3 ADD SWAP2 SHR JUMPDEST PUSH4 0xFFFFFFFF DUP2 GT ISZERO PUSH2 0x1E72 JUMPI PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 SHR JUMPDEST PUSH2 0xFFFF DUP2 GT ISZERO PUSH2 0x1E84 JUMPI PUSH1 0x10 SWAP2 DUP3 ADD SWAP2 SHR JUMPDEST PUSH1 0xFF DUP2 GT ISZERO PUSH2 0x1E95 JUMPI PUSH1 0x8 SWAP2 DUP3 ADD SWAP2 SHR JUMPDEST PUSH1 0xF DUP2 GT ISZERO PUSH2 0x1EA6 JUMPI PUSH1 0x4 SWAP2 DUP3 ADD SWAP2 SHR JUMPDEST PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x1EB7 JUMPI PUSH1 0x2 SWAP2 DUP3 ADD SWAP2 SHR JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x1EC7 JUMPI PUSH1 0x1 DUP3 ADD SWAP2 POP JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0x865 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 PUSH1 0x2 SIGNEXTEND SLT PUSH2 0x1F3E JUMPI DUP3 PUSH1 0x2 SIGNEXTEND PUSH2 0x1F46 JUMP JUMPDEST DUP3 PUSH1 0x2 SIGNEXTEND PUSH1 0x0 SUB JUMPDEST SWAP1 POP PUSH3 0xD89E8 DUP2 GT ISZERO PUSH2 0x1F84 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0xFA SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 AND PUSH2 0x1F98 JUMPI PUSH1 0x1 PUSH1 0x80 SHL PUSH2 0x1FAA JUMP JUMPDEST PUSH16 0xFFFCB933BD6FAD37AA2D162D1A594001 JUMPDEST PUSH17 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0x2 DUP3 AND ISZERO PUSH2 0x1FDE JUMPI PUSH16 0xFFF97272373D413259A46990580E213A MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x4 DUP3 AND ISZERO PUSH2 0x1FFD JUMPI PUSH16 0xFFF2E50F5F656932EF12357CF3C7FDCC MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x8 DUP3 AND ISZERO PUSH2 0x201C JUMPI PUSH16 0xFFE5CACA7E10E4E61C3624EAA0941CD0 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x10 DUP3 AND ISZERO PUSH2 0x203B JUMPI PUSH16 0xFFCB9843D60F6159C9DB58835C926644 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x20 DUP3 AND ISZERO PUSH2 0x205A JUMPI PUSH16 0xFF973B41FA98C081472E6896DFB254C0 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x40 DUP3 AND ISZERO PUSH2 0x2079 JUMPI PUSH16 0xFF2EA16466C96A3843EC78B326B52861 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x80 DUP3 AND ISZERO PUSH2 0x2098 JUMPI PUSH16 0xFE5DEE046A99A2A811C461F1969C3053 MUL PUSH1 0x80 SHR JUMPDEST PUSH2 0x100 DUP3 AND ISZERO PUSH2 0x20B8 JUMPI PUSH16 0xFCBE86C7900A88AEDCFFC83B479AA3A4 MUL PUSH1 0x80 SHR JUMPDEST PUSH2 0x200 DUP3 AND ISZERO PUSH2 0x20D8 JUMPI PUSH16 0xF987A7253AC413176F2B074CF7815E54 MUL PUSH1 0x80 SHR JUMPDEST PUSH2 0x400 DUP3 AND ISZERO PUSH2 0x20F8 JUMPI PUSH16 0xF3392B0822B70005940C7A398E4B70F3 MUL PUSH1 0x80 SHR JUMPDEST PUSH2 0x800 DUP3 AND ISZERO PUSH2 0x2118 JUMPI PUSH16 0xE7159475A2C29B7443B29C7FA6E889D9 MUL PUSH1 0x80 SHR JUMPDEST PUSH2 0x1000 DUP3 AND ISZERO PUSH2 0x2138 JUMPI PUSH16 0xD097F3BDFD2022B8845AD8F792AA5825 MUL PUSH1 0x80 SHR JUMPDEST PUSH2 0x2000 DUP3 AND ISZERO PUSH2 0x2158 JUMPI PUSH16 0xA9F746462D870FDF8A65DC1F90E061E5 MUL PUSH1 0x80 SHR JUMPDEST PUSH2 0x4000 DUP3 AND ISZERO PUSH2 0x2178 JUMPI PUSH16 0x70D869A156D2A1B890BB3DF62BAF32F7 MUL PUSH1 0x80 SHR JUMPDEST PUSH2 0x8000 DUP3 AND ISZERO PUSH2 0x2198 JUMPI PUSH16 0x31BE135F97D08FD981231505542FCFA6 MUL PUSH1 0x80 SHR JUMPDEST PUSH3 0x10000 DUP3 AND ISZERO PUSH2 0x21B9 JUMPI PUSH16 0x9AA508B5B7A84E1C677DE54F3E99BC9 MUL PUSH1 0x80 SHR JUMPDEST PUSH3 0x20000 DUP3 AND ISZERO PUSH2 0x21D9 JUMPI PUSH15 0x5D6AF8DEDB81196699C329225EE604 MUL PUSH1 0x80 SHR JUMPDEST PUSH3 0x40000 DUP3 AND ISZERO PUSH2 0x21F8 JUMPI PUSH14 0x2216E584F5FA1EA926041BEDFE98 MUL PUSH1 0x80 SHR JUMPDEST PUSH3 0x80000 DUP3 AND ISZERO PUSH2 0x2215 JUMPI PUSH12 0x48A170391F7DC42444E8FA2 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP5 PUSH1 0x2 SIGNEXTEND SGT ISZERO PUSH2 0x2230 JUMPI DUP1 PUSH1 0x0 NOT DUP2 PUSH2 0x222C JUMPI INVALID JUMPDEST DIV SWAP1 POP JUMPDEST PUSH5 0x100000000 DUP2 MOD ISZERO PUSH2 0x2244 JUMPI PUSH1 0x1 PUSH2 0x2247 JUMP JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0xFF AND PUSH1 0x20 DUP3 SWAP1 SHR ADD SWAP3 POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP8 AND ISZERO PUSH2 0x2344 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0xA0 DUP2 ADD DUP3 MSTORE DUP10 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP10 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 DUP2 DUP4 ADD DUP2 SWAP1 MSTORE PUSH1 0x60 DUP3 ADD MSTORE TIMESTAMP PUSH1 0x80 DUP3 ADD MSTORE SWAP1 MLOAD PUSH4 0x624E65F PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND SWAP2 PUSH4 0xC49CCBE SWAP2 PUSH2 0x22E6 SWAP2 SWAP1 PUSH1 0x4 ADD PUSH2 0x2C82 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x22FF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x232F JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x232C SWAP2 DUP2 ADD SWAP1 PUSH2 0x28EF JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x2338 JUMPI PUSH2 0x233F JUMP JUMPDEST POP POP PUSH1 0x1 SWAP4 POP JUMPDEST PUSH2 0x2349 JUMP JUMPDEST PUSH1 0x1 SWAP4 POP JUMPDEST DUP4 ISZERO PUSH2 0x2494 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0x80 DUP2 ADD DUP3 MSTORE DUP10 DUP2 MSTORE ADDRESS PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP2 DUP4 ADD DUP2 SWAP1 MSTORE PUSH1 0x60 DUP3 ADD MSTORE SWAP1 MLOAD PUSH4 0xFC6F7865 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND SWAP2 PUSH4 0xFC6F7865 SWAP2 PUSH2 0x23BF SWAP2 SWAP1 PUSH1 0x4 ADD PUSH2 0x2C3F JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x23D8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x2408 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x2405 SWAP2 DUP2 ADD SWAP1 PUSH2 0x28EF JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x2411 JUMPI PUSH2 0x241B JUMP JUMPDEST PUSH1 0x1 SWAP5 POP SWAP1 SWAP3 POP SWAP1 POP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x852CD8D PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND SWAP1 PUSH4 0x42966C68 SWAP1 PUSH2 0x2467 SWAP1 DUP12 SWAP1 PUSH1 0x4 ADD PUSH2 0x2D83 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2481 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x2492 JUMPI POP PUSH1 0x1 JUMPDEST POP JUMPDEST PUSH1 0x0 DUP5 DUP1 ISZERO PUSH2 0x24A0 JUMPI POP DUP4 JUMPDEST SWAP1 POP PUSH2 0x24B1 DUP10 DUP9 DUP9 DUP12 DUP8 DUP8 DUP8 PUSH2 0x2708 JUMP JUMPDEST POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x88316456 DUP10 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2510 SWAP2 SWAP1 PUSH2 0x2CC5 JUMP JUMPDEST PUSH1 0x80 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x252A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x255A JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x2557 SWAP2 DUP2 ADD SWAP1 PUSH2 0x28A7 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x2563 JUMPI PUSH2 0x26AD JUMP JUMPDEST DUP4 SWAP9 POP DUP3 SWAP8 POP DUP2 SWAP7 POP DUP1 SWAP6 POP PUSH1 0x0 DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND GT ISZERO PUSH2 0x2629 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0xA0 DUP2 ADD DUP3 MSTORE DUP11 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP11 AND PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x2 DUP15 DUP2 SIGNEXTEND SWAP4 DUP4 ADD DUP5 SWAP1 MSTORE DUP14 DUP2 SIGNEXTEND PUSH1 0x60 DUP5 ADD DUP2 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x80 SWAP1 SWAP5 ADD DUP5 SWAP1 MSTORE DUP14 DUP3 SSTORE PUSH1 0x3 DUP1 SLOAD PUSH1 0x1 PUSH1 0xB0 SHL PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT SWAP1 SWAP2 AND SWAP1 SWAP5 OR PUSH3 0xFFFFFF PUSH1 0x80 SHL NOT AND PUSH1 0x1 PUSH1 0x80 SHL SWAP7 DUP5 SIGNEXTEND PUSH3 0xFFFFFF SWAP1 DUP2 AND SWAP8 SWAP1 SWAP8 MUL OR PUSH3 0xFFFFFF PUSH1 0x98 SHL NOT AND PUSH1 0x1 PUSH1 0x98 SHL SWAP3 SWAP1 SWAP4 SIGNEXTEND SWAP6 SWAP1 SWAP6 AND MUL OR PUSH1 0xFF PUSH1 0xB0 SHL NOT AND OR SWAP1 SWAP2 SSTORE SWAP5 POP PUSH2 0x26A8 JUMP JUMPDEST DUP9 ISZERO PUSH2 0x26A8 JUMPI PUSH1 0x40 MLOAD PUSH4 0x852CD8D PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND SWAP1 PUSH4 0x42966C68 SWAP1 PUSH2 0x267B SWAP1 DUP13 SWAP1 PUSH1 0x4 ADD PUSH2 0x2D83 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2695 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x26A6 JUMPI POP PUSH1 0x1 JUMPDEST POP JUMPDEST POP POP POP POP JUMPDEST PUSH2 0x26BC DUP6 DUP9 DUP9 DUP8 DUP8 DUP8 DUP8 PUSH2 0x2753 JUMP JUMPDEST DUP1 PUSH2 0x26FE JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0xA0 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x80 ADD DUP2 SWAP1 MSTORE PUSH1 0x2 SSTORE PUSH1 0x3 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xB8 SHL SUB NOT AND SWAP1 SSTORE JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP7 PUSH32 0xDEE9C9AC7E4F2757956DFCF228DC427442EC0A77C0020754A5D9C3B2583D9A14 DUP8 DUP8 DUP8 DUP8 DUP8 DUP8 PUSH1 0x40 MLOAD PUSH2 0x2742 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2AD9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP POP POP JUMP JUMPDEST DUP7 PUSH32 0xDEE9C9AC7E4F2757956DFCF228DC427442EC0A77C0020754A5D9C3B2583D9A14 DUP8 DUP8 DUP8 DUP8 DUP8 DUP8 PUSH1 0x40 MLOAD PUSH2 0x2742 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2BE9 JUMP JUMPDEST DUP1 MLOAD PUSH2 0xFFFF DUP2 AND DUP2 EQ PUSH2 0xED0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x27B0 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x865 DUP2 PUSH2 0x2E03 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x27CC JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x865 DUP2 PUSH2 0x2E03 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xE0 DUP9 DUP11 SUB SLT ISZERO PUSH2 0x27F1 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP8 MLOAD PUSH2 0x27FC DUP2 PUSH2 0x2E03 JUMP JUMPDEST DUP1 SWAP8 POP POP PUSH1 0x20 DUP9 ADD MLOAD DUP1 PUSH1 0x2 SIGNEXTEND DUP2 EQ PUSH2 0x2813 JUMPI DUP4 DUP5 REVERT JUMPDEST SWAP6 POP PUSH2 0x2821 PUSH1 0x40 DUP10 ADD PUSH2 0x278D JUMP JUMPDEST SWAP5 POP PUSH2 0x282F PUSH1 0x60 DUP10 ADD PUSH2 0x278D JUMP JUMPDEST SWAP4 POP PUSH2 0x283D PUSH1 0x80 DUP10 ADD PUSH2 0x278D JUMP JUMPDEST SWAP3 POP PUSH1 0xA0 DUP9 ADD MLOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x2852 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0xC0 DUP10 ADD MLOAD SWAP1 SWAP3 POP DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x2867 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP6 SWAP9 SWAP2 SWAP5 SWAP8 POP SWAP3 SWAP6 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2888 JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x28A0 JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x28BC JUMPI DUP4 DUP5 REVERT JUMPDEST DUP5 MLOAD SWAP4 POP PUSH1 0x20 DUP6 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x28D9 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH1 0x40 DUP7 ADD MLOAD PUSH1 0x60 SWAP1 SWAP7 ADD MLOAD SWAP5 SWAP8 SWAP1 SWAP7 POP SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2901 JUMPI DUP2 DUP3 REVERT JUMPDEST POP POP DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD MLOAD SWAP1 SWAP3 SWAP1 SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x2927 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP5 CALLDATALOAD SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x294C JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP8 ADD SWAP2 POP DUP8 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x295F JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x296D JUMPI DUP5 DUP6 REVERT JUMPDEST DUP9 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x297E JUMPI DUP5 DUP6 REVERT JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP POP PUSH1 0x20 ADD SWAP5 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x2 SIGNEXTEND SWAP1 MSTORE JUMP JUMPDEST PUSH3 0xFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH3 0xFFFFFF SWAP1 SWAP2 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x2 SWAP2 SWAP1 SWAP2 SIGNEXTEND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x11 SWAP1 DUP3 ADD MSTORE PUSH17 0x5072696365206D757374206265203E203 PUSH1 0x7C SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH14 0xA0E4D2C6CA40E8DEDE40D0D2CED PUSH1 0x93 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x15 SWAP1 DUP3 ADD MSTORE PUSH21 0x556E617574686F72697A65642063616C6C6261636B PUSH1 0x58 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x17 SWAP1 DUP3 ADD MSTORE PUSH32 0x506F736974696F6E20616C726561647920616374697665000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x12 SWAP1 DUP3 ADD MSTORE PUSH18 0x27379030B1BA34BB32903837B9B4BA34B7B7 PUSH1 0x71 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0xE0 DUP1 DUP3 MSTORE PUSH1 0x6 SWAP1 DUP3 ADD MSTORE PUSH6 0x52454D4F5645 PUSH1 0xD0 SHL PUSH2 0x100 DUP3 ADD MSTORE PUSH1 0x2 SWAP7 DUP8 SIGNEXTEND PUSH1 0x20 DUP3 ADD MSTORE SWAP5 SWAP1 SWAP6 SIGNEXTEND PUSH1 0x40 DUP6 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB SWAP3 SWAP1 SWAP3 AND PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP3 ADD MSTORE SWAP1 ISZERO ISZERO PUSH1 0xC0 DUP3 ADD MSTORE PUSH2 0x120 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x12 SWAP1 DUP3 ADD MSTORE PUSH18 0x141BDBDB08191BD95CDB89DD08195E1A5CDD PUSH1 0x72 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH20 0x496E76616C6964207469636B2073706163696E67 PUSH1 0x60 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xD SWAP1 DUP3 ADD MSTORE PUSH13 0x507269636520746F6F206C6F77 PUSH1 0x98 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1D SWAP1 DUP3 ADD MSTORE PUSH32 0x5469636B2073706163696E67206D75737420626520706F736974697665000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0xE0 DUP1 DUP3 MSTORE PUSH1 0x4 SWAP1 DUP3 ADD MSTORE PUSH4 0x13525395 PUSH1 0xE2 SHL PUSH2 0x100 DUP3 ADD MSTORE PUSH1 0x2 SWAP7 DUP8 SIGNEXTEND PUSH1 0x20 DUP3 ADD MSTORE SWAP5 SWAP1 SWAP6 SIGNEXTEND PUSH1 0x40 DUP6 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB SWAP3 SWAP1 SWAP3 AND PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP3 ADD MSTORE SWAP1 ISZERO ISZERO PUSH1 0xC0 DUP3 ADD MSTORE PUSH2 0x120 ADD SWAP1 JUMP JUMPDEST DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 DUP1 DUP4 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP3 ADD MSTORE PUSH1 0x40 DUP1 DUP4 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB SWAP1 DUP2 AND SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 SWAP3 DUP4 ADD MLOAD AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 ADD SWAP1 POP DUP3 MLOAD DUP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB PUSH1 0x20 DUP5 ADD MLOAD AND PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP4 ADD MLOAD PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP4 ADD MLOAD PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x80 DUP4 ADD MLOAD PUSH1 0x80 DUP4 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x160 DUP3 ADD SWAP1 POP PUSH2 0x2CD9 DUP3 DUP5 MLOAD PUSH2 0x298D JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MLOAD PUSH2 0x2CEB PUSH1 0x20 DUP5 ADD DUP3 PUSH2 0x298D JUMP JUMPDEST POP PUSH1 0x40 DUP4 ADD MLOAD PUSH2 0x2CFE PUSH1 0x40 DUP5 ADD DUP3 PUSH2 0x29A1 JUMP JUMPDEST POP PUSH1 0x60 DUP4 ADD MLOAD PUSH2 0x2D11 PUSH1 0x60 DUP5 ADD DUP3 PUSH2 0x299A JUMP JUMPDEST POP PUSH1 0x80 DUP4 ADD MLOAD PUSH2 0x2D24 PUSH1 0x80 DUP5 ADD DUP3 PUSH2 0x299A JUMP JUMPDEST POP PUSH1 0xA0 DUP4 ADD MLOAD PUSH1 0xA0 DUP4 ADD MSTORE PUSH1 0xC0 DUP4 ADD MLOAD PUSH1 0xC0 DUP4 ADD MSTORE PUSH1 0xE0 DUP4 ADD MLOAD PUSH1 0xE0 DUP4 ADD MSTORE PUSH2 0x100 DUP1 DUP5 ADD MLOAD DUP2 DUP5 ADD MSTORE POP PUSH2 0x120 DUP1 DUP5 ADD MLOAD PUSH2 0x2D62 DUP3 DUP6 ADD DUP3 PUSH2 0x298D JUMP JUMPDEST POP POP PUSH2 0x140 SWAP3 DUP4 ADD MLOAD SWAP2 SWAP1 SWAP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH3 0xFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP5 DUP6 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB SWAP4 SWAP1 SWAP4 AND PUSH1 0x20 DUP6 ADD MSTORE PUSH1 0x2 SWAP2 DUP3 SIGNEXTEND PUSH1 0x40 DUP6 ADD MSTORE SWAP1 SIGNEXTEND PUSH1 0x60 DUP4 ADD MSTORE ISZERO ISZERO PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 ADD SWAP1 JUMP JUMPDEST SWAP7 DUP8 MSTORE PUSH1 0x20 DUP8 ADD SWAP6 SWAP1 SWAP6 MSTORE PUSH1 0x40 DUP7 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x2 SWAP2 DUP3 SIGNEXTEND PUSH1 0x60 DUP7 ADD MSTORE DUP2 SIGNEXTEND PUSH1 0x80 DUP6 ADD MSTORE SIGNEXTEND PUSH1 0xA0 DUP4 ADD MSTORE ISZERO ISZERO PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0xE0 ADD SWAP1 JUMP JUMPDEST PUSH1 0xFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x2E18 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID 0x4F PUSH24 0x6E61626C653A206E6577206F776E65722069732074686520 PUSH27 0x65726F2061646472657373416464726573733A20696E7375666669 PUSH4 0x69656E74 KECCAK256 PUSH3 0x616C61 PUSH15 0x636520666F722063616C6C53616665 0x4D PUSH2 0x7468 GASPRICE KECCAK256 PUSH14 0x756C7469706C69636174696F6E20 PUSH16 0x766572666C6F77536166654552433230 GASPRICE KECCAK256 GASLIMIT MSTORE NUMBER ORIGIN ADDRESS KECCAK256 PUSH16 0x7065726174696F6E20646964206E6F74 KECCAK256 PUSH20 0x7563636565645361666545524332303A20617070 PUSH19 0x6F76652066726F6D206E6F6E2D7A65726F2074 PUSH16 0x206E6F6E2D7A65726F20616C6C6F7761 PUSH15 0x6365A2646970667358221220485302 0xD8 SELFBALANCE PUSH30 0x27C4DC1FEEAC3046D862388694D879A94909DA5F373371AE4BA464736F6C PUSH4 0x43000706 STOP CALLER 0x4F PUSH24 0x6E61626C653A206E6577206F776E65722069732074686520 PUSH27 0x65726F2061646472657373416464726573733A20696E7375666669 PUSH4 0x69656E74 KECCAK256 PUSH3 0x616C61 PUSH15 0x636520666F722063616C6C8BE0079C MSTORE8 AND MSIZE EQ SGT DIFFICULTY 0xCD 0x1F 0xD0 LOG4 CALLCODE DUP5 NOT 0x49 PUSH32 0x9722A3DAAFE3B4186F6B6457E05361666545524332303A204552433230206F70 PUSH6 0x726174696F6E KECCAK256 PUSH5 0x6964206E6F PUSH21 0x20737563636565645361666545524332303A206170 PUSH17 0x726F76652066726F6D206E6F6E2D7A6572 PUSH16 0x20746F206E6F6E2D7A65726F20616C6C PUSH16 0x77616E63650000000000000000000000 ","sourceMap":"1260:19623:32:-:0;;;2170:1;2133:38;;-1:-1:-1;;2133:38:32;;;;;2916:1677;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;884:17:0;904:12;:10;:12::i;:::-;926:6;:18;;-1:-1:-1;;;;;;926:18:0;-1:-1:-1;;;;;926:18:0;;;;;;;959:43;;926:18;;-1:-1:-1;926:18:0;-1:-1:-1;;;;;;;;;;;959:43:0;926:6;;959:43;-1:-1:-1;1645:1:10;1760:22;;-1:-1:-1;;;;;;3187:37:32;;;;;;;;3235:63;;;;;;;3309:16;;;;;;;3336;;;;;;;-1:-1:-1;;;;;;3363:10:32;;;;;;;3384:14;;;;;;3458:34;;;-1:-1:-1;;;3458:34:32;;;;-1:-1:-1;;;;;3309:16:32;;;3458:32;;:34;;;;;;;;;;;;;;3309:16;3458:34;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3458:34:32;;;;;;;;-1:-1:-1;;3458:34:32;;;;;;;;;;;;:::i;:::-;;;3454:196;;3594:44;;-1:-1:-1;;;3594:44:32;;;;;;;:::i;:::-;;;;;;;;3454:196;-1:-1:-1;;;;;;3534:26:32;;;;;;;;3681:7;-1:-1:-1;;;;;3666:32:32;;:34;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3666:34:32;;;;;;;;-1:-1:-1;;3666:34:32;;;;;;;;;;;;:::i;:::-;;;3662:196;;3802:44;;-1:-1:-1;;;3802:44:32;;;;;;;:::i;3662:196::-;3742:26;;-1:-1:-1;;;;;;3742:26:32;;;3946:109;;-1:-1:-1;;;3946:109:32;;3924:19;;-1:-1:-1;;;;;3946:35:32;;;;;:109;;3996:7;;4018;;4040:4;;3946:109;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3924:131;-1:-1:-1;;;;;;4074:25:32;;4066:57;;;;-1:-1:-1;;;4066:57:32;;;;;;;:::i;:::-;4163:11;-1:-1:-1;;;;;4148:39:32;;:41;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4134:55;;;;;;;;;;4250:110;-1:-1:-1;;;;;4250:27:32;;4300:16;-1:-1:-1;;4250:27:32;;;;;;;:110;;:::i;:::-;4371;4421:16;-1:-1:-1;;4378:7:32;-1:-1:-1;;;;;4371:27:32;;;;;;;:110;;;;;:::i;:::-;-1:-1:-1;;;;;4498:27:32;;;4494:92;;4542:32;4560:13;4542:17;:32::i;:::-;2916:1677;;;;;;;;1260:19623;;598:104:9;685:10;598:104;:::o;1348:613:4:-;1713:10;;;1712:62;;-1:-1:-1;1729:39:4;;;-1:-1:-1;;;1729:39:4;;1753:4;1729:39;;;;-1:-1:-1;;;;;1729:39:4;;;;;;;;;:15;;;;;;:39;;;;;;;;;;;;;;;:15;:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1729:39:4;:44;1712:62;1704:150;;;;-1:-1:-1;;;1704:150:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1891:62;;;-1:-1:-1;;;;;1891:62:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1891:62:4;;;-1:-1:-1;;;1891:62:4;;;;1864:90;;1884:5;;1864:19;:90;:::i;:::-;1348:613;;;:::o;2011:240:0:-;1308:12;:10;:12::i;:::-;-1:-1:-1;;;;;1297:23:0;:7;:5;:7::i;:::-;-1:-1:-1;;;;;1297:23:0;;1289:68;;;;;-1:-1:-1;;;1289:68:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2099:22:0;::::1;2091:73;;;;-1:-1:-1::0;;;2091:73:0::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2200:6;::::0;;2179:38:::1;::::0;-1:-1:-1;;;;;2179:38:0;;::::1;::::0;2200:6;::::1;::::0;-1:-1:-1;;;;;;;;;;;2179:38:0;::::1;2227:6;:17:::0;;-1:-1:-1;;;;;;2227:17:0::1;-1:-1:-1::0;;;;;2227:17:0;;;::::1;::::0;;;::::1;::::0;;2011:240::o;2967:751:4:-;3386:23;3412:69;3440:4;3412:69;;;;;;;;;;;;;;;;;3420:5;-1:-1:-1;;;;;3412:27:4;;;;;;;:69;;;;;:::i;:::-;3495:17;;3386:95;;-1:-1:-1;3495:21:4;3491:221;;3635:10;3624:30;;;;;;;;;;;;;;;-1:-1:-1;3624:30:4;3616:85;;;;-1:-1:-1;;;3616:85:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1085::0;1131:7;1157:6;-1:-1:-1;;;;;1157:6:0;1085:85;:::o;3581:193:8:-;3684:12;3715:52;3737:6;3745:4;3751:1;3754:12;3715:21;:52::i;:::-;3708:59;;3581:193;;;;;;:::o;4608:523::-;4735:12;4792:5;4767:21;:30;;4759:81;;;;-1:-1:-1;;;4759:81:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4858:18;4869:6;4858:10;:18::i;:::-;4850:60;;;;;-1:-1:-1;;;4850:60:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;4981:12;4995:23;5022:6;-1:-1:-1;;;;;5022:11:8;5042:5;5050:4;5022:33;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;5022:33:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4980:75:8;;-1:-1:-1;4980:75:8;-1:-1:-1;5072:52:8;4980:75;;5111:12;5072:17;:52::i;:::-;5065:59;4608:523;-1:-1:-1;;;;;;;4608:523:8:o;726:413::-;1086:20;;1124:8;;726:413;;;;:::o;7091:725::-;7206:12;7234:7;7230:580;;;-1:-1:-1;7264:10:8;7257:17;;7230:580;7375:17;;:21;7371:429;;7633:10;7627:17;7693:15;7680:10;7676:2;7672:19;7665:44;7582:145;7772:12;7765:20;;-1:-1:-1;;;7765:20:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14:179:35;95:13;;-1:-1:-1;;;;;137:31:35;;127:42;;117:2;;183:1;180;173:12;198:220;;321:2;309:9;300:7;296:23;292:32;289:2;;;342:6;334;327:22;289:2;370:42;402:9;370:42;:::i;423:824::-;;;;;;;;647:3;635:9;626:7;622:23;618:33;615:2;;;669:6;661;654:22;615:2;697:42;729:9;697:42;:::i;:::-;687:52;;758:51;805:2;794:9;790:18;758:51;:::i;:::-;748:61;;828:51;875:2;864:9;860:18;828:51;:::i;:::-;818:61;;898:51;945:2;934:9;930:18;898:51;:::i;:::-;888:61;;992:3;981:9;977:19;971:26;1037:8;1030:5;1026:20;1019:5;1016:31;1006:2;;1066:6;1058;1051:22;1006:2;1094:5;-1:-1:-1;1118:52:35;1165:3;1150:19;;1118:52;:::i;:::-;1108:62;;1189:52;1236:3;1225:9;1221:19;1189:52;:::i;:::-;1179:62;;605:642;;;;;;;;;;:::o;1252:297::-;;1373:2;1361:9;1352:7;1348:23;1344:32;1341:2;;;1394:6;1386;1379:22;1341:2;1431:9;1425:16;1484:5;1481:1;1470:20;1463:5;1460:31;1450:2;;1510:6;1502;1495:22;1554:293;;1675:2;1663:9;1654:7;1650:23;1646:32;1643:2;;;1696:6;1688;1681:22;1643:2;1733:9;1727:16;1783:4;1776:5;1772:16;1765:5;1762:27;1752:2;;1808:6;1800;1793:22;1852:388;-1:-1:-1;;;;;2108:15:35;;;2090:34;;2160:15;;;;2155:2;2140:18;;2133:43;2224:8;2212:21;;;2207:2;2192:18;;2185:49;2040:2;2025:18;;2007:233::o;2245:398::-;2447:2;2429:21;;;2486:2;2466:18;;;2459:30;2525:34;2520:2;2505:18;;2498:62;-1:-1:-1;;;2591:2:35;2576:18;;2569:32;2633:3;2618:19;;2419:224::o;2648:343::-;2850:2;2832:21;;;2889:2;2869:18;;;2862:30;2928:21;2923:2;2908:18;;2901:49;2982:2;2967:18;;2822:169::o;2996:398::-;3198:2;3180:21;;;3237:2;3217:18;;;3210:30;3276:34;3271:2;3256:18;;3249:62;-1:-1:-1;;;3342:2:35;3327:18;;3320:32;3384:3;3369:19;;3170:224::o;:::-;1260:19623:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:14381:35","statements":[{"nodeType":"YulBlock","src":"6:3:35","statements":[]},{"body":{"nodeType":"YulBlock","src":"75:104:35","statements":[{"nodeType":"YulAssignment","src":"85:22:35","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"100:6:35"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"94:5:35"},"nodeType":"YulFunctionCall","src":"94:13:35"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"85:5:35"}]},{"body":{"nodeType":"YulBlock","src":"157:16:35","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"166:1:35","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"169:1:35","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"159:6:35"},"nodeType":"YulFunctionCall","src":"159:12:35"},"nodeType":"YulExpressionStatement","src":"159:12:35"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"129:5:35"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"140:5:35"},{"kind":"number","nodeType":"YulLiteral","src":"147:6:35","type":"","value":"0xffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"136:3:35"},"nodeType":"YulFunctionCall","src":"136:18:35"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"126:2:35"},"nodeType":"YulFunctionCall","src":"126:29:35"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"119:6:35"},"nodeType":"YulFunctionCall","src":"119:37:35"},"nodeType":"YulIf","src":"116:2:35"}]},"name":"abi_decode_t_uint16_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"54:6:35","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"65:5:35","type":""}],"src":"14:165:35"},{"body":{"nodeType":"YulBlock","src":"254:189:35","statements":[{"body":{"nodeType":"YulBlock","src":"300:26:35","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"309:6:35"},{"name":"value0","nodeType":"YulIdentifier","src":"317:6:35"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"302:6:35"},"nodeType":"YulFunctionCall","src":"302:22:35"},"nodeType":"YulExpressionStatement","src":"302:22:35"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"275:7:35"},{"name":"headStart","nodeType":"YulIdentifier","src":"284:9:35"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"271:3:35"},"nodeType":"YulFunctionCall","src":"271:23:35"},{"kind":"number","nodeType":"YulLiteral","src":"296:2:35","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"267:3:35"},"nodeType":"YulFunctionCall","src":"267:32:35"},"nodeType":"YulIf","src":"264:2:35"},{"nodeType":"YulVariableDeclaration","src":"335:36:35","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"361:9:35"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"348:12:35"},"nodeType":"YulFunctionCall","src":"348:23:35"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"339:5:35","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"407:5:35"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"380:26:35"},"nodeType":"YulFunctionCall","src":"380:33:35"},"nodeType":"YulExpressionStatement","src":"380:33:35"},{"nodeType":"YulAssignment","src":"422:15:35","value":{"name":"value","nodeType":"YulIdentifier","src":"432:5:35"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"422:6:35"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"220:9:35","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"231:7:35","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"243:6:35","type":""}],"src":"184:259:35"},{"body":{"nodeType":"YulBlock","src":"529:182:35","statements":[{"body":{"nodeType":"YulBlock","src":"575:26:35","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"584:6:35"},{"name":"value0","nodeType":"YulIdentifier","src":"592:6:35"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"577:6:35"},"nodeType":"YulFunctionCall","src":"577:22:35"},"nodeType":"YulExpressionStatement","src":"577:22:35"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"550:7:35"},{"name":"headStart","nodeType":"YulIdentifier","src":"559:9:35"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"546:3:35"},"nodeType":"YulFunctionCall","src":"546:23:35"},{"kind":"number","nodeType":"YulLiteral","src":"571:2:35","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"542:3:35"},"nodeType":"YulFunctionCall","src":"542:32:35"},"nodeType":"YulIf","src":"539:2:35"},{"nodeType":"YulVariableDeclaration","src":"610:29:35","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"629:9:35"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"623:5:35"},"nodeType":"YulFunctionCall","src":"623:16:35"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"614:5:35","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"675:5:35"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"648:26:35"},"nodeType":"YulFunctionCall","src":"648:33:35"},"nodeType":"YulExpressionStatement","src":"648:33:35"},{"nodeType":"YulAssignment","src":"690:15:35","value":{"name":"value","nodeType":"YulIdentifier","src":"700:5:35"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"690:6:35"}]}]},"name":"abi_decode_tuple_t_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"495:9:35","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"506:7:35","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"518:6:35","type":""}],"src":"448:263:35"},{"body":{"nodeType":"YulBlock","src":"889:861:35","statements":[{"body":{"nodeType":"YulBlock","src":"936:26:35","statements":[{"expression":{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"945:6:35"},{"name":"value4","nodeType":"YulIdentifier","src":"953:6:35"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"938:6:35"},"nodeType":"YulFunctionCall","src":"938:22:35"},"nodeType":"YulExpressionStatement","src":"938:22:35"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"910:7:35"},{"name":"headStart","nodeType":"YulIdentifier","src":"919:9:35"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"906:3:35"},"nodeType":"YulFunctionCall","src":"906:23:35"},{"kind":"number","nodeType":"YulLiteral","src":"931:3:35","type":"","value":"224"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"902:3:35"},"nodeType":"YulFunctionCall","src":"902:33:35"},"nodeType":"YulIf","src":"899:2:35"},{"nodeType":"YulVariableDeclaration","src":"971:29:35","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"990:9:35"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"984:5:35"},"nodeType":"YulFunctionCall","src":"984:16:35"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"975:5:35","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1036:5:35"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"1009:26:35"},"nodeType":"YulFunctionCall","src":"1009:33:35"},"nodeType":"YulExpressionStatement","src":"1009:33:35"},{"nodeType":"YulAssignment","src":"1051:15:35","value":{"name":"value","nodeType":"YulIdentifier","src":"1061:5:35"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1051:6:35"}]},{"nodeType":"YulVariableDeclaration","src":"1075:40:35","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1100:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"1111:2:35","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1096:3:35"},"nodeType":"YulFunctionCall","src":"1096:18:35"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1090:5:35"},"nodeType":"YulFunctionCall","src":"1090:25:35"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"1079:7:35","type":""}]},{"body":{"nodeType":"YulBlock","src":"1171:26:35","statements":[{"expression":{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"1180:6:35"},{"name":"value4","nodeType":"YulIdentifier","src":"1188:6:35"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1173:6:35"},"nodeType":"YulFunctionCall","src":"1173:22:35"},"nodeType":"YulExpressionStatement","src":"1173:22:35"}]},"condition":{"arguments":[{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"1137:7:35"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1157:1:35","type":"","value":"2"},{"name":"value_1","nodeType":"YulIdentifier","src":"1160:7:35"}],"functionName":{"name":"signextend","nodeType":"YulIdentifier","src":"1146:10:35"},"nodeType":"YulFunctionCall","src":"1146:22:35"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1134:2:35"},"nodeType":"YulFunctionCall","src":"1134:35:35"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1127:6:35"},"nodeType":"YulFunctionCall","src":"1127:43:35"},"nodeType":"YulIf","src":"1124:2:35"},{"nodeType":"YulAssignment","src":"1206:17:35","value":{"name":"value_1","nodeType":"YulIdentifier","src":"1216:7:35"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1206:6:35"}]},{"nodeType":"YulAssignment","src":"1232:60:35","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1277:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"1288:2:35","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1273:3:35"},"nodeType":"YulFunctionCall","src":"1273:18:35"}],"functionName":{"name":"abi_decode_t_uint16_fromMemory","nodeType":"YulIdentifier","src":"1242:30:35"},"nodeType":"YulFunctionCall","src":"1242:50:35"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"1232:6:35"}]},{"nodeType":"YulAssignment","src":"1301:60:35","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1346:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"1357:2:35","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1342:3:35"},"nodeType":"YulFunctionCall","src":"1342:18:35"}],"functionName":{"name":"abi_decode_t_uint16_fromMemory","nodeType":"YulIdentifier","src":"1311:30:35"},"nodeType":"YulFunctionCall","src":"1311:50:35"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"1301:6:35"}]},{"nodeType":"YulAssignment","src":"1370:61:35","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1415:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"1426:3:35","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1411:3:35"},"nodeType":"YulFunctionCall","src":"1411:19:35"}],"functionName":{"name":"abi_decode_t_uint16_fromMemory","nodeType":"YulIdentifier","src":"1380:30:35"},"nodeType":"YulFunctionCall","src":"1380:51:35"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"1370:6:35"}]},{"nodeType":"YulVariableDeclaration","src":"1440:41:35","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1465:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"1476:3:35","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1461:3:35"},"nodeType":"YulFunctionCall","src":"1461:19:35"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1455:5:35"},"nodeType":"YulFunctionCall","src":"1455:26:35"},"variables":[{"name":"value_2","nodeType":"YulTypedName","src":"1444:7:35","type":""}]},{"body":{"nodeType":"YulBlock","src":"1533:26:35","statements":[{"expression":{"arguments":[{"name":"value5","nodeType":"YulIdentifier","src":"1542:6:35"},{"name":"value5","nodeType":"YulIdentifier","src":"1550:6:35"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1535:6:35"},"nodeType":"YulFunctionCall","src":"1535:22:35"},"nodeType":"YulExpressionStatement","src":"1535:22:35"}]},"condition":{"arguments":[{"arguments":[{"name":"value_2","nodeType":"YulIdentifier","src":"1503:7:35"},{"arguments":[{"name":"value_2","nodeType":"YulIdentifier","src":"1516:7:35"},{"kind":"number","nodeType":"YulLiteral","src":"1525:4:35","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1512:3:35"},"nodeType":"YulFunctionCall","src":"1512:18:35"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1500:2:35"},"nodeType":"YulFunctionCall","src":"1500:31:35"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1493:6:35"},"nodeType":"YulFunctionCall","src":"1493:39:35"},"nodeType":"YulIf","src":"1490:2:35"},{"nodeType":"YulAssignment","src":"1568:17:35","value":{"name":"value_2","nodeType":"YulIdentifier","src":"1578:7:35"},"variableNames":[{"name":"value5","nodeType":"YulIdentifier","src":"1568:6:35"}]},{"nodeType":"YulVariableDeclaration","src":"1594:41:35","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1619:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"1630:3:35","type":"","value":"192"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1615:3:35"},"nodeType":"YulFunctionCall","src":"1615:19:35"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1609:5:35"},"nodeType":"YulFunctionCall","src":"1609:26:35"},"variables":[{"name":"value_3","nodeType":"YulTypedName","src":"1598:7:35","type":""}]},{"body":{"nodeType":"YulBlock","src":"1692:26:35","statements":[{"expression":{"arguments":[{"name":"value6","nodeType":"YulIdentifier","src":"1701:6:35"},{"name":"value6","nodeType":"YulIdentifier","src":"1709:6:35"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1694:6:35"},"nodeType":"YulFunctionCall","src":"1694:22:35"},"nodeType":"YulExpressionStatement","src":"1694:22:35"}]},"condition":{"arguments":[{"arguments":[{"name":"value_3","nodeType":"YulIdentifier","src":"1657:7:35"},{"arguments":[{"arguments":[{"name":"value_3","nodeType":"YulIdentifier","src":"1680:7:35"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1673:6:35"},"nodeType":"YulFunctionCall","src":"1673:15:35"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1666:6:35"},"nodeType":"YulFunctionCall","src":"1666:23:35"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1654:2:35"},"nodeType":"YulFunctionCall","src":"1654:36:35"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1647:6:35"},"nodeType":"YulFunctionCall","src":"1647:44:35"},"nodeType":"YulIf","src":"1644:2:35"},{"nodeType":"YulAssignment","src":"1727:17:35","value":{"name":"value_3","nodeType":"YulIdentifier","src":"1737:7:35"},"variableNames":[{"name":"value6","nodeType":"YulIdentifier","src":"1727:6:35"}]}]},"name":"abi_decode_tuple_t_uint160t_int24t_uint16t_uint16t_uint16t_uint8t_bool_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"807:9:35","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"818:7:35","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"830:6:35","type":""},{"name":"value1","nodeType":"YulTypedName","src":"838:6:35","type":""},{"name":"value2","nodeType":"YulTypedName","src":"846:6:35","type":""},{"name":"value3","nodeType":"YulTypedName","src":"854:6:35","type":""},{"name":"value4","nodeType":"YulTypedName","src":"862:6:35","type":""},{"name":"value5","nodeType":"YulTypedName","src":"870:6:35","type":""},{"name":"value6","nodeType":"YulTypedName","src":"878:6:35","type":""}],"src":"716:1034:35"},{"body":{"nodeType":"YulBlock","src":"1825:120:35","statements":[{"body":{"nodeType":"YulBlock","src":"1871:26:35","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1880:6:35"},{"name":"value0","nodeType":"YulIdentifier","src":"1888:6:35"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1873:6:35"},"nodeType":"YulFunctionCall","src":"1873:22:35"},"nodeType":"YulExpressionStatement","src":"1873:22:35"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1846:7:35"},{"name":"headStart","nodeType":"YulIdentifier","src":"1855:9:35"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1842:3:35"},"nodeType":"YulFunctionCall","src":"1842:23:35"},{"kind":"number","nodeType":"YulLiteral","src":"1867:2:35","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1838:3:35"},"nodeType":"YulFunctionCall","src":"1838:32:35"},"nodeType":"YulIf","src":"1835:2:35"},{"nodeType":"YulAssignment","src":"1906:33:35","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1929:9:35"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1916:12:35"},"nodeType":"YulFunctionCall","src":"1916:23:35"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1906:6:35"}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1791:9:35","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1802:7:35","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1814:6:35","type":""}],"src":"1755:190:35"},{"body":{"nodeType":"YulBlock","src":"2031:113:35","statements":[{"body":{"nodeType":"YulBlock","src":"2077:26:35","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2086:6:35"},{"name":"value0","nodeType":"YulIdentifier","src":"2094:6:35"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2079:6:35"},"nodeType":"YulFunctionCall","src":"2079:22:35"},"nodeType":"YulExpressionStatement","src":"2079:22:35"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2052:7:35"},{"name":"headStart","nodeType":"YulIdentifier","src":"2061:9:35"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2048:3:35"},"nodeType":"YulFunctionCall","src":"2048:23:35"},{"kind":"number","nodeType":"YulLiteral","src":"2073:2:35","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2044:3:35"},"nodeType":"YulFunctionCall","src":"2044:32:35"},"nodeType":"YulIf","src":"2041:2:35"},{"nodeType":"YulAssignment","src":"2112:26:35","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2128:9:35"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2122:5:35"},"nodeType":"YulFunctionCall","src":"2122:16:35"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2112:6:35"}]}]},"name":"abi_decode_tuple_t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1997:9:35","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2008:7:35","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2020:6:35","type":""}],"src":"1950:194:35"},{"body":{"nodeType":"YulBlock","src":"2281:377:35","statements":[{"body":{"nodeType":"YulBlock","src":"2328:26:35","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2337:6:35"},{"name":"value0","nodeType":"YulIdentifier","src":"2345:6:35"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2330:6:35"},"nodeType":"YulFunctionCall","src":"2330:22:35"},"nodeType":"YulExpressionStatement","src":"2330:22:35"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2302:7:35"},{"name":"headStart","nodeType":"YulIdentifier","src":"2311:9:35"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2298:3:35"},"nodeType":"YulFunctionCall","src":"2298:23:35"},{"kind":"number","nodeType":"YulLiteral","src":"2323:3:35","type":"","value":"128"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2294:3:35"},"nodeType":"YulFunctionCall","src":"2294:33:35"},"nodeType":"YulIf","src":"2291:2:35"},{"nodeType":"YulAssignment","src":"2363:26:35","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2379:9:35"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2373:5:35"},"nodeType":"YulFunctionCall","src":"2373:16:35"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2363:6:35"}]},{"nodeType":"YulVariableDeclaration","src":"2398:38:35","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2421:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"2432:2:35","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2417:3:35"},"nodeType":"YulFunctionCall","src":"2417:18:35"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2411:5:35"},"nodeType":"YulFunctionCall","src":"2411:25:35"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"2402:5:35","type":""}]},{"body":{"nodeType":"YulBlock","src":"2514:26:35","statements":[{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"2523:6:35"},{"name":"value1","nodeType":"YulIdentifier","src":"2531:6:35"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2516:6:35"},"nodeType":"YulFunctionCall","src":"2516:22:35"},"nodeType":"YulExpressionStatement","src":"2516:22:35"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2458:5:35"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2469:5:35"},{"kind":"number","nodeType":"YulLiteral","src":"2476:34:35","type":"","value":"0xffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2465:3:35"},"nodeType":"YulFunctionCall","src":"2465:46:35"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"2455:2:35"},"nodeType":"YulFunctionCall","src":"2455:57:35"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2448:6:35"},"nodeType":"YulFunctionCall","src":"2448:65:35"},"nodeType":"YulIf","src":"2445:2:35"},{"nodeType":"YulAssignment","src":"2549:15:35","value":{"name":"value","nodeType":"YulIdentifier","src":"2559:5:35"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2549:6:35"}]},{"nodeType":"YulAssignment","src":"2573:35:35","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2593:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"2604:2:35","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2589:3:35"},"nodeType":"YulFunctionCall","src":"2589:18:35"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2583:5:35"},"nodeType":"YulFunctionCall","src":"2583:25:35"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"2573:6:35"}]},{"nodeType":"YulAssignment","src":"2617:35:35","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2637:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"2648:2:35","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2633:3:35"},"nodeType":"YulFunctionCall","src":"2633:18:35"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2627:5:35"},"nodeType":"YulFunctionCall","src":"2627:25:35"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"2617:6:35"}]}]},"name":"abi_decode_tuple_t_uint256t_uint128t_uint256t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2223:9:35","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2234:7:35","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2246:6:35","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2254:6:35","type":""},{"name":"value2","nodeType":"YulTypedName","src":"2262:6:35","type":""},{"name":"value3","nodeType":"YulTypedName","src":"2270:6:35","type":""}],"src":"2149:509:35"},{"body":{"nodeType":"YulBlock","src":"2761:157:35","statements":[{"body":{"nodeType":"YulBlock","src":"2807:26:35","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2816:6:35"},{"name":"value0","nodeType":"YulIdentifier","src":"2824:6:35"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2809:6:35"},"nodeType":"YulFunctionCall","src":"2809:22:35"},"nodeType":"YulExpressionStatement","src":"2809:22:35"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2782:7:35"},{"name":"headStart","nodeType":"YulIdentifier","src":"2791:9:35"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2778:3:35"},"nodeType":"YulFunctionCall","src":"2778:23:35"},{"kind":"number","nodeType":"YulLiteral","src":"2803:2:35","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2774:3:35"},"nodeType":"YulFunctionCall","src":"2774:32:35"},"nodeType":"YulIf","src":"2771:2:35"},{"nodeType":"YulAssignment","src":"2842:26:35","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2858:9:35"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2852:5:35"},"nodeType":"YulFunctionCall","src":"2852:16:35"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2842:6:35"}]},{"nodeType":"YulAssignment","src":"2877:35:35","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2897:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"2908:2:35","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2893:3:35"},"nodeType":"YulFunctionCall","src":"2893:18:35"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2887:5:35"},"nodeType":"YulFunctionCall","src":"2887:25:35"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2877:6:35"}]}]},"name":"abi_decode_tuple_t_uint256t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2719:9:35","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2730:7:35","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2742:6:35","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2750:6:35","type":""}],"src":"2663:255:35"},{"body":{"nodeType":"YulBlock","src":"3046:654:35","statements":[{"body":{"nodeType":"YulBlock","src":"3092:26:35","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3101:6:35"},{"name":"value0","nodeType":"YulIdentifier","src":"3109:6:35"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3094:6:35"},"nodeType":"YulFunctionCall","src":"3094:22:35"},"nodeType":"YulExpressionStatement","src":"3094:22:35"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3067:7:35"},{"name":"headStart","nodeType":"YulIdentifier","src":"3076:9:35"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3063:3:35"},"nodeType":"YulFunctionCall","src":"3063:23:35"},{"kind":"number","nodeType":"YulLiteral","src":"3088:2:35","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3059:3:35"},"nodeType":"YulFunctionCall","src":"3059:32:35"},"nodeType":"YulIf","src":"3056:2:35"},{"nodeType":"YulAssignment","src":"3127:33:35","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3150:9:35"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3137:12:35"},"nodeType":"YulFunctionCall","src":"3137:23:35"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3127:6:35"}]},{"nodeType":"YulAssignment","src":"3169:42:35","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3196:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"3207:2:35","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3192:3:35"},"nodeType":"YulFunctionCall","src":"3192:18:35"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3179:12:35"},"nodeType":"YulFunctionCall","src":"3179:32:35"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3169:6:35"}]},{"nodeType":"YulVariableDeclaration","src":"3220:46:35","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3251:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"3262:2:35","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3247:3:35"},"nodeType":"YulFunctionCall","src":"3247:18:35"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3234:12:35"},"nodeType":"YulFunctionCall","src":"3234:32:35"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3224:6:35","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3275:28:35","value":{"kind":"number","nodeType":"YulLiteral","src":"3285:18:35","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"3279:2:35","type":""}]},{"body":{"nodeType":"YulBlock","src":"3330:26:35","statements":[{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"3339:6:35"},{"name":"value2","nodeType":"YulIdentifier","src":"3347:6:35"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3332:6:35"},"nodeType":"YulFunctionCall","src":"3332:22:35"},"nodeType":"YulExpressionStatement","src":"3332:22:35"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3318:6:35"},{"name":"_1","nodeType":"YulIdentifier","src":"3326:2:35"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3315:2:35"},"nodeType":"YulFunctionCall","src":"3315:14:35"},"nodeType":"YulIf","src":"3312:2:35"},{"nodeType":"YulVariableDeclaration","src":"3365:32:35","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3379:9:35"},{"name":"offset","nodeType":"YulIdentifier","src":"3390:6:35"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3375:3:35"},"nodeType":"YulFunctionCall","src":"3375:22:35"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"3369:2:35","type":""}]},{"body":{"nodeType":"YulBlock","src":"3445:26:35","statements":[{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"3454:6:35"},{"name":"value2","nodeType":"YulIdentifier","src":"3462:6:35"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3447:6:35"},"nodeType":"YulFunctionCall","src":"3447:22:35"},"nodeType":"YulExpressionStatement","src":"3447:22:35"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"3424:2:35"},{"kind":"number","nodeType":"YulLiteral","src":"3428:4:35","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3420:3:35"},"nodeType":"YulFunctionCall","src":"3420:13:35"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3435:7:35"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3416:3:35"},"nodeType":"YulFunctionCall","src":"3416:27:35"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3409:6:35"},"nodeType":"YulFunctionCall","src":"3409:35:35"},"nodeType":"YulIf","src":"3406:2:35"},{"nodeType":"YulVariableDeclaration","src":"3480:30:35","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"3507:2:35"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3494:12:35"},"nodeType":"YulFunctionCall","src":"3494:16:35"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"3484:6:35","type":""}]},{"body":{"nodeType":"YulBlock","src":"3537:26:35","statements":[{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"3546:6:35"},{"name":"value2","nodeType":"YulIdentifier","src":"3554:6:35"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3539:6:35"},"nodeType":"YulFunctionCall","src":"3539:22:35"},"nodeType":"YulExpressionStatement","src":"3539:22:35"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"3525:6:35"},{"name":"_1","nodeType":"YulIdentifier","src":"3533:2:35"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3522:2:35"},"nodeType":"YulFunctionCall","src":"3522:14:35"},"nodeType":"YulIf","src":"3519:2:35"},{"body":{"nodeType":"YulBlock","src":"3613:26:35","statements":[{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"3622:6:35"},{"name":"value2","nodeType":"YulIdentifier","src":"3630:6:35"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3615:6:35"},"nodeType":"YulFunctionCall","src":"3615:22:35"},"nodeType":"YulExpressionStatement","src":"3615:22:35"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"3586:2:35"},{"name":"length","nodeType":"YulIdentifier","src":"3590:6:35"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3582:3:35"},"nodeType":"YulFunctionCall","src":"3582:15:35"},{"kind":"number","nodeType":"YulLiteral","src":"3599:2:35","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3578:3:35"},"nodeType":"YulFunctionCall","src":"3578:24:35"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3604:7:35"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3575:2:35"},"nodeType":"YulFunctionCall","src":"3575:37:35"},"nodeType":"YulIf","src":"3572:2:35"},{"nodeType":"YulAssignment","src":"3648:21:35","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"3662:2:35"},{"kind":"number","nodeType":"YulLiteral","src":"3666:2:35","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3658:3:35"},"nodeType":"YulFunctionCall","src":"3658:11:35"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"3648:6:35"}]},{"nodeType":"YulAssignment","src":"3678:16:35","value":{"name":"length","nodeType":"YulIdentifier","src":"3688:6:35"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"3678:6:35"}]}]},"name":"abi_decode_tuple_t_uint256t_uint256t_bytes_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2988:9:35","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2999:7:35","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3011:6:35","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3019:6:35","type":""},{"name":"value2","nodeType":"YulTypedName","src":"3027:6:35","type":""},{"name":"value3","nodeType":"YulTypedName","src":"3035:6:35","type":""}],"src":"2923:777:35"},{"body":{"nodeType":"YulBlock","src":"3751:60:35","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3768:3:35"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3777:5:35"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3792:3:35","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"3797:1:35","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3788:3:35"},"nodeType":"YulFunctionCall","src":"3788:11:35"},{"kind":"number","nodeType":"YulLiteral","src":"3801:1:35","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3784:3:35"},"nodeType":"YulFunctionCall","src":"3784:19:35"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3773:3:35"},"nodeType":"YulFunctionCall","src":"3773:31:35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3761:6:35"},"nodeType":"YulFunctionCall","src":"3761:44:35"},"nodeType":"YulExpressionStatement","src":"3761:44:35"}]},"name":"abi_encode_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3735:5:35","type":""},{"name":"pos","nodeType":"YulTypedName","src":"3742:3:35","type":""}],"src":"3705:106:35"},{"body":{"nodeType":"YulBlock","src":"3860:49:35","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3877:3:35"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3893:1:35","type":"","value":"2"},{"name":"value","nodeType":"YulIdentifier","src":"3896:5:35"}],"functionName":{"name":"signextend","nodeType":"YulIdentifier","src":"3882:10:35"},"nodeType":"YulFunctionCall","src":"3882:20:35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3870:6:35"},"nodeType":"YulFunctionCall","src":"3870:33:35"},"nodeType":"YulExpressionStatement","src":"3870:33:35"}]},"name":"abi_encode_t_int24","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3844:5:35","type":""},{"name":"pos","nodeType":"YulTypedName","src":"3851:3:35","type":""}],"src":"3816:93:35"},{"body":{"nodeType":"YulBlock","src":"3959:49:35","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3976:3:35"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3985:5:35"},{"kind":"number","nodeType":"YulLiteral","src":"3992:8:35","type":"","value":"0xffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3981:3:35"},"nodeType":"YulFunctionCall","src":"3981:20:35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3969:6:35"},"nodeType":"YulFunctionCall","src":"3969:33:35"},"nodeType":"YulExpressionStatement","src":"3969:33:35"}]},"name":"abi_encode_t_uint24","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3943:5:35","type":""},{"name":"pos","nodeType":"YulTypedName","src":"3950:3:35","type":""}],"src":"3914:94:35"},{"body":{"nodeType":"YulBlock","src":"4114:102:35","statements":[{"nodeType":"YulAssignment","src":"4124:26:35","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4136:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"4147:2:35","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4132:3:35"},"nodeType":"YulFunctionCall","src":"4132:18:35"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4124:4:35"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4166:9:35"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4181:6:35"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4197:3:35","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"4202:1:35","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"4193:3:35"},"nodeType":"YulFunctionCall","src":"4193:11:35"},{"kind":"number","nodeType":"YulLiteral","src":"4206:1:35","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4189:3:35"},"nodeType":"YulFunctionCall","src":"4189:19:35"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4177:3:35"},"nodeType":"YulFunctionCall","src":"4177:32:35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4159:6:35"},"nodeType":"YulFunctionCall","src":"4159:51:35"},"nodeType":"YulExpressionStatement","src":"4159:51:35"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4083:9:35","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4094:6:35","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4105:4:35","type":""}],"src":"4013:203:35"},{"body":{"nodeType":"YulBlock","src":"4376:233:35","statements":[{"nodeType":"YulAssignment","src":"4386:26:35","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4398:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"4409:2:35","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4394:3:35"},"nodeType":"YulFunctionCall","src":"4394:18:35"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4386:4:35"}]},{"nodeType":"YulVariableDeclaration","src":"4421:29:35","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4439:3:35","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"4444:1:35","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"4435:3:35"},"nodeType":"YulFunctionCall","src":"4435:11:35"},{"kind":"number","nodeType":"YulLiteral","src":"4448:1:35","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4431:3:35"},"nodeType":"YulFunctionCall","src":"4431:19:35"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"4425:2:35","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4466:9:35"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4481:6:35"},{"name":"_1","nodeType":"YulIdentifier","src":"4489:2:35"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4477:3:35"},"nodeType":"YulFunctionCall","src":"4477:15:35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4459:6:35"},"nodeType":"YulFunctionCall","src":"4459:34:35"},"nodeType":"YulExpressionStatement","src":"4459:34:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4513:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"4524:2:35","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4509:3:35"},"nodeType":"YulFunctionCall","src":"4509:18:35"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"4533:6:35"},{"name":"_1","nodeType":"YulIdentifier","src":"4541:2:35"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4529:3:35"},"nodeType":"YulFunctionCall","src":"4529:15:35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4502:6:35"},"nodeType":"YulFunctionCall","src":"4502:43:35"},"nodeType":"YulExpressionStatement","src":"4502:43:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4565:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"4576:2:35","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4561:3:35"},"nodeType":"YulFunctionCall","src":"4561:18:35"},{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"4585:6:35"},{"kind":"number","nodeType":"YulLiteral","src":"4593:8:35","type":"","value":"0xffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4581:3:35"},"nodeType":"YulFunctionCall","src":"4581:21:35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4554:6:35"},"nodeType":"YulFunctionCall","src":"4554:49:35"},"nodeType":"YulExpressionStatement","src":"4554:49:35"}]},"name":"abi_encode_tuple_t_address_t_address_t_uint24__to_t_address_t_address_t_uint24__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4329:9:35","type":""},{"name":"value2","nodeType":"YulTypedName","src":"4340:6:35","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4348:6:35","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4356:6:35","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4367:4:35","type":""}],"src":"4221:388:35"},{"body":{"nodeType":"YulBlock","src":"4751:102:35","statements":[{"nodeType":"YulAssignment","src":"4761:26:35","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4773:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"4784:2:35","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4769:3:35"},"nodeType":"YulFunctionCall","src":"4769:18:35"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4761:4:35"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4803:9:35"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4818:6:35"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4834:3:35","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"4839:1:35","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"4830:3:35"},"nodeType":"YulFunctionCall","src":"4830:11:35"},{"kind":"number","nodeType":"YulLiteral","src":"4843:1:35","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4826:3:35"},"nodeType":"YulFunctionCall","src":"4826:19:35"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4814:3:35"},"nodeType":"YulFunctionCall","src":"4814:32:35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4796:6:35"},"nodeType":"YulFunctionCall","src":"4796:51:35"},"nodeType":"YulExpressionStatement","src":"4796:51:35"}]},"name":"abi_encode_tuple_t_contract$_INonfungiblePositionManager_$2618__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4720:9:35","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4731:6:35","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4742:4:35","type":""}],"src":"4614:239:35"},{"body":{"nodeType":"YulBlock","src":"4985:102:35","statements":[{"nodeType":"YulAssignment","src":"4995:26:35","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5007:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"5018:2:35","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5003:3:35"},"nodeType":"YulFunctionCall","src":"5003:18:35"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4995:4:35"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5037:9:35"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"5052:6:35"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5068:3:35","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"5073:1:35","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"5064:3:35"},"nodeType":"YulFunctionCall","src":"5064:11:35"},{"kind":"number","nodeType":"YulLiteral","src":"5077:1:35","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5060:3:35"},"nodeType":"YulFunctionCall","src":"5060:19:35"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5048:3:35"},"nodeType":"YulFunctionCall","src":"5048:32:35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5030:6:35"},"nodeType":"YulFunctionCall","src":"5030:51:35"},"nodeType":"YulExpressionStatement","src":"5030:51:35"}]},"name":"abi_encode_tuple_t_contract$_IUniswapV3Factory_$1383__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4954:9:35","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4965:6:35","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4976:4:35","type":""}],"src":"4858:229:35"},{"body":{"nodeType":"YulBlock","src":"5189:91:35","statements":[{"nodeType":"YulAssignment","src":"5199:26:35","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5211:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"5222:2:35","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5207:3:35"},"nodeType":"YulFunctionCall","src":"5207:18:35"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5199:4:35"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5241:9:35"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5263:1:35","type":"","value":"2"},{"name":"value0","nodeType":"YulIdentifier","src":"5266:6:35"}],"functionName":{"name":"signextend","nodeType":"YulIdentifier","src":"5252:10:35"},"nodeType":"YulFunctionCall","src":"5252:21:35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5234:6:35"},"nodeType":"YulFunctionCall","src":"5234:40:35"},"nodeType":"YulExpressionStatement","src":"5234:40:35"}]},"name":"abi_encode_tuple_t_int24__to_t_int24__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5158:9:35","type":""},{"name":"value0","nodeType":"YulTypedName","src":"5169:6:35","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5180:4:35","type":""}],"src":"5092:188:35"},{"body":{"nodeType":"YulBlock","src":"5459:167:35","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5476:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"5487:2:35","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5469:6:35"},"nodeType":"YulFunctionCall","src":"5469:21:35"},"nodeType":"YulExpressionStatement","src":"5469:21:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5510:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"5521:2:35","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5506:3:35"},"nodeType":"YulFunctionCall","src":"5506:18:35"},{"kind":"number","nodeType":"YulLiteral","src":"5526:2:35","type":"","value":"17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5499:6:35"},"nodeType":"YulFunctionCall","src":"5499:30:35"},"nodeType":"YulExpressionStatement","src":"5499:30:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5549:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"5560:2:35","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5545:3:35"},"nodeType":"YulFunctionCall","src":"5545:18:35"},{"kind":"string","nodeType":"YulLiteral","src":"5565:19:35","type":"","value":"Price must be > 0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5538:6:35"},"nodeType":"YulFunctionCall","src":"5538:47:35"},"nodeType":"YulExpressionStatement","src":"5538:47:35"},{"nodeType":"YulAssignment","src":"5594:26:35","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5606:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"5617:2:35","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5602:3:35"},"nodeType":"YulFunctionCall","src":"5602:18:35"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5594:4:35"}]}]},"name":"abi_encode_tuple_t_stringliteral_1b6b7ea1ca601eedacaf5021d2f04292cf19df119f1635d866f2b5c9b71440a1__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5436:9:35","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5450:4:35","type":""}],"src":"5285:341:35"},{"body":{"nodeType":"YulBlock","src":"5805:164:35","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5822:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"5833:2:35","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5815:6:35"},"nodeType":"YulFunctionCall","src":"5815:21:35"},"nodeType":"YulExpressionStatement","src":"5815:21:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5856:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"5867:2:35","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5852:3:35"},"nodeType":"YulFunctionCall","src":"5852:18:35"},{"kind":"number","nodeType":"YulLiteral","src":"5872:2:35","type":"","value":"14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5845:6:35"},"nodeType":"YulFunctionCall","src":"5845:30:35"},"nodeType":"YulExpressionStatement","src":"5845:30:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5895:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"5906:2:35","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5891:3:35"},"nodeType":"YulFunctionCall","src":"5891:18:35"},{"kind":"string","nodeType":"YulLiteral","src":"5911:16:35","type":"","value":"Price too high"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5884:6:35"},"nodeType":"YulFunctionCall","src":"5884:44:35"},"nodeType":"YulExpressionStatement","src":"5884:44:35"},{"nodeType":"YulAssignment","src":"5937:26:35","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5949:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"5960:2:35","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5945:3:35"},"nodeType":"YulFunctionCall","src":"5945:18:35"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5937:4:35"}]}]},"name":"abi_encode_tuple_t_stringliteral_2bf82483a59b135c8b0ec563103e94de46ba0ad2b430936d2c2dc7c7a432bbfc__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5782:9:35","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5796:4:35","type":""}],"src":"5631:338:35"},{"body":{"nodeType":"YulBlock","src":"6148:171:35","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6165:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"6176:2:35","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6158:6:35"},"nodeType":"YulFunctionCall","src":"6158:21:35"},"nodeType":"YulExpressionStatement","src":"6158:21:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6199:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"6210:2:35","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6195:3:35"},"nodeType":"YulFunctionCall","src":"6195:18:35"},{"kind":"number","nodeType":"YulLiteral","src":"6215:2:35","type":"","value":"21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6188:6:35"},"nodeType":"YulFunctionCall","src":"6188:30:35"},"nodeType":"YulExpressionStatement","src":"6188:30:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6238:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"6249:2:35","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6234:3:35"},"nodeType":"YulFunctionCall","src":"6234:18:35"},{"kind":"string","nodeType":"YulLiteral","src":"6254:23:35","type":"","value":"Unauthorized callback"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6227:6:35"},"nodeType":"YulFunctionCall","src":"6227:51:35"},"nodeType":"YulExpressionStatement","src":"6227:51:35"},{"nodeType":"YulAssignment","src":"6287:26:35","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6299:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"6310:2:35","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6295:3:35"},"nodeType":"YulFunctionCall","src":"6295:18:35"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6287:4:35"}]}]},"name":"abi_encode_tuple_t_stringliteral_397aaaccf4e12d92be59946dfcacdf68dc2c5b82b4a37f6e4ef2cd79e09c3db4__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6125:9:35","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6139:4:35","type":""}],"src":"5974:345:35"},{"body":{"nodeType":"YulBlock","src":"6498:173:35","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6515:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"6526:2:35","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6508:6:35"},"nodeType":"YulFunctionCall","src":"6508:21:35"},"nodeType":"YulExpressionStatement","src":"6508:21:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6549:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"6560:2:35","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6545:3:35"},"nodeType":"YulFunctionCall","src":"6545:18:35"},{"kind":"number","nodeType":"YulLiteral","src":"6565:2:35","type":"","value":"23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6538:6:35"},"nodeType":"YulFunctionCall","src":"6538:30:35"},"nodeType":"YulExpressionStatement","src":"6538:30:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6588:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"6599:2:35","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6584:3:35"},"nodeType":"YulFunctionCall","src":"6584:18:35"},{"kind":"string","nodeType":"YulLiteral","src":"6604:25:35","type":"","value":"Position already active"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6577:6:35"},"nodeType":"YulFunctionCall","src":"6577:53:35"},"nodeType":"YulExpressionStatement","src":"6577:53:35"},{"nodeType":"YulAssignment","src":"6639:26:35","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6651:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"6662:2:35","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6647:3:35"},"nodeType":"YulFunctionCall","src":"6647:18:35"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6639:4:35"}]}]},"name":"abi_encode_tuple_t_stringliteral_44869874655bf0887220635de03422dfc5fe91eb11e0815cf64ede1a814a8cfa__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6475:9:35","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6489:4:35","type":""}],"src":"6324:347:35"},{"body":{"nodeType":"YulBlock","src":"6850:168:35","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6867:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"6878:2:35","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6860:6:35"},"nodeType":"YulFunctionCall","src":"6860:21:35"},"nodeType":"YulExpressionStatement","src":"6860:21:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6901:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"6912:2:35","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6897:3:35"},"nodeType":"YulFunctionCall","src":"6897:18:35"},{"kind":"number","nodeType":"YulLiteral","src":"6917:2:35","type":"","value":"18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6890:6:35"},"nodeType":"YulFunctionCall","src":"6890:30:35"},"nodeType":"YulExpressionStatement","src":"6890:30:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6940:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"6951:2:35","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6936:3:35"},"nodeType":"YulFunctionCall","src":"6936:18:35"},{"kind":"string","nodeType":"YulLiteral","src":"6956:20:35","type":"","value":"No active position"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6929:6:35"},"nodeType":"YulFunctionCall","src":"6929:48:35"},"nodeType":"YulExpressionStatement","src":"6929:48:35"},{"nodeType":"YulAssignment","src":"6986:26:35","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6998:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"7009:2:35","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6994:3:35"},"nodeType":"YulFunctionCall","src":"6994:18:35"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6986:4:35"}]}]},"name":"abi_encode_tuple_t_stringliteral_7f8125015117dd75b23ce94a1f1b95a56c6b263752737858dfbd59ad91b03334__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6827:9:35","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6841:4:35","type":""}],"src":"6676:342:35"},{"body":{"nodeType":"YulBlock","src":"7351:509:35","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7368:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"7379:3:35","type":"","value":"224"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7361:6:35"},"nodeType":"YulFunctionCall","src":"7361:22:35"},"nodeType":"YulExpressionStatement","src":"7361:22:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7403:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"7414:3:35","type":"","value":"224"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7399:3:35"},"nodeType":"YulFunctionCall","src":"7399:19:35"},{"kind":"number","nodeType":"YulLiteral","src":"7420:1:35","type":"","value":"6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7392:6:35"},"nodeType":"YulFunctionCall","src":"7392:30:35"},"nodeType":"YulExpressionStatement","src":"7392:30:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7442:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"7453:3:35","type":"","value":"256"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7438:3:35"},"nodeType":"YulFunctionCall","src":"7438:19:35"},{"kind":"string","nodeType":"YulLiteral","src":"7459:8:35","type":"","value":"REMOVE"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7431:6:35"},"nodeType":"YulFunctionCall","src":"7431:37:35"},"nodeType":"YulExpressionStatement","src":"7431:37:35"},{"nodeType":"YulAssignment","src":"7477:27:35","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7489:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"7500:3:35","type":"","value":"288"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7485:3:35"},"nodeType":"YulFunctionCall","src":"7485:19:35"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7477:4:35"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7524:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"7535:4:35","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7520:3:35"},"nodeType":"YulFunctionCall","src":"7520:20:35"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7553:1:35","type":"","value":"2"},{"name":"value0","nodeType":"YulIdentifier","src":"7556:6:35"}],"functionName":{"name":"signextend","nodeType":"YulIdentifier","src":"7542:10:35"},"nodeType":"YulFunctionCall","src":"7542:21:35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7513:6:35"},"nodeType":"YulFunctionCall","src":"7513:51:35"},"nodeType":"YulExpressionStatement","src":"7513:51:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7584:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"7595:2:35","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7580:3:35"},"nodeType":"YulFunctionCall","src":"7580:18:35"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7611:1:35","type":"","value":"2"},{"name":"value1","nodeType":"YulIdentifier","src":"7614:6:35"}],"functionName":{"name":"signextend","nodeType":"YulIdentifier","src":"7600:10:35"},"nodeType":"YulFunctionCall","src":"7600:21:35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7573:6:35"},"nodeType":"YulFunctionCall","src":"7573:49:35"},"nodeType":"YulExpressionStatement","src":"7573:49:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7642:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"7653:2:35","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7638:3:35"},"nodeType":"YulFunctionCall","src":"7638:18:35"},{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"7662:6:35"},{"kind":"number","nodeType":"YulLiteral","src":"7670:34:35","type":"","value":"0xffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"7658:3:35"},"nodeType":"YulFunctionCall","src":"7658:47:35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7631:6:35"},"nodeType":"YulFunctionCall","src":"7631:75:35"},"nodeType":"YulExpressionStatement","src":"7631:75:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7726:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"7737:3:35","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7722:3:35"},"nodeType":"YulFunctionCall","src":"7722:19:35"},{"name":"value3","nodeType":"YulIdentifier","src":"7743:6:35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7715:6:35"},"nodeType":"YulFunctionCall","src":"7715:35:35"},"nodeType":"YulExpressionStatement","src":"7715:35:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7770:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"7781:3:35","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7766:3:35"},"nodeType":"YulFunctionCall","src":"7766:19:35"},{"name":"value4","nodeType":"YulIdentifier","src":"7787:6:35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7759:6:35"},"nodeType":"YulFunctionCall","src":"7759:35:35"},"nodeType":"YulExpressionStatement","src":"7759:35:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7814:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"7825:3:35","type":"","value":"192"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7810:3:35"},"nodeType":"YulFunctionCall","src":"7810:19:35"},{"arguments":[{"arguments":[{"name":"value5","nodeType":"YulIdentifier","src":"7845:6:35"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"7838:6:35"},"nodeType":"YulFunctionCall","src":"7838:14:35"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"7831:6:35"},"nodeType":"YulFunctionCall","src":"7831:22:35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7803:6:35"},"nodeType":"YulFunctionCall","src":"7803:51:35"},"nodeType":"YulExpressionStatement","src":"7803:51:35"}]},"name":"abi_encode_tuple_t_stringliteral_8503b41ae6bc3c81c6fa6652ef11a964d3fe84420f61398c3faa65b1c9f5e77c_t_int24_t_int24_t_uint128_t_uint256_t_uint256_t_bool__to_t_string_memory_ptr_t_int24_t_int24_t_uint128_t_uint256_t_uint256_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7280:9:35","type":""},{"name":"value5","nodeType":"YulTypedName","src":"7291:6:35","type":""},{"name":"value4","nodeType":"YulTypedName","src":"7299:6:35","type":""},{"name":"value3","nodeType":"YulTypedName","src":"7307:6:35","type":""},{"name":"value2","nodeType":"YulTypedName","src":"7315:6:35","type":""},{"name":"value1","nodeType":"YulTypedName","src":"7323:6:35","type":""},{"name":"value0","nodeType":"YulTypedName","src":"7331:6:35","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7342:4:35","type":""}],"src":"7023:837:35"},{"body":{"nodeType":"YulBlock","src":"8039:168:35","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8056:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"8067:2:35","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8049:6:35"},"nodeType":"YulFunctionCall","src":"8049:21:35"},"nodeType":"YulExpressionStatement","src":"8049:21:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8090:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"8101:2:35","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8086:3:35"},"nodeType":"YulFunctionCall","src":"8086:18:35"},{"kind":"number","nodeType":"YulLiteral","src":"8106:2:35","type":"","value":"18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8079:6:35"},"nodeType":"YulFunctionCall","src":"8079:30:35"},"nodeType":"YulExpressionStatement","src":"8079:30:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8129:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"8140:2:35","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8125:3:35"},"nodeType":"YulFunctionCall","src":"8125:18:35"},{"kind":"string","nodeType":"YulLiteral","src":"8145:20:35","type":"","value":"Pool doesn't exist"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8118:6:35"},"nodeType":"YulFunctionCall","src":"8118:48:35"},"nodeType":"YulExpressionStatement","src":"8118:48:35"},{"nodeType":"YulAssignment","src":"8175:26:35","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8187:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"8198:2:35","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8183:3:35"},"nodeType":"YulFunctionCall","src":"8183:18:35"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8175:4:35"}]}]},"name":"abi_encode_tuple_t_stringliteral_87e7f60b8ff0f06b751ad82b250a560c5b632939464075923cf9b80024908ad5__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8016:9:35","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8030:4:35","type":""}],"src":"7865:342:35"},{"body":{"nodeType":"YulBlock","src":"8386:170:35","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8403:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"8414:2:35","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8396:6:35"},"nodeType":"YulFunctionCall","src":"8396:21:35"},"nodeType":"YulExpressionStatement","src":"8396:21:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8437:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"8448:2:35","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8433:3:35"},"nodeType":"YulFunctionCall","src":"8433:18:35"},{"kind":"number","nodeType":"YulLiteral","src":"8453:2:35","type":"","value":"20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8426:6:35"},"nodeType":"YulFunctionCall","src":"8426:30:35"},"nodeType":"YulExpressionStatement","src":"8426:30:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8476:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"8487:2:35","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8472:3:35"},"nodeType":"YulFunctionCall","src":"8472:18:35"},{"kind":"string","nodeType":"YulLiteral","src":"8492:22:35","type":"","value":"Invalid tick spacing"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8465:6:35"},"nodeType":"YulFunctionCall","src":"8465:50:35"},"nodeType":"YulExpressionStatement","src":"8465:50:35"},{"nodeType":"YulAssignment","src":"8524:26:35","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8536:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"8547:2:35","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8532:3:35"},"nodeType":"YulFunctionCall","src":"8532:18:35"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8524:4:35"}]}]},"name":"abi_encode_tuple_t_stringliteral_a4238a4cbfb4a17a74cd968b5708041a9e895755502d165d8fe5123867deb340__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8363:9:35","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8377:4:35","type":""}],"src":"8212:344:35"},{"body":{"nodeType":"YulBlock","src":"8735:163:35","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8752:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"8763:2:35","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8745:6:35"},"nodeType":"YulFunctionCall","src":"8745:21:35"},"nodeType":"YulExpressionStatement","src":"8745:21:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8786:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"8797:2:35","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8782:3:35"},"nodeType":"YulFunctionCall","src":"8782:18:35"},{"kind":"number","nodeType":"YulLiteral","src":"8802:2:35","type":"","value":"13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8775:6:35"},"nodeType":"YulFunctionCall","src":"8775:30:35"},"nodeType":"YulExpressionStatement","src":"8775:30:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8825:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"8836:2:35","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8821:3:35"},"nodeType":"YulFunctionCall","src":"8821:18:35"},{"kind":"string","nodeType":"YulLiteral","src":"8841:15:35","type":"","value":"Price too low"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8814:6:35"},"nodeType":"YulFunctionCall","src":"8814:43:35"},"nodeType":"YulExpressionStatement","src":"8814:43:35"},{"nodeType":"YulAssignment","src":"8866:26:35","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8878:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"8889:2:35","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8874:3:35"},"nodeType":"YulFunctionCall","src":"8874:18:35"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8866:4:35"}]}]},"name":"abi_encode_tuple_t_stringliteral_c84b7ff16e6331f7bad307bc338b44c939f313f04b9fabf2ea60e2f8791e8994__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8712:9:35","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8726:4:35","type":""}],"src":"8561:337:35"},{"body":{"nodeType":"YulBlock","src":"9077:179:35","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9094:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"9105:2:35","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9087:6:35"},"nodeType":"YulFunctionCall","src":"9087:21:35"},"nodeType":"YulExpressionStatement","src":"9087:21:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9128:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"9139:2:35","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9124:3:35"},"nodeType":"YulFunctionCall","src":"9124:18:35"},{"kind":"number","nodeType":"YulLiteral","src":"9144:2:35","type":"","value":"29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9117:6:35"},"nodeType":"YulFunctionCall","src":"9117:30:35"},"nodeType":"YulExpressionStatement","src":"9117:30:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9167:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"9178:2:35","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9163:3:35"},"nodeType":"YulFunctionCall","src":"9163:18:35"},{"kind":"string","nodeType":"YulLiteral","src":"9183:31:35","type":"","value":"Tick spacing must be positive"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9156:6:35"},"nodeType":"YulFunctionCall","src":"9156:59:35"},"nodeType":"YulExpressionStatement","src":"9156:59:35"},{"nodeType":"YulAssignment","src":"9224:26:35","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9236:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"9247:2:35","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9232:3:35"},"nodeType":"YulFunctionCall","src":"9232:18:35"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9224:4:35"}]}]},"name":"abi_encode_tuple_t_stringliteral_d6a17cf573c858616829ab16c721c89658f90f1967194b54c8dd267605fae45b__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9054:9:35","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9068:4:35","type":""}],"src":"8903:353:35"},{"body":{"nodeType":"YulBlock","src":"9589:507:35","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9606:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"9617:3:35","type":"","value":"224"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9599:6:35"},"nodeType":"YulFunctionCall","src":"9599:22:35"},"nodeType":"YulExpressionStatement","src":"9599:22:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9641:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"9652:3:35","type":"","value":"224"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9637:3:35"},"nodeType":"YulFunctionCall","src":"9637:19:35"},{"kind":"number","nodeType":"YulLiteral","src":"9658:1:35","type":"","value":"4"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9630:6:35"},"nodeType":"YulFunctionCall","src":"9630:30:35"},"nodeType":"YulExpressionStatement","src":"9630:30:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9680:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"9691:3:35","type":"","value":"256"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9676:3:35"},"nodeType":"YulFunctionCall","src":"9676:19:35"},{"kind":"string","nodeType":"YulLiteral","src":"9697:6:35","type":"","value":"MINT"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9669:6:35"},"nodeType":"YulFunctionCall","src":"9669:35:35"},"nodeType":"YulExpressionStatement","src":"9669:35:35"},{"nodeType":"YulAssignment","src":"9713:27:35","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9725:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"9736:3:35","type":"","value":"288"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9721:3:35"},"nodeType":"YulFunctionCall","src":"9721:19:35"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9713:4:35"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9760:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"9771:4:35","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9756:3:35"},"nodeType":"YulFunctionCall","src":"9756:20:35"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9789:1:35","type":"","value":"2"},{"name":"value0","nodeType":"YulIdentifier","src":"9792:6:35"}],"functionName":{"name":"signextend","nodeType":"YulIdentifier","src":"9778:10:35"},"nodeType":"YulFunctionCall","src":"9778:21:35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9749:6:35"},"nodeType":"YulFunctionCall","src":"9749:51:35"},"nodeType":"YulExpressionStatement","src":"9749:51:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9820:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"9831:2:35","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9816:3:35"},"nodeType":"YulFunctionCall","src":"9816:18:35"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9847:1:35","type":"","value":"2"},{"name":"value1","nodeType":"YulIdentifier","src":"9850:6:35"}],"functionName":{"name":"signextend","nodeType":"YulIdentifier","src":"9836:10:35"},"nodeType":"YulFunctionCall","src":"9836:21:35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9809:6:35"},"nodeType":"YulFunctionCall","src":"9809:49:35"},"nodeType":"YulExpressionStatement","src":"9809:49:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9878:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"9889:2:35","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9874:3:35"},"nodeType":"YulFunctionCall","src":"9874:18:35"},{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"9898:6:35"},{"kind":"number","nodeType":"YulLiteral","src":"9906:34:35","type":"","value":"0xffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"9894:3:35"},"nodeType":"YulFunctionCall","src":"9894:47:35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9867:6:35"},"nodeType":"YulFunctionCall","src":"9867:75:35"},"nodeType":"YulExpressionStatement","src":"9867:75:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9962:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"9973:3:35","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9958:3:35"},"nodeType":"YulFunctionCall","src":"9958:19:35"},{"name":"value3","nodeType":"YulIdentifier","src":"9979:6:35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9951:6:35"},"nodeType":"YulFunctionCall","src":"9951:35:35"},"nodeType":"YulExpressionStatement","src":"9951:35:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10006:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"10017:3:35","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10002:3:35"},"nodeType":"YulFunctionCall","src":"10002:19:35"},{"name":"value4","nodeType":"YulIdentifier","src":"10023:6:35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9995:6:35"},"nodeType":"YulFunctionCall","src":"9995:35:35"},"nodeType":"YulExpressionStatement","src":"9995:35:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10050:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"10061:3:35","type":"","value":"192"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10046:3:35"},"nodeType":"YulFunctionCall","src":"10046:19:35"},{"arguments":[{"arguments":[{"name":"value5","nodeType":"YulIdentifier","src":"10081:6:35"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"10074:6:35"},"nodeType":"YulFunctionCall","src":"10074:14:35"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"10067:6:35"},"nodeType":"YulFunctionCall","src":"10067:22:35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10039:6:35"},"nodeType":"YulFunctionCall","src":"10039:51:35"},"nodeType":"YulExpressionStatement","src":"10039:51:35"}]},"name":"abi_encode_tuple_t_stringliteral_fdf81848136595c31bb5f76217767372bc4bf906663038eb38381131ea27ecba_t_int24_t_int24_t_uint128_t_uint256_t_uint256_t_bool__to_t_string_memory_ptr_t_int24_t_int24_t_uint128_t_uint256_t_uint256_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9518:9:35","type":""},{"name":"value5","nodeType":"YulTypedName","src":"9529:6:35","type":""},{"name":"value4","nodeType":"YulTypedName","src":"9537:6:35","type":""},{"name":"value3","nodeType":"YulTypedName","src":"9545:6:35","type":""},{"name":"value2","nodeType":"YulTypedName","src":"9553:6:35","type":""},{"name":"value1","nodeType":"YulTypedName","src":"9561:6:35","type":""},{"name":"value0","nodeType":"YulTypedName","src":"9569:6:35","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9580:4:35","type":""}],"src":"9261:835:35"},{"body":{"nodeType":"YulBlock","src":"10264:411:35","statements":[{"nodeType":"YulAssignment","src":"10274:27:35","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10286:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"10297:3:35","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10282:3:35"},"nodeType":"YulFunctionCall","src":"10282:19:35"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10274:4:35"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10317:9:35"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"10334:6:35"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"10328:5:35"},"nodeType":"YulFunctionCall","src":"10328:13:35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10310:6:35"},"nodeType":"YulFunctionCall","src":"10310:32:35"},"nodeType":"YulExpressionStatement","src":"10310:32:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10362:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"10373:4:35","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10358:3:35"},"nodeType":"YulFunctionCall","src":"10358:20:35"},{"arguments":[{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"10394:6:35"},{"kind":"number","nodeType":"YulLiteral","src":"10402:4:35","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10390:3:35"},"nodeType":"YulFunctionCall","src":"10390:17:35"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"10384:5:35"},"nodeType":"YulFunctionCall","src":"10384:24:35"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10418:3:35","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"10423:1:35","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"10414:3:35"},"nodeType":"YulFunctionCall","src":"10414:11:35"},{"kind":"number","nodeType":"YulLiteral","src":"10427:1:35","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10410:3:35"},"nodeType":"YulFunctionCall","src":"10410:19:35"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"10380:3:35"},"nodeType":"YulFunctionCall","src":"10380:50:35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10351:6:35"},"nodeType":"YulFunctionCall","src":"10351:80:35"},"nodeType":"YulExpressionStatement","src":"10351:80:35"},{"nodeType":"YulVariableDeclaration","src":"10440:44:35","value":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"10470:6:35"},{"kind":"number","nodeType":"YulLiteral","src":"10478:4:35","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10466:3:35"},"nodeType":"YulFunctionCall","src":"10466:17:35"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"10460:5:35"},"nodeType":"YulFunctionCall","src":"10460:24:35"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"10444:12:35","type":""}]},{"nodeType":"YulVariableDeclaration","src":"10493:44:35","value":{"kind":"number","nodeType":"YulLiteral","src":"10503:34:35","type":"","value":"0xffffffffffffffffffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"10497:2:35","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10557:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"10568:4:35","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10553:3:35"},"nodeType":"YulFunctionCall","src":"10553:20:35"},{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"10579:12:35"},{"name":"_1","nodeType":"YulIdentifier","src":"10593:2:35"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"10575:3:35"},"nodeType":"YulFunctionCall","src":"10575:21:35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10546:6:35"},"nodeType":"YulFunctionCall","src":"10546:51:35"},"nodeType":"YulExpressionStatement","src":"10546:51:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10617:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"10628:4:35","type":"","value":"0x60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10613:3:35"},"nodeType":"YulFunctionCall","src":"10613:20:35"},{"arguments":[{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"10649:6:35"},{"kind":"number","nodeType":"YulLiteral","src":"10657:4:35","type":"","value":"0x60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10645:3:35"},"nodeType":"YulFunctionCall","src":"10645:17:35"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"10639:5:35"},"nodeType":"YulFunctionCall","src":"10639:24:35"},{"name":"_1","nodeType":"YulIdentifier","src":"10665:2:35"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"10635:3:35"},"nodeType":"YulFunctionCall","src":"10635:33:35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10606:6:35"},"nodeType":"YulFunctionCall","src":"10606:63:35"},"nodeType":"YulExpressionStatement","src":"10606:63:35"}]},"name":"abi_encode_tuple_t_struct$_CollectParams_$2601_memory_ptr__to_t_struct$_CollectParams_$2601_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10233:9:35","type":""},{"name":"value0","nodeType":"YulTypedName","src":"10244:6:35","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"10255:4:35","type":""}],"src":"10101:574:35"},{"body":{"nodeType":"YulBlock","src":"10863:377:35","statements":[{"nodeType":"YulAssignment","src":"10873:27:35","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10885:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"10896:3:35","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10881:3:35"},"nodeType":"YulFunctionCall","src":"10881:19:35"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10873:4:35"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10916:9:35"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"10933:6:35"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"10927:5:35"},"nodeType":"YulFunctionCall","src":"10927:13:35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10909:6:35"},"nodeType":"YulFunctionCall","src":"10909:32:35"},"nodeType":"YulExpressionStatement","src":"10909:32:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10961:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"10972:4:35","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10957:3:35"},"nodeType":"YulFunctionCall","src":"10957:20:35"},{"arguments":[{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"10993:6:35"},{"kind":"number","nodeType":"YulLiteral","src":"11001:4:35","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10989:3:35"},"nodeType":"YulFunctionCall","src":"10989:17:35"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"10983:5:35"},"nodeType":"YulFunctionCall","src":"10983:24:35"},{"kind":"number","nodeType":"YulLiteral","src":"11009:34:35","type":"","value":"0xffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"10979:3:35"},"nodeType":"YulFunctionCall","src":"10979:65:35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10950:6:35"},"nodeType":"YulFunctionCall","src":"10950:95:35"},"nodeType":"YulExpressionStatement","src":"10950:95:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11065:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"11076:4:35","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11061:3:35"},"nodeType":"YulFunctionCall","src":"11061:20:35"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"11093:6:35"},{"kind":"number","nodeType":"YulLiteral","src":"11101:4:35","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11089:3:35"},"nodeType":"YulFunctionCall","src":"11089:17:35"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"11083:5:35"},"nodeType":"YulFunctionCall","src":"11083:24:35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11054:6:35"},"nodeType":"YulFunctionCall","src":"11054:54:35"},"nodeType":"YulExpressionStatement","src":"11054:54:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11128:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"11139:4:35","type":"","value":"0x60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11124:3:35"},"nodeType":"YulFunctionCall","src":"11124:20:35"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"11156:6:35"},{"kind":"number","nodeType":"YulLiteral","src":"11164:4:35","type":"","value":"0x60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11152:3:35"},"nodeType":"YulFunctionCall","src":"11152:17:35"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"11146:5:35"},"nodeType":"YulFunctionCall","src":"11146:24:35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11117:6:35"},"nodeType":"YulFunctionCall","src":"11117:54:35"},"nodeType":"YulExpressionStatement","src":"11117:54:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11191:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"11202:4:35","type":"","value":"0x80"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11187:3:35"},"nodeType":"YulFunctionCall","src":"11187:20:35"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"11219:6:35"},{"kind":"number","nodeType":"YulLiteral","src":"11227:4:35","type":"","value":"0x80"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11215:3:35"},"nodeType":"YulFunctionCall","src":"11215:17:35"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"11209:5:35"},"nodeType":"YulFunctionCall","src":"11209:24:35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11180:6:35"},"nodeType":"YulFunctionCall","src":"11180:54:35"},"nodeType":"YulExpressionStatement","src":"11180:54:35"}]},"name":"abi_encode_tuple_t_struct$_DecreaseLiquidityParams_$2582_memory_ptr__to_t_struct$_DecreaseLiquidityParams_$2582_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10832:9:35","type":""},{"name":"value0","nodeType":"YulTypedName","src":"10843:6:35","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"10854:4:35","type":""}],"src":"10680:560:35"},{"body":{"nodeType":"YulBlock","src":"11402:1077:35","statements":[{"nodeType":"YulAssignment","src":"11412:27:35","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11424:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"11435:3:35","type":"","value":"352"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11420:3:35"},"nodeType":"YulFunctionCall","src":"11420:19:35"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11412:4:35"}]},{"expression":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"11475:6:35"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"11469:5:35"},"nodeType":"YulFunctionCall","src":"11469:13:35"},{"name":"headStart","nodeType":"YulIdentifier","src":"11484:9:35"}],"functionName":{"name":"abi_encode_t_address","nodeType":"YulIdentifier","src":"11448:20:35"},"nodeType":"YulFunctionCall","src":"11448:46:35"},"nodeType":"YulExpressionStatement","src":"11448:46:35"},{"nodeType":"YulVariableDeclaration","src":"11503:44:35","value":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"11533:6:35"},{"kind":"number","nodeType":"YulLiteral","src":"11541:4:35","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11529:3:35"},"nodeType":"YulFunctionCall","src":"11529:17:35"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"11523:5:35"},"nodeType":"YulFunctionCall","src":"11523:24:35"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"11507:12:35","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"11577:12:35"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11595:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"11606:4:35","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11591:3:35"},"nodeType":"YulFunctionCall","src":"11591:20:35"}],"functionName":{"name":"abi_encode_t_address","nodeType":"YulIdentifier","src":"11556:20:35"},"nodeType":"YulFunctionCall","src":"11556:56:35"},"nodeType":"YulExpressionStatement","src":"11556:56:35"},{"nodeType":"YulVariableDeclaration","src":"11621:46:35","value":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"11653:6:35"},{"kind":"number","nodeType":"YulLiteral","src":"11661:4:35","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11649:3:35"},"nodeType":"YulFunctionCall","src":"11649:17:35"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"11643:5:35"},"nodeType":"YulFunctionCall","src":"11643:24:35"},"variables":[{"name":"memberValue0_1","nodeType":"YulTypedName","src":"11625:14:35","type":""}]},{"expression":{"arguments":[{"name":"memberValue0_1","nodeType":"YulIdentifier","src":"11696:14:35"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11716:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"11727:4:35","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11712:3:35"},"nodeType":"YulFunctionCall","src":"11712:20:35"}],"functionName":{"name":"abi_encode_t_uint24","nodeType":"YulIdentifier","src":"11676:19:35"},"nodeType":"YulFunctionCall","src":"11676:57:35"},"nodeType":"YulExpressionStatement","src":"11676:57:35"},{"nodeType":"YulVariableDeclaration","src":"11742:46:35","value":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"11774:6:35"},{"kind":"number","nodeType":"YulLiteral","src":"11782:4:35","type":"","value":"0x60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11770:3:35"},"nodeType":"YulFunctionCall","src":"11770:17:35"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"11764:5:35"},"nodeType":"YulFunctionCall","src":"11764:24:35"},"variables":[{"name":"memberValue0_2","nodeType":"YulTypedName","src":"11746:14:35","type":""}]},{"expression":{"arguments":[{"name":"memberValue0_2","nodeType":"YulIdentifier","src":"11816:14:35"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11836:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"11847:4:35","type":"","value":"0x60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11832:3:35"},"nodeType":"YulFunctionCall","src":"11832:20:35"}],"functionName":{"name":"abi_encode_t_int24","nodeType":"YulIdentifier","src":"11797:18:35"},"nodeType":"YulFunctionCall","src":"11797:56:35"},"nodeType":"YulExpressionStatement","src":"11797:56:35"},{"nodeType":"YulVariableDeclaration","src":"11862:46:35","value":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"11894:6:35"},{"kind":"number","nodeType":"YulLiteral","src":"11902:4:35","type":"","value":"0x80"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11890:3:35"},"nodeType":"YulFunctionCall","src":"11890:17:35"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"11884:5:35"},"nodeType":"YulFunctionCall","src":"11884:24:35"},"variables":[{"name":"memberValue0_3","nodeType":"YulTypedName","src":"11866:14:35","type":""}]},{"expression":{"arguments":[{"name":"memberValue0_3","nodeType":"YulIdentifier","src":"11936:14:35"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11956:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"11967:4:35","type":"","value":"0x80"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11952:3:35"},"nodeType":"YulFunctionCall","src":"11952:20:35"}],"functionName":{"name":"abi_encode_t_int24","nodeType":"YulIdentifier","src":"11917:18:35"},"nodeType":"YulFunctionCall","src":"11917:56:35"},"nodeType":"YulExpressionStatement","src":"11917:56:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11993:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"12004:4:35","type":"","value":"0xa0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11989:3:35"},"nodeType":"YulFunctionCall","src":"11989:20:35"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"12021:6:35"},{"kind":"number","nodeType":"YulLiteral","src":"12029:4:35","type":"","value":"0xa0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12017:3:35"},"nodeType":"YulFunctionCall","src":"12017:17:35"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"12011:5:35"},"nodeType":"YulFunctionCall","src":"12011:24:35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11982:6:35"},"nodeType":"YulFunctionCall","src":"11982:54:35"},"nodeType":"YulExpressionStatement","src":"11982:54:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12056:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"12067:4:35","type":"","value":"0xc0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12052:3:35"},"nodeType":"YulFunctionCall","src":"12052:20:35"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"12084:6:35"},{"kind":"number","nodeType":"YulLiteral","src":"12092:4:35","type":"","value":"0xc0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12080:3:35"},"nodeType":"YulFunctionCall","src":"12080:17:35"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"12074:5:35"},"nodeType":"YulFunctionCall","src":"12074:24:35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12045:6:35"},"nodeType":"YulFunctionCall","src":"12045:54:35"},"nodeType":"YulExpressionStatement","src":"12045:54:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12119:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"12130:4:35","type":"","value":"0xe0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12115:3:35"},"nodeType":"YulFunctionCall","src":"12115:20:35"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"12147:6:35"},{"kind":"number","nodeType":"YulLiteral","src":"12155:4:35","type":"","value":"0xe0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12143:3:35"},"nodeType":"YulFunctionCall","src":"12143:17:35"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"12137:5:35"},"nodeType":"YulFunctionCall","src":"12137:24:35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12108:6:35"},"nodeType":"YulFunctionCall","src":"12108:54:35"},"nodeType":"YulExpressionStatement","src":"12108:54:35"},{"nodeType":"YulVariableDeclaration","src":"12171:16:35","value":{"kind":"number","nodeType":"YulLiteral","src":"12181:6:35","type":"","value":"0x0100"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"12175:2:35","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12207:9:35"},{"name":"_1","nodeType":"YulIdentifier","src":"12218:2:35"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12203:3:35"},"nodeType":"YulFunctionCall","src":"12203:18:35"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"12233:6:35"},{"name":"_1","nodeType":"YulIdentifier","src":"12241:2:35"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12229:3:35"},"nodeType":"YulFunctionCall","src":"12229:15:35"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"12223:5:35"},"nodeType":"YulFunctionCall","src":"12223:22:35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12196:6:35"},"nodeType":"YulFunctionCall","src":"12196:50:35"},"nodeType":"YulExpressionStatement","src":"12196:50:35"},{"nodeType":"YulVariableDeclaration","src":"12255:16:35","value":{"kind":"number","nodeType":"YulLiteral","src":"12265:6:35","type":"","value":"0x0120"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"12259:2:35","type":""}]},{"nodeType":"YulVariableDeclaration","src":"12280:44:35","value":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"12312:6:35"},{"name":"_2","nodeType":"YulIdentifier","src":"12320:2:35"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12308:3:35"},"nodeType":"YulFunctionCall","src":"12308:15:35"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"12302:5:35"},"nodeType":"YulFunctionCall","src":"12302:22:35"},"variables":[{"name":"memberValue0_4","nodeType":"YulTypedName","src":"12284:14:35","type":""}]},{"expression":{"arguments":[{"name":"memberValue0_4","nodeType":"YulIdentifier","src":"12354:14:35"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12374:9:35"},{"name":"_2","nodeType":"YulIdentifier","src":"12385:2:35"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12370:3:35"},"nodeType":"YulFunctionCall","src":"12370:18:35"}],"functionName":{"name":"abi_encode_t_address","nodeType":"YulIdentifier","src":"12333:20:35"},"nodeType":"YulFunctionCall","src":"12333:56:35"},"nodeType":"YulExpressionStatement","src":"12333:56:35"},{"nodeType":"YulVariableDeclaration","src":"12398:16:35","value":{"kind":"number","nodeType":"YulLiteral","src":"12408:6:35","type":"","value":"0x0140"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"12402:2:35","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12434:9:35"},{"name":"_3","nodeType":"YulIdentifier","src":"12445:2:35"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12430:3:35"},"nodeType":"YulFunctionCall","src":"12430:18:35"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"12460:6:35"},{"name":"_3","nodeType":"YulIdentifier","src":"12468:2:35"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12456:3:35"},"nodeType":"YulFunctionCall","src":"12456:15:35"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"12450:5:35"},"nodeType":"YulFunctionCall","src":"12450:22:35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12423:6:35"},"nodeType":"YulFunctionCall","src":"12423:50:35"},"nodeType":"YulExpressionStatement","src":"12423:50:35"}]},"name":"abi_encode_tuple_t_struct$_MintParams_$2532_memory_ptr__to_t_struct$_MintParams_$2532_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11371:9:35","type":""},{"name":"value0","nodeType":"YulTypedName","src":"11382:6:35","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11393:4:35","type":""}],"src":"11245:1234:35"},{"body":{"nodeType":"YulBlock","src":"12583:91:35","statements":[{"nodeType":"YulAssignment","src":"12593:26:35","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12605:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"12616:2:35","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12601:3:35"},"nodeType":"YulFunctionCall","src":"12601:18:35"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12593:4:35"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12635:9:35"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"12650:6:35"},{"kind":"number","nodeType":"YulLiteral","src":"12658:8:35","type":"","value":"0xffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"12646:3:35"},"nodeType":"YulFunctionCall","src":"12646:21:35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12628:6:35"},"nodeType":"YulFunctionCall","src":"12628:40:35"},"nodeType":"YulExpressionStatement","src":"12628:40:35"}]},"name":"abi_encode_tuple_t_uint24__to_t_uint24__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12552:9:35","type":""},{"name":"value0","nodeType":"YulTypedName","src":"12563:6:35","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12574:4:35","type":""}],"src":"12484:190:35"},{"body":{"nodeType":"YulBlock","src":"12780:76:35","statements":[{"nodeType":"YulAssignment","src":"12790:26:35","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12802:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"12813:2:35","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12798:3:35"},"nodeType":"YulFunctionCall","src":"12798:18:35"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12790:4:35"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12832:9:35"},{"name":"value0","nodeType":"YulIdentifier","src":"12843:6:35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12825:6:35"},"nodeType":"YulFunctionCall","src":"12825:25:35"},"nodeType":"YulExpressionStatement","src":"12825:25:35"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12749:9:35","type":""},{"name":"value0","nodeType":"YulTypedName","src":"12760:6:35","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12771:4:35","type":""}],"src":"12679:177:35"},{"body":{"nodeType":"YulBlock","src":"13060:337:35","statements":[{"nodeType":"YulAssignment","src":"13070:27:35","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13082:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"13093:3:35","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13078:3:35"},"nodeType":"YulFunctionCall","src":"13078:19:35"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13070:4:35"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13113:9:35"},{"name":"value0","nodeType":"YulIdentifier","src":"13124:6:35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13106:6:35"},"nodeType":"YulFunctionCall","src":"13106:25:35"},"nodeType":"YulExpressionStatement","src":"13106:25:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13151:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"13162:2:35","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13147:3:35"},"nodeType":"YulFunctionCall","src":"13147:18:35"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"13171:6:35"},{"kind":"number","nodeType":"YulLiteral","src":"13179:34:35","type":"","value":"0xffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"13167:3:35"},"nodeType":"YulFunctionCall","src":"13167:47:35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13140:6:35"},"nodeType":"YulFunctionCall","src":"13140:75:35"},"nodeType":"YulExpressionStatement","src":"13140:75:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13235:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"13246:2:35","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13231:3:35"},"nodeType":"YulFunctionCall","src":"13231:18:35"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13262:1:35","type":"","value":"2"},{"name":"value2","nodeType":"YulIdentifier","src":"13265:6:35"}],"functionName":{"name":"signextend","nodeType":"YulIdentifier","src":"13251:10:35"},"nodeType":"YulFunctionCall","src":"13251:21:35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13224:6:35"},"nodeType":"YulFunctionCall","src":"13224:49:35"},"nodeType":"YulExpressionStatement","src":"13224:49:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13293:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"13304:2:35","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13289:3:35"},"nodeType":"YulFunctionCall","src":"13289:18:35"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13320:1:35","type":"","value":"2"},{"name":"value3","nodeType":"YulIdentifier","src":"13323:6:35"}],"functionName":{"name":"signextend","nodeType":"YulIdentifier","src":"13309:10:35"},"nodeType":"YulFunctionCall","src":"13309:21:35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13282:6:35"},"nodeType":"YulFunctionCall","src":"13282:49:35"},"nodeType":"YulExpressionStatement","src":"13282:49:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13351:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"13362:3:35","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13347:3:35"},"nodeType":"YulFunctionCall","src":"13347:19:35"},{"arguments":[{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"13382:6:35"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"13375:6:35"},"nodeType":"YulFunctionCall","src":"13375:14:35"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"13368:6:35"},"nodeType":"YulFunctionCall","src":"13368:22:35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13340:6:35"},"nodeType":"YulFunctionCall","src":"13340:51:35"},"nodeType":"YulExpressionStatement","src":"13340:51:35"}]},"name":"abi_encode_tuple_t_uint256_t_uint128_t_int24_t_int24_t_bool__to_t_uint256_t_uint128_t_int24_t_int24_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12997:9:35","type":""},{"name":"value4","nodeType":"YulTypedName","src":"13008:6:35","type":""},{"name":"value3","nodeType":"YulTypedName","src":"13016:6:35","type":""},{"name":"value2","nodeType":"YulTypedName","src":"13024:6:35","type":""},{"name":"value1","nodeType":"YulTypedName","src":"13032:6:35","type":""},{"name":"value0","nodeType":"YulTypedName","src":"13040:6:35","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13051:4:35","type":""}],"src":"12861:536:35"},{"body":{"nodeType":"YulBlock","src":"13653:399:35","statements":[{"nodeType":"YulAssignment","src":"13663:27:35","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13675:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"13686:3:35","type":"","value":"224"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13671:3:35"},"nodeType":"YulFunctionCall","src":"13671:19:35"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13663:4:35"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13706:9:35"},{"name":"value0","nodeType":"YulIdentifier","src":"13717:6:35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13699:6:35"},"nodeType":"YulFunctionCall","src":"13699:25:35"},"nodeType":"YulExpressionStatement","src":"13699:25:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13744:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"13755:2:35","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13740:3:35"},"nodeType":"YulFunctionCall","src":"13740:18:35"},{"name":"value1","nodeType":"YulIdentifier","src":"13760:6:35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13733:6:35"},"nodeType":"YulFunctionCall","src":"13733:34:35"},"nodeType":"YulExpressionStatement","src":"13733:34:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13787:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"13798:2:35","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13783:3:35"},"nodeType":"YulFunctionCall","src":"13783:18:35"},{"name":"value2","nodeType":"YulIdentifier","src":"13803:6:35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13776:6:35"},"nodeType":"YulFunctionCall","src":"13776:34:35"},"nodeType":"YulExpressionStatement","src":"13776:34:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13830:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"13841:2:35","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13826:3:35"},"nodeType":"YulFunctionCall","src":"13826:18:35"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13857:1:35","type":"","value":"2"},{"name":"value3","nodeType":"YulIdentifier","src":"13860:6:35"}],"functionName":{"name":"signextend","nodeType":"YulIdentifier","src":"13846:10:35"},"nodeType":"YulFunctionCall","src":"13846:21:35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13819:6:35"},"nodeType":"YulFunctionCall","src":"13819:49:35"},"nodeType":"YulExpressionStatement","src":"13819:49:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13888:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"13899:3:35","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13884:3:35"},"nodeType":"YulFunctionCall","src":"13884:19:35"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13916:1:35","type":"","value":"2"},{"name":"value4","nodeType":"YulIdentifier","src":"13919:6:35"}],"functionName":{"name":"signextend","nodeType":"YulIdentifier","src":"13905:10:35"},"nodeType":"YulFunctionCall","src":"13905:21:35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13877:6:35"},"nodeType":"YulFunctionCall","src":"13877:50:35"},"nodeType":"YulExpressionStatement","src":"13877:50:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13947:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"13958:3:35","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13943:3:35"},"nodeType":"YulFunctionCall","src":"13943:19:35"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13975:1:35","type":"","value":"2"},{"name":"value5","nodeType":"YulIdentifier","src":"13978:6:35"}],"functionName":{"name":"signextend","nodeType":"YulIdentifier","src":"13964:10:35"},"nodeType":"YulFunctionCall","src":"13964:21:35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13936:6:35"},"nodeType":"YulFunctionCall","src":"13936:50:35"},"nodeType":"YulExpressionStatement","src":"13936:50:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14006:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"14017:3:35","type":"","value":"192"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14002:3:35"},"nodeType":"YulFunctionCall","src":"14002:19:35"},{"arguments":[{"arguments":[{"name":"value6","nodeType":"YulIdentifier","src":"14037:6:35"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"14030:6:35"},"nodeType":"YulFunctionCall","src":"14030:14:35"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"14023:6:35"},"nodeType":"YulFunctionCall","src":"14023:22:35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13995:6:35"},"nodeType":"YulFunctionCall","src":"13995:51:35"},"nodeType":"YulExpressionStatement","src":"13995:51:35"}]},"name":"abi_encode_tuple_t_uint256_t_uint256_t_uint256_t_int24_t_int24_t_int24_t_bool__to_t_uint256_t_uint256_t_uint256_t_int24_t_int24_t_int24_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13574:9:35","type":""},{"name":"value6","nodeType":"YulTypedName","src":"13585:6:35","type":""},{"name":"value5","nodeType":"YulTypedName","src":"13593:6:35","type":""},{"name":"value4","nodeType":"YulTypedName","src":"13601:6:35","type":""},{"name":"value3","nodeType":"YulTypedName","src":"13609:6:35","type":""},{"name":"value2","nodeType":"YulTypedName","src":"13617:6:35","type":""},{"name":"value1","nodeType":"YulTypedName","src":"13625:6:35","type":""},{"name":"value0","nodeType":"YulTypedName","src":"13633:6:35","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13644:4:35","type":""}],"src":"13402:650:35"},{"body":{"nodeType":"YulBlock","src":"14154:87:35","statements":[{"nodeType":"YulAssignment","src":"14164:26:35","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14176:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"14187:2:35","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14172:3:35"},"nodeType":"YulFunctionCall","src":"14172:18:35"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14164:4:35"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14206:9:35"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"14221:6:35"},{"kind":"number","nodeType":"YulLiteral","src":"14229:4:35","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"14217:3:35"},"nodeType":"YulFunctionCall","src":"14217:17:35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14199:6:35"},"nodeType":"YulFunctionCall","src":"14199:36:35"},"nodeType":"YulExpressionStatement","src":"14199:36:35"}]},"name":"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14123:9:35","type":""},{"name":"value0","nodeType":"YulTypedName","src":"14134:6:35","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"14145:4:35","type":""}],"src":"14057:184:35"},{"body":{"nodeType":"YulBlock","src":"14293:86:35","statements":[{"body":{"nodeType":"YulBlock","src":"14357:16:35","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14366:1:35","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"14369:1:35","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"14359:6:35"},"nodeType":"YulFunctionCall","src":"14359:12:35"},"nodeType":"YulExpressionStatement","src":"14359:12:35"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"14316:5:35"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"14327:5:35"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14342:3:35","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"14347:1:35","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"14338:3:35"},"nodeType":"YulFunctionCall","src":"14338:11:35"},{"kind":"number","nodeType":"YulLiteral","src":"14351:1:35","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"14334:3:35"},"nodeType":"YulFunctionCall","src":"14334:19:35"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"14323:3:35"},"nodeType":"YulFunctionCall","src":"14323:31:35"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"14313:2:35"},"nodeType":"YulFunctionCall","src":"14313:42:35"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"14306:6:35"},"nodeType":"YulFunctionCall","src":"14306:50:35"},"nodeType":"YulIf","src":"14303:2:35"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"14282:5:35","type":""}],"src":"14246:133:35"}]},"contents":"{\n    { }\n    function abi_decode_t_uint16_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        if iszero(eq(value, and(value, 0xffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let value := calldataload(headStart)\n        validator_revert_t_address(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let value := mload(headStart)\n        validator_revert_t_address(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_uint160t_int24t_uint16t_uint16t_uint16t_uint8t_bool_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6\n    {\n        if slt(sub(dataEnd, headStart), 224) { revert(value4, value4) }\n        let value := mload(headStart)\n        validator_revert_t_address(value)\n        value0 := value\n        let value_1 := mload(add(headStart, 32))\n        if iszero(eq(value_1, signextend(2, value_1))) { revert(value4, value4) }\n        value1 := value_1\n        value2 := abi_decode_t_uint16_fromMemory(add(headStart, 64))\n        value3 := abi_decode_t_uint16_fromMemory(add(headStart, 96))\n        value4 := abi_decode_t_uint16_fromMemory(add(headStart, 128))\n        let value_2 := mload(add(headStart, 160))\n        if iszero(eq(value_2, and(value_2, 0xff))) { revert(value5, value5) }\n        value5 := value_2\n        let value_3 := mload(add(headStart, 192))\n        if iszero(eq(value_3, iszero(iszero(value_3)))) { revert(value6, value6) }\n        value6 := value_3\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := mload(headStart)\n    }\n    function abi_decode_tuple_t_uint256t_uint128t_uint256t_uint256_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(value0, value0) }\n        value0 := mload(headStart)\n        let value := mload(add(headStart, 32))\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffff))) { revert(value1, value1) }\n        value1 := value\n        value2 := mload(add(headStart, 64))\n        value3 := mload(add(headStart, 96))\n    }\n    function abi_decode_tuple_t_uint256t_uint256_fromMemory(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value0, value0) }\n        value0 := mload(headStart)\n        value1 := mload(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_uint256t_uint256t_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(value0, value0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n        let offset := calldataload(add(headStart, 64))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(value2, value2) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(value2, value2) }\n        let length := calldataload(_2)\n        if gt(length, _1) { revert(value2, value2) }\n        if gt(add(add(_2, length), 32), dataEnd) { revert(value2, value2) }\n        value2 := add(_2, 32)\n        value3 := length\n    }\n    function abi_encode_t_address(value, pos)\n    {\n        mstore(pos, and(value, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_t_int24(value, pos)\n    {\n        mstore(pos, signextend(2, value))\n    }\n    function abi_encode_t_uint24(value, pos)\n    {\n        mstore(pos, and(value, 0xffffff))\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint24__to_t_address_t_address_t_uint24__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), and(value2, 0xffffff))\n    }\n    function abi_encode_tuple_t_contract$_INonfungiblePositionManager_$2618__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_contract$_IUniswapV3Factory_$1383__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_int24__to_t_int24__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, signextend(2, value0))\n    }\n    function abi_encode_tuple_t_stringliteral_1b6b7ea1ca601eedacaf5021d2f04292cf19df119f1635d866f2b5c9b71440a1__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 17)\n        mstore(add(headStart, 64), \"Price must be > 0\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_2bf82483a59b135c8b0ec563103e94de46ba0ad2b430936d2c2dc7c7a432bbfc__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 14)\n        mstore(add(headStart, 64), \"Price too high\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_397aaaccf4e12d92be59946dfcacdf68dc2c5b82b4a37f6e4ef2cd79e09c3db4__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 21)\n        mstore(add(headStart, 64), \"Unauthorized callback\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_44869874655bf0887220635de03422dfc5fe91eb11e0815cf64ede1a814a8cfa__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 23)\n        mstore(add(headStart, 64), \"Position already active\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_7f8125015117dd75b23ce94a1f1b95a56c6b263752737858dfbd59ad91b03334__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 18)\n        mstore(add(headStart, 64), \"No active position\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_8503b41ae6bc3c81c6fa6652ef11a964d3fe84420f61398c3faa65b1c9f5e77c_t_int24_t_int24_t_uint128_t_uint256_t_uint256_t_bool__to_t_string_memory_ptr_t_int24_t_int24_t_uint128_t_uint256_t_uint256_t_bool__fromStack_reversed(headStart, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        mstore(headStart, 224)\n        mstore(add(headStart, 224), 6)\n        mstore(add(headStart, 256), \"REMOVE\")\n        tail := add(headStart, 288)\n        mstore(add(headStart, 0x20), signextend(2, value0))\n        mstore(add(headStart, 64), signextend(2, value1))\n        mstore(add(headStart, 96), and(value2, 0xffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 128), value3)\n        mstore(add(headStart, 160), value4)\n        mstore(add(headStart, 192), iszero(iszero(value5)))\n    }\n    function abi_encode_tuple_t_stringliteral_87e7f60b8ff0f06b751ad82b250a560c5b632939464075923cf9b80024908ad5__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 18)\n        mstore(add(headStart, 64), \"Pool doesn't exist\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_a4238a4cbfb4a17a74cd968b5708041a9e895755502d165d8fe5123867deb340__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 20)\n        mstore(add(headStart, 64), \"Invalid tick spacing\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_c84b7ff16e6331f7bad307bc338b44c939f313f04b9fabf2ea60e2f8791e8994__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 13)\n        mstore(add(headStart, 64), \"Price too low\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_d6a17cf573c858616829ab16c721c89658f90f1967194b54c8dd267605fae45b__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"Tick spacing must be positive\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_fdf81848136595c31bb5f76217767372bc4bf906663038eb38381131ea27ecba_t_int24_t_int24_t_uint128_t_uint256_t_uint256_t_bool__to_t_string_memory_ptr_t_int24_t_int24_t_uint128_t_uint256_t_uint256_t_bool__fromStack_reversed(headStart, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        mstore(headStart, 224)\n        mstore(add(headStart, 224), 4)\n        mstore(add(headStart, 256), \"MINT\")\n        tail := add(headStart, 288)\n        mstore(add(headStart, 0x20), signextend(2, value0))\n        mstore(add(headStart, 64), signextend(2, value1))\n        mstore(add(headStart, 96), and(value2, 0xffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 128), value3)\n        mstore(add(headStart, 160), value4)\n        mstore(add(headStart, 192), iszero(iszero(value5)))\n    }\n    function abi_encode_tuple_t_struct$_CollectParams_$2601_memory_ptr__to_t_struct$_CollectParams_$2601_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        mstore(headStart, mload(value0))\n        mstore(add(headStart, 0x20), and(mload(add(value0, 0x20)), sub(shl(160, 1), 1)))\n        let memberValue0 := mload(add(value0, 0x40))\n        let _1 := 0xffffffffffffffffffffffffffffffff\n        mstore(add(headStart, 0x40), and(memberValue0, _1))\n        mstore(add(headStart, 0x60), and(mload(add(value0, 0x60)), _1))\n    }\n    function abi_encode_tuple_t_struct$_DecreaseLiquidityParams_$2582_memory_ptr__to_t_struct$_DecreaseLiquidityParams_$2582_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 160)\n        mstore(headStart, mload(value0))\n        mstore(add(headStart, 0x20), and(mload(add(value0, 0x20)), 0xffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 0x40), mload(add(value0, 0x40)))\n        mstore(add(headStart, 0x60), mload(add(value0, 0x60)))\n        mstore(add(headStart, 0x80), mload(add(value0, 0x80)))\n    }\n    function abi_encode_tuple_t_struct$_MintParams_$2532_memory_ptr__to_t_struct$_MintParams_$2532_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 352)\n        abi_encode_t_address(mload(value0), headStart)\n        let memberValue0 := mload(add(value0, 0x20))\n        abi_encode_t_address(memberValue0, add(headStart, 0x20))\n        let memberValue0_1 := mload(add(value0, 0x40))\n        abi_encode_t_uint24(memberValue0_1, add(headStart, 0x40))\n        let memberValue0_2 := mload(add(value0, 0x60))\n        abi_encode_t_int24(memberValue0_2, add(headStart, 0x60))\n        let memberValue0_3 := mload(add(value0, 0x80))\n        abi_encode_t_int24(memberValue0_3, add(headStart, 0x80))\n        mstore(add(headStart, 0xa0), mload(add(value0, 0xa0)))\n        mstore(add(headStart, 0xc0), mload(add(value0, 0xc0)))\n        mstore(add(headStart, 0xe0), mload(add(value0, 0xe0)))\n        let _1 := 0x0100\n        mstore(add(headStart, _1), mload(add(value0, _1)))\n        let _2 := 0x0120\n        let memberValue0_4 := mload(add(value0, _2))\n        abi_encode_t_address(memberValue0_4, add(headStart, _2))\n        let _3 := 0x0140\n        mstore(add(headStart, _3), mload(add(value0, _3)))\n    }\n    function abi_encode_tuple_t_uint24__to_t_uint24__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffff))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_uint256_t_uint128_t_int24_t_int24_t_bool__to_t_uint256_t_uint128_t_int24_t_int24_t_bool__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 160)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, 0xffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 64), signextend(2, value2))\n        mstore(add(headStart, 96), signextend(2, value3))\n        mstore(add(headStart, 128), iszero(iszero(value4)))\n    }\n    function abi_encode_tuple_t_uint256_t_uint256_t_uint256_t_int24_t_int24_t_int24_t_bool__to_t_uint256_t_uint256_t_uint256_t_int24_t_int24_t_int24_t_bool__fromStack_reversed(headStart, value6, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 224)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), signextend(2, value3))\n        mstore(add(headStart, 128), signextend(2, value4))\n        mstore(add(headStart, 160), signextend(2, value5))\n        mstore(add(headStart, 192), iszero(iszero(value6)))\n    }\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n    function validator_revert_t_address(value)\n    {\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n}","id":35,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"3864":[{"length":32,"start":1177},{"length":32,"start":3025}],"3866":[{"length":32,"start":1090},{"length":32,"start":1294},{"length":32,"start":8882},{"length":32,"start":9099},{"length":32,"start":9266},{"length":32,"start":9414},{"length":32,"start":9798}],"3868":[{"length":32,"start":551},{"length":32,"start":1383},{"length":32,"start":3072},{"length":32,"start":5285},{"length":32,"start":7496}],"3870":[{"length":32,"start":1249},{"length":32,"start":1441},{"length":32,"start":3105},{"length":32,"start":5424},{"length":32,"start":7543}],"3872":[{"length":32,"start":1141},{"length":32,"start":3471},{"length":32,"start":3548},{"length":32,"start":3673},{"length":32,"start":3750},{"length":32,"start":3894},{"length":32,"start":4015},{"length":32,"start":4107},{"length":32,"start":4157}],"3874":[{"length":32,"start":515},{"length":32,"start":3506},{"length":32,"start":3581},{"length":32,"start":3637},{"length":32,"start":3717},{"length":32,"start":3929},{"length":32,"start":3979},{"length":32,"start":4071},{"length":32,"start":4193}],"3876":[{"length":32,"start":1541},{"length":32,"start":3138},{"length":32,"start":7590}],"3878":[{"length":32,"start":1213},{"length":32,"start":4407},{"length":32,"start":4486},{"length":32,"start":4537},{"length":32,"start":4571},{"length":32,"start":4604},{"length":32,"start":4668},{"length":32,"start":4712},{"length":32,"start":4756},{"length":32,"start":4796},{"length":32,"start":4852},{"length":32,"start":4903},{"length":32,"start":4970},{"length":32,"start":5037},{"length":32,"start":5090},{"length":32,"start":5149},{"length":32,"start":5189}],"3880":[{"length":32,"start":864}]},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106101005760003560e01c8063b31ac6e211610097578063d348799711610066578063d3487997146101af578063d534d636146101c2578063ddca3f43146101db578063f2fde38b146101e357610100565b8063b31ac6e214610182578063c45a01551461018a578063d0c93a7c14610192578063d21220a7146101a757610100565b80634aa4a4fc116100d35780634aa4a4fc14610162578063715018a61461016a578063791b98bc146101725780638da5cb5b1461017a57610100565b806301d31e7c146101055780630b77884d146101235780630dfe16811461013857806341675b051461014d575b600080fd5b61010d6101f6565b60405161011a9190612d73565b60405180910390f35b61012b610201565b60405161011a9190612df5565b610140610225565b60405161011a91906129aa565b61016061015b366004612877565b610249565b005b61014061035e565b610160610382565b610140610440565b610140610464565b61012b610473565b610140610497565b61019a6104bb565b60405161011a91906129e6565b6101406104df565b6101606101bd366004612912565b610503565b6101ca6105ce565b60405161011a959493929190612d8c565b61010d610603565b6101606101f136600461279f565b610627565b60045462ffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b600260015414156102a1576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b60026001556102ae61086c565b6001600160a01b03166102bf610464565b6001600160a01b03161461031a576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600080600080600061032b86610870565b94509450945094509450600061034183836108b9565b9050610351868886868686610925565b5050600180555050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b61038a61086c565b6001600160a01b031661039b610464565b6001600160a01b0316146103f6576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000546001600160a01b031690565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146105545760405162461bcd60e51b815260040161054b90612a47565b60405180910390fd5b831561058e5761058e6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163386610970565b82156105c8576105c86001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163385610970565b50505050565b6002805460035490916001600160801b03821691600160801b8104820b91600160981b8204900b90600160b01b900460ff1685565b7f000000000000000000000000000000000000000000000000000000000000000081565b61062f61086c565b6001600160a01b0316610640610464565b6001600160a01b03161461069b576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b0381166106e05760405162461bcd60e51b8152600401808060200182810382526026815260200180612e1c6026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b8015806107c1575060408051636eb1769f60e11b81523060048201526001600160a01b03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b15801561079357600080fd5b505afa1580156107a7573d6000803e3d6000fd5b505050506040513d60208110156107bd57600080fd5b5051155b6107fc5760405162461bcd60e51b8152600401808060200182810382526036815260200180612eb36036913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b17905261084e9084906109be565b505050565b60606108628484600085610a6f565b90505b9392505050565b3390565b6000806000806000806000610883610bca565b9650915085905061089382610d78565b965061089e88610ed5565b94506108a985611130565b9094509250505091939590929450565b600354600090600160b01b900460ff1615806108e75750600354600284810b600160801b909204810b900b14155b806109045750600354600283810b600160981b909204810b900b14155b1561091b576109138383611471565b50600161091f565b5060005b92915050565b7f5422e969a24d0b1e269860d579e64358e9de3df58e771549e1f5310c2ee2e562428787878787876040516109609796959493929190612dbe565b60405180910390a1505050505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b17905261084e9084905b6000610a13826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166108539092919063ffffffff16565b80519091501561084e57808060200190516020811015610a3257600080fd5b505161084e5760405162461bcd60e51b815260040180806020018281038252602a815260200180612e89602a913960400191505060405180910390fd5b606082471015610ab05760405162461bcd60e51b8152600401808060200182810382526026815260200180612e426026913960400191505060405180910390fd5b610ab985611633565b610b0a576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b600080866001600160a01b031685876040518082805190602001908083835b60208310610b485780518252601f199092019160209182019101610b29565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114610baa576040519150601f19603f3d011682016040523d82523d6000602084013e610baf565b606091505b5091509150610bbf828286611639565b979650505050505050565b60008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631698ee827f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006040518463ffffffff1660e01b8152600401610c7f939291906129be565b60206040518083038186803b158015610c9757600080fd5b505afa158015610cab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ccf91906127bb565b90506001600160a01b038116610cf75760405162461bcd60e51b815260040161054b90612b31565b806001600160a01b0316633850c7bd6040518163ffffffff1660e01b815260040160e06040518083038186803b158015610d3057600080fd5b505afa158015610d44573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d6891906127d7565b5094989397509295505050505050565b60006001600160a01b038216800260c081901c60ff7f000000000000000000000000000000000000000000000000000000000000000081167f00000000000000000000000000000000000000000000000000000000000000009091161115610e33577f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000000360ff16600a0a8181610e2b57fe5b049050610ecc565b7f000000000000000000000000000000000000000000000000000000000000000060ff167f000000000000000000000000000000000000000000000000000000000000000060ff161115610ecc5760ff7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000000316600a0a025b9150505b919050565b6000808211610ef65760405162461bcd60e51b815260040161054b906129f4565b600064e8d4a51000831115610f2557610f1e6ec097ce7bc90715b34b9f1000000000846116dd565b9050610f28565b50815b80670de0b6b3a764000060ff7f000000000000000000000000000000000000000000000000000000000000000081167f00000000000000000000000000000000000000000000000000000000000000009091161115610fe557610fde610fd460ff7f00000000000000000000000000000000000000000000000000000000000000008116907f000000000000000000000000000000000000000000000000000000000000000016611744565b8390600a0a6117a1565b9150611093565b7f000000000000000000000000000000000000000000000000000000000000000060ff167f000000000000000000000000000000000000000000000000000000000000000060ff1611156110935761109061108660ff7f00000000000000000000000000000000000000000000000000000000000000008116907f000000000000000000000000000000000000000000000000000000000000000016611744565b8290600a0a6117a1565b90505b60006110ad826110a785600160c01b6117a1565b906116dd565b905060006110ba826117fa565b90506401000276a36001600160a01b03821610156110ea5760405162461bcd60e51b815260040161054b90612b8b565b73fffd8963efd1fc6a506488495d951d5263988d266001600160a01b03821611156111275760405162461bcd60e51b815260040161054b90612a1f565b610bbf816118dc565b60008060007f000000000000000000000000000000000000000000000000000000000000000060020b136111765760405162461bcd60e51b815260040161054b90612b5d565b60045460009060029062ffffff167f000000000000000000000000000000000000000000000000000000000000000002810b05905060008160020b136111d957507f00000000000000000000000000000000000000000000000000000000000000005b7f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060020b8260020b8161122957fe5b050290508060020b6000141561125c57507f00000000000000000000000000000000000000000000000000000000000000005b80840384820161128c827f0000000000000000000000000000000000000000000000000000000000000000611bfb565b94506112b8817f0000000000000000000000000000000000000000000000000000000000000000611bfb565b93507f000000000000000000000000000000000000000000000000000000000000000060020b8160020b816112e957fe5b0760020b15611318577f0000000000000000000000000000000000000000000000000000000000000000840193505b8360020b8560020b1261134b577f0000000000000000000000000000000000000000000000000000000000000000850193505b620d89e719600286900b12611360578461138e565b61138e620d89e7197f0000000000000000000000000000000000000000000000000000000000000000611bfb565b9450620d89e8600285900b136113a457836113d1565b6113d1620d89e87f0000000000000000000000000000000000000000000000000000000000000000611bfb565b93508360020b8560020b12611469577f000000000000000000000000000000000000000000000000000000000000000085019350620d89e8600285900b131561146957611441620d89e87f0000000000000000000000000000000000000000000000000000000000000000611bfb565b93507f0000000000000000000000000000000000000000000000000000000000000000840394505b505050915091565b600354600160b01b900460ff161561148b5761148b611c6a565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a08231906114da9030906004016129aa565b60206040518083038186803b1580156114f257600080fd5b505afa158015611506573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061152a919061288f565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040161157a91906129aa565b60206040518083038186803b15801561159257600080fd5b505afa1580156115a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115ca919061288f565b905060008211806115db5750600081115b156115f1576115ec84848484611d0e565b6105c8565b6040805160a08101825260008082526020820181905291810182905260608101829052608001819052600255600380546001600160b81b031916905550505050565b3b151590565b60608315611648575081610865565b8251156116585782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156116a257818101518382015260200161168a565b50505050905090810190601f1680156116cf5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b6000808211611733576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b81838161173c57fe5b049392505050565b60008282111561179b576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b6000826117b05750600061091f565b828202828482816117bd57fe5b04146108655760405162461bcd60e51b8152600401808060200182810382526021815260200180612e686021913960400191505060405180910390fd5b60008161180957506000610ed0565b6000600161181684611e22565b6001911c1b905080611826575060015b600061184160026110a761183a87866116dd565b8590611ecd565b905061185c60026110a761185587856116dd565b8490611ecd565b905061187060026110a761185587856116dd565b905061188460026110a761185587856116dd565b905061189860026110a761185587856116dd565b90506118ac60026110a761185587856116dd565b90506118b884826116dd565b8111156118d3576118ca816001611744565b92505050610ed0565b9150610ed09050565b60006401000276a36001600160a01b03831610801590611918575073fffd8963efd1fc6a506488495d951d5263988d266001600160a01b038316105b61194d576040805162461bcd60e51b81526020600482015260016024820152602960f91b604482015290519081900360640190fd5b640100000000600160c01b03602083901b166001600160801b03811160071b81811c67ffffffffffffffff811160061b90811c63ffffffff811160051b90811c61ffff811160041b90811c60ff8111600390811b91821c600f811160021b90811c918211600190811b92831c979088119617909417909217179091171717608081106119e157607f810383901c91506119eb565b80607f0383901b91505b908002607f81811c60ff83811c9190911c800280831c81831c1c800280841c81841c1c800280851c81851c1c800280861c81861c1c800280871c81871c1c800280881c81881c1c800280891c81891c1c8002808a1c818a1c1c8002808b1c818b1c1c8002808c1c818c1c1c8002808d1c818d1c1c8002808e1c9c81901c9c909c1c80029c8d901c9e9d607f198f0160401b60c09190911c678000000000000000161760c19b909b1c674000000000000000169a909a1760c29990991c672000000000000000169890981760c39790971c671000000000000000169690961760c49590951c670800000000000000169490941760c59390931c670400000000000000169290921760c69190911c670200000000000000161760c79190911c670100000000000000161760c89190911c6680000000000000161760c99190911c6640000000000000161760ca9190911c6620000000000000161760cb9190911c6610000000000000161760cc9190911c6608000000000000161760cd9190911c66040000000000001617693627a301d71055774c8581026f028f6481ab7f045a5af012a19d003aa9198101608090811d906fdb2df09e81959a81455e260799a0632f8301901d600281810b9083900b14611bec57886001600160a01b0316611bd082611f27565b6001600160a01b03161115611be55781611be7565b805b611bee565b815b9998505050505050505050565b6000808260020b13611c1f5760405162461bcd60e51b815260040161054b90612bb2565b60008260020b8460020b81611c3057fe5b05905060008460020b128015611c5757508260020b8460020b81611c5057fe5b0760020b15155b15611c6157600019015b90910292915050565b600354600160b01b900460ff168015611c84575060025415155b611ca05760405162461bcd60e51b815260040161054b90612aad565b60028054600380546040805160a0810182526000808252602082018190529181018290526060810182905260800181905284556001600160b81b0319811690915590916001600160801b03821691600160801b8104820b91600160981b909104900b6105c884848484612259565b600354600160b01b900460ff1615611d385760405162461bcd60e51b815260040161054b90612a76565b60006040518061016001604052807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031681526020017f000000000000000000000000000000000000000000000000000000000000000062ffffff1681526020018660020b81526020018560020b81526020018481526020018381526020016000815260200160008152602001306001600160a01b03168152602001428152509050611e1b8186866124bc565b5050505050565b60008180611e2f57600091505b6001600160801b03811115611e46576080918201911c5b67ffffffffffffffff811115611e5e576040918201911c5b63ffffffff811115611e72576020918201911c5b61ffff811115611e84576010918201911c5b60ff811115611e95576008918201911c5b600f811115611ea6576004918201911c5b6003811115611eb7576002918201911c5b6001811115611ec7576001820191505b50919050565b600082820183811015610865576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b60008060008360020b12611f3e578260020b611f46565b8260020b6000035b9050620d89e8811115611f84576040805162461bcd60e51b81526020600482015260016024820152601560fa1b604482015290519081900360640190fd5b600060018216611f9857600160801b611faa565b6ffffcb933bd6fad37aa2d162d1a5940015b70ffffffffffffffffffffffffffffffffff1690506002821615611fde576ffff97272373d413259a46990580e213a0260801c5b6004821615611ffd576ffff2e50f5f656932ef12357cf3c7fdcc0260801c5b600882161561201c576fffe5caca7e10e4e61c3624eaa0941cd00260801c5b601082161561203b576fffcb9843d60f6159c9db58835c9266440260801c5b602082161561205a576fff973b41fa98c081472e6896dfb254c00260801c5b6040821615612079576fff2ea16466c96a3843ec78b326b528610260801c5b6080821615612098576ffe5dee046a99a2a811c461f1969c30530260801c5b6101008216156120b8576ffcbe86c7900a88aedcffc83b479aa3a40260801c5b6102008216156120d8576ff987a7253ac413176f2b074cf7815e540260801c5b6104008216156120f8576ff3392b0822b70005940c7a398e4b70f30260801c5b610800821615612118576fe7159475a2c29b7443b29c7fa6e889d90260801c5b611000821615612138576fd097f3bdfd2022b8845ad8f792aa58250260801c5b612000821615612158576fa9f746462d870fdf8a65dc1f90e061e50260801c5b614000821615612178576f70d869a156d2a1b890bb3df62baf32f70260801c5b618000821615612198576f31be135f97d08fd981231505542fcfa60260801c5b620100008216156121b9576f09aa508b5b7a84e1c677de54f3e99bc90260801c5b620200008216156121d9576e5d6af8dedb81196699c329225ee6040260801c5b620400008216156121f8576d2216e584f5fa1ea926041bedfe980260801c5b62080000821615612215576b048a170391f7dc42444e8fa20260801c5b60008460020b131561223057806000198161222c57fe5b0490505b640100000000810615612244576001612247565b60005b60ff16602082901c0192505050919050565b60008080806001600160801b03871615612344576040805160a0810182528981526001600160801b0389166020820152600081830181905260608201524260808201529051630624e65f60e11b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691630c49ccbe916122e69190600401612c82565b6040805180830381600087803b1580156122ff57600080fd5b505af192505050801561232f575060408051601f3d908101601f1916820190925261232c918101906128ef565b60015b6123385761233f565b5050600193505b612349565b600193505b831561249457604080516080810182528981523060208201526001600160801b038183018190526060820152905163fc6f786560e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163fc6f7865916123bf9190600401612c3f565b6040805180830381600087803b1580156123d857600080fd5b505af1925050508015612408575060408051601f3d908101601f19168201909252612405918101906128ef565b60015b6124115761241b565b6001945090925090505b604051630852cd8d60e31b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906342966c6890612467908b90600401612d83565b600060405180830381600087803b15801561248157600080fd5b505af1925050508015612492575060015b505b60008480156124a05750835b90506124b18988888b878787612708565b505050505050505050565b60008060008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166388316456896040518263ffffffff1660e01b81526004016125109190612cc5565b608060405180830381600087803b15801561252a57600080fd5b505af192505050801561255a575060408051601f3d908101601f19168201909252612557918101906128a7565b60015b612563576126ad565b8398508297508196508095506000886001600160801b03161115612629576040805160a0810182528a81526001600160801b038a166020820181905260028e810b9383018490528d810b60608401819052600160809094018490528d825560038054600160b01b6fffffffffffffffffffffffffffffffff1990911690941762ffffff60801b1916600160801b96840b62ffffff908116979097021762ffffff60981b1916600160981b9290930b95909516021760ff60b01b19161790915594506126a8565b88156126a857604051630852cd8d60e31b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906342966c689061267b908c90600401612d83565b600060405180830381600087803b15801561269557600080fd5b505af19250505080156126a6575060015b505b505050505b6126bc85888887878787612753565b806126fe576040805160a08101825260008082526020820181905291810182905260608101829052608001819052600255600380546001600160b81b03191690555b5050505050505050565b867fdee9c9ac7e4f2757956dfcf228dc427442ec0a77c0020754a5d9c3b2583d9a1487878787878760405161274296959493929190612ad9565b60405180910390a250505050505050565b867fdee9c9ac7e4f2757956dfcf228dc427442ec0a77c0020754a5d9c3b2583d9a1487878787878760405161274296959493929190612be9565b805161ffff81168114610ed057600080fd5b6000602082840312156127b0578081fd5b813561086581612e03565b6000602082840312156127cc578081fd5b815161086581612e03565b600080600080600080600060e0888a0312156127f1578283fd5b87516127fc81612e03565b8097505060208801518060020b8114612813578384fd5b95506128216040890161278d565b945061282f6060890161278d565b935061283d6080890161278d565b925060a088015160ff81168114612852578283fd5b60c08901519092508015158114612867578182fd5b8091505092959891949750929550565b600060208284031215612888578081fd5b5035919050565b6000602082840312156128a0578081fd5b5051919050565b600080600080608085870312156128bc578384fd5b8451935060208501516001600160801b03811681146128d9578384fd5b6040860151606090960151949790965092505050565b60008060408385031215612901578182fd5b505080516020909101519092909150565b60008060008060608587031215612927578384fd5b8435935060208501359250604085013567ffffffffffffffff8082111561294c578384fd5b818701915087601f83011261295f578384fd5b81358181111561296d578485fd5b88602082850101111561297e578485fd5b95989497505060200194505050565b6001600160a01b03169052565b60020b9052565b62ffffff169052565b6001600160a01b0391909116815260200190565b6001600160a01b03938416815291909216602082015262ffffff909116604082015260600190565b60029190910b815260200190565b60208082526011908201527005072696365206d757374206265203e203607c1b604082015260600190565b6020808252600e908201526d0a0e4d2c6ca40e8dede40d0d2ced60931b604082015260600190565b602080825260159082015274556e617574686f72697a65642063616c6c6261636b60581b604082015260600190565b60208082526017908201527f506f736974696f6e20616c726561647920616374697665000000000000000000604082015260600190565b60208082526012908201527127379030b1ba34bb32903837b9b4ba34b7b760711b604082015260600190565b60e08082526006908201526552454d4f564560d01b610100820152600296870b60208201529490950b60408501526001600160801b03929092166060840152608083015260a082015290151560c08201526101200190565b602080825260129082015271141bdbdb08191bd95cdb89dd08195e1a5cdd60721b604082015260600190565b602080825260149082015273496e76616c6964207469636b2073706163696e6760601b604082015260600190565b6020808252600d908201526c507269636520746f6f206c6f7760981b604082015260600190565b6020808252601d908201527f5469636b2073706163696e67206d75737420626520706f736974697665000000604082015260600190565b60e0808252600490820152631352539560e21b610100820152600296870b60208201529490950b60408501526001600160801b03929092166060840152608083015260a082015290151560c08201526101200190565b815181526020808301516001600160a01b0316908201526040808301516001600160801b0390811691830191909152606092830151169181019190915260800190565b600060a082019050825182526001600160801b03602084015116602083015260408301516040830152606083015160608301526080830151608083015292915050565b600061016082019050612cd982845161298d565b6020830151612ceb602084018261298d565b506040830151612cfe60408401826129a1565b506060830151612d11606084018261299a565b506080830151612d24608084018261299a565b5060a083015160a083015260c083015160c083015260e083015160e083015261010080840151818401525061012080840151612d628285018261298d565b505061014092830151919092015290565b62ffffff91909116815260200190565b90815260200190565b9485526001600160801b03939093166020850152600291820b6040850152900b60608301521515608082015260a00190565b96875260208701959095526040860193909352600291820b6060860152810b60808501520b60a0830152151560c082015260e00190565b60ff91909116815260200190565b6001600160a01b0381168114612e1857600080fd5b5056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365a2646970667358221220485302d8477d27c4dc1feeac3046d862388694d879a94909da5f373371ae4ba464736f6c63430007060033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x100 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xB31AC6E2 GT PUSH2 0x97 JUMPI DUP1 PUSH4 0xD3487997 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xD3487997 EQ PUSH2 0x1AF JUMPI DUP1 PUSH4 0xD534D636 EQ PUSH2 0x1C2 JUMPI DUP1 PUSH4 0xDDCA3F43 EQ PUSH2 0x1DB JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x1E3 JUMPI PUSH2 0x100 JUMP JUMPDEST DUP1 PUSH4 0xB31AC6E2 EQ PUSH2 0x182 JUMPI DUP1 PUSH4 0xC45A0155 EQ PUSH2 0x18A JUMPI DUP1 PUSH4 0xD0C93A7C EQ PUSH2 0x192 JUMPI DUP1 PUSH4 0xD21220A7 EQ PUSH2 0x1A7 JUMPI PUSH2 0x100 JUMP JUMPDEST DUP1 PUSH4 0x4AA4A4FC GT PUSH2 0xD3 JUMPI DUP1 PUSH4 0x4AA4A4FC EQ PUSH2 0x162 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x16A JUMPI DUP1 PUSH4 0x791B98BC EQ PUSH2 0x172 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x17A JUMPI PUSH2 0x100 JUMP JUMPDEST DUP1 PUSH4 0x1D31E7C EQ PUSH2 0x105 JUMPI DUP1 PUSH4 0xB77884D EQ PUSH2 0x123 JUMPI DUP1 PUSH4 0xDFE1681 EQ PUSH2 0x138 JUMPI DUP1 PUSH4 0x41675B05 EQ PUSH2 0x14D JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x10D PUSH2 0x1F6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x11A SWAP2 SWAP1 PUSH2 0x2D73 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x12B PUSH2 0x201 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x11A SWAP2 SWAP1 PUSH2 0x2DF5 JUMP JUMPDEST PUSH2 0x140 PUSH2 0x225 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x11A SWAP2 SWAP1 PUSH2 0x29AA JUMP JUMPDEST PUSH2 0x160 PUSH2 0x15B CALLDATASIZE PUSH1 0x4 PUSH2 0x2877 JUMP JUMPDEST PUSH2 0x249 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x140 PUSH2 0x35E JUMP JUMPDEST PUSH2 0x160 PUSH2 0x382 JUMP JUMPDEST PUSH2 0x140 PUSH2 0x440 JUMP JUMPDEST PUSH2 0x140 PUSH2 0x464 JUMP JUMPDEST PUSH2 0x12B PUSH2 0x473 JUMP JUMPDEST PUSH2 0x140 PUSH2 0x497 JUMP JUMPDEST PUSH2 0x19A PUSH2 0x4BB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x11A SWAP2 SWAP1 PUSH2 0x29E6 JUMP JUMPDEST PUSH2 0x140 PUSH2 0x4DF JUMP JUMPDEST PUSH2 0x160 PUSH2 0x1BD CALLDATASIZE PUSH1 0x4 PUSH2 0x2912 JUMP JUMPDEST PUSH2 0x503 JUMP JUMPDEST PUSH2 0x1CA PUSH2 0x5CE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x11A SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2D8C JUMP JUMPDEST PUSH2 0x10D PUSH2 0x603 JUMP JUMPDEST PUSH2 0x160 PUSH2 0x1F1 CALLDATASIZE PUSH1 0x4 PUSH2 0x279F JUMP JUMPDEST PUSH2 0x627 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH3 0xFFFFFF AND DUP2 JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SLOAD EQ ISZERO PUSH2 0x2A1 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x1 SSTORE PUSH2 0x2AE PUSH2 0x86C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x2BF PUSH2 0x464 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x31A JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x32B DUP7 PUSH2 0x870 JUMP JUMPDEST SWAP5 POP SWAP5 POP SWAP5 POP SWAP5 POP SWAP5 POP PUSH1 0x0 PUSH2 0x341 DUP4 DUP4 PUSH2 0x8B9 JUMP JUMPDEST SWAP1 POP PUSH2 0x351 DUP7 DUP9 DUP7 DUP7 DUP7 DUP7 PUSH2 0x925 JUMP JUMPDEST POP POP PUSH1 0x1 DUP1 SSTORE POP POP POP POP POP JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x38A PUSH2 0x86C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x39B PUSH2 0x464 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x3F6 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP4 SWAP1 LOG3 PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ PUSH2 0x554 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x54B SWAP1 PUSH2 0x2A47 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP4 ISZERO PUSH2 0x58E JUMPI PUSH2 0x58E PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND CALLER DUP7 PUSH2 0x970 JUMP JUMPDEST DUP3 ISZERO PUSH2 0x5C8 JUMPI PUSH2 0x5C8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND CALLER DUP6 PUSH2 0x970 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x2 DUP1 SLOAD PUSH1 0x3 SLOAD SWAP1 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP3 AND SWAP2 PUSH1 0x1 PUSH1 0x80 SHL DUP2 DIV DUP3 SIGNEXTEND SWAP2 PUSH1 0x1 PUSH1 0x98 SHL DUP3 DIV SWAP1 SIGNEXTEND SWAP1 PUSH1 0x1 PUSH1 0xB0 SHL SWAP1 DIV PUSH1 0xFF AND DUP6 JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x62F PUSH2 0x86C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x640 PUSH2 0x464 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x69B JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x6E0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x2E1C PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND SWAP4 SWAP3 AND SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 LOG3 PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST DUP1 ISZERO DUP1 PUSH2 0x7C1 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH4 0x6EB1769F PUSH1 0xE1 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE SWAP2 MLOAD SWAP2 DUP6 AND SWAP2 PUSH4 0xDD62ED3E SWAP2 PUSH1 0x44 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x793 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x7A7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x7BD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD ISZERO JUMPDEST PUSH2 0x7FC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x36 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x2EB3 PUSH1 0x36 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP1 DUP3 ADD DUP5 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0x95EA7B3 PUSH1 0xE0 SHL OR SWAP1 MSTORE PUSH2 0x84E SWAP1 DUP5 SWAP1 PUSH2 0x9BE JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x862 DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0xA6F JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST CALLER SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x883 PUSH2 0xBCA JUMP JUMPDEST SWAP7 POP SWAP2 POP DUP6 SWAP1 POP PUSH2 0x893 DUP3 PUSH2 0xD78 JUMP JUMPDEST SWAP7 POP PUSH2 0x89E DUP9 PUSH2 0xED5 JUMP JUMPDEST SWAP5 POP PUSH2 0x8A9 DUP6 PUSH2 0x1130 JUMP JUMPDEST SWAP1 SWAP5 POP SWAP3 POP POP POP SWAP2 SWAP4 SWAP6 SWAP1 SWAP3 SWAP5 POP JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0xB0 SHL SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 PUSH2 0x8E7 JUMPI POP PUSH1 0x3 SLOAD PUSH1 0x2 DUP5 DUP2 SIGNEXTEND PUSH1 0x1 PUSH1 0x80 SHL SWAP1 SWAP3 DIV DUP2 SIGNEXTEND SWAP1 SIGNEXTEND EQ ISZERO JUMPDEST DUP1 PUSH2 0x904 JUMPI POP PUSH1 0x3 SLOAD PUSH1 0x2 DUP4 DUP2 SIGNEXTEND PUSH1 0x1 PUSH1 0x98 SHL SWAP1 SWAP3 DIV DUP2 SIGNEXTEND SWAP1 SIGNEXTEND EQ ISZERO JUMPDEST ISZERO PUSH2 0x91B JUMPI PUSH2 0x913 DUP4 DUP4 PUSH2 0x1471 JUMP JUMPDEST POP PUSH1 0x1 PUSH2 0x91F JUMP JUMPDEST POP PUSH1 0x0 JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x5422E969A24D0B1E269860D579E64358E9DE3DF58E771549E1F5310C2EE2E562 TIMESTAMP DUP8 DUP8 DUP8 DUP8 DUP8 DUP8 PUSH1 0x40 MLOAD PUSH2 0x960 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2DBE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP1 DUP3 ADD DUP5 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0xA9059CBB PUSH1 0xE0 SHL OR SWAP1 MSTORE PUSH2 0x84E SWAP1 DUP5 SWAP1 JUMPDEST PUSH1 0x0 PUSH2 0xA13 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x853 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0x84E JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xA32 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH2 0x84E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2A DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x2E89 PUSH1 0x2A SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0xAB0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x2E42 PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xAB9 DUP6 PUSH2 0x1633 JUMP JUMPDEST PUSH2 0xB0A JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP8 PUSH1 0x40 MLOAD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0xB48 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0xB29 JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0xBAA JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xBAF JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0xBBF DUP3 DUP3 DUP7 PUSH2 0x1639 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x1698EE82 PUSH32 0x0 PUSH32 0x0 PUSH32 0x0 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC7F SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x29BE JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xC97 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xCAB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xCCF SWAP2 SWAP1 PUSH2 0x27BB JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xCF7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x54B SWAP1 PUSH2 0x2B31 JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x3850C7BD PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0xE0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xD30 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xD44 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xD68 SWAP2 SWAP1 PUSH2 0x27D7 JUMP JUMPDEST POP SWAP5 SWAP9 SWAP4 SWAP8 POP SWAP3 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP1 MUL PUSH1 0xC0 DUP2 SWAP1 SHR PUSH1 0xFF PUSH32 0x0 DUP2 AND PUSH32 0x0 SWAP1 SWAP2 AND GT ISZERO PUSH2 0xE33 JUMPI PUSH32 0x0 PUSH32 0x0 SUB PUSH1 0xFF AND PUSH1 0xA EXP DUP2 DUP2 PUSH2 0xE2B JUMPI INVALID JUMPDEST DIV SWAP1 POP PUSH2 0xECC JUMP JUMPDEST PUSH32 0x0 PUSH1 0xFF AND PUSH32 0x0 PUSH1 0xFF AND GT ISZERO PUSH2 0xECC JUMPI PUSH1 0xFF PUSH32 0x0 PUSH32 0x0 SUB AND PUSH1 0xA EXP MUL JUMPDEST SWAP2 POP POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 GT PUSH2 0xEF6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x54B SWAP1 PUSH2 0x29F4 JUMP JUMPDEST PUSH1 0x0 PUSH5 0xE8D4A51000 DUP4 GT ISZERO PUSH2 0xF25 JUMPI PUSH2 0xF1E PUSH15 0xC097CE7BC90715B34B9F1000000000 DUP5 PUSH2 0x16DD JUMP JUMPDEST SWAP1 POP PUSH2 0xF28 JUMP JUMPDEST POP DUP2 JUMPDEST DUP1 PUSH8 0xDE0B6B3A7640000 PUSH1 0xFF PUSH32 0x0 DUP2 AND PUSH32 0x0 SWAP1 SWAP2 AND GT ISZERO PUSH2 0xFE5 JUMPI PUSH2 0xFDE PUSH2 0xFD4 PUSH1 0xFF PUSH32 0x0 DUP2 AND SWAP1 PUSH32 0x0 AND PUSH2 0x1744 JUMP JUMPDEST DUP4 SWAP1 PUSH1 0xA EXP PUSH2 0x17A1 JUMP JUMPDEST SWAP2 POP PUSH2 0x1093 JUMP JUMPDEST PUSH32 0x0 PUSH1 0xFF AND PUSH32 0x0 PUSH1 0xFF AND GT ISZERO PUSH2 0x1093 JUMPI PUSH2 0x1090 PUSH2 0x1086 PUSH1 0xFF PUSH32 0x0 DUP2 AND SWAP1 PUSH32 0x0 AND PUSH2 0x1744 JUMP JUMPDEST DUP3 SWAP1 PUSH1 0xA EXP PUSH2 0x17A1 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x0 PUSH2 0x10AD DUP3 PUSH2 0x10A7 DUP6 PUSH1 0x1 PUSH1 0xC0 SHL PUSH2 0x17A1 JUMP JUMPDEST SWAP1 PUSH2 0x16DD JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x10BA DUP3 PUSH2 0x17FA JUMP JUMPDEST SWAP1 POP PUSH5 0x1000276A3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND LT ISZERO PUSH2 0x10EA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x54B SWAP1 PUSH2 0x2B8B JUMP JUMPDEST PUSH20 0xFFFD8963EFD1FC6A506488495D951D5263988D26 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND GT ISZERO PUSH2 0x1127 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x54B SWAP1 PUSH2 0x2A1F JUMP JUMPDEST PUSH2 0xBBF DUP2 PUSH2 0x18DC JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH32 0x0 PUSH1 0x2 SIGNEXTEND SGT PUSH2 0x1176 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x54B SWAP1 PUSH2 0x2B5D JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x0 SWAP1 PUSH1 0x2 SWAP1 PUSH3 0xFFFFFF AND PUSH32 0x0 MUL DUP2 SIGNEXTEND SDIV SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x2 SIGNEXTEND SGT PUSH2 0x11D9 JUMPI POP PUSH32 0x0 JUMPDEST PUSH32 0x0 PUSH32 0x0 PUSH1 0x2 SIGNEXTEND DUP3 PUSH1 0x2 SIGNEXTEND DUP2 PUSH2 0x1229 JUMPI INVALID JUMPDEST SDIV MUL SWAP1 POP DUP1 PUSH1 0x2 SIGNEXTEND PUSH1 0x0 EQ ISZERO PUSH2 0x125C JUMPI POP PUSH32 0x0 JUMPDEST DUP1 DUP5 SUB DUP5 DUP3 ADD PUSH2 0x128C DUP3 PUSH32 0x0 PUSH2 0x1BFB JUMP JUMPDEST SWAP5 POP PUSH2 0x12B8 DUP2 PUSH32 0x0 PUSH2 0x1BFB JUMP JUMPDEST SWAP4 POP PUSH32 0x0 PUSH1 0x2 SIGNEXTEND DUP2 PUSH1 0x2 SIGNEXTEND DUP2 PUSH2 0x12E9 JUMPI INVALID JUMPDEST SMOD PUSH1 0x2 SIGNEXTEND ISZERO PUSH2 0x1318 JUMPI PUSH32 0x0 DUP5 ADD SWAP4 POP JUMPDEST DUP4 PUSH1 0x2 SIGNEXTEND DUP6 PUSH1 0x2 SIGNEXTEND SLT PUSH2 0x134B JUMPI PUSH32 0x0 DUP6 ADD SWAP4 POP JUMPDEST PUSH3 0xD89E7 NOT PUSH1 0x2 DUP7 SWAP1 SIGNEXTEND SLT PUSH2 0x1360 JUMPI DUP5 PUSH2 0x138E JUMP JUMPDEST PUSH2 0x138E PUSH3 0xD89E7 NOT PUSH32 0x0 PUSH2 0x1BFB JUMP JUMPDEST SWAP5 POP PUSH3 0xD89E8 PUSH1 0x2 DUP6 SWAP1 SIGNEXTEND SGT PUSH2 0x13A4 JUMPI DUP4 PUSH2 0x13D1 JUMP JUMPDEST PUSH2 0x13D1 PUSH3 0xD89E8 PUSH32 0x0 PUSH2 0x1BFB JUMP JUMPDEST SWAP4 POP DUP4 PUSH1 0x2 SIGNEXTEND DUP6 PUSH1 0x2 SIGNEXTEND SLT PUSH2 0x1469 JUMPI PUSH32 0x0 DUP6 ADD SWAP4 POP PUSH3 0xD89E8 PUSH1 0x2 DUP6 SWAP1 SIGNEXTEND SGT ISZERO PUSH2 0x1469 JUMPI PUSH2 0x1441 PUSH3 0xD89E8 PUSH32 0x0 PUSH2 0x1BFB JUMP JUMPDEST SWAP4 POP PUSH32 0x0 DUP5 SUB SWAP5 POP JUMPDEST POP POP POP SWAP2 POP SWAP2 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0xB0 SHL SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x148B JUMPI PUSH2 0x148B PUSH2 0x1C6A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH2 0x14DA SWAP1 ADDRESS SWAP1 PUSH1 0x4 ADD PUSH2 0x29AA JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x14F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1506 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x152A SWAP2 SWAP1 PUSH2 0x288F JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x70A08231 ADDRESS PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x157A SWAP2 SWAP1 PUSH2 0x29AA JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1592 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x15A6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x15CA SWAP2 SWAP1 PUSH2 0x288F JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP3 GT DUP1 PUSH2 0x15DB JUMPI POP PUSH1 0x0 DUP2 GT JUMPDEST ISZERO PUSH2 0x15F1 JUMPI PUSH2 0x15EC DUP5 DUP5 DUP5 DUP5 PUSH2 0x1D0E JUMP JUMPDEST PUSH2 0x5C8 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xA0 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x80 ADD DUP2 SWAP1 MSTORE PUSH1 0x2 SSTORE PUSH1 0x3 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xB8 SHL SUB NOT AND SWAP1 SSTORE POP POP POP POP JUMP JUMPDEST EXTCODESIZE ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x1648 JUMPI POP DUP2 PUSH2 0x865 JUMP JUMPDEST DUP3 MLOAD ISZERO PUSH2 0x1658 JUMPI DUP3 MLOAD DUP1 DUP5 PUSH1 0x20 ADD REVERT JUMPDEST DUP2 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x16A2 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x168A JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x16CF JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP3 GT PUSH2 0x1733 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A206469766973696F6E206279207A65726F000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST DUP2 DUP4 DUP2 PUSH2 0x173C JUMPI INVALID JUMPDEST DIV SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x179B JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A207375627472616374696F6E206F766572666C6F770000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x17B0 JUMPI POP PUSH1 0x0 PUSH2 0x91F JUMP JUMPDEST DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 PUSH2 0x17BD JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x865 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x21 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x2E68 PUSH1 0x21 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x1809 JUMPI POP PUSH1 0x0 PUSH2 0xED0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH2 0x1816 DUP5 PUSH2 0x1E22 JUMP JUMPDEST PUSH1 0x1 SWAP2 SHR SHL SWAP1 POP DUP1 PUSH2 0x1826 JUMPI POP PUSH1 0x1 JUMPDEST PUSH1 0x0 PUSH2 0x1841 PUSH1 0x2 PUSH2 0x10A7 PUSH2 0x183A DUP8 DUP7 PUSH2 0x16DD JUMP JUMPDEST DUP6 SWAP1 PUSH2 0x1ECD JUMP JUMPDEST SWAP1 POP PUSH2 0x185C PUSH1 0x2 PUSH2 0x10A7 PUSH2 0x1855 DUP8 DUP6 PUSH2 0x16DD JUMP JUMPDEST DUP5 SWAP1 PUSH2 0x1ECD JUMP JUMPDEST SWAP1 POP PUSH2 0x1870 PUSH1 0x2 PUSH2 0x10A7 PUSH2 0x1855 DUP8 DUP6 PUSH2 0x16DD JUMP JUMPDEST SWAP1 POP PUSH2 0x1884 PUSH1 0x2 PUSH2 0x10A7 PUSH2 0x1855 DUP8 DUP6 PUSH2 0x16DD JUMP JUMPDEST SWAP1 POP PUSH2 0x1898 PUSH1 0x2 PUSH2 0x10A7 PUSH2 0x1855 DUP8 DUP6 PUSH2 0x16DD JUMP JUMPDEST SWAP1 POP PUSH2 0x18AC PUSH1 0x2 PUSH2 0x10A7 PUSH2 0x1855 DUP8 DUP6 PUSH2 0x16DD JUMP JUMPDEST SWAP1 POP PUSH2 0x18B8 DUP5 DUP3 PUSH2 0x16DD JUMP JUMPDEST DUP2 GT ISZERO PUSH2 0x18D3 JUMPI PUSH2 0x18CA DUP2 PUSH1 0x1 PUSH2 0x1744 JUMP JUMPDEST SWAP3 POP POP POP PUSH2 0xED0 JUMP JUMPDEST SWAP2 POP PUSH2 0xED0 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH5 0x1000276A3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND LT DUP1 ISZERO SWAP1 PUSH2 0x1918 JUMPI POP PUSH20 0xFFFD8963EFD1FC6A506488495D951D5263988D26 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND LT JUMPDEST PUSH2 0x194D JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0xF9 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH5 0x100000000 PUSH1 0x1 PUSH1 0xC0 SHL SUB PUSH1 0x20 DUP4 SWAP1 SHL AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP2 GT PUSH1 0x7 SHL DUP2 DUP2 SHR PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH1 0x6 SHL SWAP1 DUP2 SHR PUSH4 0xFFFFFFFF DUP2 GT PUSH1 0x5 SHL SWAP1 DUP2 SHR PUSH2 0xFFFF DUP2 GT PUSH1 0x4 SHL SWAP1 DUP2 SHR PUSH1 0xFF DUP2 GT PUSH1 0x3 SWAP1 DUP2 SHL SWAP2 DUP3 SHR PUSH1 0xF DUP2 GT PUSH1 0x2 SHL SWAP1 DUP2 SHR SWAP2 DUP3 GT PUSH1 0x1 SWAP1 DUP2 SHL SWAP3 DUP4 SHR SWAP8 SWAP1 DUP9 GT SWAP7 OR SWAP1 SWAP5 OR SWAP1 SWAP3 OR OR SWAP1 SWAP2 OR OR OR PUSH1 0x80 DUP2 LT PUSH2 0x19E1 JUMPI PUSH1 0x7F DUP2 SUB DUP4 SWAP1 SHR SWAP2 POP PUSH2 0x19EB JUMP JUMPDEST DUP1 PUSH1 0x7F SUB DUP4 SWAP1 SHL SWAP2 POP JUMPDEST SWAP1 DUP1 MUL PUSH1 0x7F DUP2 DUP2 SHR PUSH1 0xFF DUP4 DUP2 SHR SWAP2 SWAP1 SWAP2 SHR DUP1 MUL DUP1 DUP4 SHR DUP2 DUP4 SHR SHR DUP1 MUL DUP1 DUP5 SHR DUP2 DUP5 SHR SHR DUP1 MUL DUP1 DUP6 SHR DUP2 DUP6 SHR SHR DUP1 MUL DUP1 DUP7 SHR DUP2 DUP7 SHR SHR DUP1 MUL DUP1 DUP8 SHR DUP2 DUP8 SHR SHR DUP1 MUL DUP1 DUP9 SHR DUP2 DUP9 SHR SHR DUP1 MUL DUP1 DUP10 SHR DUP2 DUP10 SHR SHR DUP1 MUL DUP1 DUP11 SHR DUP2 DUP11 SHR SHR DUP1 MUL DUP1 DUP12 SHR DUP2 DUP12 SHR SHR DUP1 MUL DUP1 DUP13 SHR DUP2 DUP13 SHR SHR DUP1 MUL DUP1 DUP14 SHR DUP2 DUP14 SHR SHR DUP1 MUL DUP1 DUP15 SHR SWAP13 DUP2 SWAP1 SHR SWAP13 SWAP1 SWAP13 SHR DUP1 MUL SWAP13 DUP14 SWAP1 SHR SWAP15 SWAP14 PUSH1 0x7F NOT DUP16 ADD PUSH1 0x40 SHL PUSH1 0xC0 SWAP2 SWAP1 SWAP2 SHR PUSH8 0x8000000000000000 AND OR PUSH1 0xC1 SWAP12 SWAP1 SWAP12 SHR PUSH8 0x4000000000000000 AND SWAP11 SWAP1 SWAP11 OR PUSH1 0xC2 SWAP10 SWAP1 SWAP10 SHR PUSH8 0x2000000000000000 AND SWAP9 SWAP1 SWAP9 OR PUSH1 0xC3 SWAP8 SWAP1 SWAP8 SHR PUSH8 0x1000000000000000 AND SWAP7 SWAP1 SWAP7 OR PUSH1 0xC4 SWAP6 SWAP1 SWAP6 SHR PUSH8 0x800000000000000 AND SWAP5 SWAP1 SWAP5 OR PUSH1 0xC5 SWAP4 SWAP1 SWAP4 SHR PUSH8 0x400000000000000 AND SWAP3 SWAP1 SWAP3 OR PUSH1 0xC6 SWAP2 SWAP1 SWAP2 SHR PUSH8 0x200000000000000 AND OR PUSH1 0xC7 SWAP2 SWAP1 SWAP2 SHR PUSH8 0x100000000000000 AND OR PUSH1 0xC8 SWAP2 SWAP1 SWAP2 SHR PUSH7 0x80000000000000 AND OR PUSH1 0xC9 SWAP2 SWAP1 SWAP2 SHR PUSH7 0x40000000000000 AND OR PUSH1 0xCA SWAP2 SWAP1 SWAP2 SHR PUSH7 0x20000000000000 AND OR PUSH1 0xCB SWAP2 SWAP1 SWAP2 SHR PUSH7 0x10000000000000 AND OR PUSH1 0xCC SWAP2 SWAP1 SWAP2 SHR PUSH7 0x8000000000000 AND OR PUSH1 0xCD SWAP2 SWAP1 SWAP2 SHR PUSH7 0x4000000000000 AND OR PUSH10 0x3627A301D71055774C85 DUP2 MUL PUSH16 0x28F6481AB7F045A5AF012A19D003AA9 NOT DUP2 ADD PUSH1 0x80 SWAP1 DUP2 SAR SWAP1 PUSH16 0xDB2DF09E81959A81455E260799A0632F DUP4 ADD SWAP1 SAR PUSH1 0x2 DUP2 DUP2 SIGNEXTEND SWAP1 DUP4 SWAP1 SIGNEXTEND EQ PUSH2 0x1BEC JUMPI DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1BD0 DUP3 PUSH2 0x1F27 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GT ISZERO PUSH2 0x1BE5 JUMPI DUP2 PUSH2 0x1BE7 JUMP JUMPDEST DUP1 JUMPDEST PUSH2 0x1BEE JUMP JUMPDEST DUP2 JUMPDEST SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH1 0x2 SIGNEXTEND SGT PUSH2 0x1C1F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x54B SWAP1 PUSH2 0x2BB2 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x2 SIGNEXTEND DUP5 PUSH1 0x2 SIGNEXTEND DUP2 PUSH2 0x1C30 JUMPI INVALID JUMPDEST SDIV SWAP1 POP PUSH1 0x0 DUP5 PUSH1 0x2 SIGNEXTEND SLT DUP1 ISZERO PUSH2 0x1C57 JUMPI POP DUP3 PUSH1 0x2 SIGNEXTEND DUP5 PUSH1 0x2 SIGNEXTEND DUP2 PUSH2 0x1C50 JUMPI INVALID JUMPDEST SMOD PUSH1 0x2 SIGNEXTEND ISZERO ISZERO JUMPDEST ISZERO PUSH2 0x1C61 JUMPI PUSH1 0x0 NOT ADD JUMPDEST SWAP1 SWAP2 MUL SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0xB0 SHL SWAP1 DIV PUSH1 0xFF AND DUP1 ISZERO PUSH2 0x1C84 JUMPI POP PUSH1 0x2 SLOAD ISZERO ISZERO JUMPDEST PUSH2 0x1CA0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x54B SWAP1 PUSH2 0x2AAD JUMP JUMPDEST PUSH1 0x2 DUP1 SLOAD PUSH1 0x3 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0xA0 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x80 ADD DUP2 SWAP1 MSTORE DUP5 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xB8 SHL SUB NOT DUP2 AND SWAP1 SWAP2 SSTORE SWAP1 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP3 AND SWAP2 PUSH1 0x1 PUSH1 0x80 SHL DUP2 DIV DUP3 SIGNEXTEND SWAP2 PUSH1 0x1 PUSH1 0x98 SHL SWAP1 SWAP2 DIV SWAP1 SIGNEXTEND PUSH2 0x5C8 DUP5 DUP5 DUP5 DUP5 PUSH2 0x2259 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0xB0 SHL SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x1D38 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x54B SWAP1 PUSH2 0x2A76 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH2 0x160 ADD PUSH1 0x40 MSTORE DUP1 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x0 PUSH3 0xFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH1 0x2 SIGNEXTEND DUP2 MSTORE PUSH1 0x20 ADD DUP6 PUSH1 0x2 SIGNEXTEND DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD TIMESTAMP DUP2 MSTORE POP SWAP1 POP PUSH2 0x1E1B DUP2 DUP7 DUP7 PUSH2 0x24BC JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP1 PUSH2 0x1E2F JUMPI PUSH1 0x0 SWAP2 POP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP2 GT ISZERO PUSH2 0x1E46 JUMPI PUSH1 0x80 SWAP2 DUP3 ADD SWAP2 SHR JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1E5E JUMPI PUSH1 0x40 SWAP2 DUP3 ADD SWAP2 SHR JUMPDEST PUSH4 0xFFFFFFFF DUP2 GT ISZERO PUSH2 0x1E72 JUMPI PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 SHR JUMPDEST PUSH2 0xFFFF DUP2 GT ISZERO PUSH2 0x1E84 JUMPI PUSH1 0x10 SWAP2 DUP3 ADD SWAP2 SHR JUMPDEST PUSH1 0xFF DUP2 GT ISZERO PUSH2 0x1E95 JUMPI PUSH1 0x8 SWAP2 DUP3 ADD SWAP2 SHR JUMPDEST PUSH1 0xF DUP2 GT ISZERO PUSH2 0x1EA6 JUMPI PUSH1 0x4 SWAP2 DUP3 ADD SWAP2 SHR JUMPDEST PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x1EB7 JUMPI PUSH1 0x2 SWAP2 DUP3 ADD SWAP2 SHR JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x1EC7 JUMPI PUSH1 0x1 DUP3 ADD SWAP2 POP JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0x865 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 PUSH1 0x2 SIGNEXTEND SLT PUSH2 0x1F3E JUMPI DUP3 PUSH1 0x2 SIGNEXTEND PUSH2 0x1F46 JUMP JUMPDEST DUP3 PUSH1 0x2 SIGNEXTEND PUSH1 0x0 SUB JUMPDEST SWAP1 POP PUSH3 0xD89E8 DUP2 GT ISZERO PUSH2 0x1F84 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0xFA SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 AND PUSH2 0x1F98 JUMPI PUSH1 0x1 PUSH1 0x80 SHL PUSH2 0x1FAA JUMP JUMPDEST PUSH16 0xFFFCB933BD6FAD37AA2D162D1A594001 JUMPDEST PUSH17 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0x2 DUP3 AND ISZERO PUSH2 0x1FDE JUMPI PUSH16 0xFFF97272373D413259A46990580E213A MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x4 DUP3 AND ISZERO PUSH2 0x1FFD JUMPI PUSH16 0xFFF2E50F5F656932EF12357CF3C7FDCC MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x8 DUP3 AND ISZERO PUSH2 0x201C JUMPI PUSH16 0xFFE5CACA7E10E4E61C3624EAA0941CD0 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x10 DUP3 AND ISZERO PUSH2 0x203B JUMPI PUSH16 0xFFCB9843D60F6159C9DB58835C926644 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x20 DUP3 AND ISZERO PUSH2 0x205A JUMPI PUSH16 0xFF973B41FA98C081472E6896DFB254C0 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x40 DUP3 AND ISZERO PUSH2 0x2079 JUMPI PUSH16 0xFF2EA16466C96A3843EC78B326B52861 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x80 DUP3 AND ISZERO PUSH2 0x2098 JUMPI PUSH16 0xFE5DEE046A99A2A811C461F1969C3053 MUL PUSH1 0x80 SHR JUMPDEST PUSH2 0x100 DUP3 AND ISZERO PUSH2 0x20B8 JUMPI PUSH16 0xFCBE86C7900A88AEDCFFC83B479AA3A4 MUL PUSH1 0x80 SHR JUMPDEST PUSH2 0x200 DUP3 AND ISZERO PUSH2 0x20D8 JUMPI PUSH16 0xF987A7253AC413176F2B074CF7815E54 MUL PUSH1 0x80 SHR JUMPDEST PUSH2 0x400 DUP3 AND ISZERO PUSH2 0x20F8 JUMPI PUSH16 0xF3392B0822B70005940C7A398E4B70F3 MUL PUSH1 0x80 SHR JUMPDEST PUSH2 0x800 DUP3 AND ISZERO PUSH2 0x2118 JUMPI PUSH16 0xE7159475A2C29B7443B29C7FA6E889D9 MUL PUSH1 0x80 SHR JUMPDEST PUSH2 0x1000 DUP3 AND ISZERO PUSH2 0x2138 JUMPI PUSH16 0xD097F3BDFD2022B8845AD8F792AA5825 MUL PUSH1 0x80 SHR JUMPDEST PUSH2 0x2000 DUP3 AND ISZERO PUSH2 0x2158 JUMPI PUSH16 0xA9F746462D870FDF8A65DC1F90E061E5 MUL PUSH1 0x80 SHR JUMPDEST PUSH2 0x4000 DUP3 AND ISZERO PUSH2 0x2178 JUMPI PUSH16 0x70D869A156D2A1B890BB3DF62BAF32F7 MUL PUSH1 0x80 SHR JUMPDEST PUSH2 0x8000 DUP3 AND ISZERO PUSH2 0x2198 JUMPI PUSH16 0x31BE135F97D08FD981231505542FCFA6 MUL PUSH1 0x80 SHR JUMPDEST PUSH3 0x10000 DUP3 AND ISZERO PUSH2 0x21B9 JUMPI PUSH16 0x9AA508B5B7A84E1C677DE54F3E99BC9 MUL PUSH1 0x80 SHR JUMPDEST PUSH3 0x20000 DUP3 AND ISZERO PUSH2 0x21D9 JUMPI PUSH15 0x5D6AF8DEDB81196699C329225EE604 MUL PUSH1 0x80 SHR JUMPDEST PUSH3 0x40000 DUP3 AND ISZERO PUSH2 0x21F8 JUMPI PUSH14 0x2216E584F5FA1EA926041BEDFE98 MUL PUSH1 0x80 SHR JUMPDEST PUSH3 0x80000 DUP3 AND ISZERO PUSH2 0x2215 JUMPI PUSH12 0x48A170391F7DC42444E8FA2 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP5 PUSH1 0x2 SIGNEXTEND SGT ISZERO PUSH2 0x2230 JUMPI DUP1 PUSH1 0x0 NOT DUP2 PUSH2 0x222C JUMPI INVALID JUMPDEST DIV SWAP1 POP JUMPDEST PUSH5 0x100000000 DUP2 MOD ISZERO PUSH2 0x2244 JUMPI PUSH1 0x1 PUSH2 0x2247 JUMP JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0xFF AND PUSH1 0x20 DUP3 SWAP1 SHR ADD SWAP3 POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP8 AND ISZERO PUSH2 0x2344 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0xA0 DUP2 ADD DUP3 MSTORE DUP10 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP10 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 DUP2 DUP4 ADD DUP2 SWAP1 MSTORE PUSH1 0x60 DUP3 ADD MSTORE TIMESTAMP PUSH1 0x80 DUP3 ADD MSTORE SWAP1 MLOAD PUSH4 0x624E65F PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND SWAP2 PUSH4 0xC49CCBE SWAP2 PUSH2 0x22E6 SWAP2 SWAP1 PUSH1 0x4 ADD PUSH2 0x2C82 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x22FF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x232F JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x232C SWAP2 DUP2 ADD SWAP1 PUSH2 0x28EF JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x2338 JUMPI PUSH2 0x233F JUMP JUMPDEST POP POP PUSH1 0x1 SWAP4 POP JUMPDEST PUSH2 0x2349 JUMP JUMPDEST PUSH1 0x1 SWAP4 POP JUMPDEST DUP4 ISZERO PUSH2 0x2494 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0x80 DUP2 ADD DUP3 MSTORE DUP10 DUP2 MSTORE ADDRESS PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP2 DUP4 ADD DUP2 SWAP1 MSTORE PUSH1 0x60 DUP3 ADD MSTORE SWAP1 MLOAD PUSH4 0xFC6F7865 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND SWAP2 PUSH4 0xFC6F7865 SWAP2 PUSH2 0x23BF SWAP2 SWAP1 PUSH1 0x4 ADD PUSH2 0x2C3F JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x23D8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x2408 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x2405 SWAP2 DUP2 ADD SWAP1 PUSH2 0x28EF JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x2411 JUMPI PUSH2 0x241B JUMP JUMPDEST PUSH1 0x1 SWAP5 POP SWAP1 SWAP3 POP SWAP1 POP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x852CD8D PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND SWAP1 PUSH4 0x42966C68 SWAP1 PUSH2 0x2467 SWAP1 DUP12 SWAP1 PUSH1 0x4 ADD PUSH2 0x2D83 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2481 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x2492 JUMPI POP PUSH1 0x1 JUMPDEST POP JUMPDEST PUSH1 0x0 DUP5 DUP1 ISZERO PUSH2 0x24A0 JUMPI POP DUP4 JUMPDEST SWAP1 POP PUSH2 0x24B1 DUP10 DUP9 DUP9 DUP12 DUP8 DUP8 DUP8 PUSH2 0x2708 JUMP JUMPDEST POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x88316456 DUP10 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2510 SWAP2 SWAP1 PUSH2 0x2CC5 JUMP JUMPDEST PUSH1 0x80 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x252A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x255A JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x2557 SWAP2 DUP2 ADD SWAP1 PUSH2 0x28A7 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x2563 JUMPI PUSH2 0x26AD JUMP JUMPDEST DUP4 SWAP9 POP DUP3 SWAP8 POP DUP2 SWAP7 POP DUP1 SWAP6 POP PUSH1 0x0 DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND GT ISZERO PUSH2 0x2629 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0xA0 DUP2 ADD DUP3 MSTORE DUP11 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP11 AND PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x2 DUP15 DUP2 SIGNEXTEND SWAP4 DUP4 ADD DUP5 SWAP1 MSTORE DUP14 DUP2 SIGNEXTEND PUSH1 0x60 DUP5 ADD DUP2 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x80 SWAP1 SWAP5 ADD DUP5 SWAP1 MSTORE DUP14 DUP3 SSTORE PUSH1 0x3 DUP1 SLOAD PUSH1 0x1 PUSH1 0xB0 SHL PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT SWAP1 SWAP2 AND SWAP1 SWAP5 OR PUSH3 0xFFFFFF PUSH1 0x80 SHL NOT AND PUSH1 0x1 PUSH1 0x80 SHL SWAP7 DUP5 SIGNEXTEND PUSH3 0xFFFFFF SWAP1 DUP2 AND SWAP8 SWAP1 SWAP8 MUL OR PUSH3 0xFFFFFF PUSH1 0x98 SHL NOT AND PUSH1 0x1 PUSH1 0x98 SHL SWAP3 SWAP1 SWAP4 SIGNEXTEND SWAP6 SWAP1 SWAP6 AND MUL OR PUSH1 0xFF PUSH1 0xB0 SHL NOT AND OR SWAP1 SWAP2 SSTORE SWAP5 POP PUSH2 0x26A8 JUMP JUMPDEST DUP9 ISZERO PUSH2 0x26A8 JUMPI PUSH1 0x40 MLOAD PUSH4 0x852CD8D PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND SWAP1 PUSH4 0x42966C68 SWAP1 PUSH2 0x267B SWAP1 DUP13 SWAP1 PUSH1 0x4 ADD PUSH2 0x2D83 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2695 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x26A6 JUMPI POP PUSH1 0x1 JUMPDEST POP JUMPDEST POP POP POP POP JUMPDEST PUSH2 0x26BC DUP6 DUP9 DUP9 DUP8 DUP8 DUP8 DUP8 PUSH2 0x2753 JUMP JUMPDEST DUP1 PUSH2 0x26FE JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0xA0 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x80 ADD DUP2 SWAP1 MSTORE PUSH1 0x2 SSTORE PUSH1 0x3 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xB8 SHL SUB NOT AND SWAP1 SSTORE JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP7 PUSH32 0xDEE9C9AC7E4F2757956DFCF228DC427442EC0A77C0020754A5D9C3B2583D9A14 DUP8 DUP8 DUP8 DUP8 DUP8 DUP8 PUSH1 0x40 MLOAD PUSH2 0x2742 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2AD9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP POP POP JUMP JUMPDEST DUP7 PUSH32 0xDEE9C9AC7E4F2757956DFCF228DC427442EC0A77C0020754A5D9C3B2583D9A14 DUP8 DUP8 DUP8 DUP8 DUP8 DUP8 PUSH1 0x40 MLOAD PUSH2 0x2742 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2BE9 JUMP JUMPDEST DUP1 MLOAD PUSH2 0xFFFF DUP2 AND DUP2 EQ PUSH2 0xED0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x27B0 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x865 DUP2 PUSH2 0x2E03 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x27CC JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x865 DUP2 PUSH2 0x2E03 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xE0 DUP9 DUP11 SUB SLT ISZERO PUSH2 0x27F1 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP8 MLOAD PUSH2 0x27FC DUP2 PUSH2 0x2E03 JUMP JUMPDEST DUP1 SWAP8 POP POP PUSH1 0x20 DUP9 ADD MLOAD DUP1 PUSH1 0x2 SIGNEXTEND DUP2 EQ PUSH2 0x2813 JUMPI DUP4 DUP5 REVERT JUMPDEST SWAP6 POP PUSH2 0x2821 PUSH1 0x40 DUP10 ADD PUSH2 0x278D JUMP JUMPDEST SWAP5 POP PUSH2 0x282F PUSH1 0x60 DUP10 ADD PUSH2 0x278D JUMP JUMPDEST SWAP4 POP PUSH2 0x283D PUSH1 0x80 DUP10 ADD PUSH2 0x278D JUMP JUMPDEST SWAP3 POP PUSH1 0xA0 DUP9 ADD MLOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x2852 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0xC0 DUP10 ADD MLOAD SWAP1 SWAP3 POP DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x2867 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP6 SWAP9 SWAP2 SWAP5 SWAP8 POP SWAP3 SWAP6 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2888 JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x28A0 JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x28BC JUMPI DUP4 DUP5 REVERT JUMPDEST DUP5 MLOAD SWAP4 POP PUSH1 0x20 DUP6 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x28D9 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH1 0x40 DUP7 ADD MLOAD PUSH1 0x60 SWAP1 SWAP7 ADD MLOAD SWAP5 SWAP8 SWAP1 SWAP7 POP SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2901 JUMPI DUP2 DUP3 REVERT JUMPDEST POP POP DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD MLOAD SWAP1 SWAP3 SWAP1 SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x2927 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP5 CALLDATALOAD SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x294C JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP8 ADD SWAP2 POP DUP8 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x295F JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x296D JUMPI DUP5 DUP6 REVERT JUMPDEST DUP9 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x297E JUMPI DUP5 DUP6 REVERT JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP POP PUSH1 0x20 ADD SWAP5 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x2 SIGNEXTEND SWAP1 MSTORE JUMP JUMPDEST PUSH3 0xFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH3 0xFFFFFF SWAP1 SWAP2 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x2 SWAP2 SWAP1 SWAP2 SIGNEXTEND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x11 SWAP1 DUP3 ADD MSTORE PUSH17 0x5072696365206D757374206265203E203 PUSH1 0x7C SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH14 0xA0E4D2C6CA40E8DEDE40D0D2CED PUSH1 0x93 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x15 SWAP1 DUP3 ADD MSTORE PUSH21 0x556E617574686F72697A65642063616C6C6261636B PUSH1 0x58 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x17 SWAP1 DUP3 ADD MSTORE PUSH32 0x506F736974696F6E20616C726561647920616374697665000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x12 SWAP1 DUP3 ADD MSTORE PUSH18 0x27379030B1BA34BB32903837B9B4BA34B7B7 PUSH1 0x71 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0xE0 DUP1 DUP3 MSTORE PUSH1 0x6 SWAP1 DUP3 ADD MSTORE PUSH6 0x52454D4F5645 PUSH1 0xD0 SHL PUSH2 0x100 DUP3 ADD MSTORE PUSH1 0x2 SWAP7 DUP8 SIGNEXTEND PUSH1 0x20 DUP3 ADD MSTORE SWAP5 SWAP1 SWAP6 SIGNEXTEND PUSH1 0x40 DUP6 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB SWAP3 SWAP1 SWAP3 AND PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP3 ADD MSTORE SWAP1 ISZERO ISZERO PUSH1 0xC0 DUP3 ADD MSTORE PUSH2 0x120 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x12 SWAP1 DUP3 ADD MSTORE PUSH18 0x141BDBDB08191BD95CDB89DD08195E1A5CDD PUSH1 0x72 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH20 0x496E76616C6964207469636B2073706163696E67 PUSH1 0x60 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xD SWAP1 DUP3 ADD MSTORE PUSH13 0x507269636520746F6F206C6F77 PUSH1 0x98 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1D SWAP1 DUP3 ADD MSTORE PUSH32 0x5469636B2073706163696E67206D75737420626520706F736974697665000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0xE0 DUP1 DUP3 MSTORE PUSH1 0x4 SWAP1 DUP3 ADD MSTORE PUSH4 0x13525395 PUSH1 0xE2 SHL PUSH2 0x100 DUP3 ADD MSTORE PUSH1 0x2 SWAP7 DUP8 SIGNEXTEND PUSH1 0x20 DUP3 ADD MSTORE SWAP5 SWAP1 SWAP6 SIGNEXTEND PUSH1 0x40 DUP6 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB SWAP3 SWAP1 SWAP3 AND PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP3 ADD MSTORE SWAP1 ISZERO ISZERO PUSH1 0xC0 DUP3 ADD MSTORE PUSH2 0x120 ADD SWAP1 JUMP JUMPDEST DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 DUP1 DUP4 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP3 ADD MSTORE PUSH1 0x40 DUP1 DUP4 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB SWAP1 DUP2 AND SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 SWAP3 DUP4 ADD MLOAD AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 ADD SWAP1 POP DUP3 MLOAD DUP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB PUSH1 0x20 DUP5 ADD MLOAD AND PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP4 ADD MLOAD PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP4 ADD MLOAD PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x80 DUP4 ADD MLOAD PUSH1 0x80 DUP4 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x160 DUP3 ADD SWAP1 POP PUSH2 0x2CD9 DUP3 DUP5 MLOAD PUSH2 0x298D JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MLOAD PUSH2 0x2CEB PUSH1 0x20 DUP5 ADD DUP3 PUSH2 0x298D JUMP JUMPDEST POP PUSH1 0x40 DUP4 ADD MLOAD PUSH2 0x2CFE PUSH1 0x40 DUP5 ADD DUP3 PUSH2 0x29A1 JUMP JUMPDEST POP PUSH1 0x60 DUP4 ADD MLOAD PUSH2 0x2D11 PUSH1 0x60 DUP5 ADD DUP3 PUSH2 0x299A JUMP JUMPDEST POP PUSH1 0x80 DUP4 ADD MLOAD PUSH2 0x2D24 PUSH1 0x80 DUP5 ADD DUP3 PUSH2 0x299A JUMP JUMPDEST POP PUSH1 0xA0 DUP4 ADD MLOAD PUSH1 0xA0 DUP4 ADD MSTORE PUSH1 0xC0 DUP4 ADD MLOAD PUSH1 0xC0 DUP4 ADD MSTORE PUSH1 0xE0 DUP4 ADD MLOAD PUSH1 0xE0 DUP4 ADD MSTORE PUSH2 0x100 DUP1 DUP5 ADD MLOAD DUP2 DUP5 ADD MSTORE POP PUSH2 0x120 DUP1 DUP5 ADD MLOAD PUSH2 0x2D62 DUP3 DUP6 ADD DUP3 PUSH2 0x298D JUMP JUMPDEST POP POP PUSH2 0x140 SWAP3 DUP4 ADD MLOAD SWAP2 SWAP1 SWAP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH3 0xFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP5 DUP6 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB SWAP4 SWAP1 SWAP4 AND PUSH1 0x20 DUP6 ADD MSTORE PUSH1 0x2 SWAP2 DUP3 SIGNEXTEND PUSH1 0x40 DUP6 ADD MSTORE SWAP1 SIGNEXTEND PUSH1 0x60 DUP4 ADD MSTORE ISZERO ISZERO PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 ADD SWAP1 JUMP JUMPDEST SWAP7 DUP8 MSTORE PUSH1 0x20 DUP8 ADD SWAP6 SWAP1 SWAP6 MSTORE PUSH1 0x40 DUP7 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x2 SWAP2 DUP3 SIGNEXTEND PUSH1 0x60 DUP7 ADD MSTORE DUP2 SIGNEXTEND PUSH1 0x80 DUP6 ADD MSTORE SIGNEXTEND PUSH1 0xA0 DUP4 ADD MSTORE ISZERO ISZERO PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0xE0 ADD SWAP1 JUMP JUMPDEST PUSH1 0xFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x2E18 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID 0x4F PUSH24 0x6E61626C653A206E6577206F776E65722069732074686520 PUSH27 0x65726F2061646472657373416464726573733A20696E7375666669 PUSH4 0x69656E74 KECCAK256 PUSH3 0x616C61 PUSH15 0x636520666F722063616C6C53616665 0x4D PUSH2 0x7468 GASPRICE KECCAK256 PUSH14 0x756C7469706C69636174696F6E20 PUSH16 0x766572666C6F77536166654552433230 GASPRICE KECCAK256 GASLIMIT MSTORE NUMBER ORIGIN ADDRESS KECCAK256 PUSH16 0x7065726174696F6E20646964206E6F74 KECCAK256 PUSH20 0x7563636565645361666545524332303A20617070 PUSH19 0x6F76652066726F6D206E6F6E2D7A65726F2074 PUSH16 0x206E6F6E2D7A65726F20616C6C6F7761 PUSH15 0x6365A2646970667358221220485302 0xD8 SELFBALANCE PUSH30 0x27C4DC1FEEAC3046D862388694D879A94909DA5F373371AE4BA464736F6C PUSH4 0x43000706 STOP CALLER ","sourceMap":"1260:19623:32:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2133:38;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1707:37;;;:::i;:::-;;;;;;;:::i;1587:31::-;;;:::i;:::-;;;;;;;:::i;4661:922::-;;;;;;:::i;:::-;;:::i;:::-;;1826:30;;;:::i;1717:145:0:-;;;:::i;1520:60:32:-;;;:::i;1085:85:0:-;;;:::i;1663:37:32:-;;;:::i;1471:42::-;;;:::i;1785:34::-;;;:::i;:::-;;;;;;;:::i;1625:31::-;;;:::i;20282:598::-;;;;;;:::i;:::-;;:::i;2065:31::-;;;:::i;:::-;;;;;;;;;;;:::i;1751:27::-;;;:::i;2011:240:0:-;;;;;;:::i;:::-;;:::i;2133:38:32:-;;;;;;:::o;1707:37::-;;;:::o;1587:31::-;;;:::o;4661:922::-;1688:1:10;2277:7;;:19;;2269:63;;;;;-1:-1:-1;;;2269:63:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;1688:1;2407:7;:18;1308:12:0::1;:10;:12::i;:::-;-1:-1:-1::0;;;;;1297:23:0::1;:7;:5;:7::i;:::-;-1:-1:-1::0;;;;;1297:23:0::1;;1289:68;;;::::0;;-1:-1:-1;;;1289:68:0;;::::1;;::::0;::::1;::::0;;;;;;;::::1;::::0;;;;;;;;;;;;;::::1;;4868:27:32::2;4910:17:::0;4942:19:::2;4976:21:::0;5012::::2;5047:47;5072:21;5047:24;:47::i;:::-;4853:241;;;;;;;;;;5145:13;5161:94;5199:15;5229;5161:23;:94::i;:::-;5145:110;;5361:214;5398:19;5432:21;5468:13;5496:15;5526;5556:8;5361:22;:214::i;:::-;-1:-1:-1::0;;1645:1:10;2580:22;;-1:-1:-1;;;;;4661:922:32:o;1826:30::-;;;:::o;1717:145:0:-;1308:12;:10;:12::i;:::-;-1:-1:-1;;;;;1297:23:0;:7;:5;:7::i;:::-;-1:-1:-1;;;;;1297:23:0;;1289:68;;;;;-1:-1:-1;;;1289:68:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1823:1:::1;1807:6:::0;;1786:40:::1;::::0;-1:-1:-1;;;;;1807:6:0;;::::1;::::0;1786:40:::1;::::0;1823:1;;1786:40:::1;1853:1;1836:19:::0;;-1:-1:-1;;;;;;1836:19:0::1;::::0;;1717:145::o;1520:60:32:-;;;:::o;1085:85:0:-;1131:7;1157:6;-1:-1:-1;;;;;1157:6:0;1085:85;:::o;1663:37:32:-;;;:::o;1471:42::-;;;:::o;1785:34::-;;;:::o;1625:31::-;;;:::o;20282:598::-;20526:10;-1:-1:-1;;;;;20548:15:32;20526:38;;20504:109;;;;-1:-1:-1;;;20504:109:32;;;;;;;:::i;:::-;;;;;;;;;20667:15;;20663:100;;20699:52;-1:-1:-1;;;;;20706:6:32;20699:27;20727:10;20739:11;20699:27;:52::i;:::-;20777:15;;20773:100;;20809:52;-1:-1:-1;;;;;20816:6:32;20809:27;20837:10;20849:11;20809:27;:52::i;:::-;20282:598;;;;:::o;2065:31::-;;;;;;;;-1:-1:-1;;;;;2065:31:32;;;-1:-1:-1;;;2065:31:32;;;;;-1:-1:-1;;;2065:31:32;;;;;-1:-1:-1;;;2065:31:32;;;;;:::o;1751:27::-;;;:::o;2011:240:0:-;1308:12;:10;:12::i;:::-;-1:-1:-1;;;;;1297:23:0;:7;:5;:7::i;:::-;-1:-1:-1;;;;;1297:23:0;;1289:68;;;;;-1:-1:-1;;;1289:68:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2099:22:0;::::1;2091:73;;;;-1:-1:-1::0;;;2091:73:0::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2200:6;::::0;;2179:38:::1;::::0;-1:-1:-1;;;;;2179:38:0;;::::1;::::0;2200:6;::::1;::::0;2179:38:::1;::::0;::::1;2227:6;:17:::0;;-1:-1:-1;;;;;;2227:17:0::1;-1:-1:-1::0;;;;;2227:17:0;;;::::1;::::0;;;::::1;::::0;;2011:240::o;1348:613:4:-;1713:10;;;1712:62;;-1:-1:-1;1729:39:4;;;-1:-1:-1;;;1729:39:4;;1753:4;1729:39;;;;-1:-1:-1;;;;;1729:39:4;;;;;;;;;:15;;;;;;:39;;;;;;;;;;;;;;;:15;:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1729:39:4;:44;1712:62;1704:150;;;;-1:-1:-1;;;1704:150:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1891:62;;;-1:-1:-1;;;;;1891:62:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1891:62:4;-1:-1:-1;;;1891:62:4;;;1864:90;;1884:5;;1864:19;:90::i;:::-;1348:613;;;:::o;3581:193:8:-;3684:12;3715:52;3737:6;3745:4;3751:1;3754:12;3715:21;:52::i;:::-;3708:59;;3581:193;;;;;;:::o;598:104:9:-;685:10;598:104;:::o;5670:958:32:-;5815:27;5857:17;5889:19;5923:21;5959;6064:20;6095:10;6139:29;:27;:29::i;:::-;6116:52;-1:-1:-1;6116:52:32;-1:-1:-1;6116:52:32;;-1:-1:-1;6230:34:32;6116:52;6230:20;:34::i;:::-;6208:56;;6291:35;6304:21;6291:12;:35::i;:::-;6275:51;;6411:30;6427:13;6411:15;:30::i;:::-;6374:67;;-1:-1:-1;6374:67:32;-1:-1:-1;;;5670:958:32;;;;;;;:::o;6712:456::-;6879:22;;6834:13;;-1:-1:-1;;;6879:22:32;;;;6878:23;;:84;;-1:-1:-1;6937:25:32;;:15;6918:44;;;-1:-1:-1;;;6937:25:32;;;;;6918:44;;;;6878:84;:145;;;-1:-1:-1;6998:25:32;;:15;6979:44;;;-1:-1:-1;;;6998:25:32;;;;;6979:44;;;;6878:145;6860:278;;;7050:50;7067:15;7084;7050:16;:50::i;:::-;-1:-1:-1;7122:4:32;7115:11;;6860:278;-1:-1:-1;7155:5:32;6712:456;;;;;:::o;19740:483::-;19983:232;20025:15;20055:11;20081:14;20110:13;20138:14;20167;20196:8;19983:232;;;;;;;;;;;;:::i;:::-;;;;;;;;19740:483;;;;;;:::o;704:175:4:-;813:58;;;-1:-1:-1;;;;;813:58:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;813:58:4;-1:-1:-1;;;813:58:4;;;786:86;;806:5;;2967:751;3386:23;3412:69;3440:4;3412:69;;;;;;;;;;;;;;;;;3420:5;-1:-1:-1;;;;;3412:27:4;;;:69;;;;;:::i;:::-;3495:17;;3386:95;;-1:-1:-1;3495:21:4;3491:221;;3635:10;3624:30;;;;;;;;;;;;;;;-1:-1:-1;3624:30:4;3616:85;;;;-1:-1:-1;;;3616:85:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4608:523:8;4735:12;4792:5;4767:21;:30;;4759:81;;;;-1:-1:-1;;;4759:81:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4858:18;4869:6;4858:10;:18::i;:::-;4850:60;;;;;-1:-1:-1;;;4850:60:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;4981:12;4995:23;5022:6;-1:-1:-1;;;;;5022:11:8;5042:5;5050:4;5022:33;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;5022:33:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4980:75;;;;5072:52;5090:7;5099:10;5111:12;5072:17;:52::i;:::-;5065:59;4608:523;-1:-1:-1;;;;;;;4608:523:8:o;16778:351:32:-;16867:20;16889:10;16917:19;16939:7;-1:-1:-1;;;;;16939:15:32;;16955:6;16963;16971:3;16939:36;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;16917:58;-1:-1:-1;;;;;;16994:25:32;;16986:56;;;;-1:-1:-1;;;16986:56:32;;;;;;;:::i;:::-;17101:11;-1:-1:-1;;;;;17086:33:32;;:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;17053:68:32;;;;-1:-1:-1;16778:351:32;;-1:-1:-1;;;;;;16778:351:32:o;17202:697::-;17293:7;-1:-1:-1;;;;;17353:21:32;;17329:45;;17418:3;17409:12;;;17515:31;17532:14;17515:31;;:14;:31;;;;17511:348;;;17654:14;17637;:31;17630:39;;:2;:39;17596:13;:74;;;;;;17563:107;;17511:348;;;17709:14;17692:31;;:14;:31;;;17688:171;;;17807:39;17831:14;17814;:31;17807:39;:2;:39;17773:74;17688:171;17878:13;-1:-1:-1;;17202:697:32;;;;:::o;17907:1768::-;17974:5;18015:1;18000:12;:16;17992:46;;;;-1:-1:-1;;;17992:46:32;;;;;;;:::i;:::-;18286:21;18337:4;18322:12;:19;18318:399;;;18539:31;18547:4;18557:12;18539:17;:31::i;:::-;18523:47;;18318:399;;;-1:-1:-1;18693:12:32;18318:399;18792:13;18838:4;18859:31;18876:14;18859:31;;:14;:31;;;;18855:358;;;18919:98;18958:43;;18966:14;18958:23;;;18986:14;18958:43;:27;:43::i;:::-;18919:9;;18951:2;:51;18919:13;:98::i;:::-;18907:110;;18855:358;;;19056:14;19039:31;;:14;:31;;;19035:178;;;19101:100;19142:43;;19150:14;19142:23;;;19170:14;19142:43;:27;:43::i;:::-;19101:11;;19135:2;:51;19101:15;:100::i;:::-;19087:114;;19035:178;19284:17;19304:40;19332:11;19304:23;:9;-1:-1:-1;;;19304:13:32;:23::i;:::-;:27;;:40::i;:::-;19284:60;;19357:20;19388:24;19402:9;19388:13;:24::i;:::-;19357:56;-1:-1:-1;817:10:21;-1:-1:-1;;;;;19472:39:32;;;;19464:65;;;;-1:-1:-1;;;19464:65:32;;;;;;;:::i;:::-;997:49:21;-1:-1:-1;;;;;19548:39:32;;;;19540:66;;;;-1:-1:-1;;;19540:66:32;;;;;;;:::i;:::-;19626:41;19654:12;19626:27;:41::i;14314:2071::-;14402:15;14419;14469:1;14455:11;:15;;;14447:48;;;;-1:-1:-1;;;14447:48:32;;;;;;;:::i;:::-;14601:20;;14562:15;;14626:1;;14601:20;;14581:11;:41;14580:47;;;14562:65;;14655:1;14642:9;:14;;;14638:43;;-1:-1:-1;14670:11:32;14638:43;14815:11;14800;14788:23;;:9;:23;;;;;;;;14787:39;14775:51;;14841:9;:14;;14854:1;14841:14;14837:43;;;-1:-1:-1;14869:11:32;14837:43;14978:28;;;15038;;;15127:45;14978:28;15160:11;15127:18;:45::i;:::-;15115:57;;15195:45;15214:12;15228:11;15195:18;:45::i;:::-;15183:57;;15363:11;15348:26;;:12;:26;;;;;;;;15347:33;;;15343:90;;15410:11;15397:24;;;;15343:90;15510:9;15497:22;;:9;:22;;;15493:90;;15560:11;15548:9;:23;15536:35;;15493:90;-1:-1:-1;;15656:29:32;;;;;:120;;15767:9;15656:120;;;15701:50;-1:-1:-1;;15739:11:32;15701:18;:50::i;:::-;15644:132;-1:-1:-1;637:9:21;15801:29:32;;;;;:120;;15912:9;15801:120;;;15846:50;637:9:21;15884:11:32;15846:18;:50::i;:::-;15789:132;;16001:9;15988:22;;:9;:22;;;15984:352;;16051:11;16039:23;;;-1:-1:-1;637:9:21;16143:29:32;;;;;16139:186;;;16205:50;637:9:21;16243:11:32;16205:18;:50::i;:::-;16193:62;;16298:11;16286:9;:23;16274:35;;16139:186;16348:29;;;14314:2071;;;:::o;7230:503::-;7314:22;;-1:-1:-1;;;7314:22:32;;;;7310:73;;;7353:18;:16;:18::i;:::-;7412:39;;-1:-1:-1;;;7412:39:32;;7393:16;;-1:-1:-1;;;;;7419:6:32;7412:24;;;;:39;;7445:4;;7412:39;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;7393:58;;7462:16;7488:6;-1:-1:-1;;;;;7481:24:32;;7514:4;7481:39;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;7462:58;;7546:1;7535:8;:12;:28;;;;7562:1;7551:8;:12;7535:28;7531:195;;;7580:56;7595:9;7606;7617:8;7627;7580:14;:56::i;:::-;7531:195;;;7687:27;;;;;;;;-1:-1:-1;7687:27:32;;;;;;;;;;;;;;;;;;;;;;;;;;;7669:45;;;;-1:-1:-1;;;;;;7669:45:32;;;7230:503;;;;:::o;726:413:8:-;1086:20;1124:8;;;726:413::o;7091:725::-;7206:12;7234:7;7230:580;;;-1:-1:-1;7264:10:8;7257:17;;7230:580;7375:17;;:21;7371:429;;7633:10;7627:17;7693:15;7680:10;7676:2;7672:19;7665:44;7582:145;7772:12;7765:20;;-1:-1:-1;;;7765:20:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4217:150:2;4275:7;4306:1;4302;:5;4294:44;;;;;-1:-1:-1;;;4294:44:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;4359:1;4355;:5;;;;;;;4217:150;-1:-1:-1;;;4217:150:2:o;3136:155::-;3194:7;3226:1;3221;:6;;3213:49;;;;;-1:-1:-1;;;3213:49:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3279:5:2;;;3136:155::o;3538:215::-;3596:7;3619:6;3615:20;;-1:-1:-1;3634:1:2;3627:8;;3615:20;3657:5;;;3661:1;3657;:5;:1;3680:5;;;;;:10;3672:56;;;;-1:-1:-1;;;3672:56:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;742:1409:34;790:7;814:6;810:20;;-1:-1:-1;829:1:34;822:8;;810:20;1011:16;1047:1;1036:7;1041:1;1036:4;:7::i;:::-;1030:1;1036:12;;1030:19;;-1:-1:-1;1064:13:34;1060:31;;-1:-1:-1;1090:1:34;1060:31;1252:14;1269:36;1303:1;1269:29;1282:15;:1;1288:8;1282:5;:15::i;:::-;1269:8;;:12;:29::i;:36::-;1252:53;-1:-1:-1;1325:32:34;1355:1;1325:25;1336:13;:1;1252:53;1336:5;:13::i;:::-;1325:6;;:10;:25::i;:32::-;1316:41;-1:-1:-1;1377:32:34;1407:1;1377:25;1388:13;:1;1316:41;1388:5;:13::i;1377:32::-;1368:41;-1:-1:-1;1429:32:34;1459:1;1429:25;1440:13;:1;1368:41;1440:5;:13::i;1429:32::-;1420:41;-1:-1:-1;1481:32:34;1511:1;1481:25;1492:13;:1;1420:41;1492:5;:13::i;1481:32::-;1472:41;-1:-1:-1;1533:32:34;1563:1;1533:25;1544:13;:1;1472:41;1544:5;:13::i;1533:32::-;1524:41;-1:-1:-1;1816:13:34;:1;1524:41;1816:5;:13::i;:::-;1807:6;:22;1803:341;;;1997:13;:6;2008:1;1997:10;:13::i;:::-;1990:20;;;;;;1803:341;2126:6;-1:-1:-1;2119:13:34;;-1:-1:-1;2119:13:34;4354:4281:21;4427:10;817;-1:-1:-1;;;;;4556:30:21;;;;;;:63;;-1:-1:-1;997:49:21;-1:-1:-1;;;;;4590:29:21;;;4556:63;4548:77;;;;;-1:-1:-1;;;4548:77:21;;;;;;;;;;;;-1:-1:-1;;;4548:77:21;;;;;;;;;;;;;;;-1:-1:-1;;;;;4676:2:21;4651:27;;;;-1:-1:-1;;;;;4781:41:21;;4778:1;4774:49;4871:9;;;4944:18;4938:25;;4935:1;4931:33;5012:9;;;5085:10;5079:17;;5076:1;5072:25;5145:9;;;5218:6;5212:13;;5209:1;5205:21;5274:9;;;5347:4;5341:11;;5338:1;5334:19;;;5401:9;;;5474:3;5468:10;;5465:1;5461:18;5527:9;;;5594:10;;;5591:1;5587:18;;;5653:9;;;;5713:10;;;4984;;5117;;;5246;;;5373;5499;;;5625;5743;5784:3;5777:10;;5773:79;;5809:3;5803;:9;5793:5;:20;;5789:24;;5773:79;;;5848:3;5842;:9;5832:5;:20;;5828:24;;5773:79;5951:9;;;5946:3;5942:19;;;5983:11;;;;6055:9;;;;6120;;6111:19;;;6152:11;;;6224:9;6289;;6280:19;;;6321:11;;;6393:9;6458;;6449:19;;;6490:11;;;6562:9;6627;;6618:19;;;6659:11;;;6731:9;6796;;6787:19;;;6828:11;;;6900:9;6965;;6956:19;;;6997:11;;;7069:9;7134;;7125:19;;;7166:11;;;7238:9;7303;;7294:19;;;7335:11;;;7407:9;7472;;7463:19;;;7504:11;;;7576:9;7641;;7632:19;;;7673:11;;;7745:9;7810;;7801:19;;;7842:11;;;7914:9;7979;;7970:19;;;8011:11;;;;8083:9;;;;8148;;8139:19;;;;;5951:9;-1:-1:-1;;5879:17:21;;5901:2;5878:25;6026:10;;;;;;;6016:21;6195:10;;;;;;;6185:21;;;;6364:10;;;;;;;6354:21;;;;6533:10;;;;;;;6523:21;;;;6702:10;;;;;;;6692:21;;;;6871:10;;;;;;;6861:21;;;;7040:10;;;;;;;7030:21;7209:10;;;;;;;7199:21;7378:10;;;;;;;7368:21;7547:10;;;;;;;7537:21;7716:10;;;;;;;7706:21;7885:10;;;;;;;7875:21;8054:10;;;;;;;8044:21;8223:10;;;;;;;8213:21;8285:24;8277:32;;-1:-1:-1;;8361:53:21;;5893:3;8360:62;;;;8471:39;8455:55;;8454:64;;8537:17;;;;;;;;;:91;;8597:12;-1:-1:-1;;;;;8567:42:21;:26;8586:6;8567:18;:26::i;:::-;-1:-1:-1;;;;;8567:42:21;;;:61;;8621:7;8567:61;;;8612:6;8567:61;8537:91;;;8557:7;8537:91;8530:98;4354:4281;-1:-1:-1;;;;;;;;;4354:4281:21:o;16393:377:32:-;16501:5;16542:1;16527:12;:16;;;16519:58;;;;-1:-1:-1;;;16519:58:32;;;;;;;:::i;:::-;16588:16;16614:12;16607:19;;:4;:19;;;;;;;;16588:38;;16648:1;16641:4;:8;;;:38;;;;;16661:12;16654:19;;:4;:19;;;;;;;;:24;;;;16641:38;16637:83;;;-1:-1:-1;;16696:12:32;16637:83;16737:25;;;;16393:377;-1:-1:-1;;16393:377:32:o;8302:617::-;8372:22;;-1:-1:-1;;;8372:22:32;;;;:54;;;;-1:-1:-1;8398:15:32;:23;:28;;8372:54;8350:122;;;;-1:-1:-1;;;8350:122:32;;;;;;;:::i;:::-;8502:15;:23;;8557:25;;;8723:27;;;;;;;;8483:16;8723:27;;;;;;;;;;;;;;;;;;;;;;;;;;8705:45;;-1:-1:-1;;;;;;8705:45:32;;;;;8502:23;;-1:-1:-1;;;;;8557:25:32;;;-1:-1:-1;;;8612:25:32;;;;;-1:-1:-1;;;8667:25:32;;;;;8850:61;8502:23;8557:25;8612;8667;8850:15;:61::i;11766:924::-;11944:22;;-1:-1:-1;;;11944:22:32;;;;11943:23;11935:59;;;;-1:-1:-1;;;11935:59:32;;;;;;;:::i;:::-;12007:65;12075:475;;;;;;;;12141:6;-1:-1:-1;;;;;12075:475:32;;;;;12174:6;-1:-1:-1;;;;;12075:475:32;;;;;12204:3;12075:475;;;;;;12237:9;12075:475;;;;;;12276:9;12075:475;;;;;;12320:14;12075:475;;;;12369:14;12075:475;;;;12414:1;12075:475;;;;12446:1;12075:475;;;;12485:4;-1:-1:-1;;;;;12075:475:32;;;;;12519:15;12075:475;;;12007:543;;12640:42;12653:6;12661:9;12672;12640:12;:42::i;:::-;11766:924;;;;;:::o;3253:1088:34:-;3301:9;3356:1;3381;3371:2;;3408:1;3403:6;;3371:2;-1:-1:-1;;;;;3444:1:34;3441:41;3438:2;;;3514:3;3507:11;;;;3541;3438:2;3590:18;3587:1;3584:25;3581:2;;;3641;3634:10;;;;3667;3581:2;3715:10;3712:1;3709:17;3706:2;;;3758;3751:10;;;;3784;3706:2;3832:6;3829:1;3826:13;3823:2;;;3871;3864:10;;;;3897;3823:2;3945:4;3942:1;3939:11;3936:2;;;3982:1;3975:9;;;;4007;3936:2;4054:3;4051:1;4048:10;4045:2;;;4090:1;4083:9;;;;4115;4045:2;4162:3;4159:1;4156:10;4153:2;;;4198:1;4191:9;;;;4223;4153:2;4270:3;4267:1;4264:10;4261:2;;;4306:1;4303;4299:9;4294:14;;4261:2;;3332:1002;;;:::o;2690:175:2:-;2748:7;2779:5;;;2802:6;;;;2794:46;;;;;-1:-1:-1;;;2794:46:2;;;;;;;;;;;;;;;;;;;;;;;;;;;1355:2580:21;1418:20;1450:15;1475:1;1468:4;:8;;;:57;;1519:4;1512:12;;1468:57;;;1495:4;1488:12;;1487:13;;1468:57;1450:75;-1:-1:-1;637:9:21;1543:28;;;1535:42;;;;;-1:-1:-1;;;1535:42:21;;;;;;;;;;;;-1:-1:-1;;;1535:42:21;;;;;;;;;;;;;;;1588:13;1614:3;1604:13;;:93;;-1:-1:-1;;;1604:93:21;;;1625:34;1604:93;1588:109;;;-1:-1:-1;1721:3:21;1711:13;;:18;1707:83;;1748:34;1740:42;1787:3;1739:51;1707:83;1814:3;1804:13;;:18;1800:83;;1841:34;1833:42;1880:3;1832:51;1800:83;1907:3;1897:13;;:18;1893:83;;1934:34;1926:42;1973:3;1925:51;1893:83;2000:4;1990:14;;:19;1986:84;;2028:34;2020:42;2067:3;2019:51;1986:84;2094:4;2084:14;;:19;2080:84;;2122:34;2114:42;2161:3;2113:51;2080:84;2188:4;2178:14;;:19;2174:84;;2216:34;2208:42;2255:3;2207:51;2174:84;2282:4;2272:14;;:19;2268:84;;2310:34;2302:42;2349:3;2301:51;2268:84;2376:5;2366:15;;:20;2362:85;;2405:34;2397:42;2444:3;2396:51;2362:85;2471:5;2461:15;;:20;2457:85;;2500:34;2492:42;2539:3;2491:51;2457:85;2566:5;2556:15;;:20;2552:85;;2595:34;2587:42;2634:3;2586:51;2552:85;2661:5;2651:15;;:20;2647:85;;2690:34;2682:42;2729:3;2681:51;2647:85;2756:6;2746:16;;:21;2742:86;;2786:34;2778:42;2825:3;2777:51;2742:86;2852:6;2842:16;;:21;2838:86;;2882:34;2874:42;2921:3;2873:51;2838:86;2948:6;2938:16;;:21;2934:86;;2978:34;2970:42;3017:3;2969:51;2934:86;3044:6;3034:16;;:21;3030:86;;3074:34;3066:42;3113:3;3065:51;3030:86;3140:7;3130:17;;:22;3126:86;;3171:33;3163:41;3209:3;3162:50;3126:86;3236:7;3226:17;;:22;3222:85;;3267:32;3259:40;3304:3;3258:49;3222:85;3331:7;3321:17;;:22;3317:83;;3362:30;3354:38;3397:3;3353:47;3317:83;3424:7;3414:17;;:22;3410:78;;3455:25;3447:33;3485:3;3446:42;3410:78;3510:1;3503:4;:8;;;3499:47;;;3541:5;-1:-1:-1;;3521:25:21;;;;;;3513:33;;3499:47;3905:7;3896:5;:17;:22;:30;;3925:1;3896:30;;;3921:1;3896:30;3879:48;;3889:2;3880:5;:11;;3879:48;3856:72;;1355:2580;;;;;:::o;9006:2198:32:-;9168:20;;;;-1:-1:-1;;;;;9329:14:32;;;9325:671;;9437:300;;;;;;;;;;;-1:-1:-1;;;;;9437:300:32;;;;;;-1:-1:-1;9437:300:32;;;;;;;;;;9698:15;9437:300;;;;9381:375;;-1:-1:-1;;;9381:375:32;;-1:-1:-1;;;;;9381:15:32;:33;;;;:375;;9437:300;9381:375;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;9381:375:32;;;;;;;;-1:-1:-1;;9381:375:32;;;;;;;;;;;;:::i;:::-;;;9360:570;;;;;;;9807:4;9789:22;;9360:570;9325:671;;;9980:4;9962:22;;9325:671;10012:15;10008:812;;;10111:273;;;;;;;;;;;10243:4;10111:273;;;;-1:-1:-1;;;;;10111:273:32;;;;;;;;;;10065:338;;-1:-1:-1;;;10065:338:32;;-1:-1:-1;;;;;10065:15:32;:23;;;;:338;;10111:273;10065:338;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;10065:338:32;;;;;;;;-1:-1:-1;;10065:338:32;;;;;;;;;;;;:::i;:::-;;;10044:645;;;;;10566:4;;-1:-1:-1;10488:2:32;;-1:-1:-1;10528:2:32;-1:-1:-1;10044:645:32;10767:30;;-1:-1:-1;;;10767:30:32;;-1:-1:-1;;;;;10767:15:32;:20;;;;:30;;10788:8;;10767:30;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10763:46;;10832:19;10854:15;:33;;;;;10873:14;10854:33;10832:55;;10971:225;11011:8;11034:10;11059;11084;11109:16;11140;11171:14;10971:25;:225::i;:::-;9006:2198;;;;;;;;;:::o;12698:1563::-;12862:15;12892:17;12924:21;12960;12996:12;13033:15;-1:-1:-1;;;;;13033:20:32;;13054:6;13033:28;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;13033:28:32;;;;;;;;-1:-1:-1;;13033:28:32;;;;;;;;;;;;:::i;:::-;;;13029:837;;;;;13233:8;13223:18;;13268:10;13256:22;;13309:8;13293:24;;13348:8;13332:24;;13389:1;13377:9;-1:-1:-1;;;;;13377:13:32;;13373:388;;;13429:180;;;;;;;;;;;-1:-1:-1;;;;;13429:180:32;;;;;;;;;;;;;;;;;;;;;;;;;;;13586:4;13429:180;;;;;;;13411:198;;;;;;-1:-1:-1;;;;;13411:198:32;;;;;;-1:-1:-1;;;;13411:198:32;-1:-1:-1;;;13411:198:32;;;;;;;;;;;;-1:-1:-1;;;;13411:198:32;-1:-1:-1;;;13411:198:32;;;;;;;;;;-1:-1:-1;;;;13411:198:32;;;;;13586:4;-1:-1:-1;13373:388:32;;;13668:12;;13664:97;;13705:29;;-1:-1:-1;;;13705:29:32;;-1:-1:-1;;;;;13705:15:32;:20;;;;:29;;13726:7;;13705:29;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;13701:45;;13062:710;;;;13029:837;13949:206;13987:7;14009:9;14033;14057;14081:13;14109;14137:7;13949:23;:206::i;:::-;14173:7;14168:86;;14215:27;;;;;;;;-1:-1:-1;14215:27:32;;;;;;;;;;;;;;;;;;;;;;;;;;;14197:45;;;;-1:-1:-1;;;;;;14197:45:32;;;14168:86;12698:1563;;;;;;;;:::o;7826:468::-;8130:7;8074:212;8152:9;8176;8200;8224:7;8246;8268;8074:212;;;;;;;;;;;:::i;:::-;;;;;;;;7826:468;;;;;;;:::o;11294:464::-;11594:7;11540:210;11616:9;11640;11664;11688:7;11710;11732;11540:210;;;;;;;;;;;:::i;14:165:35:-;94:13;;147:6;136:18;;126:29;;116:2;;169:1;166;159:12;184:259;;296:2;284:9;275:7;271:23;267:32;264:2;;;317:6;309;302:22;264:2;361:9;348:23;380:33;407:5;380:33;:::i;448:263::-;;571:2;559:9;550:7;546:23;542:32;539:2;;;592:6;584;577:22;539:2;629:9;623:16;648:33;675:5;648:33;:::i;716:1034::-;;;;;;;;931:3;919:9;910:7;906:23;902:33;899:2;;;953:6;945;938:22;899:2;990:9;984:16;1009:33;1036:5;1009:33;:::i;:::-;1061:5;1051:15;;;1111:2;1100:9;1096:18;1090:25;1160:7;1157:1;1146:22;1137:7;1134:35;1124:2;;1188:6;1180;1173:22;1124:2;1216:7;-1:-1:-1;1242:50:35;1288:2;1273:18;;1242:50;:::i;:::-;1232:60;;1311:50;1357:2;1346:9;1342:18;1311:50;:::i;:::-;1301:60;;1380:51;1426:3;1415:9;1411:19;1380:51;:::i;:::-;1370:61;;1476:3;1465:9;1461:19;1455:26;1525:4;1516:7;1512:18;1503:7;1500:31;1490:2;;1550:6;1542;1535:22;1490:2;1630:3;1615:19;;1609:26;1578:7;;-1:-1:-1;1673:15:35;;1666:23;1654:36;;1644:2;;1709:6;1701;1694:22;1644:2;1737:7;1727:17;;;889:861;;;;;;;;;;:::o;1755:190::-;;1867:2;1855:9;1846:7;1842:23;1838:32;1835:2;;;1888:6;1880;1873:22;1835:2;-1:-1:-1;1916:23:35;;1825:120;-1:-1:-1;1825:120:35:o;1950:194::-;;2073:2;2061:9;2052:7;2048:23;2044:32;2041:2;;;2094:6;2086;2079:22;2041:2;-1:-1:-1;2122:16:35;;2031:113;-1:-1:-1;2031:113:35:o;2149:509::-;;;;;2323:3;2311:9;2302:7;2298:23;2294:33;2291:2;;;2345:6;2337;2330:22;2291:2;2379:9;2373:16;2363:26;;2432:2;2421:9;2417:18;2411:25;-1:-1:-1;;;;;2469:5:35;2465:46;2458:5;2455:57;2445:2;;2531:6;2523;2516:22;2445:2;2604;2589:18;;2583:25;2648:2;2633:18;;;2627:25;2281:377;;2559:5;;-1:-1:-1;2281:377:35;-1:-1:-1;;;2281:377:35:o;2663:255::-;;;2803:2;2791:9;2782:7;2778:23;2774:32;2771:2;;;2824:6;2816;2809:22;2771:2;-1:-1:-1;;2852:16:35;;2908:2;2893:18;;;2887:25;2852:16;;2887:25;;-1:-1:-1;2761:157:35:o;2923:777::-;;;;;3088:2;3076:9;3067:7;3063:23;3059:32;3056:2;;;3109:6;3101;3094:22;3056:2;3150:9;3137:23;3127:33;;3207:2;3196:9;3192:18;3179:32;3169:42;;3262:2;3251:9;3247:18;3234:32;3285:18;3326:2;3318:6;3315:14;3312:2;;;3347:6;3339;3332:22;3312:2;3390:6;3379:9;3375:22;3365:32;;3435:7;3428:4;3424:2;3420:13;3416:27;3406:2;;3462:6;3454;3447:22;3406:2;3507;3494:16;3533:2;3525:6;3522:14;3519:2;;;3554:6;3546;3539:22;3519:2;3604:7;3599:2;3590:6;3586:2;3582:15;3578:24;3575:37;3572:2;;;3630:6;3622;3615:22;3572:2;3046:654;;;;-1:-1:-1;;3666:2:35;3658:11;;-1:-1:-1;;;3046:654:35:o;3705:106::-;-1:-1:-1;;;;;3773:31:35;3761:44;;3751:60::o;3816:93::-;3893:1;3882:20;3870:33;;3860:49::o;3914:94::-;3992:8;3981:20;3969:33;;3959:49::o;4013:203::-;-1:-1:-1;;;;;4177:32:35;;;;4159:51;;4147:2;4132:18;;4114:102::o;4221:388::-;-1:-1:-1;;;;;4477:15:35;;;4459:34;;4529:15;;;;4524:2;4509:18;;4502:43;4593:8;4581:21;;;4576:2;4561:18;;4554:49;4409:2;4394:18;;4376:233::o;5092:188::-;5263:1;5252:21;;;;5234:40;;5222:2;5207:18;;5189:91::o;5285:341::-;5487:2;5469:21;;;5526:2;5506:18;;;5499:30;-1:-1:-1;;;5560:2:35;5545:18;;5538:47;5617:2;5602:18;;5459:167::o;5631:338::-;5833:2;5815:21;;;5872:2;5852:18;;;5845:30;-1:-1:-1;;;5906:2:35;5891:18;;5884:44;5960:2;5945:18;;5805:164::o;5974:345::-;6176:2;6158:21;;;6215:2;6195:18;;;6188:30;-1:-1:-1;;;6249:2:35;6234:18;;6227:51;6310:2;6295:18;;6148:171::o;6324:347::-;6526:2;6508:21;;;6565:2;6545:18;;;6538:30;6604:25;6599:2;6584:18;;6577:53;6662:2;6647:18;;6498:173::o;6676:342::-;6878:2;6860:21;;;6917:2;6897:18;;;6890:30;-1:-1:-1;;;6951:2:35;6936:18;;6929:48;7009:2;6994:18;;6850:168::o;7023:837::-;7379:3;7361:22;;;7420:1;7399:19;;;7392:30;-1:-1:-1;;;7453:3:35;7438:19;;7431:37;7553:1;7542:21;;;7535:4;7520:20;;7513:51;7600:21;;;;7595:2;7580:18;;7573:49;-1:-1:-1;;;;;7658:47:35;;;;7653:2;7638:18;;7631:75;-1:-1:-1;7722:19:35;;7715:35;-1:-1:-1;7766:19:35;;7759:35;7838:14;;7831:22;-1:-1:-1;7810:19:35;;7803:51;7500:3;7485:19;;7351:509::o;7865:342::-;8067:2;8049:21;;;8106:2;8086:18;;;8079:30;-1:-1:-1;;;8140:2:35;8125:18;;8118:48;8198:2;8183:18;;8039:168::o;8212:344::-;8414:2;8396:21;;;8453:2;8433:18;;;8426:30;-1:-1:-1;;;8487:2:35;8472:18;;8465:50;8547:2;8532:18;;8386:170::o;8561:337::-;8763:2;8745:21;;;8802:2;8782:18;;;8775:30;-1:-1:-1;;;8836:2:35;8821:18;;8814:43;8889:2;8874:18;;8735:163::o;8903:353::-;9105:2;9087:21;;;9144:2;9124:18;;;9117:30;9183:31;9178:2;9163:18;;9156:59;9247:2;9232:18;;9077:179::o;9261:835::-;9617:3;9599:22;;;9658:1;9637:19;;;9630:30;-1:-1:-1;;;9691:3:35;9676:19;;9669:35;9789:1;9778:21;;;9771:4;9756:20;;9749:51;9836:21;;;;9831:2;9816:18;;9809:49;-1:-1:-1;;;;;9894:47:35;;;;9889:2;9874:18;;9867:75;-1:-1:-1;9958:19:35;;9951:35;-1:-1:-1;10002:19:35;;9995:35;10074:14;;10067:22;-1:-1:-1;10046:19:35;;10039:51;9736:3;9721:19;;9589:507::o;10101:574::-;10328:13;;10310:32;;10402:4;10390:17;;;10384:24;-1:-1:-1;;;;;10380:50:35;10358:20;;;10351:80;10478:4;10466:17;;;10460:24;-1:-1:-1;;;;;10575:21:35;;;10553:20;;;10546:51;;;;10657:4;10645:17;;;10639:24;10635:33;10613:20;;;10606:63;;;;10297:3;10282:19;;10264:411::o;10680:560::-;;10896:3;10885:9;10881:19;10873:27;;10933:6;10927:13;10916:9;10909:32;-1:-1:-1;;;;;11001:4:35;10993:6;10989:17;10983:24;10979:65;10972:4;10961:9;10957:20;10950:95;11101:4;11093:6;11089:17;11083:24;11076:4;11065:9;11061:20;11054:54;11164:4;11156:6;11152:17;11146:24;11139:4;11128:9;11124:20;11117:54;11227:4;11219:6;11215:17;11209:24;11202:4;11191:9;11187:20;11180:54;10863:377;;;;:::o;11245:1234::-;;11435:3;11424:9;11420:19;11412:27;;11448:46;11484:9;11475:6;11469:13;11448:46;:::i;:::-;11541:4;11533:6;11529:17;11523:24;11556:56;11606:4;11595:9;11591:20;11577:12;11556:56;:::i;:::-;;11661:4;11653:6;11649:17;11643:24;11676:57;11727:4;11716:9;11712:20;11696:14;11676:57;:::i;:::-;;11782:4;11774:6;11770:17;11764:24;11797:56;11847:4;11836:9;11832:20;11816:14;11797:56;:::i;:::-;;11902:4;11894:6;11890:17;11884:24;11917:56;11967:4;11956:9;11952:20;11936:14;11917:56;:::i;:::-;;12029:4;12021:6;12017:17;12011:24;12004:4;11993:9;11989:20;11982:54;12092:4;12084:6;12080:17;12074:24;12067:4;12056:9;12052:20;12045:54;12155:4;12147:6;12143:17;12137:24;12130:4;12119:9;12115:20;12108:54;12181:6;12241:2;12233:6;12229:15;12223:22;12218:2;12207:9;12203:18;12196:50;;12265:6;12320:2;12312:6;12308:15;12302:22;12333:56;12385:2;12374:9;12370:18;12354:14;12333:56;:::i;:::-;-1:-1:-1;;12408:6:35;12456:15;;;12450:22;12430:18;;;;12423:50;11402:1077;:::o;12484:190::-;12658:8;12646:21;;;;12628:40;;12616:2;12601:18;;12583:91::o;12679:177::-;12825:25;;;12813:2;12798:18;;12780:76::o;12861:536::-;13106:25;;;-1:-1:-1;;;;;13167:47:35;;;;13162:2;13147:18;;13140:75;13262:1;13251:21;;;13246:2;13231:18;;13224:49;13309:21;;13304:2;13289:18;;13282:49;13375:14;13368:22;13362:3;13347:19;;13340:51;13093:3;13078:19;;13060:337::o;13402:650::-;13699:25;;;13755:2;13740:18;;13733:34;;;;13798:2;13783:18;;13776:34;;;;13857:1;13846:21;;;13841:2;13826:18;;13819:49;13905:21;;13899:3;13884:19;;13877:50;13964:21;13958:3;13943:19;;13936:50;14030:14;14023:22;14017:3;14002:19;;13995:51;13686:3;13671:19;;13653:399::o;14057:184::-;14229:4;14217:17;;;;14199:36;;14187:2;14172:18;;14154:87::o;14246:133::-;-1:-1:-1;;;;;14323:31:35;;14313:42;;14303:2;;14369:1;14366;14359:12;14303:2;14293:86;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"2412400","executionCost":"infinite","totalCost":"infinite"},"external":{"WETH9()":"infinite","currentPosition()":"2114","factory()":"infinite","fee()":"infinite","owner()":"1159","positionManager()":"infinite","rangeWidthMultiplier()":"1070","renounceOwnership()":"24300","tickSpacing()":"infinite","token0()":"infinite","token0Decimals()":"infinite","token1()":"infinite","token1Decimals()":"infinite","transferOwnership(address)":"infinite","uniswapV3MintCallback(uint256,uint256,bytes)":"infinite","updatePredictionAndAdjust(uint256)":"infinite"},"internal":{"_adjustLiquidity(int24,int24)":"infinite","_calculatePredictionData(uint256)":"infinite","_calculateTicks(int24)":"infinite","_emitLiquidityMintEvent(uint256,int24,int24,uint128,uint256,uint256,bool)":"infinite","_emitLiquidityRemoveEvent(uint256,int24,int24,uint128,uint256,uint256,bool)":"infinite","_emitPredictionMetrics(uint256,uint256,int24,int24,int24,bool)":"infinite","_executeMint(struct INonfungiblePositionManager.MintParams memory,int24,int24)":"infinite","_executeRemoval(uint256,uint128,int24,int24)":"infinite","_getCurrentSqrtPriceAndTick()":"infinite","_mintLiquidity(int24,int24,uint256,uint256)":"infinite","_priceToTick(uint256)":"infinite","_removeLiquidity()":"infinite","_sqrtPriceX96ToPrice(uint160)":"infinite","_updatePositionIfNeeded(int24,int24)":"infinite","floorToTickSpacing(int24,int24)":"infinite"}},"methodIdentifiers":{"WETH9()":"4aa4a4fc","currentPosition()":"d534d636","factory()":"c45a0155","fee()":"ddca3f43","owner()":"8da5cb5b","positionManager()":"791b98bc","rangeWidthMultiplier()":"01d31e7c","renounceOwnership()":"715018a6","tickSpacing()":"d0c93a7c","token0()":"0dfe1681","token0Decimals()":"b31ac6e2","token1()":"d21220a7","token1Decimals()":"0b77884d","transferOwnership(address)":"f2fde38b","uniswapV3MintCallback(uint256,uint256,bytes)":"d3487997","updatePredictionAndAdjust(uint256)":"41675b05"}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_positionManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"_fee\",\"type\":\"uint24\"},{\"internalType\":\"address\",\"name\":\"_weth9\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_initialOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"operationType\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"name\":\"LiquidityOperation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"actualPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"predictedPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"predictedTick\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"finalTickLower\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"finalTickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"adjusted\",\"type\":\"bool\"}],\"name\":\"PredictionAdjustmentMetrics\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"paramName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"StrategyParamUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WETH9\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentPosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contract IUniswapV3Factory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"positionManager\",\"outputs\":[{\"internalType\":\"contract INonfungiblePositionManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rangeWidthMultiplier\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tickSpacing\",\"outputs\":[{\"internalType\":\"int24\",\"name\":\"\",\"type\":\"int24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0Decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1Decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0Owed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Owed\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"uniswapV3MintCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"predictedPriceDecimal\",\"type\":\"uint256\"}],\"name\":\"updatePredictionAndAdjust\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"uniswapV3MintCallback(uint256,uint256,bytes)\":{\"details\":\"In the implementation you must pay the pool tokens owed for the minted liquidity. The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\",\"params\":{\"amount0Owed\":\"The amount of token0 due to the pool for the minted liquidity\",\"amount1Owed\":\"The amount of token1 due to the pool for the minted liquidity\",\"data\":\"Any data passed through by the caller via the IUniswapV3PoolActions#mint call\"}}},\"title\":\"PredictiveLiquidityManager\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"uniswapV3MintCallback(uint256,uint256,bytes)\":{\"notice\":\"Called to `msg.sender` after minting liquidity to a position from IUniswapV3Pool#mint.\"}},\"notice\":\"The main liquidity management contract that adjusts positions based on price predictions\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PredictiveLiquidityManager.sol\":\"PredictiveLiquidityManager\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xf70bc25d981e4ec9673a995ad2995d5d493ea188d3d8f388bba9c227ce09fb82\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x2d99a0deb6648c34fbc66d6ac4a2d64798d7a5321b45624f6736fadc63da1962\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xe6bd1b1218338b6f9fe17776f48623b4ac3d8a40405f74a44bc23c00abe2ca13\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xccb917776f826ac6b68bd5a15a5f711e3967848a52ba11e6104d9a4f593314a7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x8bbbc2f5c10065ee272592ae0a7a6ceb23de2fbd81564ee0bb015ecf404d5f61\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title The interface for the Uniswap V3 Factory\\n/// @notice The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees\\ninterface IUniswapV3Factory {\\n    /// @notice Emitted when the owner of the factory is changed\\n    /// @param oldOwner The owner before the owner was changed\\n    /// @param newOwner The owner after the owner was changed\\n    event OwnerChanged(address indexed oldOwner, address indexed newOwner);\\n\\n    /// @notice Emitted when a pool is created\\n    /// @param token0 The first token of the pool by address sort order\\n    /// @param token1 The second token of the pool by address sort order\\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n    /// @param tickSpacing The minimum number of ticks between initialized ticks\\n    /// @param pool The address of the created pool\\n    event PoolCreated(\\n        address indexed token0,\\n        address indexed token1,\\n        uint24 indexed fee,\\n        int24 tickSpacing,\\n        address pool\\n    );\\n\\n    /// @notice Emitted when a new fee amount is enabled for pool creation via the factory\\n    /// @param fee The enabled fee, denominated in hundredths of a bip\\n    /// @param tickSpacing The minimum number of ticks between initialized ticks for pools created with the given fee\\n    event FeeAmountEnabled(uint24 indexed fee, int24 indexed tickSpacing);\\n\\n    /// @notice Returns the current owner of the factory\\n    /// @dev Can be changed by the current owner via setOwner\\n    /// @return The address of the factory owner\\n    function owner() external view returns (address);\\n\\n    /// @notice Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled\\n    /// @dev A fee amount can never be removed, so this value should be hard coded or cached in the calling context\\n    /// @param fee The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\\n    /// @return The tick spacing\\n    function feeAmountTickSpacing(uint24 fee) external view returns (int24);\\n\\n    /// @notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\\n    /// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\\n    /// @param tokenA The contract address of either token0 or token1\\n    /// @param tokenB The contract address of the other token\\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n    /// @return pool The pool address\\n    function getPool(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) external view returns (address pool);\\n\\n    /// @notice Creates a pool for the given two tokens and fee\\n    /// @param tokenA One of the two tokens in the desired pool\\n    /// @param tokenB The other of the two tokens in the desired pool\\n    /// @param fee The desired fee for the pool\\n    /// @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved\\n    /// from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments\\n    /// are invalid.\\n    /// @return pool The address of the newly created pool\\n    function createPool(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) external returns (address pool);\\n\\n    /// @notice Updates the owner of the factory\\n    /// @dev Must be called by the current owner\\n    /// @param _owner The new owner of the factory\\n    function setOwner(address _owner) external;\\n\\n    /// @notice Enables a fee amount with the given tickSpacing\\n    /// @dev Fee amounts may never be removed once enabled\\n    /// @param fee The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)\\n    /// @param tickSpacing The spacing between ticks to be enforced for all pools created with the given fee amount\\n    function enableFeeAmount(uint24 fee, int24 tickSpacing) external;\\n}\\n\",\"keccak256\":\"0xcc3d0c93fc9ac0febbe09f941b465b57f750bcf3b48432da0b97dc289cfdc489\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\nimport './pool/IUniswapV3PoolImmutables.sol';\\nimport './pool/IUniswapV3PoolState.sol';\\nimport './pool/IUniswapV3PoolDerivedState.sol';\\nimport './pool/IUniswapV3PoolActions.sol';\\nimport './pool/IUniswapV3PoolOwnerActions.sol';\\nimport './pool/IUniswapV3PoolEvents.sol';\\n\\n/// @title The interface for a Uniswap V3 Pool\\n/// @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\\n/// to the ERC20 specification\\n/// @dev The pool interface is broken up into many smaller pieces\\ninterface IUniswapV3Pool is\\n    IUniswapV3PoolImmutables,\\n    IUniswapV3PoolState,\\n    IUniswapV3PoolDerivedState,\\n    IUniswapV3PoolActions,\\n    IUniswapV3PoolOwnerActions,\\n    IUniswapV3PoolEvents\\n{\\n\\n}\\n\",\"keccak256\":\"0xfe6113d518466cd6652c85b111e01f33eb62157f49ae5ed7d5a3947a2044adb1\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3MintCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#mint\\n/// @notice Any contract that calls IUniswapV3PoolActions#mint must implement this interface\\ninterface IUniswapV3MintCallback {\\n    /// @notice Called to `msg.sender` after minting liquidity to a position from IUniswapV3Pool#mint.\\n    /// @dev In the implementation you must pay the pool tokens owed for the minted liquidity.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// @param amount0Owed The amount of token0 due to the pool for the minted liquidity\\n    /// @param amount1Owed The amount of token1 due to the pool for the minted liquidity\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#mint call\\n    function uniswapV3MintCallback(\\n        uint256 amount0Owed,\\n        uint256 amount1Owed,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x27a9725b8f831a92d16380860c3d348a0b926a7f01b34a54ea6eea78cbdbcd6a\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissionless pool actions\\n/// @notice Contains pool methods that can be called by anyone\\ninterface IUniswapV3PoolActions {\\n    /// @notice Sets the initial price for the pool\\n    /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\\n    /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96\\n    function initialize(uint160 sqrtPriceX96) external;\\n\\n    /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\\n    /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\\n    /// on tickLower, tickUpper, the amount of liquidity, and the current price.\\n    /// @param recipient The address for which the liquidity will be created\\n    /// @param tickLower The lower tick of the position in which to add liquidity\\n    /// @param tickUpper The upper tick of the position in which to add liquidity\\n    /// @param amount The amount of liquidity to mint\\n    /// @param data Any data that should be passed through to the callback\\n    /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    function mint(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount,\\n        bytes calldata data\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Collects tokens owed to a position\\n    /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\\n    /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\\n    /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\\n    /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\\n    /// @param recipient The address which should receive the fees collected\\n    /// @param tickLower The lower tick of the position for which to collect fees\\n    /// @param tickUpper The upper tick of the position for which to collect fees\\n    /// @param amount0Requested How much token0 should be withdrawn from the fees owed\\n    /// @param amount1Requested How much token1 should be withdrawn from the fees owed\\n    /// @return amount0 The amount of fees collected in token0\\n    /// @return amount1 The amount of fees collected in token1\\n    function collect(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n\\n    /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\\n    /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\\n    /// @dev Fees must be collected separately via a call to #collect\\n    /// @param tickLower The lower tick of the position for which to burn liquidity\\n    /// @param tickUpper The upper tick of the position for which to burn liquidity\\n    /// @param amount How much liquidity to burn\\n    /// @return amount0 The amount of token0 sent to the recipient\\n    /// @return amount1 The amount of token1 sent to the recipient\\n    function burn(\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Swap token0 for token1, or token1 for token0\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\\n    /// @param recipient The address to receive the output of the swap\\n    /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\\n    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\\n    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\\n    /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\\n    /// @param data Any data to be passed through to the callback\\n    /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\\n    /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\\n    function swap(\\n        address recipient,\\n        bool zeroForOne,\\n        int256 amountSpecified,\\n        uint160 sqrtPriceLimitX96,\\n        bytes calldata data\\n    ) external returns (int256 amount0, int256 amount1);\\n\\n    /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\\n    /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\\n    /// with 0 amount{0,1} and sending the donation amount(s) from the callback\\n    /// @param recipient The address which will receive the token0 and token1 amounts\\n    /// @param amount0 The amount of token0 to send\\n    /// @param amount1 The amount of token1 to send\\n    /// @param data Any data to be passed through to the callback\\n    function flash(\\n        address recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bytes calldata data\\n    ) external;\\n\\n    /// @notice Increase the maximum number of price and liquidity observations that this pool will store\\n    /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\\n    /// the input observationCardinalityNext.\\n    /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\\n}\\n\",\"keccak256\":\"0x9453dd0e7442188667d01d9b65de3f1e14e9511ff3e303179a15f6fc267f7634\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that is not stored\\n/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the\\n/// blockchain. The functions here may have variable gas costs.\\ninterface IUniswapV3PoolDerivedState {\\n    /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\\n    /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\\n    /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\\n    /// you must call it with secondsAgos = [3600, 0].\\n    /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\\n    /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\\n    /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\\n    /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\\n    /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\\n    /// timestamp\\n    function observe(uint32[] calldata secondsAgos)\\n        external\\n        view\\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\\n\\n    /// @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\\n    /// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\\n    /// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\\n    /// snapshot is taken and the second snapshot is taken.\\n    /// @param tickLower The lower tick of the range\\n    /// @param tickUpper The upper tick of the range\\n    /// @return tickCumulativeInside The snapshot of the tick accumulator for the range\\n    /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\\n    /// @return secondsInside The snapshot of seconds per liquidity for the range\\n    function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\\n        external\\n        view\\n        returns (\\n            int56 tickCumulativeInside,\\n            uint160 secondsPerLiquidityInsideX128,\\n            uint32 secondsInside\\n        );\\n}\\n\",\"keccak256\":\"0xe603ac5b17ecdee73ba2b27efdf386c257a19c14206e87eee77e2017b742d9e5\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Events emitted by a pool\\n/// @notice Contains all events emitted by the pool\\ninterface IUniswapV3PoolEvents {\\n    /// @notice Emitted exactly once by a pool when #initialize is first called on the pool\\n    /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\\n    /// @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\\n    /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\\n    event Initialize(uint160 sqrtPriceX96, int24 tick);\\n\\n    /// @notice Emitted when liquidity is minted for a given position\\n    /// @param sender The address that minted the liquidity\\n    /// @param owner The owner of the position and recipient of any minted liquidity\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount The amount of liquidity minted to the position range\\n    /// @param amount0 How much token0 was required for the minted liquidity\\n    /// @param amount1 How much token1 was required for the minted liquidity\\n    event Mint(\\n        address sender,\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted when fees are collected by the owner of a position\\n    /// @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\\n    /// @param owner The owner of the position for which fees are collected\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount0 The amount of token0 fees collected\\n    /// @param amount1 The amount of token1 fees collected\\n    event Collect(\\n        address indexed owner,\\n        address recipient,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount0,\\n        uint128 amount1\\n    );\\n\\n    /// @notice Emitted when a position's liquidity is removed\\n    /// @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\\n    /// @param owner The owner of the position for which liquidity is removed\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount The amount of liquidity to remove\\n    /// @param amount0 The amount of token0 withdrawn\\n    /// @param amount1 The amount of token1 withdrawn\\n    event Burn(\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted by the pool for any swaps between token0 and token1\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param recipient The address that received the output of the swap\\n    /// @param amount0 The delta of the token0 balance of the pool\\n    /// @param amount1 The delta of the token1 balance of the pool\\n    /// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\\n    /// @param liquidity The liquidity of the pool after the swap\\n    /// @param tick The log base 1.0001 of price of the pool after the swap\\n    event Swap(\\n        address indexed sender,\\n        address indexed recipient,\\n        int256 amount0,\\n        int256 amount1,\\n        uint160 sqrtPriceX96,\\n        uint128 liquidity,\\n        int24 tick\\n    );\\n\\n    /// @notice Emitted by the pool for any flashes of token0/token1\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param recipient The address that received the tokens from flash\\n    /// @param amount0 The amount of token0 that was flashed\\n    /// @param amount1 The amount of token1 that was flashed\\n    /// @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\\n    /// @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\\n    event Flash(\\n        address indexed sender,\\n        address indexed recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        uint256 paid0,\\n        uint256 paid1\\n    );\\n\\n    /// @notice Emitted by the pool for increases to the number of observations that can be stored\\n    /// @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\\n    /// just before a mint/swap/burn.\\n    /// @param observationCardinalityNextOld The previous value of the next observation cardinality\\n    /// @param observationCardinalityNextNew The updated value of the next observation cardinality\\n    event IncreaseObservationCardinalityNext(\\n        uint16 observationCardinalityNextOld,\\n        uint16 observationCardinalityNextNew\\n    );\\n\\n    /// @notice Emitted when the protocol fee is changed by the pool\\n    /// @param feeProtocol0Old The previous value of the token0 protocol fee\\n    /// @param feeProtocol1Old The previous value of the token1 protocol fee\\n    /// @param feeProtocol0New The updated value of the token0 protocol fee\\n    /// @param feeProtocol1New The updated value of the token1 protocol fee\\n    event SetFeeProtocol(uint8 feeProtocol0Old, uint8 feeProtocol1Old, uint8 feeProtocol0New, uint8 feeProtocol1New);\\n\\n    /// @notice Emitted when the collected protocol fees are withdrawn by the factory owner\\n    /// @param sender The address that collects the protocol fees\\n    /// @param recipient The address that receives the collected protocol fees\\n    /// @param amount0 The amount of token0 protocol fees that is withdrawn\\n    /// @param amount0 The amount of token1 protocol fees that is withdrawn\\n    event CollectProtocol(address indexed sender, address indexed recipient, uint128 amount0, uint128 amount1);\\n}\\n\",\"keccak256\":\"0x8071514d0fe5d17d6fbd31c191cdfb703031c24e0ece3621d88ab10e871375cd\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that never changes\\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\\ninterface IUniswapV3PoolImmutables {\\n    /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\\n    /// @return The contract address\\n    function factory() external view returns (address);\\n\\n    /// @notice The first of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token0() external view returns (address);\\n\\n    /// @notice The second of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token1() external view returns (address);\\n\\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\\n    /// @return The fee\\n    function fee() external view returns (uint24);\\n\\n    /// @notice The pool tick spacing\\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\\n    /// This value is an int24 to avoid casting even though it is always positive.\\n    /// @return The tick spacing\\n    function tickSpacing() external view returns (int24);\\n\\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\\n    /// @return The max amount of liquidity per tick\\n    function maxLiquidityPerTick() external view returns (uint128);\\n}\\n\",\"keccak256\":\"0xf6e5d2cd1139c4c276bdbc8e1d2b256e456c866a91f1b868da265c6d2685c3f7\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissioned pool actions\\n/// @notice Contains pool methods that may only be called by the factory owner\\ninterface IUniswapV3PoolOwnerActions {\\n    /// @notice Set the denominator of the protocol's % share of the fees\\n    /// @param feeProtocol0 new protocol fee for token0 of the pool\\n    /// @param feeProtocol1 new protocol fee for token1 of the pool\\n    function setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external;\\n\\n    /// @notice Collect the protocol fee accrued to the pool\\n    /// @param recipient The address to which collected protocol fees should be sent\\n    /// @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\\n    /// @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\\n    /// @return amount0 The protocol fee collected in token0\\n    /// @return amount1 The protocol fee collected in token1\\n    function collectProtocol(\\n        address recipient,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n}\\n\",\"keccak256\":\"0x759b78a2918af9e99e246dc3af084f654e48ef32bb4e4cb8a966aa3dcaece235\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that can change\\n/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\\n/// per transaction\\ninterface IUniswapV3PoolState {\\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\\n    /// when accessed externally.\\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\\n    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\\n    /// boundary.\\n    /// observationIndex The index of the last oracle observation that was written,\\n    /// observationCardinality The current maximum number of observations stored in the pool,\\n    /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\\n    /// feeProtocol The protocol fee for both tokens of the pool.\\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\\n    /// unlocked Whether the pool is currently locked to reentrancy\\n    function slot0()\\n        external\\n        view\\n        returns (\\n            uint160 sqrtPriceX96,\\n            int24 tick,\\n            uint16 observationIndex,\\n            uint16 observationCardinality,\\n            uint16 observationCardinalityNext,\\n            uint8 feeProtocol,\\n            bool unlocked\\n        );\\n\\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal0X128() external view returns (uint256);\\n\\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal1X128() external view returns (uint256);\\n\\n    /// @notice The amounts of token0 and token1 that are owed to the protocol\\n    /// @dev Protocol fees will never exceed uint128 max in either token\\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\\n\\n    /// @notice The currently in range liquidity available to the pool\\n    /// @dev This value has no relationship to the total liquidity across all ticks\\n    function liquidity() external view returns (uint128);\\n\\n    /// @notice Look up information about a specific tick in the pool\\n    /// @param tick The tick to look up\\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\\n    /// tick upper,\\n    /// liquidityNet how much liquidity changes when the pool price crosses the tick,\\n    /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\\n    /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\\n    /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\\n    /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\\n    /// secondsOutside the seconds spent on the other side of the tick from the current tick,\\n    /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\\n    /// a specific position.\\n    function ticks(int24 tick)\\n        external\\n        view\\n        returns (\\n            uint128 liquidityGross,\\n            int128 liquidityNet,\\n            uint256 feeGrowthOutside0X128,\\n            uint256 feeGrowthOutside1X128,\\n            int56 tickCumulativeOutside,\\n            uint160 secondsPerLiquidityOutsideX128,\\n            uint32 secondsOutside,\\n            bool initialized\\n        );\\n\\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\\n\\n    /// @notice Returns the information about a position by the position's key\\n    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\\n    /// @return _liquidity The amount of liquidity in the position,\\n    /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\\n    /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\\n    /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\\n    /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\\n    function positions(bytes32 key)\\n        external\\n        view\\n        returns (\\n            uint128 _liquidity,\\n            uint256 feeGrowthInside0LastX128,\\n            uint256 feeGrowthInside1LastX128,\\n            uint128 tokensOwed0,\\n            uint128 tokensOwed1\\n        );\\n\\n    /// @notice Returns data about a specific observation index\\n    /// @param index The element of the observations array to fetch\\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\\n    /// ago, rather than at a specific index in the array.\\n    /// @return blockTimestamp The timestamp of the observation,\\n    /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\\n    /// Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\\n    /// Returns initialized whether the observation has been initialized and the values are safe to use\\n    function observations(uint256 index)\\n        external\\n        view\\n        returns (\\n            uint32 blockTimestamp,\\n            int56 tickCumulative,\\n            uint160 secondsPerLiquidityCumulativeX128,\\n            bool initialized\\n        );\\n}\\n\",\"keccak256\":\"0x852dc1f5df7dcf7f11e7bb3eed79f0cea72ad4b25f6a9d2c35aafb48925fd49f\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/libraries/TickMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Math library for computing sqrt prices from ticks and vice versa\\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\\n/// prices between 2**-128 and 2**128\\nlibrary TickMath {\\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\\n    int24 internal constant MIN_TICK = -887272;\\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\\n    int24 internal constant MAX_TICK = -MIN_TICK;\\n\\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\\n\\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\\n    /// @dev Throws if |tick| > max tick\\n    /// @param tick The input tick for the above formula\\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\\n    /// at the given tick\\n    function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\\n        uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\\n        require(absTick <= uint256(MAX_TICK), 'T');\\n\\n        uint256 ratio = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\\n        if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\\n        if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\\n        if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\\n        if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\\n        if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\\n        if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\\n        if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\\n        if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\\n        if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\\n        if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\\n        if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\\n        if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\\n        if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\\n        if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\\n        if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\\n        if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\\n        if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\\n        if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\\n        if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\\n\\n        if (tick > 0) ratio = type(uint256).max / ratio;\\n\\n        // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\\n        // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\\n        // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\\n        sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\\n    }\\n\\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\\n    /// ever return.\\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\\n        // second inequality must be < because the price can never reach the price at the max tick\\n        require(sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO, 'R');\\n        uint256 ratio = uint256(sqrtPriceX96) << 32;\\n\\n        uint256 r = ratio;\\n        uint256 msb = 0;\\n\\n        assembly {\\n            let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(5, gt(r, 0xFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(4, gt(r, 0xFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(3, gt(r, 0xFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(2, gt(r, 0xF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(1, gt(r, 0x3))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := gt(r, 0x1)\\n            msb := or(msb, f)\\n        }\\n\\n        if (msb >= 128) r = ratio >> (msb - 127);\\n        else r = ratio << (127 - msb);\\n\\n        int256 log_2 = (int256(msb) - 128) << 64;\\n\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(63, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(62, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(61, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(60, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(59, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(58, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(57, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(56, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(55, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(54, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(53, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(52, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(51, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(50, f))\\n        }\\n\\n        int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\\n\\n        int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\\n        int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\\n\\n        tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\\n    }\\n}\\n\",\"keccak256\":\"0x1f864a2bf61ba05f3173eaf2e3f94c5e1da4bec0554757527b6d1ef1fe439e4e\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/IERC721Permit.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\n\\n/// @title ERC721 with permit\\n/// @notice Extension to ERC721 that includes a permit function for signature based approvals\\ninterface IERC721Permit is IERC721 {\\n    /// @notice The permit typehash used in the permit signature\\n    /// @return The typehash for the permit\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    /// @notice The domain separator used in the permit signature\\n    /// @return The domain seperator used in encoding of permit signature\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    /// @notice Approve of a specific token ID for spending by spender via signature\\n    /// @param spender The account that is being approved\\n    /// @param tokenId The ID of the token that is being approved for spending\\n    /// @param deadline The deadline timestamp by which the call must be mined for the approve to work\\n    /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\\n    /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\\n    /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\\n    function permit(\\n        address spender,\\n        uint256 tokenId,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x9e3c2a4ee65ddf95b2dfcb0815784eea3a295707e6f8b83e4c4f0f8fe2e3a1d4\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/INonfungiblePositionManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol';\\nimport '@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol';\\n\\nimport './IPoolInitializer.sol';\\nimport './IERC721Permit.sol';\\nimport './IPeripheryPayments.sol';\\nimport './IPeripheryImmutableState.sol';\\nimport '../libraries/PoolAddress.sol';\\n\\n/// @title Non-fungible token for positions\\n/// @notice Wraps Uniswap V3 positions in a non-fungible token interface which allows for them to be transferred\\n/// and authorized.\\ninterface INonfungiblePositionManager is\\n    IPoolInitializer,\\n    IPeripheryPayments,\\n    IPeripheryImmutableState,\\n    IERC721Metadata,\\n    IERC721Enumerable,\\n    IERC721Permit\\n{\\n    /// @notice Emitted when liquidity is increased for a position NFT\\n    /// @dev Also emitted when a token is minted\\n    /// @param tokenId The ID of the token for which liquidity was increased\\n    /// @param liquidity The amount by which liquidity for the NFT position was increased\\n    /// @param amount0 The amount of token0 that was paid for the increase in liquidity\\n    /// @param amount1 The amount of token1 that was paid for the increase in liquidity\\n    event IncreaseLiquidity(uint256 indexed tokenId, uint128 liquidity, uint256 amount0, uint256 amount1);\\n    /// @notice Emitted when liquidity is decreased for a position NFT\\n    /// @param tokenId The ID of the token for which liquidity was decreased\\n    /// @param liquidity The amount by which liquidity for the NFT position was decreased\\n    /// @param amount0 The amount of token0 that was accounted for the decrease in liquidity\\n    /// @param amount1 The amount of token1 that was accounted for the decrease in liquidity\\n    event DecreaseLiquidity(uint256 indexed tokenId, uint128 liquidity, uint256 amount0, uint256 amount1);\\n    /// @notice Emitted when tokens are collected for a position NFT\\n    /// @dev The amounts reported may not be exactly equivalent to the amounts transferred, due to rounding behavior\\n    /// @param tokenId The ID of the token for which underlying tokens were collected\\n    /// @param recipient The address of the account that received the collected tokens\\n    /// @param amount0 The amount of token0 owed to the position that was collected\\n    /// @param amount1 The amount of token1 owed to the position that was collected\\n    event Collect(uint256 indexed tokenId, address recipient, uint256 amount0, uint256 amount1);\\n\\n    /// @notice Returns the position information associated with a given token ID.\\n    /// @dev Throws if the token ID is not valid.\\n    /// @param tokenId The ID of the token that represents the position\\n    /// @return nonce The nonce for permits\\n    /// @return operator The address that is approved for spending\\n    /// @return token0 The address of the token0 for a specific pool\\n    /// @return token1 The address of the token1 for a specific pool\\n    /// @return fee The fee associated with the pool\\n    /// @return tickLower The lower end of the tick range for the position\\n    /// @return tickUpper The higher end of the tick range for the position\\n    /// @return liquidity The liquidity of the position\\n    /// @return feeGrowthInside0LastX128 The fee growth of token0 as of the last action on the individual position\\n    /// @return feeGrowthInside1LastX128 The fee growth of token1 as of the last action on the individual position\\n    /// @return tokensOwed0 The uncollected amount of token0 owed to the position as of the last computation\\n    /// @return tokensOwed1 The uncollected amount of token1 owed to the position as of the last computation\\n    function positions(uint256 tokenId)\\n        external\\n        view\\n        returns (\\n            uint96 nonce,\\n            address operator,\\n            address token0,\\n            address token1,\\n            uint24 fee,\\n            int24 tickLower,\\n            int24 tickUpper,\\n            uint128 liquidity,\\n            uint256 feeGrowthInside0LastX128,\\n            uint256 feeGrowthInside1LastX128,\\n            uint128 tokensOwed0,\\n            uint128 tokensOwed1\\n        );\\n\\n    struct MintParams {\\n        address token0;\\n        address token1;\\n        uint24 fee;\\n        int24 tickLower;\\n        int24 tickUpper;\\n        uint256 amount0Desired;\\n        uint256 amount1Desired;\\n        uint256 amount0Min;\\n        uint256 amount1Min;\\n        address recipient;\\n        uint256 deadline;\\n    }\\n\\n    /// @notice Creates a new position wrapped in a NFT\\n    /// @dev Call this when the pool does exist and is initialized. Note that if the pool is created but not initialized\\n    /// a method does not exist, i.e. the pool is assumed to be initialized.\\n    /// @param params The params necessary to mint a position, encoded as `MintParams` in calldata\\n    /// @return tokenId The ID of the token that represents the minted position\\n    /// @return liquidity The amount of liquidity for this position\\n    /// @return amount0 The amount of token0\\n    /// @return amount1 The amount of token1\\n    function mint(MintParams calldata params)\\n        external\\n        payable\\n        returns (\\n            uint256 tokenId,\\n            uint128 liquidity,\\n            uint256 amount0,\\n            uint256 amount1\\n        );\\n\\n    struct IncreaseLiquidityParams {\\n        uint256 tokenId;\\n        uint256 amount0Desired;\\n        uint256 amount1Desired;\\n        uint256 amount0Min;\\n        uint256 amount1Min;\\n        uint256 deadline;\\n    }\\n\\n    /// @notice Increases the amount of liquidity in a position, with tokens paid by the `msg.sender`\\n    /// @param params tokenId The ID of the token for which liquidity is being increased,\\n    /// amount0Desired The desired amount of token0 to be spent,\\n    /// amount1Desired The desired amount of token1 to be spent,\\n    /// amount0Min The minimum amount of token0 to spend, which serves as a slippage check,\\n    /// amount1Min The minimum amount of token1 to spend, which serves as a slippage check,\\n    /// deadline The time by which the transaction must be included to effect the change\\n    /// @return liquidity The new liquidity amount as a result of the increase\\n    /// @return amount0 The amount of token0 to acheive resulting liquidity\\n    /// @return amount1 The amount of token1 to acheive resulting liquidity\\n    function increaseLiquidity(IncreaseLiquidityParams calldata params)\\n        external\\n        payable\\n        returns (\\n            uint128 liquidity,\\n            uint256 amount0,\\n            uint256 amount1\\n        );\\n\\n    struct DecreaseLiquidityParams {\\n        uint256 tokenId;\\n        uint128 liquidity;\\n        uint256 amount0Min;\\n        uint256 amount1Min;\\n        uint256 deadline;\\n    }\\n\\n    /// @notice Decreases the amount of liquidity in a position and accounts it to the position\\n    /// @param params tokenId The ID of the token for which liquidity is being decreased,\\n    /// amount The amount by which liquidity will be decreased,\\n    /// amount0Min The minimum amount of token0 that should be accounted for the burned liquidity,\\n    /// amount1Min The minimum amount of token1 that should be accounted for the burned liquidity,\\n    /// deadline The time by which the transaction must be included to effect the change\\n    /// @return amount0 The amount of token0 accounted to the position's tokens owed\\n    /// @return amount1 The amount of token1 accounted to the position's tokens owed\\n    function decreaseLiquidity(DecreaseLiquidityParams calldata params)\\n        external\\n        payable\\n        returns (uint256 amount0, uint256 amount1);\\n\\n    struct CollectParams {\\n        uint256 tokenId;\\n        address recipient;\\n        uint128 amount0Max;\\n        uint128 amount1Max;\\n    }\\n\\n    /// @notice Collects up to a maximum amount of fees owed to a specific position to the recipient\\n    /// @param params tokenId The ID of the NFT for which tokens are being collected,\\n    /// recipient The account that should receive the tokens,\\n    /// amount0Max The maximum amount of token0 to collect,\\n    /// amount1Max The maximum amount of token1 to collect\\n    /// @return amount0 The amount of fees collected in token0\\n    /// @return amount1 The amount of fees collected in token1\\n    function collect(CollectParams calldata params) external payable returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Burns a token ID, which deletes it from the NFT contract. The token must have 0 liquidity and all tokens\\n    /// must be collected first.\\n    /// @param tokenId The ID of the token that is being burned\\n    function burn(uint256 tokenId) external payable;\\n}\\n\",\"keccak256\":\"0xe1dadc73e60bf05d0b4e0f05bd2847c5783e833cc10352c14763360b13495ee1\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/IPeripheryImmutableState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Immutable state\\n/// @notice Functions that return immutable state of the router\\ninterface IPeripheryImmutableState {\\n    /// @return Returns the address of the Uniswap V3 factory\\n    function factory() external view returns (address);\\n\\n    /// @return Returns the address of WETH9\\n    function WETH9() external view returns (address);\\n}\\n\",\"keccak256\":\"0x7affcfeb5127c0925a71d6a65345e117c33537523aeca7bc98085ead8452519d\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/IPeripheryPayments.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\n\\n/// @title Periphery Payments\\n/// @notice Functions to ease deposits and withdrawals of ETH\\ninterface IPeripheryPayments {\\n    /// @notice Unwraps the contract's WETH9 balance and sends it to recipient as ETH.\\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.\\n    /// @param amountMinimum The minimum amount of WETH9 to unwrap\\n    /// @param recipient The address receiving ETH\\n    function unwrapWETH9(uint256 amountMinimum, address recipient) external payable;\\n\\n    /// @notice Refunds any ETH balance held by this contract to the `msg.sender`\\n    /// @dev Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps\\n    /// that use ether for the input amount\\n    function refundETH() external payable;\\n\\n    /// @notice Transfers the full amount of a token held by this contract to recipient\\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing the token from users\\n    /// @param token The contract address of the token which will be transferred to `recipient`\\n    /// @param amountMinimum The minimum amount of token required for a transfer\\n    /// @param recipient The destination address of the token\\n    function sweepToken(\\n        address token,\\n        uint256 amountMinimum,\\n        address recipient\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0xb547e10f1e69bed03621a62b73a503e260643066c6b4054867a4d1fef47eb274\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/IPoolInitializer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\n/// @title Creates and initializes V3 Pools\\n/// @notice Provides a method for creating and initializing a pool, if necessary, for bundling with other methods that\\n/// require the pool to exist.\\ninterface IPoolInitializer {\\n    /// @notice Creates a new pool if it does not exist, then initializes if not initialized\\n    /// @dev This method can be bundled with others via IMulticall for the first action (e.g. mint) performed against a pool\\n    /// @param token0 The contract address of token0 of the pool\\n    /// @param token1 The contract address of token1 of the pool\\n    /// @param fee The fee amount of the v3 pool for the specified token pair\\n    /// @param sqrtPriceX96 The initial square root price of the pool as a Q64.96 value\\n    /// @return pool Returns the pool address based on the pair of tokens and fee, will return the newly created pool address if necessary\\n    function createAndInitializePoolIfNecessary(\\n        address token0,\\n        address token1,\\n        uint24 fee,\\n        uint160 sqrtPriceX96\\n    ) external payable returns (address pool);\\n}\\n\",\"keccak256\":\"0x9d7695e8d94c22cc5fcced602017aabb988de89981ea7bee29ea629d5328a862\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/external/IWETH9.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity =0.7.6;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\n/// @title Interface for WETH9\\ninterface IWETH9 is IERC20 {\\n    /// @notice Deposit ether to get wrapped ether\\n    function deposit() external payable;\\n\\n    /// @notice Withdraw wrapped ether to get ether\\n    function withdraw(uint256) external;\\n}\\n\",\"keccak256\":\"0x6d7a8eb484e84bceb1d84c7be431c5b8120d519b0c2a7b4c7064c814635dea4c\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/libraries/PoolAddress.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Provides functions for deriving a pool address from the factory, tokens, and the fee\\nlibrary PoolAddress {\\n    bytes32 internal constant POOL_INIT_CODE_HASH = 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54;\\n\\n    /// @notice The identifying key of the pool\\n    struct PoolKey {\\n        address token0;\\n        address token1;\\n        uint24 fee;\\n    }\\n\\n    /// @notice Returns PoolKey: the ordered tokens with the matched fee levels\\n    /// @param tokenA The first token of a pool, unsorted\\n    /// @param tokenB The second token of a pool, unsorted\\n    /// @param fee The fee level of the pool\\n    /// @return Poolkey The pool details with ordered token0 and token1 assignments\\n    function getPoolKey(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) internal pure returns (PoolKey memory) {\\n        if (tokenA > tokenB) (tokenA, tokenB) = (tokenB, tokenA);\\n        return PoolKey({token0: tokenA, token1: tokenB, fee: fee});\\n    }\\n\\n    /// @notice Deterministically computes the pool address given the factory and PoolKey\\n    /// @param factory The Uniswap V3 factory contract address\\n    /// @param key The PoolKey\\n    /// @return pool The contract address of the V3 pool\\n    function computeAddress(address factory, PoolKey memory key) internal pure returns (address pool) {\\n        require(key.token0 < key.token1);\\n        pool = address(\\n            uint256(\\n                keccak256(\\n                    abi.encodePacked(\\n                        hex'ff',\\n                        factory,\\n                        keccak256(abi.encode(key.token0, key.token1, key.fee)),\\n                        POOL_INIT_CODE_HASH\\n                    )\\n                )\\n            )\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x5edd84eb8ba7c12fd8cb6cffe52e1e9f3f6464514ee5f539c2283826209035a2\",\"license\":\"GPL-2.0-or-later\"},\"contracts/PredictiveLiquidityManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.7.6;\\r\\npragma abicoder v2; // To support structs in parameters\\r\\n\\r\\n// OpenZeppelin ~3.4.0 Imports\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\r\\n\\r\\n// Local Math Library\\r\\nimport \\\"./libraries/SqrtMath.sol\\\";\\r\\n\\r\\n// Uniswap V3 Core\\r\\nimport \\\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\\\";\\r\\nimport \\\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol\\\";\\r\\nimport \\\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3MintCallback.sol\\\";\\r\\nimport \\\"@uniswap/v3-core/contracts/libraries/TickMath.sol\\\";\\r\\n\\r\\n// Uniswap V3 Periphery\\r\\nimport \\\"@uniswap/v3-periphery/contracts/interfaces/INonfungiblePositionManager.sol\\\";\\r\\nimport \\\"@uniswap/v3-periphery/contracts/interfaces/external/IWETH9.sol\\\";\\r\\n\\r\\n// Interface for decimals()\\r\\ninterface IERC20Decimals {\\r\\n    function decimals() external view returns (uint8);\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title PredictiveLiquidityManager\\r\\n * @notice The main liquidity management contract that adjusts positions based on price predictions\\r\\n */\\r\\ncontract PredictiveLiquidityManager is\\r\\n    Ownable,\\r\\n    ReentrancyGuard,\\r\\n    IUniswapV3MintCallback\\r\\n{\\r\\n    using SafeERC20 for IERC20;\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    // --- State Variables ---\\r\\n    IUniswapV3Factory public immutable factory;\\r\\n    INonfungiblePositionManager public immutable positionManager;\\r\\n    address public immutable token0;\\r\\n    address public immutable token1;\\r\\n    uint8 public immutable token0Decimals;\\r\\n    uint8 public immutable token1Decimals;\\r\\n    uint24 public immutable fee;\\r\\n    int24 public immutable tickSpacing;\\r\\n    address public immutable WETH9;\\r\\n\\r\\n    // Structure for liquidity positions\\r\\n    struct Position {\\r\\n        uint256 tokenId;\\r\\n        uint128 liquidity;\\r\\n        int24 tickLower;\\r\\n        int24 tickUpper;\\r\\n        bool active;\\r\\n    }\\r\\n    Position public currentPosition;\\r\\n\\r\\n    // Strategy Parameters\\r\\n    uint24 public rangeWidthMultiplier = 4;\\r\\n\\r\\n    // --- Events ---\\r\\n    // Event for liquidity operations\\r\\n    event LiquidityOperation(\\r\\n        string operationType,\\r\\n        uint256 indexed tokenId,\\r\\n        int24 tickLower,\\r\\n        int24 tickUpper,\\r\\n        uint128 liquidity,\\r\\n        uint256 amount0,\\r\\n        uint256 amount1,\\r\\n        bool success\\r\\n    );\\r\\n\\r\\n    // Event for outputting main adjustment logic\\r\\n    event PredictionAdjustmentMetrics(\\r\\n        uint256 timestamp,\\r\\n        uint256 actualPrice,\\r\\n        uint256 predictedPrice,\\r\\n        int24 predictedTick,\\r\\n        int24 finalTickLower,\\r\\n        int24 finalTickUpper,\\r\\n        bool adjusted\\r\\n    );\\r\\n\\r\\n    event StrategyParamUpdated(string indexed paramName, uint256 newValue);\\r\\n\\r\\n    // --- Constructor ---\\r\\n    constructor(\\r\\n        address _factory,\\r\\n        address _positionManager,\\r\\n        address _token0,\\r\\n        address _token1,\\r\\n        uint24 _fee,\\r\\n        address _weth9,\\r\\n        address _initialOwner\\r\\n    ) {\\r\\n        // Store values in immutable variables\\r\\n        factory = IUniswapV3Factory(_factory);\\r\\n        positionManager = INonfungiblePositionManager(_positionManager);\\r\\n        token0 = _token0;\\r\\n        token1 = _token1;\\r\\n        fee = _fee;\\r\\n        WETH9 = _weth9;\\r\\n\\r\\n        // Check decimals using try-catch\\r\\n        try IERC20Decimals(_token0).decimals() returns (uint8 _decimals) {\\r\\n            token0Decimals = _decimals;\\r\\n        } catch {\\r\\n            revert(\\\"Token0 does not support decimals()\\\");\\r\\n        }\\r\\n\\r\\n        try IERC20Decimals(_token1).decimals() returns (uint8 _decimals) {\\r\\n            token1Decimals = _decimals;\\r\\n        } catch {\\r\\n            revert(\\\"Token1 does not support decimals()\\\");\\r\\n        }\\r\\n\\r\\n        // Store tickSpacing in a temporary variable\\r\\n        address poolAddress = IUniswapV3Factory(_factory).getPool(\\r\\n            _token0,\\r\\n            _token1,\\r\\n            _fee\\r\\n        );\\r\\n        require(poolAddress != address(0), \\\"Pool does not exist\\\");\\r\\n        tickSpacing = IUniswapV3Pool(poolAddress).tickSpacing();\\r\\n\\r\\n        // Set approvals for token0 and token1\\r\\n        IERC20(_token0).safeApprove(\\r\\n            address(_positionManager),\\r\\n            type(uint256).max\\r\\n        );\\r\\n        IERC20(_token1).safeApprove(\\r\\n            address(_positionManager),\\r\\n            type(uint256).max\\r\\n        );\\r\\n\\r\\n        if (_initialOwner != address(0)) {\\r\\n            transferOwnership(_initialOwner);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // --- Automated Liquidity Management (Owner Only) ---\\r\\n    function updatePredictionAndAdjust(\\r\\n        uint256 predictedPriceDecimal\\r\\n    ) external nonReentrant onlyOwner {\\r\\n        // Calculate current price and predicted tick information\\r\\n        (\\r\\n            uint256 currentPriceDecimal,\\r\\n            int24 currentTick,\\r\\n            int24 predictedTick,\\r\\n            int24 targetTickLower,\\r\\n            int24 targetTickUpper\\r\\n        ) = _calculatePredictionData(predictedPriceDecimal);\\r\\n\\r\\n        // Update position if needed\\r\\n        bool adjusted = _updatePositionIfNeeded(\\r\\n            targetTickLower,\\r\\n            targetTickUpper\\r\\n        );\\r\\n\\r\\n        // Emit prediction adjustment metrics using a helper function to reduce stack depth\\r\\n        _emitPredictionMetrics(\\r\\n            currentPriceDecimal,\\r\\n            predictedPriceDecimal,\\r\\n            predictedTick,\\r\\n            targetTickLower,\\r\\n            targetTickUpper,\\r\\n            adjusted\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // Helper function for calculating prediction data - reducing stack depth\\r\\n    function _calculatePredictionData(\\r\\n        uint256 predictedPriceDecimal\\r\\n    )\\r\\n        internal\\r\\n        view\\r\\n        returns (\\r\\n            uint256 currentPriceDecimal,\\r\\n            int24 currentTick,\\r\\n            int24 predictedTick,\\r\\n            int24 targetTickLower,\\r\\n            int24 targetTickUpper\\r\\n        )\\r\\n    {\\r\\n        // Retrieve current price and tick information\\r\\n        uint160 sqrtPriceX96;\\r\\n        int24 tick;\\r\\n        (sqrtPriceX96, tick) = _getCurrentSqrtPriceAndTick();\\r\\n        currentTick = tick;\\r\\n        currentPriceDecimal = _sqrtPriceX96ToPrice(sqrtPriceX96);\\r\\n        predictedTick = _priceToTick(predictedPriceDecimal);\\r\\n\\r\\n        // Calculate new position\\r\\n        (targetTickLower, targetTickUpper) = _calculateTicks(predictedTick);\\r\\n\\r\\n        return (\\r\\n            currentPriceDecimal,\\r\\n            currentTick,\\r\\n            predictedTick,\\r\\n            targetTickLower,\\r\\n            targetTickUpper\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // Helper function to update position if needed - reducing stack depth\\r\\n    function _updatePositionIfNeeded(\\r\\n        int24 targetTickLower,\\r\\n        int24 targetTickUpper\\r\\n    ) internal returns (bool adjusted) {\\r\\n        if (\\r\\n            !currentPosition.active ||\\r\\n            targetTickLower != currentPosition.tickLower ||\\r\\n            targetTickUpper != currentPosition.tickUpper\\r\\n        ) {\\r\\n            _adjustLiquidity(targetTickLower, targetTickUpper);\\r\\n            return true;\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    // --- Internal Liquidity Management Helpers ---\\r\\n    function _adjustLiquidity(int24 tickLower, int24 tickUpper) internal {\\r\\n        if (currentPosition.active) {\\r\\n            _removeLiquidity();\\r\\n        }\\r\\n        uint256 balance0 = IERC20(token0).balanceOf(address(this));\\r\\n        uint256 balance1 = IERC20(token1).balanceOf(address(this));\\r\\n        if (balance0 > 0 || balance1 > 0) {\\r\\n            _mintLiquidity(tickLower, tickUpper, balance0, balance1);\\r\\n        } else {\\r\\n            currentPosition = Position(0, 0, 0, 0, false);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Helper function for emitting liquidity removal events - reducing stack depth\\r\\n    function _emitLiquidityRemoveEvent(\\r\\n        uint256 tokenId,\\r\\n        int24 tickLower,\\r\\n        int24 tickUpper,\\r\\n        uint128 liquidity,\\r\\n        uint256 amount0,\\r\\n        uint256 amount1,\\r\\n        bool success\\r\\n    ) internal {\\r\\n        emit LiquidityOperation(\\r\\n            \\\"REMOVE\\\",\\r\\n            tokenId,\\r\\n            tickLower,\\r\\n            tickUpper,\\r\\n            liquidity,\\r\\n            amount0,\\r\\n            amount1,\\r\\n            success\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _removeLiquidity() internal {\\r\\n        require(\\r\\n            currentPosition.active && currentPosition.tokenId != 0,\\r\\n            \\\"No active position\\\"\\r\\n        );\\r\\n        uint256 _tokenId = currentPosition.tokenId;\\r\\n        uint128 _liquidity = currentPosition.liquidity;\\r\\n        int24 _tickLower = currentPosition.tickLower;\\r\\n        int24 _tickUpper = currentPosition.tickUpper;\\r\\n\\r\\n        currentPosition = Position(0, 0, 0, 0, false);\\r\\n\\r\\n        // Executing removal process in a separate function to prevent stack too deep\\r\\n        _executeRemoval(_tokenId, _liquidity, _tickLower, _tickUpper);\\r\\n    }\\r\\n\\r\\n    // Helper function for executing liquidity removal - reducing stack depth\\r\\n    function _executeRemoval(\\r\\n        uint256 _tokenId,\\r\\n        uint128 _liquidity,\\r\\n        int24 _tickLower,\\r\\n        int24 _tickUpper\\r\\n    ) internal {\\r\\n        bool decreaseSuccess = false;\\r\\n        bool collectSuccess = false;\\r\\n        uint256 amount0Collected = 0;\\r\\n        uint256 amount1Collected = 0;\\r\\n\\r\\n        if (_liquidity > 0) {\\r\\n            try\\r\\n                positionManager.decreaseLiquidity(\\r\\n                    INonfungiblePositionManager.DecreaseLiquidityParams({\\r\\n                        tokenId: _tokenId,\\r\\n                        liquidity: _liquidity,\\r\\n                        amount0Min: 0,\\r\\n                        amount1Min: 0,\\r\\n                        deadline: block.timestamp\\r\\n                    })\\r\\n                )\\r\\n            {\\r\\n                decreaseSuccess = true;\\r\\n            } catch {\\r\\n                // Silent failure, success = false will be returned at the end\\r\\n            }\\r\\n        } else {\\r\\n            decreaseSuccess = true;\\r\\n        }\\r\\n\\r\\n        if (decreaseSuccess) {\\r\\n            try\\r\\n                positionManager.collect(\\r\\n                    INonfungiblePositionManager.CollectParams({\\r\\n                        tokenId: _tokenId,\\r\\n                        recipient: address(this),\\r\\n                        amount0Max: type(uint128).max,\\r\\n                        amount1Max: type(uint128).max\\r\\n                    })\\r\\n                )\\r\\n            returns (uint256 a0, uint256 a1) {\\r\\n                amount0Collected = a0;\\r\\n                amount1Collected = a1;\\r\\n                collectSuccess = true;\\r\\n            } catch {\\r\\n                // Silent failure, success = false will be returned at the end\\r\\n            }\\r\\n\\r\\n            // Try to burn regardless of collect success\\r\\n            try positionManager.burn(_tokenId) {} catch {}\\r\\n        }\\r\\n\\r\\n        bool overallSuccess = decreaseSuccess && collectSuccess;\\r\\n\\r\\n        // Using helper function to emit event - reducing stack depth\\r\\n        _emitLiquidityRemoveEvent(\\r\\n            _tokenId,\\r\\n            _tickLower,\\r\\n            _tickUpper,\\r\\n            _liquidity,\\r\\n            amount0Collected,\\r\\n            amount1Collected,\\r\\n            overallSuccess\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // Helper function for emitting liquidity mint events - reducing stack depth\\r\\n    function _emitLiquidityMintEvent(\\r\\n        uint256 tokenId,\\r\\n        int24 tickLower,\\r\\n        int24 tickUpper,\\r\\n        uint128 liquidity,\\r\\n        uint256 amount0,\\r\\n        uint256 amount1,\\r\\n        bool success\\r\\n    ) internal {\\r\\n        emit LiquidityOperation(\\r\\n            \\\"MINT\\\",\\r\\n            tokenId,\\r\\n            tickLower,\\r\\n            tickUpper,\\r\\n            liquidity,\\r\\n            amount0,\\r\\n            amount1,\\r\\n            success\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _mintLiquidity(\\r\\n        int24 tickLower,\\r\\n        int24 tickUpper,\\r\\n        uint256 amount0Desired,\\r\\n        uint256 amount1Desired\\r\\n    ) internal {\\r\\n        require(!currentPosition.active, \\\"Position already active\\\");\\r\\n\\r\\n        INonfungiblePositionManager.MintParams\\r\\n            memory params = INonfungiblePositionManager.MintParams({\\r\\n                token0: token0,\\r\\n                token1: token1,\\r\\n                fee: fee,\\r\\n                tickLower: tickLower,\\r\\n                tickUpper: tickUpper,\\r\\n                amount0Desired: amount0Desired,\\r\\n                amount1Desired: amount1Desired,\\r\\n                amount0Min: 0,\\r\\n                amount1Min: 0,\\r\\n                recipient: address(this),\\r\\n                deadline: block.timestamp\\r\\n            });\\r\\n\\r\\n        // Execute mint and manage position creation in a separate function\\r\\n        _executeMint(params, tickLower, tickUpper);\\r\\n    }\\r\\n\\r\\n    function _executeMint(\\r\\n        INonfungiblePositionManager.MintParams memory params,\\r\\n        int24 tickLower,\\r\\n        int24 tickUpper\\r\\n    ) internal {\\r\\n        uint256 tokenId = 0;\\r\\n        uint128 liquidity = 0;\\r\\n        uint256 amount0Actual = 0;\\r\\n        uint256 amount1Actual = 0;\\r\\n        bool success = false;\\r\\n\\r\\n        try positionManager.mint(params) returns (\\r\\n            uint256 _tokenId,\\r\\n            uint128 _liquidity,\\r\\n            uint256 _amount0,\\r\\n            uint256 _amount1\\r\\n        ) {\\r\\n            tokenId = _tokenId;\\r\\n            liquidity = _liquidity;\\r\\n            amount0Actual = _amount0;\\r\\n            amount1Actual = _amount1;\\r\\n\\r\\n            if (liquidity > 0) {\\r\\n                currentPosition = Position(\\r\\n                    tokenId,\\r\\n                    liquidity,\\r\\n                    tickLower,\\r\\n                    tickUpper,\\r\\n                    true\\r\\n                );\\r\\n                success = true;\\r\\n            } else if (tokenId != 0) {\\r\\n                try positionManager.burn(tokenId) {} catch {}\\r\\n            }\\r\\n        } catch {\\r\\n            // Silent failure, event will be emitted with success = false\\r\\n        }\\r\\n\\r\\n        // Using helper function to emit event - reducing stack depth\\r\\n        _emitLiquidityMintEvent(\\r\\n            tokenId,\\r\\n            tickLower,\\r\\n            tickUpper,\\r\\n            liquidity,\\r\\n            amount0Actual,\\r\\n            amount1Actual,\\r\\n            success\\r\\n        );\\r\\n\\r\\n        if (!success) {\\r\\n            currentPosition = Position(0, 0, 0, 0, false);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // --- Internal Calculation Helpers ---\\r\\n    function _calculateTicks(\\r\\n        int24 targetCenterTick\\r\\n    ) internal view returns (int24 tickLower, int24 tickUpper) {\\r\\n        require(tickSpacing > 0, \\\"Invalid tick spacing\\\");\\r\\n\\r\\n        // Calculate half width with better symmetry\\r\\n        int24 halfWidth = (tickSpacing * int24(rangeWidthMultiplier)) / 2;\\r\\n        if (halfWidth <= 0) halfWidth = tickSpacing;\\r\\n\\r\\n        // Ensure half width is a multiple of tick spacing for perfect symmetry\\r\\n        halfWidth = (halfWidth / tickSpacing) * tickSpacing;\\r\\n        if (halfWidth == 0) halfWidth = tickSpacing;\\r\\n\\r\\n        // Calculate raw tick boundaries with better centering\\r\\n        int24 rawTickLower = targetCenterTick - halfWidth;\\r\\n        int24 rawTickUpper = targetCenterTick + halfWidth;\\r\\n\\r\\n        // Align with tick spacing\\r\\n        tickLower = floorToTickSpacing(rawTickLower, tickSpacing);\\r\\n        tickUpper = floorToTickSpacing(rawTickUpper, tickSpacing);\\r\\n\\r\\n        // If upper tick is not properly spaced after flooring, add another tick spacing\\r\\n        if ((rawTickUpper % tickSpacing) != 0) {\\r\\n            tickUpper += tickSpacing;\\r\\n        }\\r\\n\\r\\n        // Ensure proper spacing between ticks\\r\\n        if (tickLower >= tickUpper) {\\r\\n            tickUpper = tickLower + tickSpacing;\\r\\n        }\\r\\n\\r\\n        // Ensure ticks are within global range\\r\\n        tickLower = tickLower < TickMath.MIN_TICK\\r\\n            ? floorToTickSpacing(TickMath.MIN_TICK, tickSpacing)\\r\\n            : tickLower;\\r\\n\\r\\n        tickUpper = tickUpper > TickMath.MAX_TICK\\r\\n            ? floorToTickSpacing(TickMath.MAX_TICK, tickSpacing)\\r\\n            : tickUpper;\\r\\n\\r\\n        // Final check to ensure proper ordering\\r\\n        if (tickLower >= tickUpper) {\\r\\n            tickUpper = tickLower + tickSpacing;\\r\\n\\r\\n            // If upper tick exceeds MAX_TICK, adjust both\\r\\n            if (tickUpper > TickMath.MAX_TICK) {\\r\\n                tickUpper = floorToTickSpacing(TickMath.MAX_TICK, tickSpacing);\\r\\n                tickLower = tickUpper - tickSpacing;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return (tickLower, tickUpper);\\r\\n    }\\r\\n\\r\\n    function floorToTickSpacing(\\r\\n        int24 tick,\\r\\n        int24 _tickSpacing\\r\\n    ) internal pure returns (int24) {\\r\\n        require(_tickSpacing > 0, \\\"Tick spacing must be positive\\\");\\r\\n        int24 compressed = tick / _tickSpacing;\\r\\n        if (tick < 0 && (tick % _tickSpacing != 0)) {\\r\\n            compressed--;\\r\\n        }\\r\\n        return compressed * _tickSpacing;\\r\\n    }\\r\\n\\r\\n    function _getCurrentSqrtPriceAndTick()\\r\\n        internal\\r\\n        view\\r\\n        returns (uint160 sqrtPriceX96, int24 tick)\\r\\n    {\\r\\n        address poolAddress = factory.getPool(token0, token1, fee);\\r\\n        require(poolAddress != address(0), \\\"Pool doesn't exist\\\");\\r\\n        (sqrtPriceX96, tick, , , , , ) = IUniswapV3Pool(poolAddress).slot0();\\r\\n    }\\r\\n\\r\\n    // Helper function to convert sqrtPriceX96 to price decimal\\r\\n    function _sqrtPriceX96ToPrice(\\r\\n        uint160 sqrtPriceX96\\r\\n    ) internal view returns (uint256) {\\r\\n        uint256 price = uint256(sqrtPriceX96) * uint256(sqrtPriceX96);\\r\\n        uint256 adjustedPrice = price >> 192; // Divide by 2^192\\r\\n\\r\\n        // Adjust for decimal differences between tokens\\r\\n        if (token1Decimals > token0Decimals) {\\r\\n            adjustedPrice =\\r\\n                adjustedPrice /\\r\\n                (10 ** (token1Decimals - token0Decimals));\\r\\n        } else if (token0Decimals > token1Decimals) {\\r\\n            adjustedPrice =\\r\\n                adjustedPrice *\\r\\n                (10 ** (token0Decimals - token1Decimals));\\r\\n        }\\r\\n\\r\\n        return adjustedPrice;\\r\\n    }\\r\\n\\r\\n    function _priceToTick(uint256 priceDecimal) internal view returns (int24) {\\r\\n        require(priceDecimal > 0, \\\"Price must be > 0\\\");\\r\\n\\r\\n        // If the input price is ETH/USDC (e.g., 1500)\\r\\n        // We need to convert it to WETH/USDC (e.g., 1/1500 = 0.00066)\\r\\n        // To match Uniswap's logic which uses token1/token0 ratio\\r\\n\\r\\n        // Calculate inverted price\\r\\n        uint256 invertedPrice;\\r\\n        if (priceDecimal > 1e12) {\\r\\n            // If price is large (if price is ETH/USDC)\\r\\n            // Invert price with high precision\\r\\n            // Use 1e36 to maintain precision in division\\r\\n            invertedPrice = uint256(1e36).div(priceDecimal);\\r\\n        } else {\\r\\n            // If price is small (likely already inverted), use it as is\\r\\n            invertedPrice = priceDecimal;\\r\\n        }\\r\\n\\r\\n        // Adjust for decimal differences\\r\\n        uint256 numerator = invertedPrice;\\r\\n        uint256 denominator = 1e18;\\r\\n\\r\\n        if (token1Decimals > token0Decimals) {\\r\\n            numerator = numerator.mul(\\r\\n                10 ** (uint256(token1Decimals).sub(token0Decimals))\\r\\n            );\\r\\n        } else if (token0Decimals > token1Decimals) {\\r\\n            denominator = denominator.mul(\\r\\n                10 ** (uint256(token0Decimals).sub(token1Decimals))\\r\\n            );\\r\\n        }\\r\\n\\r\\n        // Calculate ratioX192 considering inverted price\\r\\n        uint256 ratioX192 = numerator.mul(1 << 192).div(denominator);\\r\\n\\r\\n        uint160 sqrtPriceX96 = uint160(SqrtMath.sqrt(ratioX192));\\r\\n\\r\\n        // Check Uniswap constraints\\r\\n        require(sqrtPriceX96 >= TickMath.MIN_SQRT_RATIO, \\\"Price too low\\\");\\r\\n        require(sqrtPriceX96 <= TickMath.MAX_SQRT_RATIO, \\\"Price too high\\\");\\r\\n\\r\\n        return TickMath.getTickAtSqrtRatio(sqrtPriceX96);\\r\\n    }\\r\\n\\r\\n    // Helper function to emit prediction metrics event\\r\\n    function _emitPredictionMetrics(\\r\\n        uint256 actualPrice,\\r\\n        uint256 predictedPrice,\\r\\n        int24 predictedTick,\\r\\n        int24 finalTickLower,\\r\\n        int24 finalTickUpper,\\r\\n        bool adjusted\\r\\n    ) internal {\\r\\n        emit PredictionAdjustmentMetrics(\\r\\n            block.timestamp,\\r\\n            actualPrice,\\r\\n            predictedPrice,\\r\\n            predictedTick,\\r\\n            finalTickLower,\\r\\n            finalTickUpper,\\r\\n            adjusted\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // Implement IUniswapV3MintCallback interface\\r\\n    function uniswapV3MintCallback(\\r\\n        uint256 amount0Owed,\\r\\n        uint256 amount1Owed,\\r\\n        bytes calldata data\\r\\n    ) external override {\\r\\n        // Verify the caller is the Uniswap V3 position manager\\r\\n        require(\\r\\n            msg.sender == address(positionManager),\\r\\n            \\\"Unauthorized callback\\\"\\r\\n        );\\r\\n\\r\\n        // Send the required tokens\\r\\n        if (amount0Owed > 0) {\\r\\n            IERC20(token0).safeTransfer(msg.sender, amount0Owed);\\r\\n        }\\r\\n        if (amount1Owed > 0) {\\r\\n            IERC20(token1).safeTransfer(msg.sender, amount1Owed);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x9f4ade8ff2474e9a2044dc20a116b63ca42a2064e759224feb8e66ba66a9426b\",\"license\":\"MIT\"},\"contracts/libraries/SqrtMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.7.6;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\"; // Import OZ 3.4 SafeMath\\r\\n\\r\\n/**\\r\\n * @title Safe Square Root Math Library for Solidity 0.7.x\\r\\n * @author Adapted from OpenZeppelin Contracts & other sources\\r\\n * @notice Provides square root functionality using SafeMath for uint256.\\r\\n */\\r\\nlibrary SqrtMath {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    // Optional: Include Rounding enum if your main contract needs the rounding variant\\r\\n    enum Rounding {\\r\\n        Floor,\\r\\n        Ceil\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer square root of a number rounded down (floor).\\r\\n     * Uses Babylonian method with SafeMath. 6 iterations are sufficient for uint256.\\r\\n     */\\r\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\r\\n        if (a == 0) return 0;\\r\\n\\r\\n        // Initial estimate - can start with a simple estimate like a/2 or use log2 based estimate\\r\\n        // Using roughly x = 2**(log2(a)/2) based estimate (safer)\\r\\n        uint256 estimate = 1 << (log2(a) >> 1);\\r\\n        if (estimate == 0) estimate = 1; // Ensure estimate is not zero if a > 0\\r\\n\\r\\n        // Babylonian method iterations using SafeMath\\r\\n        // result = (estimate + a / estimate) / 2;\\r\\n        uint256 result = estimate.add(a.div(estimate)).div(2);\\r\\n        result = result.add(a.div(result)).div(2);\\r\\n        result = result.add(a.div(result)).div(2);\\r\\n        result = result.add(a.div(result)).div(2);\\r\\n        result = result.add(a.div(result)).div(2);\\r\\n        result = result.add(a.div(result)).div(2);\\r\\n\\r\\n        // Final check for floor rounding (integer truncation might overshoot)\\r\\n        // Check if result * result > a\\r\\n        // Avoid direct multiplication if result can be large, use division check: result > a / result\\r\\n        if (result > a.div(result)) {\\r\\n            // If result > a/result, it means result*result > a (potential overflow avoided)\\r\\n            // So, the floor value is result - 1\\r\\n            return result.sub(1);\\r\\n        } else {\\r\\n            // Otherwise, result*result <= a, so result is the floor value\\r\\n            return result;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Calculates sqrt(a), following the selected rounding direction.\\r\\n     */\\r\\n    function sqrt(\\r\\n        uint256 a,\\r\\n        Rounding rounding\\r\\n    ) internal pure returns (uint256) {\\r\\n        uint256 resultFloor = sqrt(a); // Calculate floor value first\\r\\n        if (rounding == Rounding.Floor) {\\r\\n            return resultFloor;\\r\\n        } else {\\r\\n            // rounding == Rounding.Ceil\\r\\n            // Check if ceil is needed (i.e., if a is not a perfect square)\\r\\n            // If resultFloor * resultFloor < a, then we need to round up\\r\\n            if (resultFloor.mul(resultFloor) < a) {\\r\\n                // Use SafeMath for the check\\r\\n                return resultFloor.add(1);\\r\\n            } else {\\r\\n                return resultFloor; // a was a perfect square, floor == ceil\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // --- Internal helper: log2 needed for initial estimate ---\\r\\n    /**\\r\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\r\\n     * Returns 0 if given 0. Adapted from OZ 4.x for 0.7.6 compatibility using assembly.\\r\\n     */\\r\\n    function log2(uint256 x) internal pure returns (uint256 r) {\\r\\n        assembly {\\r\\n            let v := x\\r\\n            if iszero(v) {\\r\\n                r := 0\\r\\n            }\\r\\n            if gt(v, 0xffffffffffffffffffffffffffffffff) {\\r\\n                r := add(r, 128)\\r\\n                v := shr(128, v)\\r\\n            }\\r\\n            if gt(v, 0xffffffffffffffff) {\\r\\n                r := add(r, 64)\\r\\n                v := shr(64, v)\\r\\n            }\\r\\n            if gt(v, 0xffffffff) {\\r\\n                r := add(r, 32)\\r\\n                v := shr(32, v)\\r\\n            }\\r\\n            if gt(v, 0xffff) {\\r\\n                r := add(r, 16)\\r\\n                v := shr(16, v)\\r\\n            }\\r\\n            if gt(v, 0xff) {\\r\\n                r := add(r, 8)\\r\\n                v := shr(8, v)\\r\\n            }\\r\\n            if gt(v, 0xf) {\\r\\n                r := add(r, 4)\\r\\n                v := shr(4, v)\\r\\n            }\\r\\n            if gt(v, 0x3) {\\r\\n                r := add(r, 2)\\r\\n                v := shr(2, v)\\r\\n            }\\r\\n            if gt(v, 0x1) {\\r\\n                r := add(r, 1)\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7b28ea41070f2aa2bc2a07bb69c8c78511d7e7067cfb8c8c857be435811bed38\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":7,"contract":"contracts/PredictiveLiquidityManager.sol:PredictiveLiquidityManager","label":"_owner","offset":0,"slot":"0","type":"t_address"},{"astId":1271,"contract":"contracts/PredictiveLiquidityManager.sol:PredictiveLiquidityManager","label":"_status","offset":0,"slot":"1","type":"t_uint256"},{"astId":3893,"contract":"contracts/PredictiveLiquidityManager.sol:PredictiveLiquidityManager","label":"currentPosition","offset":0,"slot":"2","type":"t_struct(Position)3891_storage"},{"astId":3896,"contract":"contracts/PredictiveLiquidityManager.sol:PredictiveLiquidityManager","label":"rangeWidthMultiplier","offset":0,"slot":"4","type":"t_uint24"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_int24":{"encoding":"inplace","label":"int24","numberOfBytes":"3"},"t_struct(Position)3891_storage":{"encoding":"inplace","label":"struct PredictiveLiquidityManager.Position","members":[{"astId":3882,"contract":"contracts/PredictiveLiquidityManager.sol:PredictiveLiquidityManager","label":"tokenId","offset":0,"slot":"0","type":"t_uint256"},{"astId":3884,"contract":"contracts/PredictiveLiquidityManager.sol:PredictiveLiquidityManager","label":"liquidity","offset":0,"slot":"1","type":"t_uint128"},{"astId":3886,"contract":"contracts/PredictiveLiquidityManager.sol:PredictiveLiquidityManager","label":"tickLower","offset":16,"slot":"1","type":"t_int24"},{"astId":3888,"contract":"contracts/PredictiveLiquidityManager.sol:PredictiveLiquidityManager","label":"tickUpper","offset":19,"slot":"1","type":"t_int24"},{"astId":3890,"contract":"contracts/PredictiveLiquidityManager.sol:PredictiveLiquidityManager","label":"active","offset":22,"slot":"1","type":"t_bool"}],"numberOfBytes":"64"},"t_uint128":{"encoding":"inplace","label":"uint128","numberOfBytes":"16"},"t_uint24":{"encoding":"inplace","label":"uint24","numberOfBytes":"3"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{"uniswapV3MintCallback(uint256,uint256,bytes)":{"notice":"Called to `msg.sender` after minting liquidity to a position from IUniswapV3Pool#mint."}},"notice":"The main liquidity management contract that adjusts positions based on price predictions","version":1}}},"contracts/TokenOperationsManagerOptimized.sol":{"TokenOperationsManagerOptimized":{"abi":[{"inputs":[{"internalType":"address","name":"_swapRouter","type":"address"},{"internalType":"address","name":"_weth9","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"opType","type":"bytes32"},{"indexed":true,"internalType":"address","name":"tokenA","type":"address"},{"indexed":true,"internalType":"address","name":"tokenB","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"Operation","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"WETH9","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"deposit","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"}],"name":"getBalance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"action","type":"bytes32"},{"internalType":"uint256","name":"minAmount","type":"uint256"},{"internalType":"address","name":"recipient","type":"address"}],"name":"handleETH","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"tokenIn","type":"address"},{"internalType":"address","name":"tokenOut","type":"address"},{"internalType":"uint24","name":"poolFee","type":"uint24"},{"internalType":"uint256","name":"amountIn","type":"uint256"},{"internalType":"uint256","name":"amountOutMin","type":"uint256"}],"name":"swap","outputs":[{"internalType":"uint256","name":"amountOut","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"swapRouter","outputs":[{"internalType":"contract ISwapRouter","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"minAmount","type":"uint256"},{"internalType":"address","name":"recipient","type":"address"}],"name":"sweepToken","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"withdraw","outputs":[],"stateMutability":"nonpayable","type":"function"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"kind":"dev","methods":{"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"title":"TokenOperationsManagerOptimized","version":1},"evm":{"bytecode":{"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:507:35","statements":[{"nodeType":"YulBlock","src":"6:3:35","statements":[]},{"body":{"nodeType":"YulBlock","src":"76:117:35","statements":[{"nodeType":"YulAssignment","src":"86:22:35","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"101:6:35"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"95:5:35"},"nodeType":"YulFunctionCall","src":"95:13:35"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"86:5:35"}]},{"body":{"nodeType":"YulBlock","src":"171:16:35","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"180:1:35","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"183:1:35","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"173:6:35"},"nodeType":"YulFunctionCall","src":"173:12:35"},"nodeType":"YulExpressionStatement","src":"173:12:35"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"130:5:35"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"141:5:35"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"156:3:35","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"161:1:35","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"152:3:35"},"nodeType":"YulFunctionCall","src":"152:11:35"},{"kind":"number","nodeType":"YulLiteral","src":"165:1:35","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"148:3:35"},"nodeType":"YulFunctionCall","src":"148:19:35"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"137:3:35"},"nodeType":"YulFunctionCall","src":"137:31:35"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"127:2:35"},"nodeType":"YulFunctionCall","src":"127:42:35"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"120:6:35"},"nodeType":"YulFunctionCall","src":"120:50:35"},"nodeType":"YulIf","src":"117:2:35"}]},"name":"abi_decode_t_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"55:6:35","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"66:5:35","type":""}],"src":"14:179:35"},{"body":{"nodeType":"YulBlock","src":"296:209:35","statements":[{"body":{"nodeType":"YulBlock","src":"342:26:35","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"351:6:35"},{"name":"value0","nodeType":"YulIdentifier","src":"359:6:35"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"344:6:35"},"nodeType":"YulFunctionCall","src":"344:22:35"},"nodeType":"YulExpressionStatement","src":"344:22:35"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"317:7:35"},{"name":"headStart","nodeType":"YulIdentifier","src":"326:9:35"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"313:3:35"},"nodeType":"YulFunctionCall","src":"313:23:35"},{"kind":"number","nodeType":"YulLiteral","src":"338:2:35","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"309:3:35"},"nodeType":"YulFunctionCall","src":"309:32:35"},"nodeType":"YulIf","src":"306:2:35"},{"nodeType":"YulAssignment","src":"377:52:35","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"419:9:35"}],"functionName":{"name":"abi_decode_t_address_fromMemory","nodeType":"YulIdentifier","src":"387:31:35"},"nodeType":"YulFunctionCall","src":"387:42:35"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"377:6:35"}]},{"nodeType":"YulAssignment","src":"438:61:35","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"484:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"495:2:35","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"480:3:35"},"nodeType":"YulFunctionCall","src":"480:18:35"}],"functionName":{"name":"abi_decode_t_address_fromMemory","nodeType":"YulIdentifier","src":"448:31:35"},"nodeType":"YulFunctionCall","src":"448:51:35"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"438:6:35"}]}]},"name":"abi_decode_tuple_t_addresst_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"254:9:35","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"265:7:35","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"277:6:35","type":""},{"name":"value1","nodeType":"YulTypedName","src":"285:6:35","type":""}],"src":"198:307:35"}]},"contents":"{\n    { }\n    function abi_decode_t_address_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_address_fromMemory(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value0, value0) }\n        value0 := abi_decode_t_address_fromMemory(headStart)\n        value1 := abi_decode_t_address_fromMemory(add(headStart, 32))\n    }\n}","id":35,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"","opcodes":"PUSH1 0xC0 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x1A92 CODESIZE SUB DUP1 PUSH3 0x1A92 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0xCA JUMP JUMPDEST PUSH1 0x0 PUSH3 0x40 PUSH3 0xA9 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 DUP2 OR DUP3 SSTORE PUSH1 0x40 MLOAD SWAP3 SWAP4 POP SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP3 SWAP1 LOG3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT PUSH1 0x60 SWAP3 DUP4 SHL DUP2 AND PUSH1 0x80 MSTORE SWAP2 SHL AND PUSH1 0xA0 MSTORE PUSH3 0x101 JUMP JUMPDEST CALLER SWAP1 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0xC5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0xDD JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH3 0xE8 DUP4 PUSH3 0xAD JUMP JUMPDEST SWAP2 POP PUSH3 0xF8 PUSH1 0x20 DUP5 ADD PUSH3 0xAD JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH1 0x60 SHR PUSH1 0xA0 MLOAD PUSH1 0x60 SHR PUSH2 0x1930 PUSH3 0x162 PUSH1 0x0 CODECOPY DUP1 PUSH2 0x35D MSTORE DUP1 PUSH2 0x41B MSTORE DUP1 PUSH2 0x4C6 MSTORE DUP1 PUSH2 0x7E1 MSTORE DUP1 PUSH2 0x83A MSTORE DUP1 PUSH2 0x92F MSTORE DUP1 PUSH2 0xD22 MSTORE DUP1 PUSH2 0xD74 MSTORE DUP1 PUSH2 0xE32 MSTORE POP DUP1 PUSH2 0x5F4 MSTORE DUP1 PUSH2 0x674 MSTORE DUP1 PUSH2 0x70C MSTORE DUP1 PUSH2 0xA0E MSTORE POP PUSH2 0x1930 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA0 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0x64 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x14E JUMPI DUP1 PUSH4 0xC31C9C07 EQ PUSH2 0x163 JUMPI DUP1 PUSH4 0xDF2AB5BB EQ PUSH2 0x178 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x198 JUMPI DUP1 PUSH4 0xF3FEF3A3 EQ PUSH2 0x1B8 JUMPI DUP1 PUSH4 0xF8B2CB4F EQ PUSH2 0x1D8 JUMPI PUSH2 0xA7 JUMP JUMPDEST DUP1 PUSH4 0x2F8B3EED EQ PUSH2 0xAC JUMPI DUP1 PUSH4 0x3BF237D5 EQ PUSH2 0xCE JUMPI DUP1 PUSH4 0x47E7EF24 EQ PUSH2 0x104 JUMPI DUP1 PUSH4 0x4AA4A4FC EQ PUSH2 0x117 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x139 JUMPI PUSH2 0xA7 JUMP JUMPDEST CALLDATASIZE PUSH2 0xA7 JUMPI STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xCC PUSH2 0xC7 CALLDATASIZE PUSH1 0x4 PUSH2 0x15E3 JUMP JUMPDEST PUSH2 0x1F8 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xDA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xEE PUSH2 0xE9 CALLDATASIZE PUSH1 0x4 PUSH2 0x1522 JUMP JUMPDEST PUSH2 0x56C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xFB SWAP2 SWAP1 PUSH2 0x1805 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xCC PUSH2 0x112 CALLDATASIZE PUSH1 0x4 PUSH2 0x157F JUMP JUMPDEST PUSH2 0x77D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x123 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x12C PUSH2 0x92D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xFB SWAP2 SWAP1 PUSH2 0x1626 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x145 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xCC PUSH2 0x951 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x15A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x12C PUSH2 0x9FD JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x16F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x12C PUSH2 0xA0C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x184 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xCC PUSH2 0x193 CALLDATASIZE PUSH1 0x4 PUSH2 0x15A8 JUMP JUMPDEST PUSH2 0xA30 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xCC PUSH2 0x1B3 CALLDATASIZE PUSH1 0x4 PUSH2 0x1508 JUMP JUMPDEST PUSH2 0xBBC JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xCC PUSH2 0x1D3 CALLDATASIZE PUSH1 0x4 PUSH2 0x157F JUMP JUMPDEST PUSH2 0xCBE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1E4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xEE PUSH2 0x1F3 CALLDATASIZE PUSH1 0x4 PUSH2 0x1508 JUMP JUMPDEST PUSH2 0xFC2 JUMP JUMPDEST PUSH2 0x200 PUSH2 0x105E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x211 PUSH2 0x9FD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x25A JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x187B DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND ISZERO PUSH2 0x271 JUMPI DUP2 PUSH2 0x273 JUMP JUMPDEST CALLER JUMPDEST SWAP1 POP PUSH10 0xA48A8CAA9C88BE8AA89 PUSH1 0xB3 SHL DUP5 EQ ISZERO PUSH2 0x32D JUMPI SELFBALANCE DUP4 DUP2 LT ISZERO PUSH2 0x2B4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2AB SWAP1 PUSH2 0x163A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 DUP3 ISZERO PUSH2 0x8FC MUL SWAP1 DUP4 SWAP1 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x2EA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x180F DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP5 PUSH1 0x40 MLOAD PUSH2 0x31F SWAP2 SWAP1 PUSH2 0x1805 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP PUSH2 0x566 JUMP JUMPDEST PUSH11 0xAA9CAEA482A0BEAE8AA89 PUSH1 0xAB SHL DUP5 EQ ISZERO PUSH2 0x50C JUMPI PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH2 0x392 SWAP1 ADDRESS SWAP1 PUSH1 0x4 ADD PUSH2 0x1626 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3BE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3E2 SWAP2 SWAP1 PUSH2 0x160E JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x404 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2AB SWAP1 PUSH2 0x16E7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x2E1A7D4D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND SWAP1 PUSH4 0x2E1A7D4D SWAP1 PUSH2 0x450 SWAP1 DUP5 SWAP1 PUSH1 0x4 ADD PUSH2 0x1805 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x46A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x47E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP3 POP DUP4 ISZERO PUSH2 0x8FC MUL SWAP2 POP DUP4 SWAP1 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x4B8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x180F DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP5 PUSH1 0x40 MLOAD PUSH2 0x31F SWAP2 SWAP1 PUSH2 0x1805 JUMP JUMPDEST PUSH11 0x29ABA2A2A82FAA27A5A2A7 PUSH1 0xA9 SHL DUP5 EQ DUP1 ISZERO PUSH2 0x531 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND ISZERO ISZERO JUMPDEST ISZERO PUSH2 0x54E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2AB SWAP1 PUSH2 0x1765 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2AB SWAP1 PUSH2 0x1712 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x576 PUSH2 0x105E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x587 PUSH2 0x9FD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x5D0 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x187B DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0x5E5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND CALLER ADDRESS DUP7 PUSH2 0x1062 JUMP JUMPDEST PUSH2 0x619 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH32 0x0 DUP6 PUSH2 0x10BC JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH2 0x100 DUP2 ADD DUP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP10 AND DUP3 MSTORE DUP8 DUP2 AND PUSH1 0x20 DUP4 ADD MSTORE PUSH3 0xFFFFFF DUP8 AND DUP3 DUP5 ADD MSTORE ADDRESS PUSH1 0x60 DUP4 ADD MSTORE TIMESTAMP PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP3 ADD DUP7 SWAP1 MSTORE PUSH1 0xC0 DUP3 ADD DUP6 SWAP1 MSTORE PUSH1 0x0 PUSH1 0xE0 DUP4 ADD MSTORE SWAP2 MLOAD PUSH4 0x414BF389 PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 SWAP2 PUSH32 0x0 AND SWAP1 PUSH4 0x414BF389 SWAP1 PUSH2 0x6A9 SWAP1 DUP5 SWAP1 PUSH1 0x4 ADD PUSH2 0x179C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x6D7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x6FB SWAP2 SWAP1 PUSH2 0x160E JUMP JUMPDEST SWAP2 POP PUSH2 0x732 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND PUSH32 0x0 PUSH1 0x0 PUSH2 0x10BC JUMP JUMPDEST DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x5357415 PUSH1 0xE4 SHL PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x180F DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP6 PUSH1 0x40 MLOAD PUSH2 0x76B SWAP2 SWAP1 PUSH2 0x1805 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH2 0x785 PUSH2 0x105E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x796 PUSH2 0x9FD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x7DF JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x187B DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x8B1 JUMPI DUP1 CALLVALUE EQ PUSH2 0x838 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2AB SWAP1 PUSH2 0x1664 JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD0E30DB0 DUP3 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x893 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x8A7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP PUSH2 0x8E4 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 0x8CF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2AB SWAP1 PUSH2 0x1691 JUMP JUMPDEST PUSH2 0x8E4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND CALLER ADDRESS DUP5 PUSH2 0x1062 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH7 0x11115413D4D255 PUSH1 0xCA SHL PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x180F DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP5 PUSH1 0x40 MLOAD PUSH2 0x921 SWAP2 SWAP1 PUSH2 0x1805 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x959 PUSH2 0x105E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x96A PUSH2 0x9FD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x9B3 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x187B DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP4 SWAP1 LOG3 PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0xA38 PUSH2 0x105E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xA49 PUSH2 0x9FD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xA92 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x187B DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xAB8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2AB SWAP1 PUSH2 0x173A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH2 0xAE7 SWAP1 ADDRESS SWAP1 PUSH1 0x4 ADD PUSH2 0x1626 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xAFF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xB13 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xB37 SWAP2 SWAP1 PUSH2 0x160E JUMP JUMPDEST SWAP1 POP DUP3 DUP2 LT ISZERO PUSH2 0xB59 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2AB SWAP1 PUSH2 0x16B9 JUMP JUMPDEST PUSH2 0xB6D PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP4 DUP4 PUSH2 0x11D4 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH11 0x29ABA2A2A82FAA27A5A2A7 PUSH1 0xA9 SHL PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x180F DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP5 PUSH1 0x40 MLOAD PUSH2 0xBAE SWAP2 SWAP1 PUSH2 0x1805 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP POP JUMP JUMPDEST PUSH2 0xBC4 PUSH2 0x105E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xBD5 PUSH2 0x9FD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xC1E JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x187B DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xC63 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x182F PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND SWAP4 SWAP3 AND SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 LOG3 PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0xCC6 PUSH2 0x105E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xCD7 PUSH2 0x9FD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xD20 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x187B DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0xECD JUMPI PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH2 0xDA9 SWAP1 ADDRESS SWAP1 PUSH1 0x4 ADD PUSH2 0x1626 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xDC1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xDD5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xDF9 SWAP2 SWAP1 PUSH2 0x160E JUMP JUMPDEST SWAP1 POP DUP2 DUP2 LT ISZERO PUSH2 0xE1B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2AB SWAP1 PUSH2 0x16E7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x2E1A7D4D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND SWAP1 PUSH4 0x2E1A7D4D SWAP1 PUSH2 0xE67 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x1805 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xE81 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xE95 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD CALLER SWAP3 POP DUP5 ISZERO PUSH2 0x8FC MUL SWAP2 POP DUP5 SWAP1 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0xEC6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH2 0xF84 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH2 0xEFC SWAP1 ADDRESS SWAP1 PUSH1 0x4 ADD PUSH2 0x1626 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xF14 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xF28 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xF4C SWAP2 SWAP1 PUSH2 0x160E JUMP JUMPDEST SWAP1 POP DUP2 DUP2 LT ISZERO PUSH2 0xF6E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2AB SWAP1 PUSH2 0x16B9 JUMP JUMPDEST PUSH2 0xF82 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND CALLER DUP5 PUSH2 0x11D4 JUMP JUMPDEST POP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH8 0x5749544844524157 PUSH1 0xC0 SHL PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x180F DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP5 PUSH1 0x40 MLOAD PUSH2 0x921 SWAP2 SWAP1 PUSH2 0x1805 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND ISZERO PUSH2 0x1054 JUMPI PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH2 0xFFF SWAP1 ADDRESS SWAP1 PUSH1 0x4 ADD PUSH2 0x1626 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1017 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x102B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x104F SWAP2 SWAP1 PUSH2 0x160E JUMP JUMPDEST PUSH2 0x1056 JUMP JUMPDEST SELFBALANCE JUMPDEST SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST CALLER SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP7 AND PUSH1 0x24 DUP4 ADD MSTORE DUP5 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP1 DUP3 ADD DUP5 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x84 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0x23B872DD PUSH1 0xE0 SHL OR SWAP1 MSTORE PUSH2 0x566 SWAP1 DUP6 SWAP1 PUSH2 0x1222 JUMP JUMPDEST DUP1 ISZERO DUP1 PUSH2 0x1142 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH4 0x6EB1769F PUSH1 0xE1 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE SWAP2 MLOAD SWAP2 DUP6 AND SWAP2 PUSH4 0xDD62ED3E SWAP2 PUSH1 0x44 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1114 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1128 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x113E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD ISZERO JUMPDEST PUSH2 0x117D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x36 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x18C5 PUSH1 0x36 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP1 DUP3 ADD DUP5 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0x95EA7B3 PUSH1 0xE0 SHL OR SWAP1 MSTORE PUSH2 0x11CF SWAP1 DUP5 SWAP1 PUSH2 0x1222 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP1 DUP3 ADD DUP5 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0xA9059CBB PUSH1 0xE0 SHL OR SWAP1 MSTORE PUSH2 0x11CF SWAP1 DUP5 SWAP1 JUMPDEST PUSH1 0x0 PUSH2 0x1277 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x12D3 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0x11CF JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1296 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH2 0x11CF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2A DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x189B PUSH1 0x2A SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x60 PUSH2 0x12E2 DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x12EC JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x132D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1855 PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1336 DUP6 PUSH2 0x1447 JUMP JUMPDEST PUSH2 0x1387 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP8 PUSH1 0x40 MLOAD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x13C5 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x13A6 JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1427 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x142C JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x143C DUP3 DUP3 DUP7 PUSH2 0x144D JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST EXTCODESIZE ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x145C JUMPI POP DUP2 PUSH2 0x12E5 JUMP JUMPDEST DUP3 MLOAD ISZERO PUSH2 0x146C JUMPI DUP3 MLOAD DUP1 DUP5 PUSH1 0x20 ADD REVERT JUMPDEST DUP2 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x14B6 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x149E JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x14E3 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x1059 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1519 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x12E5 DUP3 PUSH2 0x14F1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x1539 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x1542 DUP7 PUSH2 0x14F1 JUMP JUMPDEST SWAP5 POP PUSH2 0x1550 PUSH1 0x20 DUP8 ADD PUSH2 0x14F1 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH3 0xFFFFFF DUP2 AND DUP2 EQ PUSH2 0x1567 JUMPI DUP2 DUP3 REVERT JUMPDEST SWAP5 SWAP8 SWAP4 SWAP7 POP SWAP4 SWAP5 PUSH1 0x60 DUP2 ADD CALLDATALOAD SWAP5 POP PUSH1 0x80 ADD CALLDATALOAD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1591 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x159A DUP4 PUSH2 0x14F1 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x15BC JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x15C5 DUP5 PUSH2 0x14F1 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD SWAP2 POP PUSH2 0x15DA PUSH1 0x40 DUP6 ADD PUSH2 0x14F1 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x15F7 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD SWAP2 POP PUSH2 0x15DA PUSH1 0x40 DUP6 ADD PUSH2 0x14F1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x161F JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x10 SWAP1 DUP3 ADD MSTORE PUSH16 0x92DCE6EACCCCD2C6D2CADCE8408AA89 PUSH1 0x83 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x13 SWAP1 DUP3 ADD MSTORE PUSH19 0x115512081D985B1D5948084F48185B5BDD5B9D PUSH1 0x6A SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH14 0x115512081B9BDD081B9959591959 PUSH1 0x92 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH20 0x496E73756666696369656E742062616C616E6365 PUSH1 0x60 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x11 SWAP1 DUP3 ADD MSTORE PUSH17 0x92DCE6EACCCCD2C6D2CADCE840AE8AA89 PUSH1 0x7B SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH14 0x24B73B30B634B21030B1BA34B7B7 PUSH1 0x91 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x11 SWAP1 DUP3 ADD MSTORE PUSH17 0x125B9D985B1A59081C9958DA5C1A595B9D PUSH1 0x7A SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x17 SWAP1 DUP3 ADD MSTORE PUSH32 0x557365207377656570546F6B656E2066756E6374696F6E000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0x20 DUP1 DUP5 ADD MLOAD DUP3 AND SWAP1 DUP4 ADD MSTORE PUSH1 0x40 DUP1 DUP5 ADD MLOAD PUSH3 0xFFFFFF AND SWAP1 DUP4 ADD MSTORE PUSH1 0x60 DUP1 DUP5 ADD MLOAD DUP3 AND SWAP1 DUP4 ADD MSTORE PUSH1 0x80 DUP1 DUP5 ADD MLOAD SWAP1 DUP4 ADD MSTORE PUSH1 0xA0 DUP4 DUP2 ADD MLOAD SWAP1 DUP4 ADD MSTORE PUSH1 0xC0 DUP1 DUP5 ADD MLOAD SWAP1 DUP4 ADD MSTORE PUSH1 0xE0 SWAP3 DUP4 ADD MLOAD AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH2 0x100 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP INVALID EXTCODEHASH RETURN 0x26 0xC9 0xF9 0xE4 PUSH29 0xF4DD5CC18ACB5F11594345CA27574799F6172A584DAB8DA09E4F776E61 PUSH3 0x6C653A KECCAK256 PUSH15 0x6577206F776E657220697320746865 KECCAK256 PUSH27 0x65726F2061646472657373416464726573733A20696E7375666669 PUSH4 0x69656E74 KECCAK256 PUSH3 0x616C61 PUSH15 0x636520666F722063616C6C4F776E61 PUSH3 0x6C653A KECCAK256 PUSH4 0x616C6C65 PUSH19 0x206973206E6F7420746865206F776E65725361 PUSH7 0x6545524332303A KECCAK256 GASLIMIT MSTORE NUMBER ORIGIN ADDRESS KECCAK256 PUSH16 0x7065726174696F6E20646964206E6F74 KECCAK256 PUSH20 0x7563636565645361666545524332303A20617070 PUSH19 0x6F76652066726F6D206E6F6E2D7A65726F2074 PUSH16 0x206E6F6E2D7A65726F20616C6C6F7761 PUSH15 0x6365A2646970667358221220F22335 0xB0 SMOD XOR JUMPI DELEGATECALL ADDMOD 0xE3 DUP16 EXTCODEHASH 0xE3 0xAC CODESIZE CHAINID DUP4 0xEE CHAINID 0xA8 0xE5 0xEC 0xB2 0xE2 0xD8 0x29 SWAP7 0x2B PUSH23 0xB8E2AD64736F6C63430007060033000000000000000000 ","sourceMap":"615:5161:33:-:0;;;1060:130;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;884:17:0;904:12;:10;:12::i;:::-;926:6;:18;;-1:-1:-1;;;;;;926:18:0;-1:-1:-1;;;;;926:18:0;;;;;;;959:43;;926:18;;-1:-1:-1;926:18:0;959:43;;926:6;;959:43;-1:-1:-1;;;;;;;1120:37:33;;;;;;;;1168:14;;;;;615:5161;;598:104:9;685:10;598:104;:::o;14:179:35:-;95:13;;-1:-1:-1;;;;;137:31:35;;127:42;;117:2;;183:1;180;173:12;117:2;76:117;;;:::o;198:307::-;;;338:2;326:9;317:7;313:23;309:32;306:2;;;359:6;351;344:22;306:2;387:42;419:9;387:42;:::i;:::-;377:52;;448:51;495:2;484:9;480:18;448:51;:::i;:::-;438:61;;296:209;;;;;:::o;:::-;615:5161:33;;;;;;;;;;;;;;;;"},"deployedBytecode":{"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:6545:35","statements":[{"nodeType":"YulBlock","src":"6:3:35","statements":[]},{"body":{"nodeType":"YulBlock","src":"65:124:35","statements":[{"nodeType":"YulAssignment","src":"75:29:35","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"97:6:35"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"84:12:35"},"nodeType":"YulFunctionCall","src":"84:20:35"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"75:5:35"}]},{"body":{"nodeType":"YulBlock","src":"167:16:35","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"176:1:35","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"179:1:35","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"169:6:35"},"nodeType":"YulFunctionCall","src":"169:12:35"},"nodeType":"YulExpressionStatement","src":"169:12:35"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"126:5:35"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"137:5:35"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"152:3:35","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"157:1:35","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"148:3:35"},"nodeType":"YulFunctionCall","src":"148:11:35"},{"kind":"number","nodeType":"YulLiteral","src":"161:1:35","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"144:3:35"},"nodeType":"YulFunctionCall","src":"144:19:35"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"133:3:35"},"nodeType":"YulFunctionCall","src":"133:31:35"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"123:2:35"},"nodeType":"YulFunctionCall","src":"123:42:35"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"116:6:35"},"nodeType":"YulFunctionCall","src":"116:50:35"},"nodeType":"YulIf","src":"113:2:35"}]},"name":"abi_decode_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"44:6:35","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"55:5:35","type":""}],"src":"14:175:35"},{"body":{"nodeType":"YulBlock","src":"264:128:35","statements":[{"body":{"nodeType":"YulBlock","src":"310:26:35","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"319:6:35"},{"name":"value0","nodeType":"YulIdentifier","src":"327:6:35"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"312:6:35"},"nodeType":"YulFunctionCall","src":"312:22:35"},"nodeType":"YulExpressionStatement","src":"312:22:35"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"285:7:35"},{"name":"headStart","nodeType":"YulIdentifier","src":"294:9:35"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"281:3:35"},"nodeType":"YulFunctionCall","src":"281:23:35"},{"kind":"number","nodeType":"YulLiteral","src":"306:2:35","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"277:3:35"},"nodeType":"YulFunctionCall","src":"277:32:35"},"nodeType":"YulIf","src":"274:2:35"},{"nodeType":"YulAssignment","src":"345:41:35","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"376:9:35"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"355:20:35"},"nodeType":"YulFunctionCall","src":"355:31:35"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"345:6:35"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"230:9:35","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"241:7:35","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"253:6:35","type":""}],"src":"194:198:35"},{"body":{"nodeType":"YulBlock","src":"534:447:35","statements":[{"body":{"nodeType":"YulBlock","src":"581:26:35","statements":[{"expression":{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"590:6:35"},{"name":"value4","nodeType":"YulIdentifier","src":"598:6:35"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"583:6:35"},"nodeType":"YulFunctionCall","src":"583:22:35"},"nodeType":"YulExpressionStatement","src":"583:22:35"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"555:7:35"},{"name":"headStart","nodeType":"YulIdentifier","src":"564:9:35"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"551:3:35"},"nodeType":"YulFunctionCall","src":"551:23:35"},{"kind":"number","nodeType":"YulLiteral","src":"576:3:35","type":"","value":"160"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"547:3:35"},"nodeType":"YulFunctionCall","src":"547:33:35"},"nodeType":"YulIf","src":"544:2:35"},{"nodeType":"YulAssignment","src":"616:41:35","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"647:9:35"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"626:20:35"},"nodeType":"YulFunctionCall","src":"626:31:35"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"616:6:35"}]},{"nodeType":"YulAssignment","src":"666:50:35","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"701:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"712:2:35","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"697:3:35"},"nodeType":"YulFunctionCall","src":"697:18:35"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"676:20:35"},"nodeType":"YulFunctionCall","src":"676:40:35"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"666:6:35"}]},{"nodeType":"YulVariableDeclaration","src":"725:45:35","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"755:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"766:2:35","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"751:3:35"},"nodeType":"YulFunctionCall","src":"751:18:35"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"738:12:35"},"nodeType":"YulFunctionCall","src":"738:32:35"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"729:5:35","type":""}]},{"body":{"nodeType":"YulBlock","src":"822:26:35","statements":[{"expression":{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"831:6:35"},{"name":"value4","nodeType":"YulIdentifier","src":"839:6:35"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"824:6:35"},"nodeType":"YulFunctionCall","src":"824:22:35"},"nodeType":"YulExpressionStatement","src":"824:22:35"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"792:5:35"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"803:5:35"},{"kind":"number","nodeType":"YulLiteral","src":"810:8:35","type":"","value":"0xffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"799:3:35"},"nodeType":"YulFunctionCall","src":"799:20:35"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"789:2:35"},"nodeType":"YulFunctionCall","src":"789:31:35"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"782:6:35"},"nodeType":"YulFunctionCall","src":"782:39:35"},"nodeType":"YulIf","src":"779:2:35"},{"nodeType":"YulAssignment","src":"857:15:35","value":{"name":"value","nodeType":"YulIdentifier","src":"867:5:35"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"857:6:35"}]},{"nodeType":"YulAssignment","src":"881:42:35","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"908:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"919:2:35","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"904:3:35"},"nodeType":"YulFunctionCall","src":"904:18:35"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"891:12:35"},"nodeType":"YulFunctionCall","src":"891:32:35"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"881:6:35"}]},{"nodeType":"YulAssignment","src":"932:43:35","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"959:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"970:3:35","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"955:3:35"},"nodeType":"YulFunctionCall","src":"955:19:35"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"942:12:35"},"nodeType":"YulFunctionCall","src":"942:33:35"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"932:6:35"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint24t_uint256t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"468:9:35","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"479:7:35","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"491:6:35","type":""},{"name":"value1","nodeType":"YulTypedName","src":"499:6:35","type":""},{"name":"value2","nodeType":"YulTypedName","src":"507:6:35","type":""},{"name":"value3","nodeType":"YulTypedName","src":"515:6:35","type":""},{"name":"value4","nodeType":"YulTypedName","src":"523:6:35","type":""}],"src":"397:584:35"},{"body":{"nodeType":"YulBlock","src":"1073:179:35","statements":[{"body":{"nodeType":"YulBlock","src":"1119:26:35","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1128:6:35"},{"name":"value0","nodeType":"YulIdentifier","src":"1136:6:35"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1121:6:35"},"nodeType":"YulFunctionCall","src":"1121:22:35"},"nodeType":"YulExpressionStatement","src":"1121:22:35"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1094:7:35"},{"name":"headStart","nodeType":"YulIdentifier","src":"1103:9:35"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1090:3:35"},"nodeType":"YulFunctionCall","src":"1090:23:35"},{"kind":"number","nodeType":"YulLiteral","src":"1115:2:35","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1086:3:35"},"nodeType":"YulFunctionCall","src":"1086:32:35"},"nodeType":"YulIf","src":"1083:2:35"},{"nodeType":"YulAssignment","src":"1154:41:35","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1185:9:35"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"1164:20:35"},"nodeType":"YulFunctionCall","src":"1164:31:35"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1154:6:35"}]},{"nodeType":"YulAssignment","src":"1204:42:35","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1231:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"1242:2:35","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1227:3:35"},"nodeType":"YulFunctionCall","src":"1227:18:35"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1214:12:35"},"nodeType":"YulFunctionCall","src":"1214:32:35"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1204:6:35"}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1031:9:35","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1042:7:35","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1054:6:35","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1062:6:35","type":""}],"src":"986:266:35"},{"body":{"nodeType":"YulBlock","src":"1361:238:35","statements":[{"body":{"nodeType":"YulBlock","src":"1407:26:35","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1416:6:35"},{"name":"value0","nodeType":"YulIdentifier","src":"1424:6:35"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1409:6:35"},"nodeType":"YulFunctionCall","src":"1409:22:35"},"nodeType":"YulExpressionStatement","src":"1409:22:35"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1382:7:35"},{"name":"headStart","nodeType":"YulIdentifier","src":"1391:9:35"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1378:3:35"},"nodeType":"YulFunctionCall","src":"1378:23:35"},{"kind":"number","nodeType":"YulLiteral","src":"1403:2:35","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1374:3:35"},"nodeType":"YulFunctionCall","src":"1374:32:35"},"nodeType":"YulIf","src":"1371:2:35"},{"nodeType":"YulAssignment","src":"1442:41:35","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1473:9:35"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"1452:20:35"},"nodeType":"YulFunctionCall","src":"1452:31:35"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1442:6:35"}]},{"nodeType":"YulAssignment","src":"1492:42:35","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1519:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"1530:2:35","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1515:3:35"},"nodeType":"YulFunctionCall","src":"1515:18:35"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1502:12:35"},"nodeType":"YulFunctionCall","src":"1502:32:35"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1492:6:35"}]},{"nodeType":"YulAssignment","src":"1543:50:35","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1578:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"1589:2:35","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1574:3:35"},"nodeType":"YulFunctionCall","src":"1574:18:35"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"1553:20:35"},"nodeType":"YulFunctionCall","src":"1553:40:35"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"1543:6:35"}]}]},"name":"abi_decode_tuple_t_addresst_uint256t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1311:9:35","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1322:7:35","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1334:6:35","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1342:6:35","type":""},{"name":"value2","nodeType":"YulTypedName","src":"1350:6:35","type":""}],"src":"1257:342:35"},{"body":{"nodeType":"YulBlock","src":"1708:230:35","statements":[{"body":{"nodeType":"YulBlock","src":"1754:26:35","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1763:6:35"},{"name":"value0","nodeType":"YulIdentifier","src":"1771:6:35"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1756:6:35"},"nodeType":"YulFunctionCall","src":"1756:22:35"},"nodeType":"YulExpressionStatement","src":"1756:22:35"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1729:7:35"},{"name":"headStart","nodeType":"YulIdentifier","src":"1738:9:35"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1725:3:35"},"nodeType":"YulFunctionCall","src":"1725:23:35"},{"kind":"number","nodeType":"YulLiteral","src":"1750:2:35","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1721:3:35"},"nodeType":"YulFunctionCall","src":"1721:32:35"},"nodeType":"YulIf","src":"1718:2:35"},{"nodeType":"YulAssignment","src":"1789:33:35","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1812:9:35"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1799:12:35"},"nodeType":"YulFunctionCall","src":"1799:23:35"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1789:6:35"}]},{"nodeType":"YulAssignment","src":"1831:42:35","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1858:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"1869:2:35","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1854:3:35"},"nodeType":"YulFunctionCall","src":"1854:18:35"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1841:12:35"},"nodeType":"YulFunctionCall","src":"1841:32:35"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1831:6:35"}]},{"nodeType":"YulAssignment","src":"1882:50:35","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1917:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"1928:2:35","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1913:3:35"},"nodeType":"YulFunctionCall","src":"1913:18:35"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"1892:20:35"},"nodeType":"YulFunctionCall","src":"1892:40:35"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"1882:6:35"}]}]},"name":"abi_decode_tuple_t_bytes32t_uint256t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1658:9:35","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1669:7:35","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1681:6:35","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1689:6:35","type":""},{"name":"value2","nodeType":"YulTypedName","src":"1697:6:35","type":""}],"src":"1604:334:35"},{"body":{"nodeType":"YulBlock","src":"2024:113:35","statements":[{"body":{"nodeType":"YulBlock","src":"2070:26:35","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2079:6:35"},{"name":"value0","nodeType":"YulIdentifier","src":"2087:6:35"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2072:6:35"},"nodeType":"YulFunctionCall","src":"2072:22:35"},"nodeType":"YulExpressionStatement","src":"2072:22:35"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2045:7:35"},{"name":"headStart","nodeType":"YulIdentifier","src":"2054:9:35"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2041:3:35"},"nodeType":"YulFunctionCall","src":"2041:23:35"},{"kind":"number","nodeType":"YulLiteral","src":"2066:2:35","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2037:3:35"},"nodeType":"YulFunctionCall","src":"2037:32:35"},"nodeType":"YulIf","src":"2034:2:35"},{"nodeType":"YulAssignment","src":"2105:26:35","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2121:9:35"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2115:5:35"},"nodeType":"YulFunctionCall","src":"2115:16:35"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2105:6:35"}]}]},"name":"abi_decode_tuple_t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1990:9:35","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2001:7:35","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2013:6:35","type":""}],"src":"1943:194:35"},{"body":{"nodeType":"YulBlock","src":"2243:102:35","statements":[{"nodeType":"YulAssignment","src":"2253:26:35","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2265:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"2276:2:35","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2261:3:35"},"nodeType":"YulFunctionCall","src":"2261:18:35"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2253:4:35"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2295:9:35"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2310:6:35"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2326:3:35","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"2331:1:35","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2322:3:35"},"nodeType":"YulFunctionCall","src":"2322:11:35"},{"kind":"number","nodeType":"YulLiteral","src":"2335:1:35","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2318:3:35"},"nodeType":"YulFunctionCall","src":"2318:19:35"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2306:3:35"},"nodeType":"YulFunctionCall","src":"2306:32:35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2288:6:35"},"nodeType":"YulFunctionCall","src":"2288:51:35"},"nodeType":"YulExpressionStatement","src":"2288:51:35"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2212:9:35","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2223:6:35","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2234:4:35","type":""}],"src":"2142:203:35"},{"body":{"nodeType":"YulBlock","src":"2459:102:35","statements":[{"nodeType":"YulAssignment","src":"2469:26:35","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2481:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"2492:2:35","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2477:3:35"},"nodeType":"YulFunctionCall","src":"2477:18:35"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2469:4:35"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2511:9:35"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2526:6:35"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2542:3:35","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"2547:1:35","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2538:3:35"},"nodeType":"YulFunctionCall","src":"2538:11:35"},{"kind":"number","nodeType":"YulLiteral","src":"2551:1:35","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2534:3:35"},"nodeType":"YulFunctionCall","src":"2534:19:35"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2522:3:35"},"nodeType":"YulFunctionCall","src":"2522:32:35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2504:6:35"},"nodeType":"YulFunctionCall","src":"2504:51:35"},"nodeType":"YulExpressionStatement","src":"2504:51:35"}]},"name":"abi_encode_tuple_t_address_payable__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2428:9:35","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2439:6:35","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2450:4:35","type":""}],"src":"2350:211:35"},{"body":{"nodeType":"YulBlock","src":"2687:102:35","statements":[{"nodeType":"YulAssignment","src":"2697:26:35","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2709:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"2720:2:35","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2705:3:35"},"nodeType":"YulFunctionCall","src":"2705:18:35"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2697:4:35"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2739:9:35"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2754:6:35"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2770:3:35","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"2775:1:35","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2766:3:35"},"nodeType":"YulFunctionCall","src":"2766:11:35"},{"kind":"number","nodeType":"YulLiteral","src":"2779:1:35","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2762:3:35"},"nodeType":"YulFunctionCall","src":"2762:19:35"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2750:3:35"},"nodeType":"YulFunctionCall","src":"2750:32:35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2732:6:35"},"nodeType":"YulFunctionCall","src":"2732:51:35"},"nodeType":"YulExpressionStatement","src":"2732:51:35"}]},"name":"abi_encode_tuple_t_contract$_ISwapRouter_$2775__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2656:9:35","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2667:6:35","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2678:4:35","type":""}],"src":"2566:223:35"},{"body":{"nodeType":"YulBlock","src":"2968:166:35","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2985:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"2996:2:35","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2978:6:35"},"nodeType":"YulFunctionCall","src":"2978:21:35"},"nodeType":"YulExpressionStatement","src":"2978:21:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3019:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"3030:2:35","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3015:3:35"},"nodeType":"YulFunctionCall","src":"3015:18:35"},{"kind":"number","nodeType":"YulLiteral","src":"3035:2:35","type":"","value":"16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3008:6:35"},"nodeType":"YulFunctionCall","src":"3008:30:35"},"nodeType":"YulExpressionStatement","src":"3008:30:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3058:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"3069:2:35","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3054:3:35"},"nodeType":"YulFunctionCall","src":"3054:18:35"},{"kind":"string","nodeType":"YulLiteral","src":"3074:18:35","type":"","value":"Insufficient ETH"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3047:6:35"},"nodeType":"YulFunctionCall","src":"3047:46:35"},"nodeType":"YulExpressionStatement","src":"3047:46:35"},{"nodeType":"YulAssignment","src":"3102:26:35","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3114:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"3125:2:35","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3110:3:35"},"nodeType":"YulFunctionCall","src":"3110:18:35"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3102:4:35"}]}]},"name":"abi_encode_tuple_t_stringliteral_0bdfce708c38b38e49561819ad1e311f4e27ccdb7e08770846f15d78c1e72db1__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2945:9:35","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2959:4:35","type":""}],"src":"2794:340:35"},{"body":{"nodeType":"YulBlock","src":"3313:169:35","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3330:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"3341:2:35","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3323:6:35"},"nodeType":"YulFunctionCall","src":"3323:21:35"},"nodeType":"YulExpressionStatement","src":"3323:21:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3364:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"3375:2:35","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3360:3:35"},"nodeType":"YulFunctionCall","src":"3360:18:35"},{"kind":"number","nodeType":"YulLiteral","src":"3380:2:35","type":"","value":"19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3353:6:35"},"nodeType":"YulFunctionCall","src":"3353:30:35"},"nodeType":"YulExpressionStatement","src":"3353:30:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3403:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"3414:2:35","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3399:3:35"},"nodeType":"YulFunctionCall","src":"3399:18:35"},{"kind":"string","nodeType":"YulLiteral","src":"3419:21:35","type":"","value":"ETH value != amount"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3392:6:35"},"nodeType":"YulFunctionCall","src":"3392:49:35"},"nodeType":"YulExpressionStatement","src":"3392:49:35"},{"nodeType":"YulAssignment","src":"3450:26:35","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3462:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"3473:2:35","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3458:3:35"},"nodeType":"YulFunctionCall","src":"3458:18:35"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3450:4:35"}]}]},"name":"abi_encode_tuple_t_stringliteral_155ca343b43eb004a62c5519c0936d33ba631fef89c8fc3f40e43e9970e87f0b__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3290:9:35","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3304:4:35","type":""}],"src":"3139:343:35"},{"body":{"nodeType":"YulBlock","src":"3661:164:35","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3678:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"3689:2:35","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3671:6:35"},"nodeType":"YulFunctionCall","src":"3671:21:35"},"nodeType":"YulExpressionStatement","src":"3671:21:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3712:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"3723:2:35","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3708:3:35"},"nodeType":"YulFunctionCall","src":"3708:18:35"},{"kind":"number","nodeType":"YulLiteral","src":"3728:2:35","type":"","value":"14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3701:6:35"},"nodeType":"YulFunctionCall","src":"3701:30:35"},"nodeType":"YulExpressionStatement","src":"3701:30:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3751:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"3762:2:35","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3747:3:35"},"nodeType":"YulFunctionCall","src":"3747:18:35"},{"kind":"string","nodeType":"YulLiteral","src":"3767:16:35","type":"","value":"ETH not needed"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3740:6:35"},"nodeType":"YulFunctionCall","src":"3740:44:35"},"nodeType":"YulExpressionStatement","src":"3740:44:35"},{"nodeType":"YulAssignment","src":"3793:26:35","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3805:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"3816:2:35","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3801:3:35"},"nodeType":"YulFunctionCall","src":"3801:18:35"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3793:4:35"}]}]},"name":"abi_encode_tuple_t_stringliteral_25e7c0db2f301ef5ae08986719b3ba871467fa859b0b9ec77b02e0995dc6852e__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3638:9:35","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3652:4:35","type":""}],"src":"3487:338:35"},{"body":{"nodeType":"YulBlock","src":"4004:170:35","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4021:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"4032:2:35","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4014:6:35"},"nodeType":"YulFunctionCall","src":"4014:21:35"},"nodeType":"YulExpressionStatement","src":"4014:21:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4055:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"4066:2:35","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4051:3:35"},"nodeType":"YulFunctionCall","src":"4051:18:35"},{"kind":"number","nodeType":"YulLiteral","src":"4071:2:35","type":"","value":"20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4044:6:35"},"nodeType":"YulFunctionCall","src":"4044:30:35"},"nodeType":"YulExpressionStatement","src":"4044:30:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4094:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"4105:2:35","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4090:3:35"},"nodeType":"YulFunctionCall","src":"4090:18:35"},{"kind":"string","nodeType":"YulLiteral","src":"4110:22:35","type":"","value":"Insufficient balance"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4083:6:35"},"nodeType":"YulFunctionCall","src":"4083:50:35"},"nodeType":"YulExpressionStatement","src":"4083:50:35"},{"nodeType":"YulAssignment","src":"4142:26:35","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4154:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"4165:2:35","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4150:3:35"},"nodeType":"YulFunctionCall","src":"4150:18:35"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4142:4:35"}]}]},"name":"abi_encode_tuple_t_stringliteral_47533c3652efd02135ecc34b3fac8efc7b14bf0618b9392fd6e044a3d8a6eef5__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3981:9:35","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3995:4:35","type":""}],"src":"3830:344:35"},{"body":{"nodeType":"YulBlock","src":"4353:167:35","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4370:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"4381:2:35","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4363:6:35"},"nodeType":"YulFunctionCall","src":"4363:21:35"},"nodeType":"YulExpressionStatement","src":"4363:21:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4404:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"4415:2:35","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4400:3:35"},"nodeType":"YulFunctionCall","src":"4400:18:35"},{"kind":"number","nodeType":"YulLiteral","src":"4420:2:35","type":"","value":"17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4393:6:35"},"nodeType":"YulFunctionCall","src":"4393:30:35"},"nodeType":"YulExpressionStatement","src":"4393:30:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4443:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"4454:2:35","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4439:3:35"},"nodeType":"YulFunctionCall","src":"4439:18:35"},{"kind":"string","nodeType":"YulLiteral","src":"4459:19:35","type":"","value":"Insufficient WETH"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4432:6:35"},"nodeType":"YulFunctionCall","src":"4432:47:35"},"nodeType":"YulExpressionStatement","src":"4432:47:35"},{"nodeType":"YulAssignment","src":"4488:26:35","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4500:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"4511:2:35","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4496:3:35"},"nodeType":"YulFunctionCall","src":"4496:18:35"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4488:4:35"}]}]},"name":"abi_encode_tuple_t_stringliteral_60de758d3296c7eae9cdf7e88b7058fbf54b8138dae3844858ca011a2b517bef__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4330:9:35","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4344:4:35","type":""}],"src":"4179:341:35"},{"body":{"nodeType":"YulBlock","src":"4699:164:35","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4716:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"4727:2:35","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4709:6:35"},"nodeType":"YulFunctionCall","src":"4709:21:35"},"nodeType":"YulExpressionStatement","src":"4709:21:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4750:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"4761:2:35","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4746:3:35"},"nodeType":"YulFunctionCall","src":"4746:18:35"},{"kind":"number","nodeType":"YulLiteral","src":"4766:2:35","type":"","value":"14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4739:6:35"},"nodeType":"YulFunctionCall","src":"4739:30:35"},"nodeType":"YulExpressionStatement","src":"4739:30:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4789:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"4800:2:35","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4785:3:35"},"nodeType":"YulFunctionCall","src":"4785:18:35"},{"kind":"string","nodeType":"YulLiteral","src":"4805:16:35","type":"","value":"Invalid action"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4778:6:35"},"nodeType":"YulFunctionCall","src":"4778:44:35"},"nodeType":"YulExpressionStatement","src":"4778:44:35"},{"nodeType":"YulAssignment","src":"4831:26:35","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4843:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"4854:2:35","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4839:3:35"},"nodeType":"YulFunctionCall","src":"4839:18:35"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4831:4:35"}]}]},"name":"abi_encode_tuple_t_stringliteral_6f2677d92d5145565e0e2d97bb91aa8fab6e90fdadc635557da200934c599b12__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4676:9:35","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4690:4:35","type":""}],"src":"4525:338:35"},{"body":{"nodeType":"YulBlock","src":"5042:167:35","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5059:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"5070:2:35","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5052:6:35"},"nodeType":"YulFunctionCall","src":"5052:21:35"},"nodeType":"YulExpressionStatement","src":"5052:21:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5093:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"5104:2:35","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5089:3:35"},"nodeType":"YulFunctionCall","src":"5089:18:35"},{"kind":"number","nodeType":"YulLiteral","src":"5109:2:35","type":"","value":"17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5082:6:35"},"nodeType":"YulFunctionCall","src":"5082:30:35"},"nodeType":"YulExpressionStatement","src":"5082:30:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5132:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"5143:2:35","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5128:3:35"},"nodeType":"YulFunctionCall","src":"5128:18:35"},{"kind":"string","nodeType":"YulLiteral","src":"5148:19:35","type":"","value":"Invalid recipient"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5121:6:35"},"nodeType":"YulFunctionCall","src":"5121:47:35"},"nodeType":"YulExpressionStatement","src":"5121:47:35"},{"nodeType":"YulAssignment","src":"5177:26:35","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5189:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"5200:2:35","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5185:3:35"},"nodeType":"YulFunctionCall","src":"5185:18:35"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5177:4:35"}]}]},"name":"abi_encode_tuple_t_stringliteral_a6664b97aef19c137d44ec81dfc0c0cc28a2c3470357b125208345a2c048425d__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5019:9:35","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5033:4:35","type":""}],"src":"4868:341:35"},{"body":{"nodeType":"YulBlock","src":"5388:173:35","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5405:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"5416:2:35","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5398:6:35"},"nodeType":"YulFunctionCall","src":"5398:21:35"},"nodeType":"YulExpressionStatement","src":"5398:21:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5439:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"5450:2:35","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5435:3:35"},"nodeType":"YulFunctionCall","src":"5435:18:35"},{"kind":"number","nodeType":"YulLiteral","src":"5455:2:35","type":"","value":"23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5428:6:35"},"nodeType":"YulFunctionCall","src":"5428:30:35"},"nodeType":"YulExpressionStatement","src":"5428:30:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5478:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"5489:2:35","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5474:3:35"},"nodeType":"YulFunctionCall","src":"5474:18:35"},{"kind":"string","nodeType":"YulLiteral","src":"5494:25:35","type":"","value":"Use sweepToken function"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5467:6:35"},"nodeType":"YulFunctionCall","src":"5467:53:35"},"nodeType":"YulExpressionStatement","src":"5467:53:35"},{"nodeType":"YulAssignment","src":"5529:26:35","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5541:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"5552:2:35","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5537:3:35"},"nodeType":"YulFunctionCall","src":"5537:18:35"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5529:4:35"}]}]},"name":"abi_encode_tuple_t_stringliteral_eb4c32512a6e37ddf89117e5fa2bc93babf8929e6c149681ae9eef334ffbd0dc__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5365:9:35","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5379:4:35","type":""}],"src":"5214:347:35"},{"body":{"nodeType":"YulBlock","src":"5747:614:35","statements":[{"nodeType":"YulAssignment","src":"5757:27:35","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5769:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"5780:3:35","type":"","value":"256"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5765:3:35"},"nodeType":"YulFunctionCall","src":"5765:19:35"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5757:4:35"}]},{"nodeType":"YulVariableDeclaration","src":"5793:29:35","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5811:3:35","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"5816:1:35","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"5807:3:35"},"nodeType":"YulFunctionCall","src":"5807:11:35"},{"kind":"number","nodeType":"YulLiteral","src":"5820:1:35","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5803:3:35"},"nodeType":"YulFunctionCall","src":"5803:19:35"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"5797:2:35","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5838:9:35"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"5859:6:35"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5853:5:35"},"nodeType":"YulFunctionCall","src":"5853:13:35"},{"name":"_1","nodeType":"YulIdentifier","src":"5868:2:35"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5849:3:35"},"nodeType":"YulFunctionCall","src":"5849:22:35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5831:6:35"},"nodeType":"YulFunctionCall","src":"5831:41:35"},"nodeType":"YulExpressionStatement","src":"5831:41:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5892:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"5903:4:35","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5888:3:35"},"nodeType":"YulFunctionCall","src":"5888:20:35"},{"arguments":[{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"5924:6:35"},{"kind":"number","nodeType":"YulLiteral","src":"5932:4:35","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5920:3:35"},"nodeType":"YulFunctionCall","src":"5920:17:35"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5914:5:35"},"nodeType":"YulFunctionCall","src":"5914:24:35"},{"name":"_1","nodeType":"YulIdentifier","src":"5940:2:35"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5910:3:35"},"nodeType":"YulFunctionCall","src":"5910:33:35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5881:6:35"},"nodeType":"YulFunctionCall","src":"5881:63:35"},"nodeType":"YulExpressionStatement","src":"5881:63:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5964:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"5975:4:35","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5960:3:35"},"nodeType":"YulFunctionCall","src":"5960:20:35"},{"arguments":[{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"5996:6:35"},{"kind":"number","nodeType":"YulLiteral","src":"6004:4:35","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5992:3:35"},"nodeType":"YulFunctionCall","src":"5992:17:35"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5986:5:35"},"nodeType":"YulFunctionCall","src":"5986:24:35"},{"kind":"number","nodeType":"YulLiteral","src":"6012:8:35","type":"","value":"0xffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5982:3:35"},"nodeType":"YulFunctionCall","src":"5982:39:35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5953:6:35"},"nodeType":"YulFunctionCall","src":"5953:69:35"},"nodeType":"YulExpressionStatement","src":"5953:69:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6042:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"6053:4:35","type":"","value":"0x60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6038:3:35"},"nodeType":"YulFunctionCall","src":"6038:20:35"},{"arguments":[{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"6074:6:35"},{"kind":"number","nodeType":"YulLiteral","src":"6082:4:35","type":"","value":"0x60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6070:3:35"},"nodeType":"YulFunctionCall","src":"6070:17:35"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6064:5:35"},"nodeType":"YulFunctionCall","src":"6064:24:35"},{"name":"_1","nodeType":"YulIdentifier","src":"6090:2:35"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6060:3:35"},"nodeType":"YulFunctionCall","src":"6060:33:35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6031:6:35"},"nodeType":"YulFunctionCall","src":"6031:63:35"},"nodeType":"YulExpressionStatement","src":"6031:63:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6114:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"6125:4:35","type":"","value":"0x80"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6110:3:35"},"nodeType":"YulFunctionCall","src":"6110:20:35"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"6142:6:35"},{"kind":"number","nodeType":"YulLiteral","src":"6150:4:35","type":"","value":"0x80"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6138:3:35"},"nodeType":"YulFunctionCall","src":"6138:17:35"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6132:5:35"},"nodeType":"YulFunctionCall","src":"6132:24:35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6103:6:35"},"nodeType":"YulFunctionCall","src":"6103:54:35"},"nodeType":"YulExpressionStatement","src":"6103:54:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6177:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"6188:4:35","type":"","value":"0xa0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6173:3:35"},"nodeType":"YulFunctionCall","src":"6173:20:35"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"6205:6:35"},{"kind":"number","nodeType":"YulLiteral","src":"6213:4:35","type":"","value":"0xa0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6201:3:35"},"nodeType":"YulFunctionCall","src":"6201:17:35"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6195:5:35"},"nodeType":"YulFunctionCall","src":"6195:24:35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6166:6:35"},"nodeType":"YulFunctionCall","src":"6166:54:35"},"nodeType":"YulExpressionStatement","src":"6166:54:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6240:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"6251:4:35","type":"","value":"0xc0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6236:3:35"},"nodeType":"YulFunctionCall","src":"6236:20:35"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"6268:6:35"},{"kind":"number","nodeType":"YulLiteral","src":"6276:4:35","type":"","value":"0xc0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6264:3:35"},"nodeType":"YulFunctionCall","src":"6264:17:35"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6258:5:35"},"nodeType":"YulFunctionCall","src":"6258:24:35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6229:6:35"},"nodeType":"YulFunctionCall","src":"6229:54:35"},"nodeType":"YulExpressionStatement","src":"6229:54:35"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6303:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"6314:4:35","type":"","value":"0xe0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6299:3:35"},"nodeType":"YulFunctionCall","src":"6299:20:35"},{"arguments":[{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"6335:6:35"},{"kind":"number","nodeType":"YulLiteral","src":"6343:4:35","type":"","value":"0xe0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6331:3:35"},"nodeType":"YulFunctionCall","src":"6331:17:35"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6325:5:35"},"nodeType":"YulFunctionCall","src":"6325:24:35"},{"name":"_1","nodeType":"YulIdentifier","src":"6351:2:35"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6321:3:35"},"nodeType":"YulFunctionCall","src":"6321:33:35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6292:6:35"},"nodeType":"YulFunctionCall","src":"6292:63:35"},"nodeType":"YulExpressionStatement","src":"6292:63:35"}]},"name":"abi_encode_tuple_t_struct$_ExactInputSingleParams_$2703_memory_ptr__to_t_struct$_ExactInputSingleParams_$2703_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5716:9:35","type":""},{"name":"value0","nodeType":"YulTypedName","src":"5727:6:35","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5738:4:35","type":""}],"src":"5566:795:35"},{"body":{"nodeType":"YulBlock","src":"6467:76:35","statements":[{"nodeType":"YulAssignment","src":"6477:26:35","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6489:9:35"},{"kind":"number","nodeType":"YulLiteral","src":"6500:2:35","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6485:3:35"},"nodeType":"YulFunctionCall","src":"6485:18:35"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6477:4:35"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6519:9:35"},{"name":"value0","nodeType":"YulIdentifier","src":"6530:6:35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6512:6:35"},"nodeType":"YulFunctionCall","src":"6512:25:35"},"nodeType":"YulExpressionStatement","src":"6512:25:35"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6436:9:35","type":""},{"name":"value0","nodeType":"YulTypedName","src":"6447:6:35","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6458:4:35","type":""}],"src":"6366:177:35"}]},"contents":"{\n    { }\n    function abi_decode_t_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := abi_decode_t_address(headStart)\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint24t_uint256t_uint256(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(value4, value4) }\n        value0 := abi_decode_t_address(headStart)\n        value1 := abi_decode_t_address(add(headStart, 32))\n        let value := calldataload(add(headStart, 64))\n        if iszero(eq(value, and(value, 0xffffff))) { revert(value4, value4) }\n        value2 := value\n        value3 := calldataload(add(headStart, 96))\n        value4 := calldataload(add(headStart, 128))\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value0, value0) }\n        value0 := abi_decode_t_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_addresst_uint256t_address(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(value0, value0) }\n        value0 := abi_decode_t_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n        value2 := abi_decode_t_address(add(headStart, 64))\n    }\n    function abi_decode_tuple_t_bytes32t_uint256t_address(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(value0, value0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n        value2 := abi_decode_t_address(add(headStart, 64))\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := mload(headStart)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_address_payable__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_contract$_ISwapRouter_$2775__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_stringliteral_0bdfce708c38b38e49561819ad1e311f4e27ccdb7e08770846f15d78c1e72db1__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 16)\n        mstore(add(headStart, 64), \"Insufficient ETH\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_155ca343b43eb004a62c5519c0936d33ba631fef89c8fc3f40e43e9970e87f0b__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 19)\n        mstore(add(headStart, 64), \"ETH value != amount\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_25e7c0db2f301ef5ae08986719b3ba871467fa859b0b9ec77b02e0995dc6852e__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 14)\n        mstore(add(headStart, 64), \"ETH not needed\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_47533c3652efd02135ecc34b3fac8efc7b14bf0618b9392fd6e044a3d8a6eef5__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 20)\n        mstore(add(headStart, 64), \"Insufficient balance\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_60de758d3296c7eae9cdf7e88b7058fbf54b8138dae3844858ca011a2b517bef__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 17)\n        mstore(add(headStart, 64), \"Insufficient WETH\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_6f2677d92d5145565e0e2d97bb91aa8fab6e90fdadc635557da200934c599b12__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 14)\n        mstore(add(headStart, 64), \"Invalid action\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_a6664b97aef19c137d44ec81dfc0c0cc28a2c3470357b125208345a2c048425d__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 17)\n        mstore(add(headStart, 64), \"Invalid recipient\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_eb4c32512a6e37ddf89117e5fa2bc93babf8929e6c149681ae9eef334ffbd0dc__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 23)\n        mstore(add(headStart, 64), \"Use sweepToken function\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_struct$_ExactInputSingleParams_$2703_memory_ptr__to_t_struct$_ExactInputSingleParams_$2703_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 256)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(mload(value0), _1))\n        mstore(add(headStart, 0x20), and(mload(add(value0, 0x20)), _1))\n        mstore(add(headStart, 0x40), and(mload(add(value0, 0x40)), 0xffffff))\n        mstore(add(headStart, 0x60), and(mload(add(value0, 0x60)), _1))\n        mstore(add(headStart, 0x80), mload(add(value0, 0x80)))\n        mstore(add(headStart, 0xa0), mload(add(value0, 0xa0)))\n        mstore(add(headStart, 0xc0), mload(add(value0, 0xc0)))\n        mstore(add(headStart, 0xe0), and(mload(add(value0, 0xe0)), _1))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n}","id":35,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"5240":[{"length":32,"start":1524},{"length":32,"start":1652},{"length":32,"start":1804},{"length":32,"start":2574}],"5242":[{"length":32,"start":861},{"length":32,"start":1051},{"length":32,"start":1222},{"length":32,"start":2017},{"length":32,"start":2106},{"length":32,"start":2351},{"length":32,"start":3362},{"length":32,"start":3444},{"length":32,"start":3634}]},"linkReferences":{},"object":"6080604052600436106100a05760003560e01c80638da5cb5b116100645780638da5cb5b1461014e578063c31c9c0714610163578063df2ab5bb14610178578063f2fde38b14610198578063f3fef3a3146101b8578063f8b2cb4f146101d8576100a7565b80632f8b3eed146100ac5780633bf237d5146100ce57806347e7ef24146101045780634aa4a4fc14610117578063715018a614610139576100a7565b366100a757005b600080fd5b3480156100b857600080fd5b506100cc6100c73660046115e3565b6101f8565b005b3480156100da57600080fd5b506100ee6100e9366004611522565b61056c565b6040516100fb9190611805565b60405180910390f35b6100cc61011236600461157f565b61077d565b34801561012357600080fd5b5061012c61092d565b6040516100fb9190611626565b34801561014557600080fd5b506100cc610951565b34801561015a57600080fd5b5061012c6109fd565b34801561016f57600080fd5b5061012c610a0c565b34801561018457600080fd5b506100cc6101933660046115a8565b610a30565b3480156101a457600080fd5b506100cc6101b3366004611508565b610bbc565b3480156101c457600080fd5b506100cc6101d336600461157f565b610cbe565b3480156101e457600080fd5b506100ee6101f3366004611508565b610fc2565b61020061105e565b6001600160a01b03166102116109fd565b6001600160a01b03161461025a576040805162461bcd60e51b8152602060048201819052602482015260008051602061187b833981519152604482015290519081900360640190fd5b60006001600160a01b038216156102715781610273565b335b9050690a48a8caa9c88be8aa8960b31b84141561032d5747838110156102b45760405162461bcd60e51b81526004016102ab9061163a565b60405180910390fd5b6040516001600160a01b0383169082156108fc029083906000818181858888f193505050501580156102ea573d6000803e3d6000fd5b5060006001600160a01b031660006001600160a01b03168660008051602061180f8339815191528460405161031f9190611805565b60405180910390a450610566565b6a0aa9caea482a0beae8aa8960ab1b84141561050c576040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190610392903090600401611626565b60206040518083038186803b1580156103aa57600080fd5b505afa1580156103be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103e2919061160e565b9050838110156104045760405162461bcd60e51b81526004016102ab906116e7565b604051632e1a7d4d60e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690632e1a7d4d90610450908490600401611805565b600060405180830381600087803b15801561046a57600080fd5b505af115801561047e573d6000803e3d6000fd5b50506040516001600160a01b038516925083156108fc02915083906000818181858888f193505050501580156104b8573d6000803e3d6000fd5b5060006001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168660008051602061180f8339815191528460405161031f9190611805565b6a29aba2a2a82faa27a5a2a760a91b8414801561053157506001600160a01b03821615155b1561054e5760405162461bcd60e51b81526004016102ab90611765565b60405162461bcd60e51b81526004016102ab90611712565b50505050565b600061057661105e565b6001600160a01b03166105876109fd565b6001600160a01b0316146105d0576040805162461bcd60e51b8152602060048201819052602482015260008051602061187b833981519152604482015290519081900360640190fd5b6105e56001600160a01b038716333086611062565b6106196001600160a01b0387167f0000000000000000000000000000000000000000000000000000000000000000856110bc565b60408051610100810182526001600160a01b038089168252878116602083015262ffffff87168284015230606083015242608083015260a0820186905260c08201859052600060e0830152915163414bf38960e01b815290917f0000000000000000000000000000000000000000000000000000000000000000169063414bf389906106a990849060040161179c565b602060405180830381600087803b1580156106c357600080fd5b505af11580156106d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106fb919061160e565b91506107326001600160a01b0388167f000000000000000000000000000000000000000000000000000000000000000060006110bc565b856001600160a01b0316876001600160a01b0316630535741560e41b60008051602061180f8339815191528560405161076b9190611805565b60405180910390a45095945050505050565b61078561105e565b6001600160a01b03166107966109fd565b6001600160a01b0316146107df576040805162461bcd60e51b8152602060048201819052602482015260008051602061187b833981519152604482015290519081900360640190fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031614156108b1578034146108385760405162461bcd60e51b81526004016102ab90611664565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b15801561089357600080fd5b505af11580156108a7573d6000803e3d6000fd5b50505050506108e4565b34156108cf5760405162461bcd60e51b81526004016102ab90611691565b6108e46001600160a01b038316333084611062565b60006001600160a01b0316826001600160a01b03166611115413d4d25560ca1b60008051602061180f833981519152846040516109219190611805565b60405180910390a45050565b7f000000000000000000000000000000000000000000000000000000000000000081565b61095961105e565b6001600160a01b031661096a6109fd565b6001600160a01b0316146109b3576040805162461bcd60e51b8152602060048201819052602482015260008051602061187b833981519152604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031690565b7f000000000000000000000000000000000000000000000000000000000000000081565b610a3861105e565b6001600160a01b0316610a496109fd565b6001600160a01b031614610a92576040805162461bcd60e51b8152602060048201819052602482015260008051602061187b833981519152604482015290519081900360640190fd5b6001600160a01b038116610ab85760405162461bcd60e51b81526004016102ab9061173a565b6040516370a0823160e01b81526000906001600160a01b038516906370a0823190610ae7903090600401611626565b60206040518083038186803b158015610aff57600080fd5b505afa158015610b13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b37919061160e565b905082811015610b595760405162461bcd60e51b81526004016102ab906116b9565b610b6d6001600160a01b03851683836111d4565b60006001600160a01b0316846001600160a01b03166a29aba2a2a82faa27a5a2a760a91b60008051602061180f83398151915284604051610bae9190611805565b60405180910390a450505050565b610bc461105e565b6001600160a01b0316610bd56109fd565b6001600160a01b031614610c1e576040805162461bcd60e51b8152602060048201819052602482015260008051602061187b833981519152604482015290519081900360640190fd5b6001600160a01b038116610c635760405162461bcd60e51b815260040180806020018281038252602681526020018061182f6026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b610cc661105e565b6001600160a01b0316610cd76109fd565b6001600160a01b031614610d20576040805162461bcd60e51b8152602060048201819052602482015260008051602061187b833981519152604482015290519081900360640190fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b03161415610ecd576040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190610da9903090600401611626565b60206040518083038186803b158015610dc157600080fd5b505afa158015610dd5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610df9919061160e565b905081811015610e1b5760405162461bcd60e51b81526004016102ab906116e7565b604051632e1a7d4d60e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690632e1a7d4d90610e67908590600401611805565b600060405180830381600087803b158015610e8157600080fd5b505af1158015610e95573d6000803e3d6000fd5b505060405133925084156108fc02915084906000818181858888f19350505050158015610ec6573d6000803e3d6000fd5b5050610f84565b6040516370a0823160e01b81526000906001600160a01b038416906370a0823190610efc903090600401611626565b60206040518083038186803b158015610f1457600080fd5b505afa158015610f28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f4c919061160e565b905081811015610f6e5760405162461bcd60e51b81526004016102ab906116b9565b610f826001600160a01b03841633846111d4565b505b60006001600160a01b0316826001600160a01b031667574954484452415760c01b60008051602061180f833981519152846040516109219190611805565b60006001600160a01b03821615611054576040516370a0823160e01b81526001600160a01b038316906370a0823190610fff903090600401611626565b60206040518083038186803b15801561101757600080fd5b505afa15801561102b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061104f919061160e565b611056565b475b90505b919050565b3390565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052610566908590611222565b801580611142575060408051636eb1769f60e11b81523060048201526001600160a01b03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b15801561111457600080fd5b505afa158015611128573d6000803e3d6000fd5b505050506040513d602081101561113e57600080fd5b5051155b61117d5760405162461bcd60e51b81526004018080602001828103825260368152602001806118c56036913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b1790526111cf908490611222565b505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526111cf9084905b6000611277826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166112d39092919063ffffffff16565b8051909150156111cf5780806020019051602081101561129657600080fd5b50516111cf5760405162461bcd60e51b815260040180806020018281038252602a81526020018061189b602a913960400191505060405180910390fd5b60606112e284846000856112ec565b90505b9392505050565b60608247101561132d5760405162461bcd60e51b81526004018080602001828103825260268152602001806118556026913960400191505060405180910390fd5b61133685611447565b611387576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b600080866001600160a01b031685876040518082805190602001908083835b602083106113c55780518252601f1990920191602091820191016113a6565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114611427576040519150601f19603f3d011682016040523d82523d6000602084013e61142c565b606091505b509150915061143c82828661144d565b979650505050505050565b3b151590565b6060831561145c5750816112e5565b82511561146c5782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156114b657818101518382015260200161149e565b50505050905090810190601f1680156114e35780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b80356001600160a01b038116811461105957600080fd5b600060208284031215611519578081fd5b6112e5826114f1565b600080600080600060a08688031215611539578081fd5b611542866114f1565b9450611550602087016114f1565b9350604086013562ffffff81168114611567578182fd5b94979396509394606081013594506080013592915050565b60008060408385031215611591578182fd5b61159a836114f1565b946020939093013593505050565b6000806000606084860312156115bc578283fd5b6115c5846114f1565b9250602084013591506115da604085016114f1565b90509250925092565b6000806000606084860312156115f7578283fd5b83359250602084013591506115da604085016114f1565b60006020828403121561161f578081fd5b5051919050565b6001600160a01b0391909116815260200190565b60208082526010908201526f092dce6eaccccd2c6d2cadce8408aa8960831b604082015260600190565b602080825260139082015272115512081d985b1d5948084f48185b5bdd5b9d606a1b604082015260600190565b6020808252600e908201526d115512081b9bdd081b995959195960921b604082015260600190565b602080825260149082015273496e73756666696369656e742062616c616e636560601b604082015260600190565b602080825260119082015270092dce6eaccccd2c6d2cadce840ae8aa89607b1b604082015260600190565b6020808252600e908201526d24b73b30b634b21030b1ba34b7b760911b604082015260600190565b602080825260119082015270125b9d985b1a59081c9958da5c1a595b9d607a1b604082015260600190565b60208082526017908201527f557365207377656570546f6b656e2066756e6374696f6e000000000000000000604082015260600190565b81516001600160a01b03908116825260208084015182169083015260408084015162ffffff16908301526060808401518216908301526080808401519083015260a0838101519083015260c0808401519083015260e09283015116918101919091526101000190565b9081526020019056fe3ff326c9f9e47cf4dd5cc18acb5f11594345ca27574799f6172a584dab8da09e4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65725361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365a2646970667358221220f22335b0071857f408e38f3fe3ac384683ee46a8e5ecb2e2d829962b76b8e2ad64736f6c63430007060033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA0 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0x64 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x14E JUMPI DUP1 PUSH4 0xC31C9C07 EQ PUSH2 0x163 JUMPI DUP1 PUSH4 0xDF2AB5BB EQ PUSH2 0x178 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x198 JUMPI DUP1 PUSH4 0xF3FEF3A3 EQ PUSH2 0x1B8 JUMPI DUP1 PUSH4 0xF8B2CB4F EQ PUSH2 0x1D8 JUMPI PUSH2 0xA7 JUMP JUMPDEST DUP1 PUSH4 0x2F8B3EED EQ PUSH2 0xAC JUMPI DUP1 PUSH4 0x3BF237D5 EQ PUSH2 0xCE JUMPI DUP1 PUSH4 0x47E7EF24 EQ PUSH2 0x104 JUMPI DUP1 PUSH4 0x4AA4A4FC EQ PUSH2 0x117 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x139 JUMPI PUSH2 0xA7 JUMP JUMPDEST CALLDATASIZE PUSH2 0xA7 JUMPI STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xCC PUSH2 0xC7 CALLDATASIZE PUSH1 0x4 PUSH2 0x15E3 JUMP JUMPDEST PUSH2 0x1F8 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xDA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xEE PUSH2 0xE9 CALLDATASIZE PUSH1 0x4 PUSH2 0x1522 JUMP JUMPDEST PUSH2 0x56C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xFB SWAP2 SWAP1 PUSH2 0x1805 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xCC PUSH2 0x112 CALLDATASIZE PUSH1 0x4 PUSH2 0x157F JUMP JUMPDEST PUSH2 0x77D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x123 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x12C PUSH2 0x92D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xFB SWAP2 SWAP1 PUSH2 0x1626 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x145 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xCC PUSH2 0x951 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x15A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x12C PUSH2 0x9FD JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x16F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x12C PUSH2 0xA0C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x184 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xCC PUSH2 0x193 CALLDATASIZE PUSH1 0x4 PUSH2 0x15A8 JUMP JUMPDEST PUSH2 0xA30 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xCC PUSH2 0x1B3 CALLDATASIZE PUSH1 0x4 PUSH2 0x1508 JUMP JUMPDEST PUSH2 0xBBC JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xCC PUSH2 0x1D3 CALLDATASIZE PUSH1 0x4 PUSH2 0x157F JUMP JUMPDEST PUSH2 0xCBE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1E4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xEE PUSH2 0x1F3 CALLDATASIZE PUSH1 0x4 PUSH2 0x1508 JUMP JUMPDEST PUSH2 0xFC2 JUMP JUMPDEST PUSH2 0x200 PUSH2 0x105E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x211 PUSH2 0x9FD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x25A JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x187B DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND ISZERO PUSH2 0x271 JUMPI DUP2 PUSH2 0x273 JUMP JUMPDEST CALLER JUMPDEST SWAP1 POP PUSH10 0xA48A8CAA9C88BE8AA89 PUSH1 0xB3 SHL DUP5 EQ ISZERO PUSH2 0x32D JUMPI SELFBALANCE DUP4 DUP2 LT ISZERO PUSH2 0x2B4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2AB SWAP1 PUSH2 0x163A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 DUP3 ISZERO PUSH2 0x8FC MUL SWAP1 DUP4 SWAP1 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x2EA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x180F DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP5 PUSH1 0x40 MLOAD PUSH2 0x31F SWAP2 SWAP1 PUSH2 0x1805 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP PUSH2 0x566 JUMP JUMPDEST PUSH11 0xAA9CAEA482A0BEAE8AA89 PUSH1 0xAB SHL DUP5 EQ ISZERO PUSH2 0x50C JUMPI PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH2 0x392 SWAP1 ADDRESS SWAP1 PUSH1 0x4 ADD PUSH2 0x1626 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3BE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3E2 SWAP2 SWAP1 PUSH2 0x160E JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x404 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2AB SWAP1 PUSH2 0x16E7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x2E1A7D4D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND SWAP1 PUSH4 0x2E1A7D4D SWAP1 PUSH2 0x450 SWAP1 DUP5 SWAP1 PUSH1 0x4 ADD PUSH2 0x1805 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x46A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x47E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP3 POP DUP4 ISZERO PUSH2 0x8FC MUL SWAP2 POP DUP4 SWAP1 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x4B8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x180F DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP5 PUSH1 0x40 MLOAD PUSH2 0x31F SWAP2 SWAP1 PUSH2 0x1805 JUMP JUMPDEST PUSH11 0x29ABA2A2A82FAA27A5A2A7 PUSH1 0xA9 SHL DUP5 EQ DUP1 ISZERO PUSH2 0x531 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND ISZERO ISZERO JUMPDEST ISZERO PUSH2 0x54E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2AB SWAP1 PUSH2 0x1765 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2AB SWAP1 PUSH2 0x1712 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x576 PUSH2 0x105E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x587 PUSH2 0x9FD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x5D0 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x187B DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0x5E5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND CALLER ADDRESS DUP7 PUSH2 0x1062 JUMP JUMPDEST PUSH2 0x619 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH32 0x0 DUP6 PUSH2 0x10BC JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH2 0x100 DUP2 ADD DUP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP10 AND DUP3 MSTORE DUP8 DUP2 AND PUSH1 0x20 DUP4 ADD MSTORE PUSH3 0xFFFFFF DUP8 AND DUP3 DUP5 ADD MSTORE ADDRESS PUSH1 0x60 DUP4 ADD MSTORE TIMESTAMP PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP3 ADD DUP7 SWAP1 MSTORE PUSH1 0xC0 DUP3 ADD DUP6 SWAP1 MSTORE PUSH1 0x0 PUSH1 0xE0 DUP4 ADD MSTORE SWAP2 MLOAD PUSH4 0x414BF389 PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 SWAP2 PUSH32 0x0 AND SWAP1 PUSH4 0x414BF389 SWAP1 PUSH2 0x6A9 SWAP1 DUP5 SWAP1 PUSH1 0x4 ADD PUSH2 0x179C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x6D7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x6FB SWAP2 SWAP1 PUSH2 0x160E JUMP JUMPDEST SWAP2 POP PUSH2 0x732 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND PUSH32 0x0 PUSH1 0x0 PUSH2 0x10BC JUMP JUMPDEST DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x5357415 PUSH1 0xE4 SHL PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x180F DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP6 PUSH1 0x40 MLOAD PUSH2 0x76B SWAP2 SWAP1 PUSH2 0x1805 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH2 0x785 PUSH2 0x105E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x796 PUSH2 0x9FD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x7DF JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x187B DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x8B1 JUMPI DUP1 CALLVALUE EQ PUSH2 0x838 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2AB SWAP1 PUSH2 0x1664 JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD0E30DB0 DUP3 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x893 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x8A7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP PUSH2 0x8E4 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 0x8CF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2AB SWAP1 PUSH2 0x1691 JUMP JUMPDEST PUSH2 0x8E4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND CALLER ADDRESS DUP5 PUSH2 0x1062 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH7 0x11115413D4D255 PUSH1 0xCA SHL PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x180F DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP5 PUSH1 0x40 MLOAD PUSH2 0x921 SWAP2 SWAP1 PUSH2 0x1805 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x959 PUSH2 0x105E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x96A PUSH2 0x9FD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x9B3 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x187B DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP4 SWAP1 LOG3 PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0xA38 PUSH2 0x105E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xA49 PUSH2 0x9FD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xA92 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x187B DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xAB8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2AB SWAP1 PUSH2 0x173A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH2 0xAE7 SWAP1 ADDRESS SWAP1 PUSH1 0x4 ADD PUSH2 0x1626 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xAFF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xB13 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xB37 SWAP2 SWAP1 PUSH2 0x160E JUMP JUMPDEST SWAP1 POP DUP3 DUP2 LT ISZERO PUSH2 0xB59 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2AB SWAP1 PUSH2 0x16B9 JUMP JUMPDEST PUSH2 0xB6D PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP4 DUP4 PUSH2 0x11D4 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH11 0x29ABA2A2A82FAA27A5A2A7 PUSH1 0xA9 SHL PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x180F DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP5 PUSH1 0x40 MLOAD PUSH2 0xBAE SWAP2 SWAP1 PUSH2 0x1805 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP POP JUMP JUMPDEST PUSH2 0xBC4 PUSH2 0x105E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xBD5 PUSH2 0x9FD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xC1E JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x187B DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xC63 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x182F PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND SWAP4 SWAP3 AND SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 LOG3 PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0xCC6 PUSH2 0x105E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xCD7 PUSH2 0x9FD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xD20 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x187B DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0xECD JUMPI PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH2 0xDA9 SWAP1 ADDRESS SWAP1 PUSH1 0x4 ADD PUSH2 0x1626 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xDC1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xDD5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xDF9 SWAP2 SWAP1 PUSH2 0x160E JUMP JUMPDEST SWAP1 POP DUP2 DUP2 LT ISZERO PUSH2 0xE1B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2AB SWAP1 PUSH2 0x16E7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x2E1A7D4D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND SWAP1 PUSH4 0x2E1A7D4D SWAP1 PUSH2 0xE67 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x1805 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xE81 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xE95 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD CALLER SWAP3 POP DUP5 ISZERO PUSH2 0x8FC MUL SWAP2 POP DUP5 SWAP1 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0xEC6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH2 0xF84 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH2 0xEFC SWAP1 ADDRESS SWAP1 PUSH1 0x4 ADD PUSH2 0x1626 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xF14 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xF28 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xF4C SWAP2 SWAP1 PUSH2 0x160E JUMP JUMPDEST SWAP1 POP DUP2 DUP2 LT ISZERO PUSH2 0xF6E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2AB SWAP1 PUSH2 0x16B9 JUMP JUMPDEST PUSH2 0xF82 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND CALLER DUP5 PUSH2 0x11D4 JUMP JUMPDEST POP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH8 0x5749544844524157 PUSH1 0xC0 SHL PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x180F DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP5 PUSH1 0x40 MLOAD PUSH2 0x921 SWAP2 SWAP1 PUSH2 0x1805 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND ISZERO PUSH2 0x1054 JUMPI PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH2 0xFFF SWAP1 ADDRESS SWAP1 PUSH1 0x4 ADD PUSH2 0x1626 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1017 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x102B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x104F SWAP2 SWAP1 PUSH2 0x160E JUMP JUMPDEST PUSH2 0x1056 JUMP JUMPDEST SELFBALANCE JUMPDEST SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST CALLER SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP7 AND PUSH1 0x24 DUP4 ADD MSTORE DUP5 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP1 DUP3 ADD DUP5 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x84 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0x23B872DD PUSH1 0xE0 SHL OR SWAP1 MSTORE PUSH2 0x566 SWAP1 DUP6 SWAP1 PUSH2 0x1222 JUMP JUMPDEST DUP1 ISZERO DUP1 PUSH2 0x1142 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH4 0x6EB1769F PUSH1 0xE1 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE SWAP2 MLOAD SWAP2 DUP6 AND SWAP2 PUSH4 0xDD62ED3E SWAP2 PUSH1 0x44 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1114 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1128 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x113E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD ISZERO JUMPDEST PUSH2 0x117D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x36 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x18C5 PUSH1 0x36 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP1 DUP3 ADD DUP5 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0x95EA7B3 PUSH1 0xE0 SHL OR SWAP1 MSTORE PUSH2 0x11CF SWAP1 DUP5 SWAP1 PUSH2 0x1222 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP1 DUP3 ADD DUP5 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0xA9059CBB PUSH1 0xE0 SHL OR SWAP1 MSTORE PUSH2 0x11CF SWAP1 DUP5 SWAP1 JUMPDEST PUSH1 0x0 PUSH2 0x1277 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x12D3 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0x11CF JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1296 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH2 0x11CF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2A DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x189B PUSH1 0x2A SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x60 PUSH2 0x12E2 DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x12EC JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x132D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1855 PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1336 DUP6 PUSH2 0x1447 JUMP JUMPDEST PUSH2 0x1387 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP8 PUSH1 0x40 MLOAD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x13C5 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x13A6 JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1427 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x142C JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x143C DUP3 DUP3 DUP7 PUSH2 0x144D JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST EXTCODESIZE ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x145C JUMPI POP DUP2 PUSH2 0x12E5 JUMP JUMPDEST DUP3 MLOAD ISZERO PUSH2 0x146C JUMPI DUP3 MLOAD DUP1 DUP5 PUSH1 0x20 ADD REVERT JUMPDEST DUP2 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x14B6 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x149E JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x14E3 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x1059 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1519 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x12E5 DUP3 PUSH2 0x14F1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x1539 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x1542 DUP7 PUSH2 0x14F1 JUMP JUMPDEST SWAP5 POP PUSH2 0x1550 PUSH1 0x20 DUP8 ADD PUSH2 0x14F1 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH3 0xFFFFFF DUP2 AND DUP2 EQ PUSH2 0x1567 JUMPI DUP2 DUP3 REVERT JUMPDEST SWAP5 SWAP8 SWAP4 SWAP7 POP SWAP4 SWAP5 PUSH1 0x60 DUP2 ADD CALLDATALOAD SWAP5 POP PUSH1 0x80 ADD CALLDATALOAD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1591 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x159A DUP4 PUSH2 0x14F1 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x15BC JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x15C5 DUP5 PUSH2 0x14F1 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD SWAP2 POP PUSH2 0x15DA PUSH1 0x40 DUP6 ADD PUSH2 0x14F1 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x15F7 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD SWAP2 POP PUSH2 0x15DA PUSH1 0x40 DUP6 ADD PUSH2 0x14F1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x161F JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x10 SWAP1 DUP3 ADD MSTORE PUSH16 0x92DCE6EACCCCD2C6D2CADCE8408AA89 PUSH1 0x83 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x13 SWAP1 DUP3 ADD MSTORE PUSH19 0x115512081D985B1D5948084F48185B5BDD5B9D PUSH1 0x6A SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH14 0x115512081B9BDD081B9959591959 PUSH1 0x92 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH20 0x496E73756666696369656E742062616C616E6365 PUSH1 0x60 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x11 SWAP1 DUP3 ADD MSTORE PUSH17 0x92DCE6EACCCCD2C6D2CADCE840AE8AA89 PUSH1 0x7B SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH14 0x24B73B30B634B21030B1BA34B7B7 PUSH1 0x91 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x11 SWAP1 DUP3 ADD MSTORE PUSH17 0x125B9D985B1A59081C9958DA5C1A595B9D PUSH1 0x7A SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x17 SWAP1 DUP3 ADD MSTORE PUSH32 0x557365207377656570546F6B656E2066756E6374696F6E000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0x20 DUP1 DUP5 ADD MLOAD DUP3 AND SWAP1 DUP4 ADD MSTORE PUSH1 0x40 DUP1 DUP5 ADD MLOAD PUSH3 0xFFFFFF AND SWAP1 DUP4 ADD MSTORE PUSH1 0x60 DUP1 DUP5 ADD MLOAD DUP3 AND SWAP1 DUP4 ADD MSTORE PUSH1 0x80 DUP1 DUP5 ADD MLOAD SWAP1 DUP4 ADD MSTORE PUSH1 0xA0 DUP4 DUP2 ADD MLOAD SWAP1 DUP4 ADD MSTORE PUSH1 0xC0 DUP1 DUP5 ADD MLOAD SWAP1 DUP4 ADD MSTORE PUSH1 0xE0 SWAP3 DUP4 ADD MLOAD AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH2 0x100 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP INVALID EXTCODEHASH RETURN 0x26 0xC9 0xF9 0xE4 PUSH29 0xF4DD5CC18ACB5F11594345CA27574799F6172A584DAB8DA09E4F776E61 PUSH3 0x6C653A KECCAK256 PUSH15 0x6577206F776E657220697320746865 KECCAK256 PUSH27 0x65726F2061646472657373416464726573733A20696E7375666669 PUSH4 0x69656E74 KECCAK256 PUSH3 0x616C61 PUSH15 0x636520666F722063616C6C4F776E61 PUSH3 0x6C653A KECCAK256 PUSH4 0x616C6C65 PUSH19 0x206973206E6F7420746865206F776E65725361 PUSH7 0x6545524332303A KECCAK256 GASLIMIT MSTORE NUMBER ORIGIN ADDRESS KECCAK256 PUSH16 0x7065726174696F6E20646964206E6F74 KECCAK256 PUSH20 0x7563636565645361666545524332303A20617070 PUSH19 0x6F76652066726F6D206E6F6E2D7A65726F2074 PUSH16 0x206E6F6E2D7A65726F20616C6C6F7761 PUSH15 0x6365A2646970667358221220F22335 0xB0 SMOD XOR JUMPI DELEGATECALL ADDMOD 0xE3 DUP16 EXTCODEHASH 0xE3 0xAC CODESIZE CHAINID DUP4 0xEE CHAINID 0xA8 0xE5 0xEC 0xB2 0xE2 0xD8 0x29 SWAP7 0x2B PUSH23 0xB8E2AD64736F6C63430007060033000000000000000000 ","sourceMap":"615:5161:33:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3656:1242;;;;;;;;;;-1:-1:-1;3656:1242:33;;;;;:::i;:::-;;:::i;:::-;;1230:1153;;;;;;;;;;-1:-1:-1;1230:1153:33;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2439:472;;;;;;:::i;:::-;;:::i;817:30::-;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;1717:145:0:-;;;;;;;;;;;;;:::i;1085:85::-;;;;;;;;;;;;;:::i;771:39:33:-;;;;;;;;;;;;;:::i;4975:463::-;;;;;;;;;;-1:-1:-1;4975:463:33;;;;;:::i;:::-;;:::i;2011:240:0:-;;;;;;;;;;-1:-1:-1;2011:240:0;;;;;:::i;:::-;;:::i;2968:637:33:-;;;;;;;;;;-1:-1:-1;2968:637:33;;;;;:::i;:::-;;:::i;5480:224::-;;;;;;;;;;-1:-1:-1;5480:224:33;;;;;:::i;:::-;;:::i;3656:1242::-;1308:12:0;:10;:12::i;:::-;-1:-1:-1;;;;;1297:23:0;:7;:5;:7::i;:::-;-1:-1:-1;;;;;1297:23:0;;1289:68;;;;;-1:-1:-1;;;1289:68:0;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;1289:68:0;;;;;;;;;;;;;;;3793:18:33::1;-1:-1:-1::0;;;;;3814:23:33;::::1;::::0;:92:::1;;3896:9;3814:92;;;3861:10;3814:92;3793:113;;-1:-1:-1::0;;;3923:6:33::1;:31;3919:972;;;3989:21;4033:20:::0;;::::1;;4025:49;;;;-1:-1:-1::0;;;4025:49:33::1;;;;;;;:::i;:::-;;;;;;;;;4089:20;::::0;-1:-1:-1;;;;;4089:11:33;::::1;::::0;:20;::::1;;;::::0;4101:7;;4089:20:::1;::::0;;;4101:7;4089:11;:20;::::1;;;;;;;;;;;;;::::0;::::1;;;;;;4167:1;-1:-1:-1::0;;;;;4129:50:33::1;4155:1;-1:-1:-1::0;;;;;4129:50:33::1;4139:6;-1:-1:-1::0;;;;;;;;;;;4171:7:33::1;4129:50;;;;;;:::i;:::-;;;;;;;;3919:972;;;;-1:-1:-1::0;;;4201:6:33::1;:32;4197:694;;;4268:38;::::0;-1:-1:-1;;;4268:38:33;;4250:15:::1;::::0;-1:-1:-1;;;;;4275:5:33::1;4268:23;::::0;::::1;::::0;:38:::1;::::0;4300:4:::1;::::0;4268:38:::1;;;:::i;:::-;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4250:56;;4340:9;4329:7;:20;;4321:50;;;;-1:-1:-1::0;;;4321:50:33::1;;;;;;;:::i;:::-;4386:31;::::0;-1:-1:-1;;;4386:31:33;;-1:-1:-1;;;;;4393:5:33::1;4386:22;::::0;::::1;::::0;:31:::1;::::0;4409:7;;4386:31:::1;;;:::i;:::-;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;-1:-1:-1::0;;4432:20:33::1;::::0;-1:-1:-1;;;;;4432:11:33;::::1;::::0;-1:-1:-1;4432:20:33;::::1;;;::::0;-1:-1:-1;4444:7:33;;4432:20:::1;::::0;;;4444:7;4432:11;:20;::::1;;;;;;;;;;;;;::::0;::::1;;;;;;4505:1;-1:-1:-1::0;;;;;4472:45:33::1;4490:5;-1:-1:-1::0;;;;;4472:45:33::1;4482:6;-1:-1:-1::0;;;;;;;;;;;4509:7:33::1;4472:45;;;;;;:::i;4197:694::-;-1:-1:-1::0;;;4553:6:33::1;:32;:59;;;;-1:-1:-1::0;;;;;;4589:23:33;::::1;::::0;::::1;4553:59;4535:356;;;4789:33;;-1:-1:-1::0;;;4789:33:33::1;;;;;;;:::i;4535:356::-;4855:24;;-1:-1:-1::0;;;4855:24:33::1;;;;;;;:::i;4535:356::-;1367:1:0;3656:1242:33::0;;;:::o;1230:1153::-;1415:17;1308:12:0;:10;:12::i;:::-;-1:-1:-1;;;;;1297:23:0;:7;:5;:7::i;:::-;-1:-1:-1;;;;;1297:23:0;;1289:68;;;;;-1:-1:-1;;;1289:68:0;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;1289:68:0;;;;;;;;;;;;;;;1485:69:33::1;-1:-1:-1::0;;;;;1485:32:33;::::1;1518:10;1538:4;1545:8:::0;1485:32:::1;:69::i;:::-;1594:58;-1:-1:-1::0;;;;;1594:27:33;::::1;1630:10;1643:8:::0;1594:27:::1;:58::i;:::-;1741:380;::::0;;::::1;::::0;::::1;::::0;;-1:-1:-1;;;;;1741:380:33;;::::1;::::0;;;;::::1;;::::0;::::1;::::0;::::1;::::0;::::1;::::0;;;;1931:4:::1;1741:380:::0;;;;1965:15:::1;1741:380:::0;;;;;;;;;;;;;;;;1690:48:::1;1741:380:::0;;;;2146:35;;-1:-1:-1;;;2146:35:33;;1741:380;;2146:10:::1;:27;::::0;::::1;::::0;:35:::1;::::0;1741:380;;2146:35:::1;;;:::i;:::-;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2134:47:::0;-1:-1:-1;2221:51:33::1;-1:-1:-1::0;;;;;2221:27:33;::::1;2257:10;2270:1;2221:27;:51::i;:::-;2326:8;-1:-1:-1::0;;;;;2290:56:33::1;2317:7;-1:-1:-1::0;;;;;2290:56:33::1;-1:-1:-1::0;;;;;;;;;;;;;;2336:9:33::1;2290:56;;;;;;:::i;:::-;;;;;;;;2359:16;1230:1153:::0;;;;;;;:::o;2439:472::-;1308:12:0;:10;:12::i;:::-;-1:-1:-1;;;;;1297:23:0;:7;:5;:7::i;:::-;-1:-1:-1;;;;;1297:23:0;;1289:68;;;;;-1:-1:-1;;;1289:68:0;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;1289:68:0;;;;;;;;;;;;;;;2538:5:33::1;-1:-1:-1::0;;;;;2529:14:33::1;:5;-1:-1:-1::0;;;;;2529:14:33::1;;2525:305;;;2581:6;2568:9;:19;2560:51;;;;-1:-1:-1::0;;;2560:51:33::1;;;;;;;:::i;:::-;2633:5;-1:-1:-1::0;;;;;2626:21:33::1;;2655:6;2626:38;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;2525:305;;;2705:9;:14:::0;2697:41:::1;;;;-1:-1:-1::0;;;2697:41:33::1;;;;;;;:::i;:::-;2753:65;-1:-1:-1::0;;;;;2753:30:33;::::1;2784:10;2804:4;2811:6:::0;2753:30:::1;:65::i;:::-;2892:1;-1:-1:-1::0;;;;;2847:56:33::1;2877:5;-1:-1:-1::0;;;;;2847:56:33::1;-1:-1:-1::0;;;;;;;;;;;;;;2896:6:33::1;2847:56;;;;;;:::i;:::-;;;;;;;;2439:472:::0;;:::o;817:30::-;;;:::o;1717:145:0:-;1308:12;:10;:12::i;:::-;-1:-1:-1;;;;;1297:23:0;:7;:5;:7::i;:::-;-1:-1:-1;;;;;1297:23:0;;1289:68;;;;;-1:-1:-1;;;1289:68:0;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;1289:68:0;;;;;;;;;;;;;;;1823:1:::1;1807:6:::0;;1786:40:::1;::::0;-1:-1:-1;;;;;1807:6:0;;::::1;::::0;1786:40:::1;::::0;1823:1;;1786:40:::1;1853:1;1836:19:::0;;-1:-1:-1;;;;;;1836:19:0::1;::::0;;1717:145::o;1085:85::-;1131:7;1157:6;-1:-1:-1;;;;;1157:6:0;1085:85;:::o;771:39:33:-;;;:::o;4975:463::-;1308:12:0;:10;:12::i;:::-;-1:-1:-1;;;;;1297:23:0;:7;:5;:7::i;:::-;-1:-1:-1;;;;;1297:23:0;;1289:68;;;;;-1:-1:-1;;;1289:68:0;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;1289:68:0;;;;;;;;;;;;;;;-1:-1:-1;;;;;5120:23:33;::::1;5112:53;;;;-1:-1:-1::0;;;5112:53:33::1;;;;;;;:::i;:::-;5194:38;::::0;-1:-1:-1;;;5194:38:33;;5176:15:::1;::::0;-1:-1:-1;;;;;5194:23:33;::::1;::::0;::::1;::::0;:38:::1;::::0;5226:4:::1;::::0;5194:38:::1;;;:::i;:::-;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;5176:56;;5262:9;5251:7;:20;;5243:53;;;;-1:-1:-1::0;;;5243:53:33::1;;;;;;;:::i;:::-;5307:46;-1:-1:-1::0;;;;;5307:26:33;::::1;5334:9:::0;5345:7;5307:26:::1;:46::i;:::-;5418:1;-1:-1:-1::0;;;;;5369:61:33::1;5403:5;-1:-1:-1::0;;;;;5369:61:33::1;-1:-1:-1::0;;;;;;;;;;;;;;5422:7:33::1;5369:61;;;;;;:::i;:::-;;;;;;;;1367:1:0;4975:463:33::0;;;:::o;2011:240:0:-;1308:12;:10;:12::i;:::-;-1:-1:-1;;;;;1297:23:0;:7;:5;:7::i;:::-;-1:-1:-1;;;;;1297:23:0;;1289:68;;;;;-1:-1:-1;;;1289:68:0;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;1289:68:0;;;;;;;;;;;;;;;-1:-1:-1;;;;;2099:22:0;::::1;2091:73;;;;-1:-1:-1::0;;;2091:73:0::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2200:6;::::0;;2179:38:::1;::::0;-1:-1:-1;;;;;2179:38:0;;::::1;::::0;2200:6;::::1;::::0;2179:38:::1;::::0;::::1;2227:6;:17:::0;;-1:-1:-1;;;;;;2227:17:0::1;-1:-1:-1::0;;;;;2227:17:0;;;::::1;::::0;;;::::1;::::0;;2011:240::o;2968:637:33:-;1308:12:0;:10;:12::i;:::-;-1:-1:-1;;;;;1297:23:0;:7;:5;:7::i;:::-;-1:-1:-1;;;;;1297:23:0;;1289:68;;;;;-1:-1:-1;;;1289:68:0;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;1289:68:0;;;;;;;;;;;;;;;3060:5:33::1;-1:-1:-1::0;;;;;3051:14:33::1;:5;-1:-1:-1::0;;;;;3051:14:33::1;;3047:476;;;3100:38;::::0;-1:-1:-1;;;3100:38:33;;3082:15:::1;::::0;-1:-1:-1;;;;;3107:5:33::1;3100:23;::::0;::::1;::::0;:38:::1;::::0;3132:4:::1;::::0;3100:38:::1;;;:::i;:::-;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3082:56;;3172:6;3161:7;:17;;3153:47;;;;-1:-1:-1::0;;;3153:47:33::1;;;;;;;:::i;:::-;3215:30;::::0;-1:-1:-1;;;3215:30:33;;-1:-1:-1;;;;;3222:5:33::1;3215:22;::::0;::::1;::::0;:30:::1;::::0;3238:6;;3215:30:::1;;;:::i;:::-;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;-1:-1:-1::0;;3260:36:33::1;::::0;3268:10:::1;::::0;-1:-1:-1;3260:36:33;::::1;;;::::0;-1:-1:-1;3289:6:33;;3260:36:::1;::::0;;;3289:6;3268:10;3260:36;::::1;;;;;;;;;;;;;::::0;::::1;;;;;;3047:476;;;;3347:38;::::0;-1:-1:-1;;;3347:38:33;;3329:15:::1;::::0;-1:-1:-1;;;;;3347:23:33;::::1;::::0;::::1;::::0;:38:::1;::::0;3379:4:::1;::::0;3347:38:::1;;;:::i;:::-;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3329:56;;3419:6;3408:7;:17;;3400:50;;;;-1:-1:-1::0;;;3400:50:33::1;;;;;;;:::i;:::-;3465:46;-1:-1:-1::0;;;;;3465:26:33;::::1;3492:10;3504:6:::0;3465:26:::1;:46::i;:::-;3047:476;;3586:1;-1:-1:-1::0;;;;;3540:57:33::1;3571:5;-1:-1:-1::0;;;;;3540:57:33::1;-1:-1:-1::0;;;;;;;;;;;;;;3590:6:33::1;3540:57;;;;;;:::i;5480:224::-:0;5538:7;-1:-1:-1;;;;;5578:19:33;;;:118;;5658:38;;-1:-1:-1;;;5658:38:33;;-1:-1:-1;;;;;5658:23:33;;;;;:38;;5690:4;;5658:38;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;5578:118;;;5617:21;5578:118;5558:138;;5480:224;;;;:::o;598:104:9:-;685:10;598:104;:::o;885:203:4:-;1012:68;;;-1:-1:-1;;;;;1012:68:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1012:68:4;-1:-1:-1;;;1012:68:4;;;985:96;;1005:5;;985:19;:96::i;1348:613::-;1713:10;;;1712:62;;-1:-1:-1;1729:39:4;;;-1:-1:-1;;;1729:39:4;;1753:4;1729:39;;;;-1:-1:-1;;;;;1729:39:4;;;;;;;;;:15;;;;;;:39;;;;;;;;;;;;;;;:15;:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1729:39:4;:44;1712:62;1704:150;;;;-1:-1:-1;;;1704:150:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1891:62;;;-1:-1:-1;;;;;1891:62:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1891:62:4;-1:-1:-1;;;1891:62:4;;;1864:90;;1884:5;;1864:19;:90::i;:::-;1348:613;;;:::o;704:175::-;813:58;;;-1:-1:-1;;;;;813:58:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;813:58:4;-1:-1:-1;;;813:58:4;;;786:86;;806:5;;2967:751;3386:23;3412:69;3440:4;3412:69;;;;;;;;;;;;;;;;;3420:5;-1:-1:-1;;;;;3412:27:4;;;:69;;;;;:::i;:::-;3495:17;;3386:95;;-1:-1:-1;3495:21:4;3491:221;;3635:10;3624:30;;;;;;;;;;;;;;;-1:-1:-1;3624:30:4;3616:85;;;;-1:-1:-1;;;3616:85:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3581:193:8;3684:12;3715:52;3737:6;3745:4;3751:1;3754:12;3715:21;:52::i;:::-;3708:59;;3581:193;;;;;;:::o;4608:523::-;4735:12;4792:5;4767:21;:30;;4759:81;;;;-1:-1:-1;;;4759:81:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4858:18;4869:6;4858:10;:18::i;:::-;4850:60;;;;;-1:-1:-1;;;4850:60:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;4981:12;4995:23;5022:6;-1:-1:-1;;;;;5022:11:8;5042:5;5050:4;5022:33;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;5022:33:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4980:75;;;;5072:52;5090:7;5099:10;5111:12;5072:17;:52::i;:::-;5065:59;4608:523;-1:-1:-1;;;;;;;4608:523:8:o;726:413::-;1086:20;1124:8;;;726:413::o;7091:725::-;7206:12;7234:7;7230:580;;;-1:-1:-1;7264:10:8;7257:17;;7230:580;7375:17;;:21;7371:429;;7633:10;7627:17;7693:15;7680:10;7676:2;7672:19;7665:44;7582:145;7772:12;7765:20;;-1:-1:-1;;;7765:20:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14:175:35;84:20;;-1:-1:-1;;;;;133:31:35;;123:42;;113:2;;179:1;176;169:12;194:198;;306:2;294:9;285:7;281:23;277:32;274:2;;;327:6;319;312:22;274:2;355:31;376:9;355:31;:::i;397:584::-;;;;;;576:3;564:9;555:7;551:23;547:33;544:2;;;598:6;590;583:22;544:2;626:31;647:9;626:31;:::i;:::-;616:41;;676:40;712:2;701:9;697:18;676:40;:::i;:::-;666:50;;766:2;755:9;751:18;738:32;810:8;803:5;799:20;792:5;789:31;779:2;;839:6;831;824:22;779:2;534:447;;;;-1:-1:-1;867:5:35;;919:2;904:18;;891:32;;-1:-1:-1;970:3:35;955:19;942:33;;534:447;-1:-1:-1;;534:447:35:o;986:266::-;;;1115:2;1103:9;1094:7;1090:23;1086:32;1083:2;;;1136:6;1128;1121:22;1083:2;1164:31;1185:9;1164:31;:::i;:::-;1154:41;1242:2;1227:18;;;;1214:32;;-1:-1:-1;;;1073:179:35:o;1257:342::-;;;;1403:2;1391:9;1382:7;1378:23;1374:32;1371:2;;;1424:6;1416;1409:22;1371:2;1452:31;1473:9;1452:31;:::i;:::-;1442:41;;1530:2;1519:9;1515:18;1502:32;1492:42;;1553:40;1589:2;1578:9;1574:18;1553:40;:::i;:::-;1543:50;;1361:238;;;;;:::o;1604:334::-;;;;1750:2;1738:9;1729:7;1725:23;1721:32;1718:2;;;1771:6;1763;1756:22;1718:2;1812:9;1799:23;1789:33;;1869:2;1858:9;1854:18;1841:32;1831:42;;1892:40;1928:2;1917:9;1913:18;1892:40;:::i;1943:194::-;;2066:2;2054:9;2045:7;2041:23;2037:32;2034:2;;;2087:6;2079;2072:22;2034:2;-1:-1:-1;2115:16:35;;2024:113;-1:-1:-1;2024:113:35:o;2142:203::-;-1:-1:-1;;;;;2306:32:35;;;;2288:51;;2276:2;2261:18;;2243:102::o;2794:340::-;2996:2;2978:21;;;3035:2;3015:18;;;3008:30;-1:-1:-1;;;3069:2:35;3054:18;;3047:46;3125:2;3110:18;;2968:166::o;3139:343::-;3341:2;3323:21;;;3380:2;3360:18;;;3353:30;-1:-1:-1;;;3414:2:35;3399:18;;3392:49;3473:2;3458:18;;3313:169::o;3487:338::-;3689:2;3671:21;;;3728:2;3708:18;;;3701:30;-1:-1:-1;;;3762:2:35;3747:18;;3740:44;3816:2;3801:18;;3661:164::o;3830:344::-;4032:2;4014:21;;;4071:2;4051:18;;;4044:30;-1:-1:-1;;;4105:2:35;4090:18;;4083:50;4165:2;4150:18;;4004:170::o;4179:341::-;4381:2;4363:21;;;4420:2;4400:18;;;4393:30;-1:-1:-1;;;4454:2:35;4439:18;;4432:47;4511:2;4496:18;;4353:167::o;4525:338::-;4727:2;4709:21;;;4766:2;4746:18;;;4739:30;-1:-1:-1;;;4800:2:35;4785:18;;4778:44;4854:2;4839:18;;4699:164::o;4868:341::-;5070:2;5052:21;;;5109:2;5089:18;;;5082:30;-1:-1:-1;;;5143:2:35;5128:18;;5121:47;5200:2;5185:18;;5042:167::o;5214:347::-;5416:2;5398:21;;;5455:2;5435:18;;;5428:30;5494:25;5489:2;5474:18;;5467:53;5552:2;5537:18;;5388:173::o;5566:795::-;5853:13;;-1:-1:-1;;;;;5849:22:35;;;5831:41;;5932:4;5920:17;;;5914:24;5910:33;;5888:20;;;5881:63;6004:4;5992:17;;;5986:24;6012:8;5982:39;5960:20;;;5953:69;6082:4;6070:17;;;6064:24;6060:33;;6038:20;;;6031:63;6150:4;6138:17;;;6132:24;6110:20;;;6103:54;5811:3;6201:17;;;6195:24;6173:20;;;6166:54;6276:4;6264:17;;;6258:24;6236:20;;;6229:54;6343:4;6331:17;;;6325:24;6321:33;6299:20;;;6292:63;;;;5780:3;5765:19;;5747:614::o;6366:177::-;6512:25;;;6500:2;6485:18;;6467:76::o"},"gasEstimates":{"creation":{"codeDepositCost":"1289600","executionCost":"infinite","totalCost":"infinite"},"external":{"WETH9()":"infinite","deposit(address,uint256)":"infinite","getBalance(address)":"infinite","handleETH(bytes32,uint256,address)":"infinite","owner()":"1070","renounceOwnership()":"infinite","swap(address,address,uint24,uint256,uint256)":"infinite","swapRouter()":"infinite","sweepToken(address,uint256,address)":"infinite","transferOwnership(address)":"infinite","withdraw(address,uint256)":"infinite"}},"methodIdentifiers":{"WETH9()":"4aa4a4fc","deposit(address,uint256)":"47e7ef24","getBalance(address)":"f8b2cb4f","handleETH(bytes32,uint256,address)":"2f8b3eed","owner()":"8da5cb5b","renounceOwnership()":"715018a6","swap(address,address,uint24,uint256,uint256)":"3bf237d5","swapRouter()":"c31c9c07","sweepToken(address,uint256,address)":"df2ab5bb","transferOwnership(address)":"f2fde38b","withdraw(address,uint256)":"f3fef3a3"}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swapRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth9\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"opType\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Operation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WETH9\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"action\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"handleETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"poolFee\",\"type\":\"uint24\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapRouter\",\"outputs\":[{\"internalType\":\"contract ISwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"sweepToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"TokenOperationsManagerOptimized\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"\\u0628\\u0647\\u06cc\\u0646\\u0647\\u200c\\u0633\\u0627\\u0632\\u06cc \\u0634\\u062f\\u0647 \\u0628\\u0631\\u0627\\u06cc \\u06a9\\u0627\\u0647\\u0634 \\u0627\\u0646\\u062f\\u0627\\u0632\\u0647 \\u0642\\u0631\\u0627\\u0631\\u062f\\u0627\\u062f\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TokenOperationsManagerOptimized.sol\":\"TokenOperationsManagerOptimized\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x9bfaf1feb32814623e627ab70f2409760b15d95f1f9b058e2b3399a8bb732975\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/external/IWETH9.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity =0.7.6;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\n/// @title Interface for WETH9\\ninterface IWETH9 is IERC20 {\\n    /// @notice Deposit ether to get wrapped ether\\n    function deposit() external payable;\\n\\n    /// @notice Withdraw wrapped ether to get ether\\n    function withdraw(uint256) external;\\n}\\n\",\"keccak256\":\"0x6d7a8eb484e84bceb1d84c7be431c5b8120d519b0c2a7b4c7064c814635dea4c\",\"license\":\"GPL-2.0-or-later\"},\"contracts/TokenOperationsManagerOptimized.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.7.6;\\r\\npragma abicoder v2;\\r\\n\\r\\n// Minimized imports\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\nimport \\\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\\\";\\r\\nimport \\\"@uniswap/v3-periphery/contracts/interfaces/external/IWETH9.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title TokenOperationsManagerOptimized\\r\\n * @notice \\u0628\\u0647\\u06cc\\u0646\\u0647\\u200c\\u0633\\u0627\\u0632\\u06cc \\u0634\\u062f\\u0647 \\u0628\\u0631\\u0627\\u06cc \\u06a9\\u0627\\u0647\\u0634 \\u0627\\u0646\\u062f\\u0627\\u0632\\u0647 \\u0642\\u0631\\u0627\\u0631\\u062f\\u0627\\u062f\\r\\n */\\r\\ncontract TokenOperationsManagerOptimized is Ownable {\\r\\n    using SafeERC20 for IERC20;\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    // Core state variables\\r\\n    ISwapRouter public immutable swapRouter;\\r\\n    address public immutable WETH9;\\r\\n\\r\\n    // Single combined event for all operations\\r\\n    event Operation(\\r\\n        bytes32 indexed opType,\\r\\n        address indexed tokenA,\\r\\n        address indexed tokenB,\\r\\n        uint256 amount\\r\\n    );\\r\\n\\r\\n    constructor(address _swapRouter, address _weth9) {\\r\\n        swapRouter = ISwapRouter(_swapRouter);\\r\\n        WETH9 = _weth9;\\r\\n    }\\r\\n\\r\\n    // Optimized swap function\\r\\n    function swap(\\r\\n        address tokenIn,\\r\\n        address tokenOut,\\r\\n        uint24 poolFee,\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin\\r\\n    ) external onlyOwner returns (uint256 amountOut) {\\r\\n        // Transfer tokens to contract\\r\\n        IERC20(tokenIn).safeTransferFrom(msg.sender, address(this), amountIn);\\r\\n\\r\\n        // Approve router\\r\\n        IERC20(tokenIn).safeApprove(address(swapRouter), amountIn);\\r\\n\\r\\n        // Execute swap\\r\\n        ISwapRouter.ExactInputSingleParams memory params = ISwapRouter\\r\\n            .ExactInputSingleParams({\\r\\n                tokenIn: tokenIn,\\r\\n                tokenOut: tokenOut,\\r\\n                fee: poolFee,\\r\\n                recipient: address(this),\\r\\n                deadline: block.timestamp,\\r\\n                amountIn: amountIn,\\r\\n                amountOutMinimum: amountOutMin,\\r\\n                sqrtPriceLimitX96: 0\\r\\n            });\\r\\n\\r\\n        amountOut = swapRouter.exactInputSingle(params);\\r\\n\\r\\n        // Reset approval\\r\\n        IERC20(tokenIn).safeApprove(address(swapRouter), 0);\\r\\n\\r\\n        emit Operation(bytes32(\\\"SWAP\\\"), tokenIn, tokenOut, amountOut);\\r\\n\\r\\n        return amountOut;\\r\\n    }\\r\\n\\r\\n    // Deposit tokens (including ETH via WETH)\\r\\n    function deposit(address token, uint256 amount) external payable onlyOwner {\\r\\n        if (token == WETH9) {\\r\\n            require(msg.value == amount, \\\"ETH value != amount\\\");\\r\\n            IWETH9(WETH9).deposit{value: amount}();\\r\\n        } else {\\r\\n            require(msg.value == 0, \\\"ETH not needed\\\");\\r\\n            IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\\r\\n        }\\r\\n\\r\\n        emit Operation(bytes32(\\\"DEPOSIT\\\"), token, address(0), amount);\\r\\n    }\\r\\n\\r\\n    // Withdraw tokens (including ETH via WETH)\\r\\n    function withdraw(address token, uint256 amount) external onlyOwner {\\r\\n        if (token == WETH9) {\\r\\n            uint256 balance = IERC20(WETH9).balanceOf(address(this));\\r\\n            require(balance >= amount, \\\"Insufficient WETH\\\");\\r\\n            IWETH9(WETH9).withdraw(amount);\\r\\n            payable(msg.sender).transfer(amount);\\r\\n        } else {\\r\\n            uint256 balance = IERC20(token).balanceOf(address(this));\\r\\n            require(balance >= amount, \\\"Insufficient balance\\\");\\r\\n            IERC20(token).safeTransfer(msg.sender, amount);\\r\\n        }\\r\\n\\r\\n        emit Operation(bytes32(\\\"WITHDRAW\\\"), token, address(0), amount);\\r\\n    }\\r\\n\\r\\n    // Combined function for handling ETH\\r\\n    function handleETH(\\r\\n        bytes32 action,\\r\\n        uint256 minAmount,\\r\\n        address recipient\\r\\n    ) external onlyOwner {\\r\\n        address payable to = recipient == address(0)\\r\\n            ? payable(msg.sender)\\r\\n            : payable(recipient);\\r\\n\\r\\n        if (action == bytes32(\\\"REFUND_ETH\\\")) {\\r\\n            uint256 balance = address(this).balance;\\r\\n            require(balance >= minAmount, \\\"Insufficient ETH\\\");\\r\\n            to.transfer(balance);\\r\\n            emit Operation(action, address(0), address(0), balance);\\r\\n        } else if (action == bytes32(\\\"UNWRAP_WETH\\\")) {\\r\\n            uint256 balance = IERC20(WETH9).balanceOf(address(this));\\r\\n            require(balance >= minAmount, \\\"Insufficient WETH\\\");\\r\\n            IWETH9(WETH9).withdraw(balance);\\r\\n            to.transfer(balance);\\r\\n            emit Operation(action, WETH9, address(0), balance);\\r\\n        } else if (\\r\\n            action == bytes32(\\\"SWEEP_TOKEN\\\") && recipient != address(0)\\r\\n        ) {\\r\\n            // The recipient must be provided for this operation\\r\\n            // This operation is handled separately to avoid stack too deep errors\\r\\n            revert(\\\"Use sweepToken function\\\");\\r\\n        } else {\\r\\n            revert(\\\"Invalid action\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Separate function for token sweeping to avoid stack too deep\\r\\n    function sweepToken(\\r\\n        address token,\\r\\n        uint256 minAmount,\\r\\n        address recipient\\r\\n    ) external onlyOwner {\\r\\n        require(recipient != address(0), \\\"Invalid recipient\\\");\\r\\n        uint256 balance = IERC20(token).balanceOf(address(this));\\r\\n        require(balance >= minAmount, \\\"Insufficient balance\\\");\\r\\n        IERC20(token).safeTransfer(recipient, balance);\\r\\n        emit Operation(bytes32(\\\"SWEEP_TOKEN\\\"), token, address(0), balance);\\r\\n    }\\r\\n\\r\\n    // Simplified view functions\\r\\n    function getBalance(address token) external view returns (uint256) {\\r\\n        return\\r\\n            token == address(0)\\r\\n                ? address(this).balance\\r\\n                : IERC20(token).balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n    // Required to receive ETH\\r\\n    receive() external payable {}\\r\\n}\\r\\n\",\"keccak256\":\"0x394dc04404868c315bc26525d128afe46283b095223c0362d9d4a1582d37f808\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":7,"contract":"contracts/TokenOperationsManagerOptimized.sol:TokenOperationsManagerOptimized","label":"_owner","offset":0,"slot":"0","type":"t_address"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"}}},"userdoc":{"kind":"user","methods":{},"notice":"بهینه‌سازی شده برای کاهش اندازه قرارداد","version":1}}},"contracts/libraries/SqrtMath.sol":{"SqrtMath":{"abi":[],"devdoc":{"author":"Adapted from OpenZeppelin Contracts & other sources","kind":"dev","methods":{},"title":"Safe Square Root Math Library for Solidity 0.7.x","version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220401943d630b25c8686c7893c95c7b0fcb85cfa4b1952323f7af49d3f39edcff464736f6c63430007060033","opcodes":"PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 BLOCKHASH NOT NUMBER 0xD6 ADDRESS 0xB2 0x5C DUP7 DUP7 0xC7 DUP10 EXTCODECOPY SWAP6 0xC7 0xB0 0xFC 0xB8 0x5C STATICCALL 0x4B NOT MSTORE ORIGIN EXTCODEHASH PUSH27 0xF49D3F39EDCFF464736F6C63430007060033000000000000000000 ","sourceMap":"350:3994:34:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220401943d630b25c8686c7893c95c7b0fcb85cfa4b1952323f7af49d3f39edcff464736f6c63430007060033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 BLOCKHASH NOT NUMBER 0xD6 ADDRESS 0xB2 0x5C DUP7 DUP7 0xC7 DUP10 EXTCODECOPY SWAP6 0xC7 0xB0 0xFC 0xB8 0x5C STATICCALL 0x4B NOT MSTORE ORIGIN EXTCODEHASH PUSH27 0xF49D3F39EDCFF464736F6C63430007060033000000000000000000 ","sourceMap":"350:3994:34:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"log2(uint256)":"infinite","sqrt(uint256)":"infinite","sqrt(uint256,enum SqrtMath.Rounding)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"Adapted from OpenZeppelin Contracts & other sources\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Safe Square Root Math Library for Solidity 0.7.x\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Provides square root functionality using SafeMath for uint256.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/SqrtMath.sol\":\"SqrtMath\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"contracts/libraries/SqrtMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.7.6;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\"; // Import OZ 3.4 SafeMath\\r\\n\\r\\n/**\\r\\n * @title Safe Square Root Math Library for Solidity 0.7.x\\r\\n * @author Adapted from OpenZeppelin Contracts & other sources\\r\\n * @notice Provides square root functionality using SafeMath for uint256.\\r\\n */\\r\\nlibrary SqrtMath {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    // Optional: Include Rounding enum if your main contract needs the rounding variant\\r\\n    enum Rounding {\\r\\n        Floor,\\r\\n        Ceil\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer square root of a number rounded down (floor).\\r\\n     * Uses Babylonian method with SafeMath. 6 iterations are sufficient for uint256.\\r\\n     */\\r\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\r\\n        if (a == 0) return 0;\\r\\n\\r\\n        // Initial estimate - can start with a simple estimate like a/2 or use log2 based estimate\\r\\n        // Using roughly x = 2**(log2(a)/2) based estimate (safer)\\r\\n        uint256 estimate = 1 << (log2(a) >> 1);\\r\\n        if (estimate == 0) estimate = 1; // Ensure estimate is not zero if a > 0\\r\\n\\r\\n        // Babylonian method iterations using SafeMath\\r\\n        // result = (estimate + a / estimate) / 2;\\r\\n        uint256 result = estimate.add(a.div(estimate)).div(2);\\r\\n        result = result.add(a.div(result)).div(2);\\r\\n        result = result.add(a.div(result)).div(2);\\r\\n        result = result.add(a.div(result)).div(2);\\r\\n        result = result.add(a.div(result)).div(2);\\r\\n        result = result.add(a.div(result)).div(2);\\r\\n\\r\\n        // Final check for floor rounding (integer truncation might overshoot)\\r\\n        // Check if result * result > a\\r\\n        // Avoid direct multiplication if result can be large, use division check: result > a / result\\r\\n        if (result > a.div(result)) {\\r\\n            // If result > a/result, it means result*result > a (potential overflow avoided)\\r\\n            // So, the floor value is result - 1\\r\\n            return result.sub(1);\\r\\n        } else {\\r\\n            // Otherwise, result*result <= a, so result is the floor value\\r\\n            return result;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Calculates sqrt(a), following the selected rounding direction.\\r\\n     */\\r\\n    function sqrt(\\r\\n        uint256 a,\\r\\n        Rounding rounding\\r\\n    ) internal pure returns (uint256) {\\r\\n        uint256 resultFloor = sqrt(a); // Calculate floor value first\\r\\n        if (rounding == Rounding.Floor) {\\r\\n            return resultFloor;\\r\\n        } else {\\r\\n            // rounding == Rounding.Ceil\\r\\n            // Check if ceil is needed (i.e., if a is not a perfect square)\\r\\n            // If resultFloor * resultFloor < a, then we need to round up\\r\\n            if (resultFloor.mul(resultFloor) < a) {\\r\\n                // Use SafeMath for the check\\r\\n                return resultFloor.add(1);\\r\\n            } else {\\r\\n                return resultFloor; // a was a perfect square, floor == ceil\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // --- Internal helper: log2 needed for initial estimate ---\\r\\n    /**\\r\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\r\\n     * Returns 0 if given 0. Adapted from OZ 4.x for 0.7.6 compatibility using assembly.\\r\\n     */\\r\\n    function log2(uint256 x) internal pure returns (uint256 r) {\\r\\n        assembly {\\r\\n            let v := x\\r\\n            if iszero(v) {\\r\\n                r := 0\\r\\n            }\\r\\n            if gt(v, 0xffffffffffffffffffffffffffffffff) {\\r\\n                r := add(r, 128)\\r\\n                v := shr(128, v)\\r\\n            }\\r\\n            if gt(v, 0xffffffffffffffff) {\\r\\n                r := add(r, 64)\\r\\n                v := shr(64, v)\\r\\n            }\\r\\n            if gt(v, 0xffffffff) {\\r\\n                r := add(r, 32)\\r\\n                v := shr(32, v)\\r\\n            }\\r\\n            if gt(v, 0xffff) {\\r\\n                r := add(r, 16)\\r\\n                v := shr(16, v)\\r\\n            }\\r\\n            if gt(v, 0xff) {\\r\\n                r := add(r, 8)\\r\\n                v := shr(8, v)\\r\\n            }\\r\\n            if gt(v, 0xf) {\\r\\n                r := add(r, 4)\\r\\n                v := shr(4, v)\\r\\n            }\\r\\n            if gt(v, 0x3) {\\r\\n                r := add(r, 2)\\r\\n                v := shr(2, v)\\r\\n            }\\r\\n            if gt(v, 0x1) {\\r\\n                r := add(r, 1)\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7b28ea41070f2aa2bc2a07bb69c8c78511d7e7067cfb8c8c857be435811bed38\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"Provides square root functionality using SafeMath for uint256.","version":1}}}}}}